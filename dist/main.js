"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.3.1";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component4(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component4.prototype.isReactComponent = {};
          Component4.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component4.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component4.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component4.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component4.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement15(type, config2, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config2);
                }
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              self2 = config2.__self === void 0 ? null : config2.__self;
              source = config2.__source === void 0 ? null : config2.__source;
              for (propName in config2) {
                if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement5(element, config2, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config2) {
                if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config2[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config2[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement3(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index2) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index2.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement3(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i3 = 0; i3 < children.length; i3++) {
                child = children[i3];
                nextName = nextNamePrefix + getElementKey(child, i3);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count3 = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count3++);
            });
            return result;
          }
          function countChildren(children) {
            var n2 = 0;
            mapChildren(children, function() {
              n2++;
            });
            return n2;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray2(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement3(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext8(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType2 = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType2, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType2, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType2, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType2;
          }
          function forwardRef20(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext10(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState28(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer4(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef18(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect34(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create2, deps);
          }
          function useInsertionEffect2(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create2, deps);
          }
          function useLayoutEffect6(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create2, deps);
          }
          function useCallback12(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo19(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create2, deps);
          }
          function useImperativeHandle(ref, create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create2, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId3() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s3 >= 1 && c >= 0 && sampleLines[s3] !== controlLines[c]) {
                  c--;
                }
                for (; s3 >= 1 && c >= 0; s3--, c--) {
                  if (sampleLines[s3] !== controlLines[c]) {
                    if (s3 !== 1 || c !== 1) {
                      do {
                        s3--;
                        c--;
                        if (c < 0 || sampleLines[s3] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component5) {
            var prototype = Component5.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i3 = 0; i3 < node.length; i3++) {
                var child = node[i3];
                if (isValidElement3(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement3(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement3(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i3 = 0; i3 < keys.length; i3++) {
                var key = keys[i3];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement15.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i3 = 2; i3 < arguments.length; i3++) {
                validateChildKeys(arguments[i3], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement5.apply(this, arguments);
            for (var i3 = 2; i3 < arguments.length; i3++) {
              validateChildKeys(arguments[i3], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition3(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i3 = 0;
                try {
                  for (; i3 < queue.length; i3++) {
                    var callback = queue[i3];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i3 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children6 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray2,
            only: onlyChild
          };
          exports.Children = Children6;
          exports.Component = Component4;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.act = act;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext8;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef20;
          exports.isValidElement = isValidElement3;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.startTransition = startTransition3;
          exports.unstable_act = act;
          exports.useCallback = useCallback12;
          exports.useContext = useContext10;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect34;
          exports.useId = useId3;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect2;
          exports.useLayoutEffect = useLayoutEffect6;
          exports.useMemo = useMemo19;
          exports.useReducer = useReducer4;
          exports.useRef = useRef18;
          exports.useState = useState28;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index2 = heap.length;
            heap.push(node);
            siftUp(heap, node, index2);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i3) {
            var index2 = i3;
            while (index2 > 0) {
              var parentIndex = index2 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index2] = parent;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i3) {
            var index2 = i3;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index2 < halfLength) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node;
                  index2 = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a2, b) {
            var diff = a2.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a2.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React57 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React57.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment17 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = true;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i3 = 0; i3 < dependencies.length; i3++) {
              allNativeEvents.add(dependencies[i3]);
            }
          }
          var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s3 >= 1 && c >= 0 && sampleLines[s3] !== controlLines[c]) {
                  c--;
                }
                for (; s3 >= 1 && c >= 0; s3--, c--) {
                  if (sampleLines[s3] !== controlLines[c]) {
                    if (s3 !== 1 || c !== 1) {
                      do {
                        s3--;
                        c--;
                        if (c < 0 || sampleLines[s3] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component4) {
            var prototype = Component4.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment17:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              // The display name for this tags come from the user-provided type:
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get4 = descriptor.get, set3 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get4.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set3.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i3 = 0; i3 < group.length; i3++) {
                var otherNode = group[i3];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React57.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i3 = 0; i3 < valuePropNames.length; i3++) {
                var propName = valuePropNames[i3];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i3 = 0; i3 < selectedValues.length; i3++) {
                selectedValue["$" + selectedValues[i3]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i3 = 0; i3 < longhands.length; i3++) {
                expanded[longhands[i3]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              // These are reserved SVG and MathML elements.
              // We don't mind this list too much because we expect it to never grow.
              // The alternative is to track the namespace in a few places which is convoluted.
              // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid2 = validateProperty(type, key);
                if (!isValid2) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid2) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i3 = 0; i3 < queuedTargets.length; i3++) {
                restoreStateOfTarget(queuedTargets[i3]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a2, b) {
            if (isInsideEventHandler) {
              return fn(a2, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a2, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM2) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a2, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a2, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a2, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a2, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get3(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set2(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get3(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a2.return !== b.return) {
                a2 = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a2.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a2.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals2) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals2 = assign({}, internals2, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals2);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root3, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index3 = 0; index3 < TotalLanes; index3++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index3 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index3;
                nextLanes |= entanglements[index3];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var eventTime = eventTimes[index3];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var expirationTime = expirationTimes[index3];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index3] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b) {
            return (a2 & b) !== NoLanes;
          }
          function isSubsetOfLanes(set3, subset) {
            return (set3 & subset) === subset;
          }
          function mergeLanes(a2, b) {
            return a2 | b;
          }
          function removeLanes(set3, subset) {
            return set3 & ~subset;
          }
          function intersectLanes(a2, b) {
            return a2 & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b) {
            return a2 !== NoLane && a2 < b ? a2 : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i3 = 0; i3 < TotalLanes; i3++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index3 = laneToIndex(updateLane);
            eventTimes[index3] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] = NoLanes;
              eventTimes[index3] = NoTimestamp;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index3] & entangledLanes
              ) {
                entanglements[index3] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root3, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a2, b) {
            return a2 !== 0 && a2 < b ? a2 : b;
          }
          function lowerEventPriority(a2, b) {
            return a2 === 0 || a2 > b ? a2 : b;
          }
          function isHigherEventPriority(a2, b) {
            return a2 !== 0 && a2 < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i3 = 0;
            for (; i3 < queuedExplicitHydrationTargets.length; i3++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i3].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i3, 0, queuedTarget);
            if (i3 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i3 = 1; i3 < queuedDiscreteEvents.length; i3++) {
                var queuedEvent = queuedDiscreteEvents[i3];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              // Used by SimpleEventPlugin:
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              // Used by polyfills:
              // eslint-disable-next-line no-fallthrough
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              // Only enableCreateEventHandleAPI:
              // eslint-disable-next-line no-fallthrough
              case "beforeblur":
              case "afterblur":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM2 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM2) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM2) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i3 = 0; i3 < keysA.length; i3++) {
              var currentKey = keysA[i3];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset) {
            var node = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer: while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i3 = 0; i3 < ancestors.length; i3++) {
                var info = ancestors[i3];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              // Track the input node that has focus.
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              // Don't fire the event while the user is dragging. This matches the
              // semantics of the native select event.
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              // Chrome and IE fire non-standard event when selection is changed (and
              // sometimes when it hasn't). IE's event fires out of order with respect
              // to key and input events on deletion, so we discard it.
              //
              // Firefox doesn't support selectionchange, so check selection status
              // after each key entry. The selection changes after keydown and before
              // keyup, but we check on keydown as well in the case of holding down a
              // key, when multiple keydown events are fired but only one keyup is.
              // This is also our approach for IE handling, for the reason above.
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              // falls through
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM2) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i3 = 0; i3 < simpleEventPluginEvents.length; i3++) {
              var eventName = simpleEventPluginEvents[i3];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              /* falls through */
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              /* falls through */
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              // TODO: Disabled elements should not respond to mouse events
              /* falls through */
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i3 = dispatchListeners.length - 1; i3 >= 0; i3--) {
                var _dispatchListeners$i = dispatchListeners[i3], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i3 = 0; i3 < dispatchQueue.length; i3++) {
              var _dispatchQueue$i = dispatchQueue[i3], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop: while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM2 && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop3() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop3;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i3 = 0; i3 < updatePayload.length; i3 += 2) {
              var propKey = updatePayload[i3];
              var propValue = updatePayload[i3 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement15(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                // but
                case "option":
                  return tag === "#text";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                // No special behavior since these rules fall back to "in body" mode for
                // all except special table nodes which cause bad parsing behavior anyway.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                case "colgroup":
                  return tag === "col" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement15(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data2 = nextNode.data;
                if (data2 === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_PENDING_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data2 = node.data;
                if (data2 === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data2 = node.data;
                if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index2 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push(cursor, value, fiber) {
            index2++;
            valueStack[index2] = cursor.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component4, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component4)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component4 = node.type;
                    if (isContextProvider(Component4)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i3 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i3 < queue.length; i3++) {
                  var callback = queue[i3];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i3 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index3) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index3 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null) switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set3) {
              var array = [];
              set3.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType2) {
            var payload = lazyType2._payload;
            var init = lazyType2._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment17) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i3 = 0; i3 < newChildren.length; i3++) {
                  var child = newChildren[i3];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment17) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null) ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context) ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i3 = 0; i3 < concurrentQueues.length; i3++) {
                var queue = concurrentQueues[i3];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root3 = node.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              // Intentional fallthrough
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i3 = 0; i3 < effects.length; i3++) {
                var effect = effects[i3];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i3 = 0; i3 < workInProgressSources.length; i3++) {
              var mutableSource = workInProgressSources[i3];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version5 = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version5];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version5);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i3 = 0; i3 <= hookTypesUpdateIndexDev; i3++) {
                    var oldHookName = hookTypesDev[i3];
                    var newHookName = i3 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i3 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i3 = 0; i3 < prevDeps.length && i3 < nextDeps.length; i3++) {
              if (objectIs(nextDeps[i3], prevDeps[i3])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component4, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component4(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component4(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create2, destroy, deps) {
            var effect = {
              tag,
              create: create2,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create2, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create2, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, destroy, nextDeps);
          }
          function mountEffect(create2, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create2, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create2, deps);
            }
          }
          function updateEffect(create2, deps) {
            return updateEffectImpl(Passive, Passive$1, create2, deps);
          }
          function mountInsertionEffect(create2, deps) {
            return mountEffectImpl(Update, Insertion, create2, deps);
          }
          function updateInsertionEffect(create2, deps) {
            return updateEffectImpl(Update, Insertion, create2, deps);
          }
          function mountLayoutEffect(create2, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create2, deps);
          }
          function updateLayoutEffect(create2, deps) {
            return updateEffectImpl(Update, Layout, create2, deps);
          }
          function imperativeHandleEffect(create2, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create2();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create2();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create2, deps) {
            {
              if (typeof create2 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create2, deps) {
            {
              if (typeof create2 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition3(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition3.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function resolveDefaultProps(Component4, baseProps) {
            if (Component4 && Component4.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component4.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var fakeInternalInstance = {};
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          var didWarnAboutLegacyContext$1;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set2(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid2 = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          var didWarnAboutDefaultPropsOnFunctionComponent;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
            didWarnAboutDefaultPropsOnFunctionComponent = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component4, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component4.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component4)
                  );
                }
              }
            }
            var render2 = Component4.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component4.type;
              if (isSimpleFunctionComponent(type) && Component4.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component4.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
                if (Component4.defaultProps !== void 0) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                  }
                }
              }
              var child = createFiberFromTypeAndProps(Component4.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component4.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component4.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component4, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component4.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component4)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component4, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component4, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component4, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component4.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component4)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component4)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component4, nextProps);
              mountClassInstance(workInProgress2, Component4, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component4, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component4, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component4, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component4, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component4, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component4.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component4, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component4 = init(payload);
            workInProgress2.type = Component4;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component4);
            var resolvedProps = resolveDefaultProps(Component4, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component4);
                  workInProgress2.type = Component4 = resolveFunctionForHotReloading(Component4);
                }
                child = updateFunctionComponent(null, workInProgress2, Component4, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component4 = resolveClassForHotReloading(Component4);
                }
                child = updateClassComponent(null, workInProgress2, Component4, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component4 = resolveForwardRefForHotReloading(Component4);
                }
                child = updateForwardRef(null, workInProgress2, Component4, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component4.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component4)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component4,
                  resolveDefaultProps(Component4.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component4 !== null && typeof Component4 === "object" && Component4.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component4 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component4, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component4)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component4, nextProps);
            mountClassInstance(workInProgress2, Component4, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component4, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component4, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component4, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component4.prototype && typeof Component4.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component4) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component4, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component4) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component4) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component4)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component4, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component4, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component4, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component4);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component4) {
            {
              if (Component4) {
                if (Component4.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component4.displayName || Component4.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (Component4.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component4) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component4.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component4) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component4.contextType === "object" && Component4.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component4) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root3 = getWorkInProgressRoot();
                if (root3 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i3 = 0; i3 < children.length; i3++) {
                    if (!validateSuspenseListNestedChild(children[i3], i3)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component4 = workInProgress2.type;
                if (isContextProvider(Component4)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component4 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component4 ? unresolvedProps : resolveDefaultProps(Component4, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component4, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment17:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden2) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment17:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component4 = workInProgress2.type;
                if (isContextProvider(Component4)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component4 = workInProgress2.type;
                if (isContextProvider(Component4)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root3 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root3 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create2 = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create2();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root3 = parentFiber.stateNode;
                          root3.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer: while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden2) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden2) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden2) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings: while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              // eslint-disable-next-line-no-fallthrough
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root3, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent: while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              // eslint-disable-next-line-no-fallthrough
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root3, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root3);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i3 = 0; i3 < deletions.length; i3++) {
                var childToDelete = deletions[i3];
                try {
                  commitDeletionEffects(root3, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root3);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root3.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden2 = newState !== null;
                  offscreenInstance.isHidden = isHidden2;
                  if (isHidden2) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden2 = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden2 || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root3,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden2 = fiber.memoizedState !== null;
                  if (isHidden2) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden2 = fiber.memoizedState !== null;
                if (isHidden2) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i3 = 0; i3 < deletions.length; i3++) {
                    var fiberToDelete = deletions[i3];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              // Flow knows about invariant, so it complains if I add a break
              // statement, but eslint doesn't know about invariant, so it complains
              // if I do. eslint-disable-next-line no-fallthrough
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i3 = 0; i3 < checks.length; i3++) {
                      var check = checks[i3];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root3, now());
            return null;
          }
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a2, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a2, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync2(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError3(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError3(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError3(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root3, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i3 = 0; i3 < recoverableErrors.length; i3++) {
                var recoverableError = recoverableErrors[i3];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i3 = 0; i3 < profilerEffects.length; i3++) {
                var _fiber = profilerEffects[i3];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root3 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root3;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root3 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync2(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync2(function() {
                updateContainer(element, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component4) {
            var prototype = Component4.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component4) {
            if (typeof Component4 === "function") {
              return shouldConstruct$1(Component4) ? ClassComponent : FunctionComponent;
            } else if (Component4 !== void 0 && Component4 !== null) {
              var $$typeof = Component4.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_SCOPE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_CACHE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_TRACING_MARKER_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_DEBUG_TRACING_MODE_TYPE:
                // eslint-disable-next-line no-fallthrough
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment17, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          var ReactVersion = "18.3.1";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get3(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component4 = fiber.type;
              if (isContextProvider(Component4)) {
                return processChildContext(fiber, Component4, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get3(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(current$1, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync2(function() {
                  var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root4 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index3) {
              var key = path[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index3 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index3 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
              var oldKey = oldPath[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index3 + 1 === oldPath.length) {
                var newKey = newPath[index3];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index3 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i3 = 0; i3 < newPath.length - 1; i3++) {
                  if (oldPath[i3] !== newPath[i3]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index3, value) {
              if (index3 >= path.length) {
                return value;
              }
              var key = path[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index3 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root3.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync2(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root3 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i3 = 0; i3 < mutableSources.length; i3++) {
                var mutableSource = mutableSources[i3];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              var root3 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync2();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync2(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root3, parentComponent, callback);
            }
            return getPublicRootInstance(root3);
          }
          var didWarnAboutFindDOMNode = false;
          function findDOMNode(componentOrElement) {
            {
              if (!didWarnAboutFindDOMNode) {
                didWarnAboutFindDOMNode = true;
                error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
              }
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          var didWarnAboutUnmountComponentAtNode = false;
          function unmountComponentAtNode(container) {
            {
              if (!didWarnAboutUnmountComponentAtNode) {
                didWarnAboutUnmountComponentAtNode = true;
                error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
              }
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync2(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync2);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync2(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM2 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i3 = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o2) {
          i3.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o2);
          } finally {
            i3.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o2) {
          i3.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o2);
          } finally {
            i3.usingClientEntryPoint = false;
          }
        };
      }
      var i3;
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React57 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React57.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s3 >= 1 && c >= 0 && sampleLines[s3] !== controlLines[c]) {
                  c--;
                }
                for (; s3 >= 1 && c >= 0; s3--, c--) {
                  if (sampleLines[s3] !== controlLines[c]) {
                    if (s3 !== 1 || c !== 1) {
                      do {
                        s3--;
                        c--;
                        if (c < 0 || sampleLines[s3] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component4) {
            var prototype = Component4.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config2, self2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config2, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              if (hasValidRef(config2)) {
                ref = config2.ref;
                warnIfStringRefCannotBeAutoConverted(config2, self2);
              }
              for (propName in config2) {
                if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement3(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (isArray(node)) {
                for (var i3 = 0; i3 < node.length; i3++) {
                  var child = node[i3];
                  if (isValidElement3(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement3(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement3(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i3 = 0; i3 < keys.length; i3++) {
                var key = keys[i3];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          var didWarnAboutKeySpread = {};
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i3 = 0; i3 < children.length; i3++) {
                        validateChildKeys(children[i3], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              {
                if (hasOwnProperty.call(props, "key")) {
                  var componentName = getComponentNameFromType(type);
                  var keys = Object.keys(props).filter(function(k) {
                    return k !== "key";
                  });
                  var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
                  if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                    var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
                    error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                    didWarnAboutKeySpread[componentName + beforeExample] = true;
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx47 = jsxWithValidationDynamic;
          var jsxs25 = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx47;
          exports.jsxs = jsxs25;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/lucide-react/dist/cjs/lucide-react.js
  var require_lucide_react = __commonJS({
    "node_modules/lucide-react/dist/cjs/lucide-react.js"(exports) {
      "use strict";
      var react = require_react();
      var toKebabCase = (string) => string.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
      var toCamelCase = (string) => string.replace(
        /^([A-Z])|[\s-_]+(\w)/g,
        (match, p1, p2) => p2 ? p2.toUpperCase() : p1.toLowerCase()
      );
      var toPascalCase = (string) => {
        const camelCase = toCamelCase(string);
        return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);
      };
      var mergeClasses = (...classes) => classes.filter((className, index3, array) => {
        return Boolean(className) && className.trim() !== "" && array.indexOf(className) === index3;
      }).join(" ").trim();
      var hasA11yProp = (props) => {
        for (const prop in props) {
          if (prop.startsWith("aria-") || prop === "role" || prop === "title") {
            return true;
          }
        }
      };
      var defaultAttributes = {
        xmlns: "http://www.w3.org/2000/svg",
        width: 24,
        height: 24,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: "currentColor",
        strokeWidth: 2,
        strokeLinecap: "round",
        strokeLinejoin: "round"
      };
      var Icon = react.forwardRef(
        ({
          color = "currentColor",
          size = 24,
          strokeWidth = 2,
          absoluteStrokeWidth,
          className = "",
          children,
          iconNode,
          ...rest
        }, ref) => {
          return react.createElement(
            "svg",
            {
              ref,
              ...defaultAttributes,
              width: size,
              height: size,
              stroke: color,
              strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,
              className: mergeClasses("lucide", className),
              ...!children && !hasA11yProp(rest) && { "aria-hidden": "true" },
              ...rest
            },
            [
              ...iconNode.map(([tag, attrs]) => react.createElement(tag, attrs)),
              ...Array.isArray(children) ? children : [children]
            ]
          );
        }
      );
      var createLucideIcon = (iconName, iconNode) => {
        const Component5 = react.forwardRef(
          ({ className, ...props }, ref) => react.createElement(Icon, {
            ref,
            iconNode,
            className: mergeClasses(
              `lucide-${toKebabCase(toPascalCase(iconName))}`,
              `lucide-${iconName}`,
              className
            ),
            ...props
          })
        );
        Component5.displayName = toPascalCase(iconName);
        return Component5;
      };
      var __iconNode$oM = [
        ["path", { d: "M3.5 13h6", key: "p1my2r" }],
        ["path", { d: "m2 16 4.5-9 4.5 9", key: "ndf0b3" }],
        ["path", { d: "M18 7v9", key: "pknjwm" }],
        ["path", { d: "m14 12 4 4 4-4", key: "buelq4" }]
      ];
      var AArrowDown = createLucideIcon("a-arrow-down", __iconNode$oM);
      var __iconNode$oL = [
        ["path", { d: "M3.5 13h6", key: "p1my2r" }],
        ["path", { d: "m2 16 4.5-9 4.5 9", key: "ndf0b3" }],
        ["path", { d: "M18 16V7", key: "ty0viw" }],
        ["path", { d: "m14 11 4-4 4 4", key: "1pu57t" }]
      ];
      var AArrowUp = createLucideIcon("a-arrow-up", __iconNode$oL);
      var __iconNode$oK = [
        ["path", { d: "M21 14h-5", key: "1vh23k" }],
        ["path", { d: "M16 16v-3.5a2.5 2.5 0 0 1 5 0V16", key: "1wh10o" }],
        ["path", { d: "M4.5 13h6", key: "dfilno" }],
        ["path", { d: "m3 16 4.5-9 4.5 9", key: "2dxa0e" }]
      ];
      var ALargeSmall = createLucideIcon("a-large-small", __iconNode$oK);
      var __iconNode$oJ = [
        ["circle", { cx: "16", cy: "4", r: "1", key: "1grugj" }],
        ["path", { d: "m18 19 1-7-6 1", key: "r0i19z" }],
        ["path", { d: "m5 8 3-3 5.5 3-2.36 3.5", key: "9ptxx2" }],
        ["path", { d: "M4.24 14.5a5 5 0 0 0 6.88 6", key: "10kmtu" }],
        ["path", { d: "M13.76 17.5a5 5 0 0 0-6.88-6", key: "2qq6rc" }]
      ];
      var Accessibility = createLucideIcon("accessibility", __iconNode$oJ);
      var __iconNode$oI = [
        [
          "path",
          {
            d: "M22 12h-2.48a2 2 0 0 0-1.93 1.46l-2.35 8.36a.25.25 0 0 1-.48 0L9.24 2.18a.25.25 0 0 0-.48 0l-2.35 8.36A2 2 0 0 1 4.49 12H2",
            key: "169zse"
          }
        ]
      ];
      var Activity2 = createLucideIcon("activity", __iconNode$oI);
      var __iconNode$oH = [
        [
          "path",
          {
            d: "M6 12H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2",
            key: "larmp2"
          }
        ],
        ["path", { d: "M6 8h12", key: "6g4wlu" }],
        ["path", { d: "M18.3 17.7a2.5 2.5 0 0 1-3.16 3.83 2.53 2.53 0 0 1-1.14-2V12", key: "1bo8pg" }],
        ["path", { d: "M6.6 15.6A2 2 0 1 0 10 17v-5", key: "t9h90c" }]
      ];
      var AirVent = createLucideIcon("air-vent", __iconNode$oH);
      var __iconNode$oG = [
        [
          "path",
          {
            d: "M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1",
            key: "ns4c3b"
          }
        ],
        ["path", { d: "m12 15 5 6H7Z", key: "14qnn2" }]
      ];
      var Airplay = createLucideIcon("airplay", __iconNode$oG);
      var __iconNode$oF = [
        ["circle", { cx: "12", cy: "13", r: "8", key: "3y4lt7" }],
        ["path", { d: "M5 3 2 6", key: "18tl5t" }],
        ["path", { d: "m22 6-3-3", key: "1opdir" }],
        ["path", { d: "M6.38 18.7 4 21", key: "17xu3x" }],
        ["path", { d: "M17.64 18.67 20 21", key: "kv2oe2" }],
        ["path", { d: "m9 13 2 2 4-4", key: "6343dt" }]
      ];
      var AlarmClockCheck = createLucideIcon("alarm-clock-check", __iconNode$oF);
      var __iconNode$oE = [
        ["circle", { cx: "12", cy: "13", r: "8", key: "3y4lt7" }],
        ["path", { d: "M5 3 2 6", key: "18tl5t" }],
        ["path", { d: "m22 6-3-3", key: "1opdir" }],
        ["path", { d: "M6.38 18.7 4 21", key: "17xu3x" }],
        ["path", { d: "M17.64 18.67 20 21", key: "kv2oe2" }],
        ["path", { d: "M9 13h6", key: "1uhe8q" }]
      ];
      var AlarmClockMinus = createLucideIcon("alarm-clock-minus", __iconNode$oE);
      var __iconNode$oD = [
        ["path", { d: "M6.87 6.87a8 8 0 1 0 11.26 11.26", key: "3on8tj" }],
        ["path", { d: "M19.9 14.25a8 8 0 0 0-9.15-9.15", key: "15ghsc" }],
        ["path", { d: "m22 6-3-3", key: "1opdir" }],
        ["path", { d: "M6.26 18.67 4 21", key: "yzmioq" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M4 4 2 6", key: "1ycko6" }]
      ];
      var AlarmClockOff = createLucideIcon("alarm-clock-off", __iconNode$oD);
      var __iconNode$oC = [
        ["circle", { cx: "12", cy: "13", r: "8", key: "3y4lt7" }],
        ["path", { d: "M5 3 2 6", key: "18tl5t" }],
        ["path", { d: "m22 6-3-3", key: "1opdir" }],
        ["path", { d: "M6.38 18.7 4 21", key: "17xu3x" }],
        ["path", { d: "M17.64 18.67 20 21", key: "kv2oe2" }],
        ["path", { d: "M12 10v6", key: "1bos4e" }],
        ["path", { d: "M9 13h6", key: "1uhe8q" }]
      ];
      var AlarmClockPlus = createLucideIcon("alarm-clock-plus", __iconNode$oC);
      var __iconNode$oB = [
        ["circle", { cx: "12", cy: "13", r: "8", key: "3y4lt7" }],
        ["path", { d: "M12 9v4l2 2", key: "1c63tq" }],
        ["path", { d: "M5 3 2 6", key: "18tl5t" }],
        ["path", { d: "m22 6-3-3", key: "1opdir" }],
        ["path", { d: "M6.38 18.7 4 21", key: "17xu3x" }],
        ["path", { d: "M17.64 18.67 20 21", key: "kv2oe2" }]
      ];
      var AlarmClock = createLucideIcon("alarm-clock", __iconNode$oB);
      var __iconNode$oA = [
        ["path", { d: "M11 21c0-2.5 2-2.5 2-5", key: "1sicvv" }],
        ["path", { d: "M16 21c0-2.5 2-2.5 2-5", key: "1o3eny" }],
        ["path", { d: "m19 8-.8 3a1.25 1.25 0 0 1-1.2 1H7a1.25 1.25 0 0 1-1.2-1L5 8", key: "1bvca4" }],
        [
          "path",
          { d: "M21 3a1 1 0 0 1 1 1v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a1 1 0 0 1 1-1z", key: "x3qr1j" }
        ],
        ["path", { d: "M6 21c0-2.5 2-2.5 2-5", key: "i3w1gp" }]
      ];
      var AlarmSmoke = createLucideIcon("alarm-smoke", __iconNode$oA);
      var __iconNode$oz = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["polyline", { points: "11 3 11 11 14 8 17 11 17 3", key: "1wcwz3" }]
      ];
      var Album = createLucideIcon("album", __iconNode$oz);
      var __iconNode$oy = [
        ["path", { d: "M2 12h20", key: "9i4pu4" }],
        ["path", { d: "M10 16v4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-4", key: "11f1s0" }],
        ["path", { d: "M10 8V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v4", key: "t14dx9" }],
        ["path", { d: "M20 16v1a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-1", key: "1w07xs" }],
        ["path", { d: "M14 8V7c0-1.1.9-2 2-2h2a2 2 0 0 1 2 2v1", key: "1apec2" }]
      ];
      var AlignCenterHorizontal = createLucideIcon("align-center-horizontal", __iconNode$oy);
      var __iconNode$ox = [
        ["path", { d: "M12 2v20", key: "t6zp3m" }],
        ["path", { d: "M8 10H4a2 2 0 0 1-2-2V6c0-1.1.9-2 2-2h4", key: "14d6g8" }],
        ["path", { d: "M16 10h4a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-4", key: "1e2lrw" }],
        ["path", { d: "M8 20H7a2 2 0 0 1-2-2v-2c0-1.1.9-2 2-2h1", key: "1fkdwx" }],
        ["path", { d: "M16 14h1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-1", key: "1euafb" }]
      ];
      var AlignCenterVertical = createLucideIcon("align-center-vertical", __iconNode$ox);
      var __iconNode$ow = [
        ["path", { d: "M17 12H7", key: "16if0g" }],
        ["path", { d: "M19 18H5", key: "18s9l3" }],
        ["path", { d: "M21 6H3", key: "1jwq7v" }]
      ];
      var AlignCenter = createLucideIcon("align-center", __iconNode$ow);
      var __iconNode$ov = [
        ["rect", { width: "6", height: "16", x: "4", y: "2", rx: "2", key: "z5wdxg" }],
        ["rect", { width: "6", height: "9", x: "14", y: "9", rx: "2", key: "um7a8w" }],
        ["path", { d: "M22 22H2", key: "19qnx5" }]
      ];
      var AlignEndHorizontal = createLucideIcon("align-end-horizontal", __iconNode$ov);
      var __iconNode$ou = [
        ["rect", { width: "16", height: "6", x: "2", y: "4", rx: "2", key: "10wcwx" }],
        ["rect", { width: "9", height: "6", x: "9", y: "14", rx: "2", key: "4p5bwg" }],
        ["path", { d: "M22 22V2", key: "12ipfv" }]
      ];
      var AlignEndVertical = createLucideIcon("align-end-vertical", __iconNode$ou);
      var __iconNode$ot = [
        ["rect", { width: "6", height: "14", x: "4", y: "5", rx: "2", key: "1wwnby" }],
        ["rect", { width: "6", height: "10", x: "14", y: "7", rx: "2", key: "1fe6j6" }],
        ["path", { d: "M17 22v-5", key: "4b6g73" }],
        ["path", { d: "M17 7V2", key: "hnrr36" }],
        ["path", { d: "M7 22v-3", key: "1r4jpn" }],
        ["path", { d: "M7 5V2", key: "liy1u9" }]
      ];
      var AlignHorizontalDistributeCenter = createLucideIcon(
        "align-horizontal-distribute-center",
        __iconNode$ot
      );
      var __iconNode$os = [
        ["rect", { width: "6", height: "14", x: "4", y: "5", rx: "2", key: "1wwnby" }],
        ["rect", { width: "6", height: "10", x: "14", y: "7", rx: "2", key: "1fe6j6" }],
        ["path", { d: "M10 2v20", key: "uyc634" }],
        ["path", { d: "M20 2v20", key: "1tx262" }]
      ];
      var AlignHorizontalDistributeEnd = createLucideIcon(
        "align-horizontal-distribute-end",
        __iconNode$os
      );
      var __iconNode$or = [
        ["rect", { width: "6", height: "14", x: "4", y: "5", rx: "2", key: "1wwnby" }],
        ["rect", { width: "6", height: "10", x: "14", y: "7", rx: "2", key: "1fe6j6" }],
        ["path", { d: "M4 2v20", key: "gtpd5x" }],
        ["path", { d: "M14 2v20", key: "tg6bpw" }]
      ];
      var AlignHorizontalDistributeStart = createLucideIcon(
        "align-horizontal-distribute-start",
        __iconNode$or
      );
      var __iconNode$oq = [
        ["rect", { width: "6", height: "14", x: "2", y: "5", rx: "2", key: "dy24zr" }],
        ["rect", { width: "6", height: "10", x: "16", y: "7", rx: "2", key: "13zkjt" }],
        ["path", { d: "M12 2v20", key: "t6zp3m" }]
      ];
      var AlignHorizontalJustifyCenter = createLucideIcon(
        "align-horizontal-justify-center",
        __iconNode$oq
      );
      var __iconNode$op = [
        ["rect", { width: "6", height: "14", x: "2", y: "5", rx: "2", key: "dy24zr" }],
        ["rect", { width: "6", height: "10", x: "12", y: "7", rx: "2", key: "1ht384" }],
        ["path", { d: "M22 2v20", key: "40qfg1" }]
      ];
      var AlignHorizontalJustifyEnd = createLucideIcon("align-horizontal-justify-end", __iconNode$op);
      var __iconNode$oo = [
        ["rect", { width: "6", height: "14", x: "6", y: "5", rx: "2", key: "hsirpf" }],
        ["rect", { width: "6", height: "10", x: "16", y: "7", rx: "2", key: "13zkjt" }],
        ["path", { d: "M2 2v20", key: "1ivd8o" }]
      ];
      var AlignHorizontalJustifyStart = createLucideIcon("align-horizontal-justify-start", __iconNode$oo);
      var __iconNode$on = [
        ["rect", { width: "6", height: "10", x: "9", y: "7", rx: "2", key: "yn7j0q" }],
        ["path", { d: "M4 22V2", key: "tsjzd3" }],
        ["path", { d: "M20 22V2", key: "1bnhr8" }]
      ];
      var AlignHorizontalSpaceAround = createLucideIcon("align-horizontal-space-around", __iconNode$on);
      var __iconNode$om = [
        ["rect", { width: "6", height: "14", x: "3", y: "5", rx: "2", key: "j77dae" }],
        ["rect", { width: "6", height: "10", x: "15", y: "7", rx: "2", key: "bq30hj" }],
        ["path", { d: "M3 2v20", key: "1d2pfg" }],
        ["path", { d: "M21 2v20", key: "p059bm" }]
      ];
      var AlignHorizontalSpaceBetween = createLucideIcon("align-horizontal-space-between", __iconNode$om);
      var __iconNode$ol = [
        ["path", { d: "M15 12H3", key: "6jk70r" }],
        ["path", { d: "M17 18H3", key: "1amg6g" }],
        ["path", { d: "M21 6H3", key: "1jwq7v" }]
      ];
      var AlignLeft = createLucideIcon("align-left", __iconNode$ol);
      var __iconNode$ok = [
        ["path", { d: "M3 12h18", key: "1i2n21" }],
        ["path", { d: "M3 18h18", key: "1h113x" }],
        ["path", { d: "M3 6h18", key: "d0wm0j" }]
      ];
      var AlignJustify = createLucideIcon("align-justify", __iconNode$ok);
      var __iconNode$oj = [
        ["path", { d: "M21 12H9", key: "dn1m92" }],
        ["path", { d: "M21 18H7", key: "1ygte8" }],
        ["path", { d: "M21 6H3", key: "1jwq7v" }]
      ];
      var AlignRight = createLucideIcon("align-right", __iconNode$oj);
      var __iconNode$oi = [
        ["rect", { width: "6", height: "16", x: "4", y: "6", rx: "2", key: "1n4dg1" }],
        ["rect", { width: "6", height: "9", x: "14", y: "6", rx: "2", key: "17khns" }],
        ["path", { d: "M22 2H2", key: "fhrpnj" }]
      ];
      var AlignStartHorizontal = createLucideIcon("align-start-horizontal", __iconNode$oi);
      var __iconNode$oh = [
        ["rect", { width: "9", height: "6", x: "6", y: "14", rx: "2", key: "lpm2y7" }],
        ["rect", { width: "16", height: "6", x: "6", y: "4", rx: "2", key: "rdj6ps" }],
        ["path", { d: "M2 2v20", key: "1ivd8o" }]
      ];
      var AlignStartVertical = createLucideIcon("align-start-vertical", __iconNode$oh);
      var __iconNode$og = [
        ["path", { d: "M22 17h-3", key: "1lwga1" }],
        ["path", { d: "M22 7h-5", key: "o2endc" }],
        ["path", { d: "M5 17H2", key: "1gx9xc" }],
        ["path", { d: "M7 7H2", key: "6bq26l" }],
        ["rect", { x: "5", y: "14", width: "14", height: "6", rx: "2", key: "1qrzuf" }],
        ["rect", { x: "7", y: "4", width: "10", height: "6", rx: "2", key: "we8e9z" }]
      ];
      var AlignVerticalDistributeCenter = createLucideIcon(
        "align-vertical-distribute-center",
        __iconNode$og
      );
      var __iconNode$of = [
        ["rect", { width: "14", height: "6", x: "5", y: "14", rx: "2", key: "jmoj9s" }],
        ["rect", { width: "10", height: "6", x: "7", y: "4", rx: "2", key: "aza5on" }],
        ["path", { d: "M2 20h20", key: "owomy5" }],
        ["path", { d: "M2 10h20", key: "1ir3d8" }]
      ];
      var AlignVerticalDistributeEnd = createLucideIcon("align-vertical-distribute-end", __iconNode$of);
      var __iconNode$oe = [
        ["rect", { width: "14", height: "6", x: "5", y: "14", rx: "2", key: "jmoj9s" }],
        ["rect", { width: "10", height: "6", x: "7", y: "4", rx: "2", key: "aza5on" }],
        ["path", { d: "M2 14h20", key: "myj16y" }],
        ["path", { d: "M2 4h20", key: "mda7wb" }]
      ];
      var AlignVerticalDistributeStart = createLucideIcon(
        "align-vertical-distribute-start",
        __iconNode$oe
      );
      var __iconNode$od = [
        ["rect", { width: "14", height: "6", x: "5", y: "16", rx: "2", key: "1i8z2d" }],
        ["rect", { width: "10", height: "6", x: "7", y: "2", rx: "2", key: "ypihtt" }],
        ["path", { d: "M2 12h20", key: "9i4pu4" }]
      ];
      var AlignVerticalJustifyCenter = createLucideIcon("align-vertical-justify-center", __iconNode$od);
      var __iconNode$oc = [
        ["rect", { width: "14", height: "6", x: "5", y: "12", rx: "2", key: "4l4tp2" }],
        ["rect", { width: "10", height: "6", x: "7", y: "2", rx: "2", key: "ypihtt" }],
        ["path", { d: "M2 22h20", key: "272qi7" }]
      ];
      var AlignVerticalJustifyEnd = createLucideIcon("align-vertical-justify-end", __iconNode$oc);
      var __iconNode$ob = [
        ["rect", { width: "14", height: "6", x: "5", y: "16", rx: "2", key: "1i8z2d" }],
        ["rect", { width: "10", height: "6", x: "7", y: "6", rx: "2", key: "13squh" }],
        ["path", { d: "M2 2h20", key: "1ennik" }]
      ];
      var AlignVerticalJustifyStart = createLucideIcon("align-vertical-justify-start", __iconNode$ob);
      var __iconNode$oa = [
        ["rect", { width: "10", height: "6", x: "7", y: "9", rx: "2", key: "b1zbii" }],
        ["path", { d: "M22 20H2", key: "1p1f7z" }],
        ["path", { d: "M22 4H2", key: "1b7qnq" }]
      ];
      var AlignVerticalSpaceAround = createLucideIcon("align-vertical-space-around", __iconNode$oa);
      var __iconNode$o9 = [
        ["rect", { width: "14", height: "6", x: "5", y: "15", rx: "2", key: "1w91an" }],
        ["rect", { width: "10", height: "6", x: "7", y: "3", rx: "2", key: "17wqzy" }],
        ["path", { d: "M2 21h20", key: "1nyx9w" }],
        ["path", { d: "M2 3h20", key: "91anmk" }]
      ];
      var AlignVerticalSpaceBetween = createLucideIcon("align-vertical-space-between", __iconNode$o9);
      var __iconNode$o8 = [
        ["path", { d: "M10 10H6", key: "1bsnug" }],
        ["path", { d: "M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2", key: "wrbu53" }],
        [
          "path",
          {
            d: "M19 18h2a1 1 0 0 0 1-1v-3.28a1 1 0 0 0-.684-.948l-1.923-.641a1 1 0 0 1-.578-.502l-1.539-3.076A1 1 0 0 0 16.382 8H14",
            key: "lrkjwd"
          }
        ],
        ["path", { d: "M8 8v4", key: "1fwk8c" }],
        ["path", { d: "M9 18h6", key: "x1upvd" }],
        ["circle", { cx: "17", cy: "18", r: "2", key: "332jqn" }],
        ["circle", { cx: "7", cy: "18", r: "2", key: "19iecd" }]
      ];
      var Ambulance = createLucideIcon("ambulance", __iconNode$o8);
      var __iconNode$o7 = [
        [
          "path",
          {
            d: "M17.5 12c0 4.4-3.6 8-8 8A4.5 4.5 0 0 1 5 15.5c0-6 8-4 8-8.5a3 3 0 1 0-6 0c0 3 2.5 8.5 12 13",
            key: "1o9ehi"
          }
        ],
        ["path", { d: "M16 12h3", key: "4uvgyw" }]
      ];
      var Ampersand = createLucideIcon("ampersand", __iconNode$o7);
      var __iconNode$o6 = [
        [
          "path",
          {
            d: "M10 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5",
            key: "12lh1k"
          }
        ],
        [
          "path",
          {
            d: "M22 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5",
            key: "173c68"
          }
        ]
      ];
      var Ampersands = createLucideIcon("ampersands", __iconNode$o6);
      var __iconNode$o5 = [
        [
          "path",
          { d: "M10 2v5.632c0 .424-.272.795-.653.982A6 6 0 0 0 6 14c.006 4 3 7 5 8", key: "1h8rid" }
        ],
        ["path", { d: "M10 5H8a2 2 0 0 0 0 4h.68", key: "3ezsi6" }],
        ["path", { d: "M14 2v5.632c0 .424.272.795.652.982A6 6 0 0 1 18 14c0 4-3 7-5 8", key: "yt6q09" }],
        ["path", { d: "M14 5h2a2 2 0 0 1 0 4h-.68", key: "8f95yk" }],
        ["path", { d: "M18 22H6", key: "mg6kv4" }],
        ["path", { d: "M9 2h6", key: "1jrp98" }]
      ];
      var Amphora = createLucideIcon("amphora", __iconNode$o5);
      var __iconNode$o4 = [
        ["path", { d: "M12 22V8", key: "qkxhtm" }],
        ["path", { d: "M5 12H2a10 10 0 0 0 20 0h-3", key: "1hv3nh" }],
        ["circle", { cx: "12", cy: "5", r: "3", key: "rqqgnr" }]
      ];
      var Anchor = createLucideIcon("anchor", __iconNode$o4);
      var __iconNode$o3 = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M8 15h8", key: "45n4r" }],
        ["path", { d: "M8 9h2", key: "1g203m" }],
        ["path", { d: "M14 9h2", key: "116p9w" }]
      ];
      var Annoyed = createLucideIcon("annoyed", __iconNode$o3);
      var __iconNode$o2 = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M16 16s-1.5-2-4-2-4 2-4 2", key: "epbg0q" }],
        ["path", { d: "M7.5 8 10 9", key: "olxxln" }],
        ["path", { d: "m14 9 2.5-1", key: "1j6cij" }],
        ["path", { d: "M9 10h.01", key: "qbtxuw" }],
        ["path", { d: "M15 10h.01", key: "1qmjsl" }]
      ];
      var Angry = createLucideIcon("angry", __iconNode$o2);
      var __iconNode$o1 = [
        ["path", { d: "M2 12 7 2", key: "117k30" }],
        ["path", { d: "m7 12 5-10", key: "1tvx22" }],
        ["path", { d: "m12 12 5-10", key: "ev1o1a" }],
        ["path", { d: "m17 12 5-10", key: "1e4ti3" }],
        ["path", { d: "M4.5 7h15", key: "vlsxkz" }],
        ["path", { d: "M12 16v6", key: "c8a4gj" }]
      ];
      var Antenna = createLucideIcon("antenna", __iconNode$o1);
      var __iconNode$o0 = [
        ["path", { d: "M7 10H6a4 4 0 0 1-4-4 1 1 0 0 1 1-1h4", key: "1hjpb6" }],
        [
          "path",
          { d: "M7 5a1 1 0 0 1 1-1h13a1 1 0 0 1 1 1 7 7 0 0 1-7 7H8a1 1 0 0 1-1-1z", key: "1qn45f" }
        ],
        ["path", { d: "M9 12v5", key: "3anwtq" }],
        ["path", { d: "M15 12v5", key: "5xh3zn" }],
        [
          "path",
          { d: "M5 20a3 3 0 0 1 3-3h8a3 3 0 0 1 3 3 1 1 0 0 1-1 1H6a1 1 0 0 1-1-1", key: "1fi4x8" }
        ]
      ];
      var Anvil = createLucideIcon("anvil", __iconNode$o0);
      var __iconNode$n$ = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m14.31 8 5.74 9.94", key: "1y6ab4" }],
        ["path", { d: "M9.69 8h11.48", key: "1wxppr" }],
        ["path", { d: "m7.38 12 5.74-9.94", key: "1grp0k" }],
        ["path", { d: "M9.69 16 3.95 6.06", key: "libnyf" }],
        ["path", { d: "M14.31 16H2.83", key: "x5fava" }],
        ["path", { d: "m16.62 12-5.74 9.94", key: "1vwawt" }]
      ];
      var Aperture = createLucideIcon("aperture", __iconNode$n$);
      var __iconNode$n_ = [
        ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
        ["path", { d: "M6 8h.01", key: "x9i8wu" }],
        ["path", { d: "M10 8h.01", key: "1r9ogq" }],
        ["path", { d: "M14 8h.01", key: "1primd" }]
      ];
      var AppWindowMac = createLucideIcon("app-window-mac", __iconNode$n_);
      var __iconNode$nZ = [
        ["rect", { x: "2", y: "4", width: "20", height: "16", rx: "2", key: "izxlao" }],
        ["path", { d: "M10 4v4", key: "pp8u80" }],
        ["path", { d: "M2 8h20", key: "d11cs7" }],
        ["path", { d: "M6 4v4", key: "1svtjw" }]
      ];
      var AppWindow = createLucideIcon("app-window", __iconNode$nZ);
      var __iconNode$nY = [
        ["rect", { width: "20", height: "5", x: "2", y: "3", rx: "1", key: "1wp1u1" }],
        ["path", { d: "M4 8v11a2 2 0 0 0 2 2h2", key: "tvwodi" }],
        ["path", { d: "M20 8v11a2 2 0 0 1-2 2h-2", key: "1gkqxj" }],
        ["path", { d: "m9 15 3-3 3 3", key: "1pd0qc" }],
        ["path", { d: "M12 12v9", key: "192myk" }]
      ];
      var ArchiveRestore = createLucideIcon("archive-restore", __iconNode$nY);
      var __iconNode$nX = [
        [
          "path",
          {
            d: "M12 20.94c1.5 0 2.75 1.06 4 1.06 3 0 6-8 6-12.22A4.91 4.91 0 0 0 17 5c-2.22 0-4 1.44-5 2-1-.56-2.78-2-5-2a4.9 4.9 0 0 0-5 4.78C2 14 5 22 8 22c1.25 0 2.5-1.06 4-1.06Z",
            key: "3s7exb"
          }
        ],
        ["path", { d: "M10 2c1 .5 2 2 2 5", key: "fcco2y" }]
      ];
      var Apple = createLucideIcon("apple", __iconNode$nX);
      var __iconNode$nW = [
        ["rect", { width: "20", height: "5", x: "2", y: "3", rx: "1", key: "1wp1u1" }],
        ["path", { d: "M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8", key: "1s80jp" }],
        ["path", { d: "m9.5 17 5-5", key: "nakeu6" }],
        ["path", { d: "m9.5 12 5 5", key: "1hccrj" }]
      ];
      var ArchiveX = createLucideIcon("archive-x", __iconNode$nW);
      var __iconNode$nV = [
        ["rect", { width: "20", height: "5", x: "2", y: "3", rx: "1", key: "1wp1u1" }],
        ["path", { d: "M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8", key: "1s80jp" }],
        ["path", { d: "M10 12h4", key: "a56b0p" }]
      ];
      var Archive = createLucideIcon("archive", __iconNode$nV);
      var __iconNode$nU = [
        ["path", { d: "M19 9V6a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v3", key: "irtipd" }],
        [
          "path",
          {
            d: "M3 16a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v1.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V11a2 2 0 0 0-4 0z",
            key: "1qyhux"
          }
        ],
        ["path", { d: "M5 18v2", key: "ppbyun" }],
        ["path", { d: "M19 18v2", key: "gy7782" }]
      ];
      var Armchair = createLucideIcon("armchair", __iconNode$nU);
      var __iconNode$nT = [
        ["path", { d: "M15 5H9", key: "1tp3ed" }],
        ["path", { d: "M15 9v3h4l-7 7-7-7h4V9z", key: "ncdc4b" }]
      ];
      var ArrowBigDownDash = createLucideIcon("arrow-big-down-dash", __iconNode$nT);
      var __iconNode$nS = [["path", { d: "M15 6v6h4l-7 7-7-7h4V6h6z", key: "1thax2" }]];
      var ArrowBigDown = createLucideIcon("arrow-big-down", __iconNode$nS);
      var __iconNode$nR = [
        ["path", { d: "M19 15V9", key: "1hci5f" }],
        ["path", { d: "M15 15h-3v4l-7-7 7-7v4h3v6z", key: "16tjna" }]
      ];
      var ArrowBigLeftDash = createLucideIcon("arrow-big-left-dash", __iconNode$nR);
      var __iconNode$nQ = [["path", { d: "M18 15h-6v4l-7-7 7-7v4h6v6z", key: "lbrdak" }]];
      var ArrowBigLeft = createLucideIcon("arrow-big-left", __iconNode$nQ);
      var __iconNode$nP = [
        ["path", { d: "M5 9v6", key: "158jrl" }],
        ["path", { d: "M9 9h3V5l7 7-7 7v-4H9V9z", key: "1sg2xn" }]
      ];
      var ArrowBigRightDash = createLucideIcon("arrow-big-right-dash", __iconNode$nP);
      var __iconNode$nO = [["path", { d: "M6 9h6V5l7 7-7 7v-4H6V9z", key: "7fvt9c" }]];
      var ArrowBigRight = createLucideIcon("arrow-big-right", __iconNode$nO);
      var __iconNode$nN = [
        ["path", { d: "M9 19h6", key: "456am0" }],
        ["path", { d: "M9 15v-3H5l7-7 7 7h-4v3H9z", key: "1r2uve" }]
      ];
      var ArrowBigUpDash = createLucideIcon("arrow-big-up-dash", __iconNode$nN);
      var __iconNode$nM = [["path", { d: "M9 18v-6H5l7-7 7 7h-4v6H9z", key: "1x06kx" }]];
      var ArrowBigUp = createLucideIcon("arrow-big-up", __iconNode$nM);
      var __iconNode$nL = [
        ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
        ["path", { d: "M7 20V4", key: "1yoxec" }],
        ["rect", { x: "15", y: "4", width: "4", height: "6", ry: "2", key: "1bwicg" }],
        ["path", { d: "M17 20v-6h-2", key: "1qp1so" }],
        ["path", { d: "M15 20h4", key: "1j968p" }]
      ];
      var ArrowDown01 = createLucideIcon("arrow-down-0-1", __iconNode$nL);
      var __iconNode$nK = [
        ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
        ["path", { d: "M7 20V4", key: "1yoxec" }],
        ["path", { d: "M17 10V4h-2", key: "zcsr5x" }],
        ["path", { d: "M15 10h4", key: "id2lce" }],
        ["rect", { x: "15", y: "14", width: "4", height: "6", ry: "2", key: "33xykx" }]
      ];
      var ArrowDown10 = createLucideIcon("arrow-down-1-0", __iconNode$nK);
      var __iconNode$nJ = [
        ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
        ["path", { d: "M7 20V4", key: "1yoxec" }],
        ["path", { d: "M20 8h-5", key: "1vsyxs" }],
        ["path", { d: "M15 10V6.5a2.5 2.5 0 0 1 5 0V10", key: "ag13bf" }],
        ["path", { d: "M15 14h5l-5 6h5", key: "ur5jdg" }]
      ];
      var ArrowDownAZ = createLucideIcon("arrow-down-a-z", __iconNode$nJ);
      var __iconNode$nI = [
        ["path", { d: "M19 3H5", key: "1236rx" }],
        ["path", { d: "M12 21V7", key: "gj6g52" }],
        ["path", { d: "m6 15 6 6 6-6", key: "h15q88" }]
      ];
      var ArrowDownFromLine = createLucideIcon("arrow-down-from-line", __iconNode$nI);
      var __iconNode$nH = [
        ["path", { d: "M17 7 7 17", key: "15tmo1" }],
        ["path", { d: "M17 17H7V7", key: "1org7z" }]
      ];
      var ArrowDownLeft = createLucideIcon("arrow-down-left", __iconNode$nH);
      var __iconNode$nG = [
        ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
        ["path", { d: "M7 20V4", key: "1yoxec" }],
        ["path", { d: "M11 4h4", key: "6d7r33" }],
        ["path", { d: "M11 8h7", key: "djye34" }],
        ["path", { d: "M11 12h10", key: "1438ji" }]
      ];
      var ArrowDownNarrowWide = createLucideIcon("arrow-down-narrow-wide", __iconNode$nG);
      var __iconNode$nF = [
        ["path", { d: "M12 2v14", key: "jyx4ut" }],
        ["path", { d: "m19 9-7 7-7-7", key: "1oe3oy" }],
        ["circle", { cx: "12", cy: "21", r: "1", key: "o0uj5v" }]
      ];
      var ArrowDownToDot = createLucideIcon("arrow-down-to-dot", __iconNode$nF);
      var __iconNode$nE = [
        ["path", { d: "m7 7 10 10", key: "1fmybs" }],
        ["path", { d: "M17 7v10H7", key: "6fjiku" }]
      ];
      var ArrowDownRight = createLucideIcon("arrow-down-right", __iconNode$nE);
      var __iconNode$nD = [
        ["path", { d: "M12 17V3", key: "1cwfxf" }],
        ["path", { d: "m6 11 6 6 6-6", key: "12ii2o" }],
        ["path", { d: "M19 21H5", key: "150jfl" }]
      ];
      var ArrowDownToLine = createLucideIcon("arrow-down-to-line", __iconNode$nD);
      var __iconNode$nC = [
        ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
        ["path", { d: "M7 20V4", key: "1yoxec" }],
        ["path", { d: "m21 8-4-4-4 4", key: "1c9v7m" }],
        ["path", { d: "M17 4v16", key: "7dpous" }]
      ];
      var ArrowDownUp = createLucideIcon("arrow-down-up", __iconNode$nC);
      var __iconNode$nB = [
        ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }],
        ["path", { d: "M15 4h5l-5 6h5", key: "8asdl1" }],
        ["path", { d: "M15 20v-3.5a2.5 2.5 0 0 1 5 0V20", key: "r6l5cz" }],
        ["path", { d: "M20 18h-5", key: "18j1r2" }]
      ];
      var ArrowDownZA = createLucideIcon("arrow-down-z-a", __iconNode$nB);
      var __iconNode$nA = [
        ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
        ["path", { d: "M7 20V4", key: "1yoxec" }],
        ["path", { d: "M11 4h10", key: "1w87gc" }],
        ["path", { d: "M11 8h7", key: "djye34" }],
        ["path", { d: "M11 12h4", key: "q8tih4" }]
      ];
      var ArrowDownWideNarrow = createLucideIcon("arrow-down-wide-narrow", __iconNode$nA);
      var __iconNode$nz = [
        ["path", { d: "M12 5v14", key: "s699le" }],
        ["path", { d: "m19 12-7 7-7-7", key: "1idqje" }]
      ];
      var ArrowDown = createLucideIcon("arrow-down", __iconNode$nz);
      var __iconNode$ny = [
        ["path", { d: "m9 6-6 6 6 6", key: "7v63n9" }],
        ["path", { d: "M3 12h14", key: "13k4hi" }],
        ["path", { d: "M21 19V5", key: "b4bplr" }]
      ];
      var ArrowLeftFromLine = createLucideIcon("arrow-left-from-line", __iconNode$ny);
      var __iconNode$nx = [
        ["path", { d: "M8 3 4 7l4 4", key: "9rb6wj" }],
        ["path", { d: "M4 7h16", key: "6tx8e3" }],
        ["path", { d: "m16 21 4-4-4-4", key: "siv7j2" }],
        ["path", { d: "M20 17H4", key: "h6l3hr" }]
      ];
      var ArrowLeftRight = createLucideIcon("arrow-left-right", __iconNode$nx);
      var __iconNode$nw = [
        ["path", { d: "M3 19V5", key: "rwsyhb" }],
        ["path", { d: "m13 6-6 6 6 6", key: "1yhaz7" }],
        ["path", { d: "M7 12h14", key: "uoisry" }]
      ];
      var ArrowLeftToLine = createLucideIcon("arrow-left-to-line", __iconNode$nw);
      var __iconNode$nv = [
        ["path", { d: "m12 19-7-7 7-7", key: "1l729n" }],
        ["path", { d: "M19 12H5", key: "x3x0zl" }]
      ];
      var ArrowLeft = createLucideIcon("arrow-left", __iconNode$nv);
      var __iconNode$nu = [
        ["path", { d: "M3 5v14", key: "1nt18q" }],
        ["path", { d: "M21 12H7", key: "13ipq5" }],
        ["path", { d: "m15 18 6-6-6-6", key: "6tx3qv" }]
      ];
      var ArrowRightFromLine = createLucideIcon("arrow-right-from-line", __iconNode$nu);
      var __iconNode$nt = [
        ["path", { d: "m16 3 4 4-4 4", key: "1x1c3m" }],
        ["path", { d: "M20 7H4", key: "zbl0bi" }],
        ["path", { d: "m8 21-4-4 4-4", key: "h9nckh" }],
        ["path", { d: "M4 17h16", key: "g4d7ey" }]
      ];
      var ArrowRightLeft = createLucideIcon("arrow-right-left", __iconNode$nt);
      var __iconNode$ns = [
        ["path", { d: "M17 12H3", key: "8awo09" }],
        ["path", { d: "m11 18 6-6-6-6", key: "8c2y43" }],
        ["path", { d: "M21 5v14", key: "nzette" }]
      ];
      var ArrowRightToLine = createLucideIcon("arrow-right-to-line", __iconNode$ns);
      var __iconNode$nr = [
        ["path", { d: "M5 12h14", key: "1ays0h" }],
        ["path", { d: "m12 5 7 7-7 7", key: "xquz4c" }]
      ];
      var ArrowRight4 = createLucideIcon("arrow-right", __iconNode$nr);
      var __iconNode$nq = [
        ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }],
        ["rect", { x: "15", y: "4", width: "4", height: "6", ry: "2", key: "1bwicg" }],
        ["path", { d: "M17 20v-6h-2", key: "1qp1so" }],
        ["path", { d: "M15 20h4", key: "1j968p" }]
      ];
      var ArrowUp01 = createLucideIcon("arrow-up-0-1", __iconNode$nq);
      var __iconNode$np = [
        ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }],
        ["path", { d: "M17 10V4h-2", key: "zcsr5x" }],
        ["path", { d: "M15 10h4", key: "id2lce" }],
        ["rect", { x: "15", y: "14", width: "4", height: "6", ry: "2", key: "33xykx" }]
      ];
      var ArrowUp10 = createLucideIcon("arrow-up-1-0", __iconNode$np);
      var __iconNode$no = [
        ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }],
        ["path", { d: "M20 8h-5", key: "1vsyxs" }],
        ["path", { d: "M15 10V6.5a2.5 2.5 0 0 1 5 0V10", key: "ag13bf" }],
        ["path", { d: "M15 14h5l-5 6h5", key: "ur5jdg" }]
      ];
      var ArrowUpAZ = createLucideIcon("arrow-up-a-z", __iconNode$no);
      var __iconNode$nn = [
        ["path", { d: "m21 16-4 4-4-4", key: "f6ql7i" }],
        ["path", { d: "M17 20V4", key: "1ejh1v" }],
        ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }]
      ];
      var ArrowUpDown = createLucideIcon("arrow-up-down", __iconNode$nn);
      var __iconNode$nm = [
        ["path", { d: "m5 9 7-7 7 7", key: "1hw5ic" }],
        ["path", { d: "M12 16V2", key: "ywoabb" }],
        ["circle", { cx: "12", cy: "21", r: "1", key: "o0uj5v" }]
      ];
      var ArrowUpFromDot = createLucideIcon("arrow-up-from-dot", __iconNode$nm);
      var __iconNode$nl = [
        ["path", { d: "m18 9-6-6-6 6", key: "kcunyi" }],
        ["path", { d: "M12 3v14", key: "7cf3v8" }],
        ["path", { d: "M5 21h14", key: "11awu3" }]
      ];
      var ArrowUpFromLine = createLucideIcon("arrow-up-from-line", __iconNode$nl);
      var __iconNode$nk = [
        ["path", { d: "M7 17V7h10", key: "11bw93" }],
        ["path", { d: "M17 17 7 7", key: "2786uv" }]
      ];
      var ArrowUpLeft = createLucideIcon("arrow-up-left", __iconNode$nk);
      var __iconNode$nj = [
        ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }],
        ["path", { d: "M11 12h4", key: "q8tih4" }],
        ["path", { d: "M11 16h7", key: "uosisv" }],
        ["path", { d: "M11 20h10", key: "jvxblo" }]
      ];
      var ArrowUpNarrowWide = createLucideIcon("arrow-up-narrow-wide", __iconNode$nj);
      var __iconNode$ni = [
        ["path", { d: "M7 7h10v10", key: "1tivn9" }],
        ["path", { d: "M7 17 17 7", key: "1vkiza" }]
      ];
      var ArrowUpRight = createLucideIcon("arrow-up-right", __iconNode$ni);
      var __iconNode$nh = [
        ["path", { d: "M5 3h14", key: "7usisc" }],
        ["path", { d: "m18 13-6-6-6 6", key: "1kf1n9" }],
        ["path", { d: "M12 7v14", key: "1akyts" }]
      ];
      var ArrowUpToLine = createLucideIcon("arrow-up-to-line", __iconNode$nh);
      var __iconNode$ng = [
        ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }],
        ["path", { d: "M11 12h10", key: "1438ji" }],
        ["path", { d: "M11 16h7", key: "uosisv" }],
        ["path", { d: "M11 20h4", key: "1krc32" }]
      ];
      var ArrowUpWideNarrow = createLucideIcon("arrow-up-wide-narrow", __iconNode$ng);
      var __iconNode$nf = [
        ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
        ["path", { d: "M7 4v16", key: "1glfcx" }],
        ["path", { d: "M15 4h5l-5 6h5", key: "8asdl1" }],
        ["path", { d: "M15 20v-3.5a2.5 2.5 0 0 1 5 0V20", key: "r6l5cz" }],
        ["path", { d: "M20 18h-5", key: "18j1r2" }]
      ];
      var ArrowUpZA = createLucideIcon("arrow-up-z-a", __iconNode$nf);
      var __iconNode$ne = [
        ["path", { d: "m5 12 7-7 7 7", key: "hav0vg" }],
        ["path", { d: "M12 19V5", key: "x0mq9r" }]
      ];
      var ArrowUp2 = createLucideIcon("arrow-up", __iconNode$ne);
      var __iconNode$nd = [
        ["path", { d: "m4 6 3-3 3 3", key: "9aidw8" }],
        ["path", { d: "M7 17V3", key: "19qxw1" }],
        ["path", { d: "m14 6 3-3 3 3", key: "6iy689" }],
        ["path", { d: "M17 17V3", key: "o0fmgi" }],
        ["path", { d: "M4 21h16", key: "1h09gz" }]
      ];
      var ArrowsUpFromLine = createLucideIcon("arrows-up-from-line", __iconNode$nd);
      var __iconNode$nc = [
        ["path", { d: "M12 6v12", key: "1vza4d" }],
        ["path", { d: "M17.196 9 6.804 15", key: "1ah31z" }],
        ["path", { d: "m6.804 9 10.392 6", key: "1b6pxd" }]
      ];
      var Asterisk = createLucideIcon("asterisk", __iconNode$nc);
      var __iconNode$nb = [
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
        ["path", { d: "M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-4 8", key: "7n84p3" }]
      ];
      var AtSign = createLucideIcon("at-sign", __iconNode$nb);
      var __iconNode$na = [
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
        [
          "path",
          {
            d: "M20.2 20.2c2.04-2.03.02-7.36-4.5-11.9-4.54-4.52-9.87-6.54-11.9-4.5-2.04 2.03-.02 7.36 4.5 11.9 4.54 4.52 9.87 6.54 11.9 4.5Z",
            key: "1l2ple"
          }
        ],
        [
          "path",
          {
            d: "M15.7 15.7c4.52-4.54 6.54-9.87 4.5-11.9-2.03-2.04-7.36-.02-11.9 4.5-4.52 4.54-6.54 9.87-4.5 11.9 2.03 2.04 7.36.02 11.9-4.5Z",
            key: "1wam0m"
          }
        ]
      ];
      var Atom = createLucideIcon("atom", __iconNode$na);
      var __iconNode$n9 = [
        ["path", { d: "M2 10v3", key: "1fnikh" }],
        ["path", { d: "M6 6v11", key: "11sgs0" }],
        ["path", { d: "M10 3v18", key: "yhl04a" }],
        ["path", { d: "M14 8v7", key: "3a1oy3" }],
        ["path", { d: "M18 5v13", key: "123xd1" }],
        ["path", { d: "M22 10v3", key: "154ddg" }]
      ];
      var AudioLines = createLucideIcon("audio-lines", __iconNode$n9);
      var __iconNode$n8 = [
        [
          "path",
          {
            d: "M2 13a2 2 0 0 0 2-2V7a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0V4a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0v-4a2 2 0 0 1 2-2",
            key: "57tc96"
          }
        ]
      ];
      var AudioWaveform = createLucideIcon("audio-waveform", __iconNode$n8);
      var __iconNode$n7 = [
        [
          "path",
          {
            d: "m15.477 12.89 1.515 8.526a.5.5 0 0 1-.81.47l-3.58-2.687a1 1 0 0 0-1.197 0l-3.586 2.686a.5.5 0 0 1-.81-.469l1.514-8.526",
            key: "1yiouv"
          }
        ],
        ["circle", { cx: "12", cy: "8", r: "6", key: "1vp47v" }]
      ];
      var Award4 = createLucideIcon("award", __iconNode$n7);
      var __iconNode$n6 = [
        ["path", { d: "m14 12-8.5 8.5a2.12 2.12 0 1 1-3-3L11 9", key: "csbz4o" }],
        ["path", { d: "M15 13 9 7l4-4 6 6h3a8 8 0 0 1-7 7z", key: "113wfo" }]
      ];
      var Axe = createLucideIcon("axe", __iconNode$n6);
      var __iconNode$n5 = [
        ["path", { d: "M4 4v16h16", key: "1s015l" }],
        ["path", { d: "m4 20 7-7", key: "17qe9y" }]
      ];
      var Axis3d = createLucideIcon("axis-3d", __iconNode$n5);
      var __iconNode$n4 = [
        [
          "path",
          { d: "M4 10a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4v10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2z", key: "1ol0lm" }
        ],
        ["path", { d: "M8 10h8", key: "c7uz4u" }],
        ["path", { d: "M8 18h8", key: "1no2b1" }],
        ["path", { d: "M8 22v-6a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v6", key: "1fr6do" }],
        ["path", { d: "M9 6V4a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2", key: "donm21" }]
      ];
      var Backpack = createLucideIcon("backpack", __iconNode$n4);
      var __iconNode$n3 = [
        ["path", { d: "M10 16c.5.3 1.2.5 2 .5s1.5-.2 2-.5", key: "1u7htd" }],
        ["path", { d: "M15 12h.01", key: "1k8ypt" }],
        [
          "path",
          {
            d: "M19.38 6.813A9 9 0 0 1 20.8 10.2a2 2 0 0 1 0 3.6 9 9 0 0 1-17.6 0 2 2 0 0 1 0-3.6A9 9 0 0 1 12 3c2 0 3.5 1.1 3.5 2.5s-.9 2.5-2 2.5c-.8 0-1.5-.4-1.5-1",
            key: "11xh7x"
          }
        ],
        ["path", { d: "M9 12h.01", key: "157uk2" }]
      ];
      var Baby = createLucideIcon("baby", __iconNode$n3);
      var __iconNode$n2 = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M12 7v10", key: "jspqdw" }],
        ["path", { d: "M15.4 10a4 4 0 1 0 0 4", key: "2eqtx8" }]
      ];
      var BadgeCent = createLucideIcon("badge-cent", __iconNode$n2);
      var __iconNode$n1 = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["line", { x1: "12", x2: "12", y1: "8", y2: "12", key: "1pkeuh" }],
        ["line", { x1: "12", x2: "12.01", y1: "16", y2: "16", key: "4dfq90" }]
      ];
      var BadgeAlert = createLucideIcon("badge-alert", __iconNode$n1);
      var __iconNode$n0 = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
      ];
      var BadgeCheck = createLucideIcon("badge-check", __iconNode$n0);
      var __iconNode$m$ = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M7 12h5", key: "gblrwe" }],
        ["path", { d: "M15 9.4a4 4 0 1 0 0 5.2", key: "1makmb" }]
      ];
      var BadgeEuro = createLucideIcon("badge-euro", __iconNode$m$);
      var __iconNode$m_ = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8", key: "1h4pet" }],
        ["path", { d: "M12 18V6", key: "zqpxq5" }]
      ];
      var BadgeDollarSign = createLucideIcon("badge-dollar-sign", __iconNode$m_);
      var __iconNode$mZ = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3", key: "1u773s" }],
        ["line", { x1: "12", x2: "12.01", y1: "17", y2: "17", key: "io3f8k" }]
      ];
      var BadgeHelp = createLucideIcon("badge-help", __iconNode$mZ);
      var __iconNode$mY = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M8 8h8", key: "1bis0t" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "m13 17-5-1h1a4 4 0 0 0 0-8", key: "nu2bwa" }]
      ];
      var BadgeIndianRupee = createLucideIcon("badge-indian-rupee", __iconNode$mY);
      var __iconNode$mX = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["line", { x1: "12", x2: "12", y1: "16", y2: "12", key: "1y1yb1" }],
        ["line", { x1: "12", x2: "12.01", y1: "8", y2: "8", key: "110wyk" }]
      ];
      var BadgeInfo = createLucideIcon("badge-info", __iconNode$mX);
      var __iconNode$mW = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "m9 8 3 3v7", key: "17yadx" }],
        ["path", { d: "m12 11 3-3", key: "p4cfq1" }],
        ["path", { d: "M9 12h6", key: "1c52cq" }],
        ["path", { d: "M9 16h6", key: "8wimt3" }]
      ];
      var BadgeJapaneseYen = createLucideIcon("badge-japanese-yen", __iconNode$mW);
      var __iconNode$mV = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }]
      ];
      var BadgeMinus = createLucideIcon("badge-minus", __iconNode$mV);
      var __iconNode$mU = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        ["path", { d: "M9 9h.01", key: "1q5me6" }],
        ["path", { d: "M15 15h.01", key: "lqbp3k" }]
      ];
      var BadgePercent = createLucideIcon("badge-percent", __iconNode$mU);
      var __iconNode$mT = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["line", { x1: "12", x2: "12", y1: "8", y2: "16", key: "10p56q" }],
        ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }]
      ];
      var BadgePlus = createLucideIcon("badge-plus", __iconNode$mT);
      var __iconNode$mS = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M9 16h5", key: "1syiyw" }],
        ["path", { d: "M9 12h5a2 2 0 1 0 0-4h-3v9", key: "1ge9c1" }]
      ];
      var BadgeRussianRuble = createLucideIcon("badge-russian-ruble", __iconNode$mS);
      var __iconNode$mR = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M8 12h4", key: "qz6y1c" }],
        ["path", { d: "M10 16V9.5a2.5 2.5 0 0 1 5 0", key: "3mlbjk" }],
        ["path", { d: "M8 16h7", key: "sbedsn" }]
      ];
      var BadgePoundSterling = createLucideIcon("badge-pound-sterling", __iconNode$mR);
      var __iconNode$mQ = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["path", { d: "M11 17V8h4", key: "1bfq6y" }],
        ["path", { d: "M11 12h3", key: "2eqnfz" }],
        ["path", { d: "M9 16h4", key: "1skf3a" }]
      ];
      var BadgeSwissFranc = createLucideIcon("badge-swiss-franc", __iconNode$mQ);
      var __iconNode$mP = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ]
      ];
      var Badge2 = createLucideIcon("badge", __iconNode$mP);
      var __iconNode$mO = [
        [
          "path",
          {
            d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
            key: "3c2336"
          }
        ],
        ["line", { x1: "15", x2: "9", y1: "9", y2: "15", key: "f7djnv" }],
        ["line", { x1: "9", x2: "15", y1: "9", y2: "15", key: "1shsy8" }]
      ];
      var BadgeX = createLucideIcon("badge-x", __iconNode$mO);
      var __iconNode$mN = [
        ["path", { d: "M22 18H6a2 2 0 0 1-2-2V7a2 2 0 0 0-2-2", key: "4irg2o" }],
        ["path", { d: "M17 14V4a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2v10", key: "14fcyx" }],
        ["rect", { width: "13", height: "8", x: "8", y: "6", rx: "1", key: "o6oiis" }],
        ["circle", { cx: "18", cy: "20", r: "2", key: "t9985n" }],
        ["circle", { cx: "9", cy: "20", r: "2", key: "e5v82j" }]
      ];
      var BaggageClaim = createLucideIcon("baggage-claim", __iconNode$mN);
      var __iconNode$mM = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m4.9 4.9 14.2 14.2", key: "1m5liu" }]
      ];
      var Ban = createLucideIcon("ban", __iconNode$mM);
      var __iconNode$mL = [
        ["path", { d: "M4 13c3.5-2 8-2 10 2a5.5 5.5 0 0 1 8 5", key: "1cscit" }],
        [
          "path",
          {
            d: "M5.15 17.89c5.52-1.52 8.65-6.89 7-12C11.55 4 11.5 2 13 2c3.22 0 5 5.5 5 8 0 6.5-4.2 12-10.49 12C5.11 22 2 22 2 20c0-1.5 1.14-1.55 3.15-2.11Z",
            key: "1y1nbv"
          }
        ]
      ];
      var Banana = createLucideIcon("banana", __iconNode$mL);
      var __iconNode$mK = [
        ["path", { d: "M10 10.01h.01", key: "1e9xi7" }],
        ["path", { d: "M10 14.01h.01", key: "ac23bv" }],
        ["path", { d: "M14 10.01h.01", key: "2wfrvf" }],
        ["path", { d: "M14 14.01h.01", key: "8tw8yn" }],
        ["path", { d: "M18 6v11.5", key: "dkbidh" }],
        ["path", { d: "M6 6v12", key: "vkc79e" }],
        ["rect", { x: "2", y: "6", width: "20", height: "12", rx: "2", key: "1wpnh2" }]
      ];
      var Bandage = createLucideIcon("bandage", __iconNode$mK);
      var __iconNode$mJ = [
        ["path", { d: "M12 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5", key: "x6cv4u" }],
        ["path", { d: "m16 19 3 3 3-3", key: "1ibux0" }],
        ["path", { d: "M18 12h.01", key: "yjnet6" }],
        ["path", { d: "M19 16v6", key: "tddt3s" }],
        ["path", { d: "M6 12h.01", key: "c2rlol" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
      ];
      var BanknoteArrowDown = createLucideIcon("banknote-arrow-down", __iconNode$mJ);
      var __iconNode$mI = [
        ["path", { d: "M12 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5", key: "x6cv4u" }],
        ["path", { d: "M18 12h.01", key: "yjnet6" }],
        ["path", { d: "M19 22v-6", key: "qhmiwi" }],
        ["path", { d: "m22 19-3-3-3 3", key: "rn6bg2" }],
        ["path", { d: "M6 12h.01", key: "c2rlol" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
      ];
      var BanknoteArrowUp = createLucideIcon("banknote-arrow-up", __iconNode$mI);
      var __iconNode$mH = [
        ["path", { d: "M13 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5", key: "16nib6" }],
        ["path", { d: "m17 17 5 5", key: "p7ous7" }],
        ["path", { d: "M18 12h.01", key: "yjnet6" }],
        ["path", { d: "m22 17-5 5", key: "gqnmv0" }],
        ["path", { d: "M6 12h.01", key: "c2rlol" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
      ];
      var BanknoteX = createLucideIcon("banknote-x", __iconNode$mH);
      var __iconNode$mG = [
        ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "2", key: "9lu3g6" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
        ["path", { d: "M6 12h.01M18 12h.01", key: "113zkx" }]
      ];
      var Banknote = createLucideIcon("banknote", __iconNode$mG);
      var __iconNode$mF = [
        ["path", { d: "M3 5v14", key: "1nt18q" }],
        ["path", { d: "M8 5v14", key: "1ybrkv" }],
        ["path", { d: "M12 5v14", key: "s699le" }],
        ["path", { d: "M17 5v14", key: "ycjyhj" }],
        ["path", { d: "M21 5v14", key: "nzette" }]
      ];
      var Barcode = createLucideIcon("barcode", __iconNode$mF);
      var __iconNode$mE = [
        ["path", { d: "M4 20h16", key: "14thso" }],
        ["path", { d: "m6 16 6-12 6 12", key: "1b4byz" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }]
      ];
      var Baseline = createLucideIcon("baseline", __iconNode$mE);
      var __iconNode$mD = [
        ["path", { d: "M10 4 8 6", key: "1rru8s" }],
        ["path", { d: "M17 19v2", key: "ts1sot" }],
        ["path", { d: "M2 12h20", key: "9i4pu4" }],
        ["path", { d: "M7 19v2", key: "12npes" }],
        [
          "path",
          {
            d: "M9 5 7.621 3.621A2.121 2.121 0 0 0 4 5v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-5",
            key: "14ym8i"
          }
        ]
      ];
      var Bath = createLucideIcon("bath", __iconNode$mD);
      var __iconNode$mC = [
        ["path", { d: "M15 7h1a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-2", key: "1sdynx" }],
        ["path", { d: "M6 7H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h1", key: "1gkd3k" }],
        ["path", { d: "m11 7-3 5h4l-3 5", key: "b4a64w" }],
        ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }]
      ];
      var BatteryCharging = createLucideIcon("battery-charging", __iconNode$mC);
      var __iconNode$mB = [
        ["rect", { width: "16", height: "10", x: "2", y: "7", rx: "2", ry: "2", key: "1w10f2" }],
        ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }],
        ["line", { x1: "6", x2: "6", y1: "11", y2: "13", key: "1wd6dw" }],
        ["line", { x1: "10", x2: "10", y1: "11", y2: "13", key: "haxvl5" }],
        ["line", { x1: "14", x2: "14", y1: "11", y2: "13", key: "c6fn6x" }]
      ];
      var BatteryFull = createLucideIcon("battery-full", __iconNode$mB);
      var __iconNode$mA = [
        ["rect", { width: "16", height: "10", x: "2", y: "7", rx: "2", ry: "2", key: "1w10f2" }],
        ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }],
        ["line", { x1: "6", x2: "6", y1: "11", y2: "13", key: "1wd6dw" }]
      ];
      var BatteryLow = createLucideIcon("battery-low", __iconNode$mA);
      var __iconNode$mz = [
        ["rect", { width: "16", height: "10", x: "2", y: "7", rx: "2", ry: "2", key: "1w10f2" }],
        ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }],
        ["line", { x1: "6", x2: "6", y1: "11", y2: "13", key: "1wd6dw" }],
        ["line", { x1: "10", x2: "10", y1: "11", y2: "13", key: "haxvl5" }]
      ];
      var BatteryMedium = createLucideIcon("battery-medium", __iconNode$mz);
      var __iconNode$my = [
        ["path", { d: "M10 9v6", key: "17i7lo" }],
        ["path", { d: "M13.5 7H16a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-2.5", key: "jzl4pj" }],
        ["path", { d: "M22 11v2", key: "1wo06k" }],
        ["path", { d: "M6.5 17H4a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h2.5", key: "1ar5vp" }],
        ["path", { d: "M7 12h6", key: "iekk3h" }]
      ];
      var BatteryPlus = createLucideIcon("battery-plus", __iconNode$my);
      var __iconNode$mx = [
        ["path", { d: "M10 17h.01", key: "nbq80n" }],
        ["path", { d: "M10 7v6", key: "nne03l" }],
        ["path", { d: "M14 7h2a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-2", key: "1x5o8m" }],
        ["path", { d: "M22 11v2", key: "1wo06k" }],
        ["path", { d: "M6 7H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2", key: "1mdjgh" }]
      ];
      var BatteryWarning = createLucideIcon("battery-warning", __iconNode$mx);
      var __iconNode$mw = [
        ["rect", { width: "16", height: "10", x: "2", y: "7", rx: "2", ry: "2", key: "1w10f2" }],
        ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }]
      ];
      var Battery = createLucideIcon("battery", __iconNode$mw);
      var __iconNode$mv = [
        [
          "path",
          {
            d: "M9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22a13.96 13.96 0 0 0 9.9-4.1",
            key: "bq3udt"
          }
        ],
        ["path", { d: "M10.75 5.093A6 6 0 0 1 22 8c0 2.411-.61 4.68-1.683 6.66", key: "17ccse" }],
        [
          "path",
          {
            d: "M5.341 10.62a4 4 0 0 0 6.487 1.208M10.62 5.341a4.015 4.015 0 0 1 2.039 2.04",
            key: "18zqgq"
          }
        ],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var BeanOff = createLucideIcon("bean-off", __iconNode$mv);
      var __iconNode$mu = [
        ["path", { d: "M4.5 3h15", key: "c7n0jr" }],
        ["path", { d: "M6 3v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V3", key: "m1uhx7" }],
        ["path", { d: "M6 14h12", key: "4cwo0f" }]
      ];
      var Beaker = createLucideIcon("beaker", __iconNode$mu);
      var __iconNode$mt = [
        ["path", { d: "M2 20v-8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v8", key: "1k78r4" }],
        ["path", { d: "M4 10V6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4", key: "fb3tl2" }],
        ["path", { d: "M12 4v6", key: "1dcgq2" }],
        ["path", { d: "M2 18h20", key: "ajqnye" }]
      ];
      var BedDouble = createLucideIcon("bed-double", __iconNode$mt);
      var __iconNode$ms = [
        [
          "path",
          {
            d: "M10.165 6.598C9.954 7.478 9.64 8.36 9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22c7.732 0 14-6.268 14-14a6 6 0 0 0-11.835-1.402Z",
            key: "1tvzk7"
          }
        ],
        ["path", { d: "M5.341 10.62a4 4 0 1 0 5.279-5.28", key: "2cyri2" }]
      ];
      var Bean = createLucideIcon("bean", __iconNode$ms);
      var __iconNode$mr = [
        ["path", { d: "M3 20v-8a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v8", key: "1wm6mi" }],
        ["path", { d: "M5 10V6a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v4", key: "4k93s5" }],
        ["path", { d: "M3 18h18", key: "1h113x" }]
      ];
      var BedSingle = createLucideIcon("bed-single", __iconNode$mr);
      var __iconNode$mq = [
        ["path", { d: "M2 4v16", key: "vw9hq8" }],
        ["path", { d: "M2 8h18a2 2 0 0 1 2 2v10", key: "1dgv2r" }],
        ["path", { d: "M2 17h20", key: "18nfp3" }],
        ["path", { d: "M6 8v9", key: "1yriud" }]
      ];
      var Bed = createLucideIcon("bed", __iconNode$mq);
      var __iconNode$mp = [
        [
          "path",
          {
            d: "M16.4 13.7A6.5 6.5 0 1 0 6.28 6.6c-1.1 3.13-.78 3.9-3.18 6.08A3 3 0 0 0 5 18c4 0 8.4-1.8 11.4-4.3",
            key: "cisjcv"
          }
        ],
        [
          "path",
          {
            d: "m18.5 6 2.19 4.5a6.48 6.48 0 0 1-2.29 7.2C15.4 20.2 11 22 7 22a3 3 0 0 1-2.68-1.66L2.4 16.5",
            key: "5byaag"
          }
        ],
        ["circle", { cx: "12.5", cy: "8.5", r: "2.5", key: "9738u8" }]
      ];
      var Beef = createLucideIcon("beef", __iconNode$mp);
      var __iconNode$mo = [
        ["path", { d: "M17 11h1a3 3 0 0 1 0 6h-1", key: "1yp76v" }],
        ["path", { d: "M9 12v6", key: "1u1cab" }],
        ["path", { d: "M13 12v6", key: "1sugkk" }],
        [
          "path",
          {
            d: "M14 7.5c-1 0-1.44.5-3 .5s-2-.5-3-.5-1.72.5-2.5.5a2.5 2.5 0 0 1 0-5c.78 0 1.57.5 2.5.5S9.44 2 11 2s2 1.5 3 1.5 1.72-.5 2.5-.5a2.5 2.5 0 0 1 0 5c-.78 0-1.5-.5-2.5-.5Z",
            key: "1510fo"
          }
        ],
        ["path", { d: "M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V8", key: "19jb7n" }]
      ];
      var Beer = createLucideIcon("beer", __iconNode$mo);
      var __iconNode$mn = [
        ["path", { d: "M13 13v5", key: "igwfh0" }],
        ["path", { d: "M17 11.47V8", key: "16yw0g" }],
        ["path", { d: "M17 11h1a3 3 0 0 1 2.745 4.211", key: "1xbt65" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-3", key: "c55o3e" }],
        [
          "path",
          { d: "M7.536 7.535C6.766 7.649 6.154 8 5.5 8a2.5 2.5 0 0 1-1.768-4.268", key: "1ydug7" }
        ],
        [
          "path",
          {
            d: "M8.727 3.204C9.306 2.767 9.885 2 11 2c1.56 0 2 1.5 3 1.5s1.72-.5 2.5-.5a1 1 0 1 1 0 5c-.78 0-1.5-.5-2.5-.5a3.149 3.149 0 0 0-.842.12",
            key: "q81o7q"
          }
        ],
        ["path", { d: "M9 14.6V18", key: "20ek98" }]
      ];
      var BeerOff = createLucideIcon("beer-off", __iconNode$mn);
      var __iconNode$mm = [
        ["path", { d: "M10.268 21a2 2 0 0 0 3.464 0", key: "vwvbt9" }],
        [
          "path",
          {
            d: "M13.916 2.314A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.74 7.327A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673 9 9 0 0 1-.585-.665",
            key: "1tip0g"
          }
        ],
        ["circle", { cx: "18", cy: "8", r: "3", key: "1g0gzu" }]
      ];
      var BellDot = createLucideIcon("bell-dot", __iconNode$mm);
      var __iconNode$ml = [
        ["path", { d: "M18.8 4A6.3 8.7 0 0 1 20 9", key: "xve1fh" }],
        ["path", { d: "M9 9h.01", key: "1q5me6" }],
        ["circle", { cx: "9", cy: "9", r: "7", key: "p2h5vp" }],
        ["rect", { width: "10", height: "6", x: "4", y: "16", rx: "2", key: "17f3te" }],
        ["path", { d: "M14 19c3 0 4.6-1.6 4.6-1.6", key: "n7odp6" }],
        ["circle", { cx: "20", cy: "16", r: "2", key: "1v9bxh" }]
      ];
      var BellElectric = createLucideIcon("bell-electric", __iconNode$ml);
      var __iconNode$mk = [
        ["path", { d: "M10.268 21a2 2 0 0 0 3.464 0", key: "vwvbt9" }],
        ["path", { d: "M15 8h6", key: "8ybuxh" }],
        [
          "path",
          {
            d: "M16.243 3.757A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673A9.4 9.4 0 0 1 18.667 12",
            key: "bdwj86"
          }
        ]
      ];
      var BellMinus = createLucideIcon("bell-minus", __iconNode$mk);
      var __iconNode$mj = [
        ["path", { d: "M10.268 21a2 2 0 0 0 3.464 0", key: "vwvbt9" }],
        [
          "path",
          {
            d: "M17 17H4a1 1 0 0 1-.74-1.673C4.59 13.956 6 12.499 6 8a6 6 0 0 1 .258-1.742",
            key: "178tsu"
          }
        ],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M8.668 3.01A6 6 0 0 1 18 8c0 2.687.77 4.653 1.707 6.05", key: "1hqiys" }]
      ];
      var BellOff = createLucideIcon("bell-off", __iconNode$mj);
      var __iconNode$mi = [
        ["path", { d: "M10.268 21a2 2 0 0 0 3.464 0", key: "vwvbt9" }],
        ["path", { d: "M15 8h6", key: "8ybuxh" }],
        ["path", { d: "M18 5v6", key: "g5ayrv" }],
        [
          "path",
          {
            d: "M20.002 14.464a9 9 0 0 0 .738.863A1 1 0 0 1 20 17H4a1 1 0 0 1-.74-1.673C4.59 13.956 6 12.499 6 8a6 6 0 0 1 8.75-5.332",
            key: "1abcvy"
          }
        ]
      ];
      var BellPlus = createLucideIcon("bell-plus", __iconNode$mi);
      var __iconNode$mh = [
        ["path", { d: "M10.268 21a2 2 0 0 0 3.464 0", key: "vwvbt9" }],
        ["path", { d: "M22 8c0-2.3-.8-4.3-2-6", key: "5bb3ad" }],
        [
          "path",
          {
            d: "M3.262 15.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326",
            key: "11g9vi"
          }
        ],
        ["path", { d: "M4 2C2.8 3.7 2 5.7 2 8", key: "tap9e0" }]
      ];
      var BellRing = createLucideIcon("bell-ring", __iconNode$mh);
      var __iconNode$mg = [
        ["rect", { width: "13", height: "7", x: "3", y: "3", rx: "1", key: "11xb64" }],
        ["path", { d: "m22 15-3-3 3-3", key: "26chmm" }],
        ["rect", { width: "13", height: "7", x: "3", y: "14", rx: "1", key: "k6ky7n" }]
      ];
      var BetweenHorizontalEnd = createLucideIcon("between-horizontal-end", __iconNode$mg);
      var __iconNode$mf = [
        ["path", { d: "M10.268 21a2 2 0 0 0 3.464 0", key: "vwvbt9" }],
        [
          "path",
          {
            d: "M3.262 15.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326",
            key: "11g9vi"
          }
        ]
      ];
      var Bell = createLucideIcon("bell", __iconNode$mf);
      var __iconNode$me = [
        ["rect", { width: "7", height: "13", x: "3", y: "3", rx: "1", key: "1fdu0f" }],
        ["path", { d: "m9 22 3-3 3 3", key: "17z65a" }],
        ["rect", { width: "7", height: "13", x: "14", y: "3", rx: "1", key: "1squn4" }]
      ];
      var BetweenVerticalEnd = createLucideIcon("between-vertical-end", __iconNode$me);
      var __iconNode$md = [
        ["rect", { width: "13", height: "7", x: "8", y: "3", rx: "1", key: "pkso9a" }],
        ["path", { d: "m2 9 3 3-3 3", key: "1agib5" }],
        ["rect", { width: "13", height: "7", x: "8", y: "14", rx: "1", key: "1q5fc1" }]
      ];
      var BetweenHorizontalStart = createLucideIcon("between-horizontal-start", __iconNode$md);
      var __iconNode$mc = [
        ["rect", { width: "7", height: "13", x: "3", y: "8", rx: "1", key: "1fjrkv" }],
        ["path", { d: "m15 2-3 3-3-3", key: "1uh6eb" }],
        ["rect", { width: "7", height: "13", x: "14", y: "8", rx: "1", key: "w3fjg8" }]
      ];
      var BetweenVerticalStart = createLucideIcon("between-vertical-start", __iconNode$mc);
      var __iconNode$mb = [
        [
          "path",
          {
            d: "M12.409 13.017A5 5 0 0 1 22 15c0 3.866-4 7-9 7-4.077 0-8.153-.82-10.371-2.462-.426-.316-.631-.832-.62-1.362C2.118 12.723 2.627 2 10 2a3 3 0 0 1 3 3 2 2 0 0 1-2 2c-1.105 0-1.64-.444-2-1",
            key: "1pmlyh"
          }
        ],
        ["path", { d: "M15 14a5 5 0 0 0-7.584 2", key: "5rb254" }],
        ["path", { d: "M9.964 6.825C8.019 7.977 9.5 13 8 15", key: "kbvsx9" }]
      ];
      var BicepsFlexed = createLucideIcon("biceps-flexed", __iconNode$mb);
      var __iconNode$ma = [
        ["circle", { cx: "18.5", cy: "17.5", r: "3.5", key: "15x4ox" }],
        ["circle", { cx: "5.5", cy: "17.5", r: "3.5", key: "1noe27" }],
        ["circle", { cx: "15", cy: "5", r: "1", key: "19l28e" }],
        ["path", { d: "M12 17.5V14l-3-3 4-3 2 3h2", key: "1npguv" }]
      ];
      var Bike = createLucideIcon("bike", __iconNode$ma);
      var __iconNode$m9 = [
        ["rect", { x: "14", y: "14", width: "4", height: "6", rx: "2", key: "p02svl" }],
        ["rect", { x: "6", y: "4", width: "4", height: "6", rx: "2", key: "xm4xkj" }],
        ["path", { d: "M6 20h4", key: "1i6q5t" }],
        ["path", { d: "M14 10h4", key: "ru81e7" }],
        ["path", { d: "M6 14h2v6", key: "16z9wg" }],
        ["path", { d: "M14 4h2v6", key: "1idq9u" }]
      ];
      var Binary = createLucideIcon("binary", __iconNode$m9);
      var __iconNode$m8 = [
        ["path", { d: "M10 10h4", key: "tcdvrf" }],
        ["path", { d: "M19 7V4a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v3", key: "3apit1" }],
        [
          "path",
          {
            d: "M20 21a2 2 0 0 0 2-2v-3.851c0-1.39-2-2.962-2-4.829V8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v11a2 2 0 0 0 2 2z",
            key: "rhpgnw"
          }
        ],
        ["path", { d: "M 22 16 L 2 16", key: "14lkq7" }],
        [
          "path",
          {
            d: "M4 21a2 2 0 0 1-2-2v-3.851c0-1.39 2-2.962 2-4.829V8a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v11a2 2 0 0 1-2 2z",
            key: "104b3k"
          }
        ],
        ["path", { d: "M9 7V4a1 1 0 0 0-1-1H6a1 1 0 0 0-1 1v3", key: "14fczp" }]
      ];
      var Binoculars = createLucideIcon("binoculars", __iconNode$m8);
      var __iconNode$m7 = [
        ["circle", { cx: "12", cy: "11.9", r: "2", key: "e8h31w" }],
        ["path", { d: "M6.7 3.4c-.9 2.5 0 5.2 2.2 6.7C6.5 9 3.7 9.6 2 11.6", key: "17bolr" }],
        ["path", { d: "m8.9 10.1 1.4.8", key: "15ezny" }],
        ["path", { d: "M17.3 3.4c.9 2.5 0 5.2-2.2 6.7 2.4-1.2 5.2-.6 6.9 1.5", key: "wtwa5u" }],
        ["path", { d: "m15.1 10.1-1.4.8", key: "1r0b28" }],
        ["path", { d: "M16.7 20.8c-2.6-.4-4.6-2.6-4.7-5.3-.2 2.6-2.1 4.8-4.7 5.2", key: "m7qszh" }],
        ["path", { d: "M12 13.9v1.6", key: "zfyyim" }],
        ["path", { d: "M13.5 5.4c-1-.2-2-.2-3 0", key: "1bi9q0" }],
        ["path", { d: "M17 16.4c.7-.7 1.2-1.6 1.5-2.5", key: "1rhjqw" }],
        ["path", { d: "M5.5 13.9c.3.9.8 1.8 1.5 2.5", key: "8gsud3" }]
      ];
      var Biohazard = createLucideIcon("biohazard", __iconNode$m7);
      var __iconNode$m6 = [
        ["path", { d: "M16 7h.01", key: "1kdx03" }],
        ["path", { d: "M3.4 18H12a8 8 0 0 0 8-8V7a4 4 0 0 0-7.28-2.3L2 20", key: "oj1oa8" }],
        ["path", { d: "m20 7 2 .5-2 .5", key: "12nv4d" }],
        ["path", { d: "M10 18v3", key: "1yea0a" }],
        ["path", { d: "M14 17.75V21", key: "1pymcb" }],
        ["path", { d: "M7 18a6 6 0 0 0 3.84-10.61", key: "1npnn0" }]
      ];
      var Bird = createLucideIcon("bird", __iconNode$m6);
      var __iconNode$m5 = [
        [
          "path",
          {
            d: "M11.767 19.089c4.924.868 6.14-6.025 1.216-6.894m-1.216 6.894L5.86 18.047m5.908 1.042-.347 1.97m1.563-8.864c4.924.869 6.14-6.025 1.215-6.893m-1.215 6.893-3.94-.694m5.155-6.2L8.29 4.26m5.908 1.042.348-1.97M7.48 20.364l3.126-17.727",
            key: "yr8idg"
          }
        ]
      ];
      var Bitcoin = createLucideIcon("bitcoin", __iconNode$m5);
      var __iconNode$m4 = [
        ["path", { d: "M3 3h18", key: "o7r712" }],
        ["path", { d: "M20 7H8", key: "gd2fo2" }],
        ["path", { d: "M20 11H8", key: "1ynp89" }],
        ["path", { d: "M10 19h10", key: "19hjk5" }],
        ["path", { d: "M8 15h12", key: "1yqzne" }],
        ["path", { d: "M4 3v14", key: "fggqzn" }],
        ["circle", { cx: "4", cy: "19", r: "2", key: "p3m9r0" }]
      ];
      var Blinds = createLucideIcon("blinds", __iconNode$m4);
      var __iconNode$m3 = [
        ["circle", { cx: "9", cy: "9", r: "7", key: "p2h5vp" }],
        ["circle", { cx: "15", cy: "15", r: "7", key: "19ennj" }]
      ];
      var Blend = createLucideIcon("blend", __iconNode$m3);
      var __iconNode$m2 = [
        ["rect", { width: "7", height: "7", x: "14", y: "3", rx: "1", key: "6d4xhi" }],
        [
          "path",
          {
            d: "M10 21V8a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1H3",
            key: "1fpvtg"
          }
        ]
      ];
      var Blocks = createLucideIcon("blocks", __iconNode$m2);
      var __iconNode$m1 = [
        ["path", { d: "m7 7 10 10-5 5V2l5 5L7 17", key: "1q5490" }],
        ["line", { x1: "18", x2: "21", y1: "12", y2: "12", key: "1rsjjs" }],
        ["line", { x1: "3", x2: "6", y1: "12", y2: "12", key: "11yl8c" }]
      ];
      var BluetoothConnected = createLucideIcon("bluetooth-connected", __iconNode$m1);
      var __iconNode$m0 = [
        ["path", { d: "m17 17-5 5V12l-5 5", key: "v5aci6" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M14.5 9.5 17 7l-5-5v4.5", key: "1kddfz" }]
      ];
      var BluetoothOff = createLucideIcon("bluetooth-off", __iconNode$m0);
      var __iconNode$l$ = [
        ["path", { d: "m7 7 10 10-5 5V2l5 5L7 17", key: "1q5490" }],
        ["path", { d: "M20.83 14.83a4 4 0 0 0 0-5.66", key: "k8tn1j" }],
        ["path", { d: "M18 12h.01", key: "yjnet6" }]
      ];
      var BluetoothSearching = createLucideIcon("bluetooth-searching", __iconNode$l$);
      var __iconNode$l_ = [["path", { d: "m7 7 10 10-5 5V2l5 5L7 17", key: "1q5490" }]];
      var Bluetooth = createLucideIcon("bluetooth", __iconNode$l_);
      var __iconNode$lZ = [
        [
          "path",
          { d: "M6 12h9a4 4 0 0 1 0 8H7a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h7a4 4 0 0 1 0 8", key: "mg9rjx" }
        ]
      ];
      var Bold = createLucideIcon("bold", __iconNode$lZ);
      var __iconNode$lY = [
        [
          "path",
          {
            d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
            key: "yt0hxn"
          }
        ],
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }]
      ];
      var Bolt = createLucideIcon("bolt", __iconNode$lY);
      var __iconNode$lX = [
        ["circle", { cx: "11", cy: "13", r: "9", key: "hd149" }],
        [
          "path",
          {
            d: "M14.35 4.65 16.3 2.7a2.41 2.41 0 0 1 3.4 0l1.6 1.6a2.4 2.4 0 0 1 0 3.4l-1.95 1.95",
            key: "jp4j1b"
          }
        ],
        ["path", { d: "m22 2-1.5 1.5", key: "ay92ug" }]
      ];
      var Bomb = createLucideIcon("bomb", __iconNode$lX);
      var __iconNode$lW = [
        [
          "path",
          {
            d: "M17 10c.7-.7 1.69 0 2.5 0a2.5 2.5 0 1 0 0-5 .5.5 0 0 1-.5-.5 2.5 2.5 0 1 0-5 0c0 .81.7 1.8 0 2.5l-7 7c-.7.7-1.69 0-2.5 0a2.5 2.5 0 0 0 0 5c.28 0 .5.22.5.5a2.5 2.5 0 1 0 5 0c0-.81-.7-1.8 0-2.5Z",
            key: "w610uw"
          }
        ]
      ];
      var Bone = createLucideIcon("bone", __iconNode$lW);
      var __iconNode$lV = [
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ],
        ["path", { d: "m8 13 4-7 4 7", key: "4rari8" }],
        ["path", { d: "M9.1 11h5.7", key: "1gkovt" }]
      ];
      var BookA = createLucideIcon("book-a", __iconNode$lV);
      var __iconNode$lU = [
        ["path", { d: "M12 6v7", key: "1f6ttz" }],
        ["path", { d: "M16 8v3", key: "gejaml" }],
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ],
        ["path", { d: "M8 8v3", key: "1qzp49" }]
      ];
      var BookAudio = createLucideIcon("book-audio", __iconNode$lU);
      var __iconNode$lT = [
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ],
        ["path", { d: "m9 9.5 2 2 4-4", key: "1dth82" }]
      ];
      var BookCheck = createLucideIcon("book-check", __iconNode$lT);
      var __iconNode$lS = [
        ["path", { d: "M2 16V4a2 2 0 0 1 2-2h11", key: "spzkk5" }],
        [
          "path",
          {
            d: "M22 18H11a2 2 0 1 0 0 4h10.5a.5.5 0 0 0 .5-.5v-15a.5.5 0 0 0-.5-.5H11a2 2 0 0 0-2 2v12",
            key: "1wz07i"
          }
        ],
        ["path", { d: "M5 14H4a2 2 0 1 0 0 4h1", key: "16gqf9" }]
      ];
      var BookCopy = createLucideIcon("book-copy", __iconNode$lS);
      var __iconNode$lR = [
        ["path", { d: "M12 17h1.5", key: "1gkc67" }],
        ["path", { d: "M12 22h1.5", key: "1my7sn" }],
        ["path", { d: "M12 2h1.5", key: "19tvb7" }],
        ["path", { d: "M17.5 22H19a1 1 0 0 0 1-1", key: "10akbh" }],
        ["path", { d: "M17.5 2H19a1 1 0 0 1 1 1v1.5", key: "1vrfjs" }],
        ["path", { d: "M20 14v3h-2.5", key: "1naeju" }],
        ["path", { d: "M20 8.5V10", key: "1ctpfu" }],
        ["path", { d: "M4 10V8.5", key: "1o3zg5" }],
        ["path", { d: "M4 19.5V14", key: "ob81pf" }],
        ["path", { d: "M4 4.5A2.5 2.5 0 0 1 6.5 2H8", key: "s8vcyb" }],
        ["path", { d: "M8 22H6.5a1 1 0 0 1 0-5H8", key: "1cu73q" }]
      ];
      var BookDashed = createLucideIcon("book-dashed", __iconNode$lR);
      var __iconNode$lQ = [
        ["path", { d: "M12 13V7", key: "h0r20n" }],
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ],
        ["path", { d: "m9 10 3 3 3-3", key: "zt5b4y" }]
      ];
      var BookDown = createLucideIcon("book-down", __iconNode$lQ);
      var __iconNode$lP = [
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ],
        ["path", { d: "M8 12v-2a4 4 0 0 1 8 0v2", key: "1vsqkj" }],
        ["circle", { cx: "15", cy: "12", r: "1", key: "1tmaij" }],
        ["circle", { cx: "9", cy: "12", r: "1", key: "1vctgf" }]
      ];
      var BookHeadphones = createLucideIcon("book-headphones", __iconNode$lP);
      var __iconNode$lO = [
        [
          "path",
          {
            d: "M16 8.2A2.22 2.22 0 0 0 13.8 6c-.8 0-1.4.3-1.8.9-.4-.6-1-.9-1.8-.9A2.22 2.22 0 0 0 8 8.2c0 .6.3 1.2.7 1.6A226.652 226.652 0 0 0 12 13a404 404 0 0 0 3.3-3.1 2.413 2.413 0 0 0 .7-1.7",
            key: "1t75a8"
          }
        ],
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ]
      ];
      var BookHeart = createLucideIcon("book-heart", __iconNode$lO);
      var __iconNode$lN = [
        ["path", { d: "m20 13.7-2.1-2.1a2 2 0 0 0-2.8 0L9.7 17", key: "q6ojf0" }],
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ],
        ["circle", { cx: "10", cy: "8", r: "2", key: "2qkj4p" }]
      ];
      var BookImage = createLucideIcon("book-image", __iconNode$lN);
      var __iconNode$lM = [
        ["path", { d: "M18 6V4a2 2 0 1 0-4 0v2", key: "1aquzs" }],
        ["path", { d: "M20 15v6a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20", key: "1rkj32" }],
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H10", key: "18wgow" }],
        ["rect", { x: "12", y: "6", width: "8", height: "5", rx: "1", key: "73l30o" }]
      ];
      var BookLock = createLucideIcon("book-lock", __iconNode$lM);
      var __iconNode$lL = [
        ["path", { d: "m19 3 1 1", key: "ze14oc" }],
        ["path", { d: "m20 2-4.5 4.5", key: "1sppr8" }],
        ["path", { d: "M20 7.898V21a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20", key: "1xzogz" }],
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2h7.844", key: "vtdg6h" }],
        ["circle", { cx: "14", cy: "8", r: "2", key: "u49eql" }]
      ];
      var BookKey = createLucideIcon("book-key", __iconNode$lL);
      var __iconNode$lK = [
        ["path", { d: "M10 2v8l3-3 3 3V2", key: "sqw3rj" }],
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ]
      ];
      var BookMarked = createLucideIcon("book-marked", __iconNode$lK);
      var __iconNode$lJ = [
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ],
        ["path", { d: "M9 10h6", key: "9gxzsh" }]
      ];
      var BookMinus = createLucideIcon("book-minus", __iconNode$lJ);
      var __iconNode$lI = [
        ["path", { d: "M12 21V7", key: "gj6g52" }],
        ["path", { d: "m16 12 2 2 4-4", key: "mdajum" }],
        [
          "path",
          {
            d: "M22 6V4a1 1 0 0 0-1-1h-5a4 4 0 0 0-4 4 4 4 0 0 0-4-4H3a1 1 0 0 0-1 1v13a1 1 0 0 0 1 1h6a3 3 0 0 1 3 3 3 3 0 0 1 3-3h6a1 1 0 0 0 1-1v-1.3",
            key: "8arnkb"
          }
        ]
      ];
      var BookOpenCheck = createLucideIcon("book-open-check", __iconNode$lI);
      var __iconNode$lH = [
        ["path", { d: "M12 7v14", key: "1akyts" }],
        ["path", { d: "M16 12h2", key: "7q9ll5" }],
        ["path", { d: "M16 8h2", key: "msurwy" }],
        [
          "path",
          {
            d: "M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z",
            key: "ruj8y"
          }
        ],
        ["path", { d: "M6 12h2", key: "32wvfc" }],
        ["path", { d: "M6 8h2", key: "30oboj" }]
      ];
      var BookOpenText = createLucideIcon("book-open-text", __iconNode$lH);
      var __iconNode$lG = [
        ["path", { d: "M12 7v14", key: "1akyts" }],
        [
          "path",
          {
            d: "M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z",
            key: "ruj8y"
          }
        ]
      ];
      var BookOpen4 = createLucideIcon("book-open", __iconNode$lG);
      var __iconNode$lF = [
        ["path", { d: "M12 7v6", key: "lw1j43" }],
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ],
        ["path", { d: "M9 10h6", key: "9gxzsh" }]
      ];
      var BookPlus = createLucideIcon("book-plus", __iconNode$lF);
      var __iconNode$lE = [
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ],
        ["path", { d: "M8 11h8", key: "vwpz6n" }],
        ["path", { d: "M8 7h6", key: "1f0q6e" }]
      ];
      var BookText3 = createLucideIcon("book-text", __iconNode$lE);
      var __iconNode$lD = [
        ["path", { d: "M10 13h4", key: "ytezjc" }],
        ["path", { d: "M12 6v7", key: "1f6ttz" }],
        ["path", { d: "M16 8V6H8v2", key: "x8j6u4" }],
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ]
      ];
      var BookType = createLucideIcon("book-type", __iconNode$lD);
      var __iconNode$lC = [
        ["path", { d: "M12 13V7", key: "h0r20n" }],
        ["path", { d: "M18 2h1a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20", key: "161d7n" }],
        ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2", key: "1lorq7" }],
        ["path", { d: "m9 10 3-3 3 3", key: "11gsxs" }],
        ["path", { d: "m9 5 3-3 3 3", key: "l8vdw6" }]
      ];
      var BookUp2 = createLucideIcon("book-up-2", __iconNode$lC);
      var __iconNode$lB = [
        ["path", { d: "M15 13a3 3 0 1 0-6 0", key: "10j68g" }],
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ],
        ["circle", { cx: "12", cy: "8", r: "2", key: "1822b1" }]
      ];
      var BookUser = createLucideIcon("book-user", __iconNode$lB);
      var __iconNode$lA = [
        ["path", { d: "M12 13V7", key: "h0r20n" }],
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ],
        ["path", { d: "m9 10 3-3 3 3", key: "11gsxs" }]
      ];
      var BookUp = createLucideIcon("book-up", __iconNode$lA);
      var __iconNode$lz = [
        ["path", { d: "m14.5 7-5 5", key: "dy991v" }],
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ],
        ["path", { d: "m9.5 7 5 5", key: "s45iea" }]
      ];
      var BookX = createLucideIcon("book-x", __iconNode$lz);
      var __iconNode$ly = [
        [
          "path",
          {
            d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
            key: "k3hazp"
          }
        ]
      ];
      var Book = createLucideIcon("book", __iconNode$ly);
      var __iconNode$lx = [
        ["path", { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2Z", key: "169p4p" }],
        ["path", { d: "m9 10 2 2 4-4", key: "1gnqz4" }]
      ];
      var BookmarkCheck = createLucideIcon("bookmark-check", __iconNode$lx);
      var __iconNode$lw = [
        ["path", { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z", key: "1fy3hk" }],
        ["line", { x1: "12", x2: "12", y1: "7", y2: "13", key: "1cppfj" }],
        ["line", { x1: "15", x2: "9", y1: "10", y2: "10", key: "1gty7f" }]
      ];
      var BookmarkPlus = createLucideIcon("bookmark-plus", __iconNode$lw);
      var __iconNode$lv = [
        ["path", { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z", key: "1fy3hk" }],
        ["line", { x1: "15", x2: "9", y1: "10", y2: "10", key: "1gty7f" }]
      ];
      var BookmarkMinus = createLucideIcon("bookmark-minus", __iconNode$lv);
      var __iconNode$lu = [
        ["path", { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2Z", key: "169p4p" }],
        ["path", { d: "m14.5 7.5-5 5", key: "3lb6iw" }],
        ["path", { d: "m9.5 7.5 5 5", key: "ko136h" }]
      ];
      var BookmarkX = createLucideIcon("bookmark-x", __iconNode$lu);
      var __iconNode$lt = [
        ["path", { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z", key: "1fy3hk" }]
      ];
      var Bookmark2 = createLucideIcon("bookmark", __iconNode$lt);
      var __iconNode$ls = [
        ["path", { d: "M4 9V5a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4", key: "vvzvr1" }],
        ["path", { d: "M8 8v1", key: "xcqmfk" }],
        ["path", { d: "M12 8v1", key: "1rj8u4" }],
        ["path", { d: "M16 8v1", key: "1q12zr" }],
        ["rect", { width: "20", height: "12", x: "2", y: "9", rx: "2", key: "igpb89" }],
        ["circle", { cx: "8", cy: "15", r: "2", key: "fa4a8s" }],
        ["circle", { cx: "16", cy: "15", r: "2", key: "14c3ya" }]
      ];
      var BoomBox = createLucideIcon("boom-box", __iconNode$ls);
      var __iconNode$lr = [
        ["path", { d: "M12 6V2H8", key: "1155em" }],
        ["path", { d: "m8 18-4 4V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2Z", key: "w2lp3e" }],
        ["path", { d: "M2 12h2", key: "1t8f8n" }],
        ["path", { d: "M9 11v2", key: "1ueba0" }],
        ["path", { d: "M15 11v2", key: "i11awn" }],
        ["path", { d: "M20 12h2", key: "1q8mjw" }]
      ];
      var BotMessageSquare = createLucideIcon("bot-message-square", __iconNode$lr);
      var __iconNode$lq = [
        ["path", { d: "M13.67 8H18a2 2 0 0 1 2 2v4.33", key: "7az073" }],
        ["path", { d: "M2 14h2", key: "vft8re" }],
        ["path", { d: "M20 14h2", key: "4cs60a" }],
        ["path", { d: "M22 22 2 2", key: "1r8tn9" }],
        ["path", { d: "M8 8H6a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 1.414-.586", key: "s09a7a" }],
        ["path", { d: "M9 13v2", key: "rq6x2g" }],
        ["path", { d: "M9.67 4H12v2.33", key: "110xot" }]
      ];
      var BotOff = createLucideIcon("bot-off", __iconNode$lq);
      var __iconNode$lp = [
        ["path", { d: "M12 8V4H8", key: "hb8ula" }],
        ["rect", { width: "16", height: "12", x: "4", y: "8", rx: "2", key: "enze0r" }],
        ["path", { d: "M2 14h2", key: "vft8re" }],
        ["path", { d: "M20 14h2", key: "4cs60a" }],
        ["path", { d: "M15 13v2", key: "1xurst" }],
        ["path", { d: "M9 13v2", key: "rq6x2g" }]
      ];
      var Bot = createLucideIcon("bot", __iconNode$lp);
      var __iconNode$lo = [
        ["path", { d: "M17 3h4v4", key: "19p9u1" }],
        [
          "path",
          { d: "M18.575 11.082a13 13 0 0 1 1.048 9.027 1.17 1.17 0 0 1-1.914.597L14 17", key: "12t3w9" }
        ],
        ["path", { d: "M7 10 3.29 6.29a1.17 1.17 0 0 1 .6-1.91 13 13 0 0 1 9.03 1.05", key: "ogng5l" }],
        [
          "path",
          {
            d: "M7 14a1.7 1.7 0 0 0-1.207.5l-2.646 2.646A.5.5 0 0 0 3.5 18H5a1 1 0 0 1 1 1v1.5a.5.5 0 0 0 .854.354L9.5 18.207A1.7 1.7 0 0 0 10 17v-2a1 1 0 0 0-1-1z",
            key: "8v3fy2"
          }
        ],
        ["path", { d: "M9.707 14.293 21 3", key: "ydm3bn" }]
      ];
      var BowArrow = createLucideIcon("bow-arrow", __iconNode$lo);
      var __iconNode$ln = [
        [
          "path",
          {
            d: "M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z",
            key: "hh9hay"
          }
        ],
        ["path", { d: "m3.3 7 8.7 5 8.7-5", key: "g66t2b" }],
        ["path", { d: "M12 22V12", key: "d0xqtd" }]
      ];
      var Box = createLucideIcon("box", __iconNode$ln);
      var __iconNode$lm = [
        [
          "path",
          {
            d: "M2.97 12.92A2 2 0 0 0 2 14.63v3.24a2 2 0 0 0 .97 1.71l3 1.8a2 2 0 0 0 2.06 0L12 19v-5.5l-5-3-4.03 2.42Z",
            key: "lc1i9w"
          }
        ],
        ["path", { d: "m7 16.5-4.74-2.85", key: "1o9zyk" }],
        ["path", { d: "m7 16.5 5-3", key: "va8pkn" }],
        ["path", { d: "M7 16.5v5.17", key: "jnp8gn" }],
        [
          "path",
          {
            d: "M12 13.5V19l3.97 2.38a2 2 0 0 0 2.06 0l3-1.8a2 2 0 0 0 .97-1.71v-3.24a2 2 0 0 0-.97-1.71L17 10.5l-5 3Z",
            key: "8zsnat"
          }
        ],
        ["path", { d: "m17 16.5-5-3", key: "8arw3v" }],
        ["path", { d: "m17 16.5 4.74-2.85", key: "8rfmw" }],
        ["path", { d: "M17 16.5v5.17", key: "k6z78m" }],
        [
          "path",
          {
            d: "M7.97 4.42A2 2 0 0 0 7 6.13v4.37l5 3 5-3V6.13a2 2 0 0 0-.97-1.71l-3-1.8a2 2 0 0 0-2.06 0l-3 1.8Z",
            key: "1xygjf"
          }
        ],
        ["path", { d: "M12 8 7.26 5.15", key: "1vbdud" }],
        ["path", { d: "m12 8 4.74-2.85", key: "3rx089" }],
        ["path", { d: "M12 13.5V8", key: "1io7kd" }]
      ];
      var Boxes = createLucideIcon("boxes", __iconNode$lm);
      var __iconNode$ll = [
        [
          "path",
          { d: "M8 3H7a2 2 0 0 0-2 2v5a2 2 0 0 1-2 2 2 2 0 0 1 2 2v5c0 1.1.9 2 2 2h1", key: "ezmyqa" }
        ],
        [
          "path",
          {
            d: "M16 21h1a2 2 0 0 0 2-2v-5c0-1.1.9-2 2-2a2 2 0 0 1-2-2V5a2 2 0 0 0-2-2h-1",
            key: "e1hn23"
          }
        ]
      ];
      var Braces = createLucideIcon("braces", __iconNode$ll);
      var __iconNode$lk = [
        ["path", { d: "M16 3h2a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1h-2", key: "tum69e" }],
        ["path", { d: "M8 21H6a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h2", key: "z7wn0n" }]
      ];
      var Brackets = createLucideIcon("brackets", __iconNode$lk);
      var __iconNode$lj = [
        [
          "path",
          {
            d: "M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z",
            key: "l5xja"
          }
        ],
        ["path", { d: "M9 13a4.5 4.5 0 0 0 3-4", key: "10igwf" }],
        ["path", { d: "M6.003 5.125A3 3 0 0 0 6.401 6.5", key: "105sqy" }],
        ["path", { d: "M3.477 10.896a4 4 0 0 1 .585-.396", key: "ql3yin" }],
        ["path", { d: "M6 18a4 4 0 0 1-1.967-.516", key: "2e4loj" }],
        ["path", { d: "M12 13h4", key: "1ku699" }],
        ["path", { d: "M12 18h6a2 2 0 0 1 2 2v1", key: "105ag5" }],
        ["path", { d: "M12 8h8", key: "1lhi5i" }],
        ["path", { d: "M16 8V5a2 2 0 0 1 2-2", key: "u6izg6" }],
        ["circle", { cx: "16", cy: "13", r: ".5", key: "ry7gng" }],
        ["circle", { cx: "18", cy: "3", r: ".5", key: "1aiba7" }],
        ["circle", { cx: "20", cy: "21", r: ".5", key: "yhc1fs" }],
        ["circle", { cx: "20", cy: "8", r: ".5", key: "1e43v0" }]
      ];
      var BrainCircuit = createLucideIcon("brain-circuit", __iconNode$lj);
      var __iconNode$li = [
        ["path", { d: "m10.852 14.772-.383.923", key: "11vil6" }],
        ["path", { d: "m10.852 9.228-.383-.923", key: "1fjppe" }],
        ["path", { d: "m13.148 14.772.382.924", key: "je3va1" }],
        ["path", { d: "m13.531 8.305-.383.923", key: "18epck" }],
        ["path", { d: "m14.772 10.852.923-.383", key: "k9m8cz" }],
        ["path", { d: "m14.772 13.148.923.383", key: "1xvhww" }],
        [
          "path",
          {
            d: "M17.598 6.5A3 3 0 1 0 12 5a3 3 0 0 0-5.63-1.446 3 3 0 0 0-.368 1.571 4 4 0 0 0-2.525 5.771",
            key: "jcbbz1"
          }
        ],
        ["path", { d: "M17.998 5.125a4 4 0 0 1 2.525 5.771", key: "1kkn7e" }],
        ["path", { d: "M19.505 10.294a4 4 0 0 1-1.5 7.706", key: "18bmuc" }],
        [
          "path",
          {
            d: "M4.032 17.483A4 4 0 0 0 11.464 20c.18-.311.892-.311 1.072 0a4 4 0 0 0 7.432-2.516",
            key: "uozx0d"
          }
        ],
        ["path", { d: "M4.5 10.291A4 4 0 0 0 6 18", key: "whdemb" }],
        ["path", { d: "M6.002 5.125a3 3 0 0 0 .4 1.375", key: "1kqy2g" }],
        ["path", { d: "m9.228 10.852-.923-.383", key: "1wtb30" }],
        ["path", { d: "m9.228 13.148-.923.383", key: "1a830x" }],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
      ];
      var BrainCog = createLucideIcon("brain-cog", __iconNode$li);
      var __iconNode$lh = [
        [
          "path",
          {
            d: "M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z",
            key: "l5xja"
          }
        ],
        [
          "path",
          {
            d: "M12 5a3 3 0 1 1 5.997.125 4 4 0 0 1 2.526 5.77 4 4 0 0 1-.556 6.588A4 4 0 1 1 12 18Z",
            key: "ep3f8r"
          }
        ],
        ["path", { d: "M15 13a4.5 4.5 0 0 1-3-4 4.5 4.5 0 0 1-3 4", key: "1p4c4q" }],
        ["path", { d: "M17.599 6.5a3 3 0 0 0 .399-1.375", key: "tmeiqw" }],
        ["path", { d: "M6.003 5.125A3 3 0 0 0 6.401 6.5", key: "105sqy" }],
        ["path", { d: "M3.477 10.896a4 4 0 0 1 .585-.396", key: "ql3yin" }],
        ["path", { d: "M19.938 10.5a4 4 0 0 1 .585.396", key: "1qfode" }],
        ["path", { d: "M6 18a4 4 0 0 1-1.967-.516", key: "2e4loj" }],
        ["path", { d: "M19.967 17.484A4 4 0 0 1 18 18", key: "159ez6" }]
      ];
      var Brain = createLucideIcon("brain", __iconNode$lh);
      var __iconNode$lg = [
        ["path", { d: "M16 3v2.107", key: "gq8xun" }],
        [
          "path",
          {
            d: "M17 9c1 3 2.5 3.5 3.5 4.5A5 5 0 0 1 22 17a5 5 0 0 1-10 0c0-.3 0-.6.1-.9a2 2 0 1 0 3.3-2C13 11.5 16 9 17 9",
            key: "1l2pih"
          }
        ],
        [
          "path",
          { d: "M21 8.274V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.938", key: "jrnqjp" }
        ],
        ["path", { d: "M3 15h5.253", key: "xqg7rb" }],
        ["path", { d: "M3 9h8.228", key: "1ppb70" }],
        ["path", { d: "M8 15v6", key: "1stoo3" }],
        ["path", { d: "M8 3v6", key: "vlvjmk" }]
      ];
      var BrickWallFire = createLucideIcon("brick-wall-fire", __iconNode$lg);
      var __iconNode$lf = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M12 9v6", key: "199k2o" }],
        ["path", { d: "M16 15v6", key: "8rj2es" }],
        ["path", { d: "M16 3v6", key: "1j6rpj" }],
        ["path", { d: "M3 15h18", key: "5xshup" }],
        ["path", { d: "M3 9h18", key: "1pudct" }],
        ["path", { d: "M8 15v6", key: "1stoo3" }],
        ["path", { d: "M8 3v6", key: "vlvjmk" }]
      ];
      var BrickWall = createLucideIcon("brick-wall", __iconNode$lf);
      var __iconNode$le = [
        ["path", { d: "M12 12h.01", key: "1mp3jc" }],
        ["path", { d: "M16 6V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2", key: "1ksdt3" }],
        ["path", { d: "M22 13a18.15 18.15 0 0 1-20 0", key: "12hx5q" }],
        ["rect", { width: "20", height: "14", x: "2", y: "6", rx: "2", key: "i6l2r4" }]
      ];
      var BriefcaseBusiness = createLucideIcon("briefcase-business", __iconNode$le);
      var __iconNode$ld = [
        ["path", { d: "M10 20v2", key: "1n8e1g" }],
        ["path", { d: "M14 20v2", key: "1lq872" }],
        ["path", { d: "M18 20v2", key: "10uadw" }],
        ["path", { d: "M21 20H3", key: "kdqkdp" }],
        ["path", { d: "M6 20v2", key: "a9bc87" }],
        ["path", { d: "M8 16V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v12", key: "17n9tx" }],
        ["rect", { x: "4", y: "6", width: "16", height: "10", rx: "2", key: "1097i5" }]
      ];
      var BriefcaseConveyorBelt = createLucideIcon("briefcase-conveyor-belt", __iconNode$ld);
      var __iconNode$lc = [
        ["path", { d: "M12 11v4", key: "a6ujw6" }],
        ["path", { d: "M14 13h-4", key: "1pl8zg" }],
        ["path", { d: "M16 6V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2", key: "1ksdt3" }],
        ["path", { d: "M18 6v14", key: "1mu4gy" }],
        ["path", { d: "M6 6v14", key: "1s15cj" }],
        ["rect", { width: "20", height: "14", x: "2", y: "6", rx: "2", key: "i6l2r4" }]
      ];
      var BriefcaseMedical = createLucideIcon("briefcase-medical", __iconNode$lc);
      var __iconNode$lb = [
        ["path", { d: "M16 20V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16", key: "jecpp" }],
        ["rect", { width: "20", height: "14", x: "2", y: "6", rx: "2", key: "i6l2r4" }]
      ];
      var Briefcase = createLucideIcon("briefcase", __iconNode$lb);
      var __iconNode$la = [
        ["rect", { x: "8", y: "8", width: "8", height: "8", rx: "2", key: "yj20xf" }],
        ["path", { d: "M4 10a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2", key: "1ltk23" }],
        ["path", { d: "M14 20a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2", key: "1q24h9" }]
      ];
      var BringToFront = createLucideIcon("bring-to-front", __iconNode$la);
      var __iconNode$l9 = [
        ["path", { d: "m9.06 11.9 8.07-8.06a2.85 2.85 0 1 1 4.03 4.03l-8.06 8.08", key: "1styjt" }],
        [
          "path",
          {
            d: "M7.07 14.94c-1.66 0-3 1.35-3 3.02 0 1.33-2.5 1.52-2 2.02 1.08 1.1 2.49 2.02 4 2.02 2.2 0 4-1.8 4-4.04a3.01 3.01 0 0 0-3-3.02z",
            key: "z0l1mu"
          }
        ]
      ];
      var Brush = createLucideIcon("brush", __iconNode$l9);
      var __iconNode$l8 = [
        ["path", { d: "M7.2 14.8a2 2 0 0 1 2 2", key: "1tw9gg" }],
        ["circle", { cx: "18.5", cy: "8.5", r: "3.5", key: "1wadoa" }],
        ["circle", { cx: "7.5", cy: "16.5", r: "5.5", key: "6mdt3g" }],
        ["circle", { cx: "7.5", cy: "4.5", r: "2.5", key: "637s54" }]
      ];
      var Bubbles = createLucideIcon("bubbles", __iconNode$l8);
      var __iconNode$l7 = [
        ["path", { d: "M15 7.13V6a3 3 0 0 0-5.14-2.1L8 2", key: "vl8zik" }],
        ["path", { d: "M14.12 3.88 16 2", key: "qol33r" }],
        ["path", { d: "M22 13h-4v-2a4 4 0 0 0-4-4h-1.3", key: "1ou0bd" }],
        ["path", { d: "M20.97 5c0 2.1-1.6 3.8-3.5 4", key: "18gb23" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M7.7 7.7A4 4 0 0 0 6 11v3a6 6 0 0 0 11.13 3.13", key: "1njkjs" }],
        ["path", { d: "M12 20v-8", key: "i3yub9" }],
        ["path", { d: "M6 13H2", key: "82j7cp" }],
        ["path", { d: "M3 21c0-2.1 1.7-3.9 3.8-4", key: "4p0ekp" }]
      ];
      var BugOff = createLucideIcon("bug-off", __iconNode$l7);
      var __iconNode$l6 = [
        [
          "path",
          {
            d: "M12.765 21.522a.5.5 0 0 1-.765-.424v-8.196a.5.5 0 0 1 .765-.424l5.878 3.674a1 1 0 0 1 0 1.696z",
            key: "17shqo"
          }
        ],
        ["path", { d: "M14.12 3.88 16 2", key: "qol33r" }],
        ["path", { d: "M18 11a4 4 0 0 0-4-4h-4a4 4 0 0 0-4 4v3a6.1 6.1 0 0 0 2 4.5", key: "1tjixy" }],
        ["path", { d: "M20.97 5c0 2.1-1.6 3.8-3.5 4", key: "18gb23" }],
        ["path", { d: "M3 21c0-2.1 1.7-3.9 3.8-4", key: "4p0ekp" }],
        ["path", { d: "M6 13H2", key: "82j7cp" }],
        ["path", { d: "M6.53 9C4.6 8.8 3 7.1 3 5", key: "32zzws" }],
        ["path", { d: "m8 2 1.88 1.88", key: "fmnt4t" }],
        ["path", { d: "M9 7.13v-1a3.003 3.003 0 1 1 6 0v1", key: "d7y7pr" }]
      ];
      var BugPlay = createLucideIcon("bug-play", __iconNode$l6);
      var __iconNode$l5 = [
        ["path", { d: "m8 2 1.88 1.88", key: "fmnt4t" }],
        ["path", { d: "M14.12 3.88 16 2", key: "qol33r" }],
        ["path", { d: "M9 7.13v-1a3.003 3.003 0 1 1 6 0v1", key: "d7y7pr" }],
        [
          "path",
          {
            d: "M12 20c-3.3 0-6-2.7-6-6v-3a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v3c0 3.3-2.7 6-6 6",
            key: "xs1cw7"
          }
        ],
        ["path", { d: "M12 20v-9", key: "1qisl0" }],
        ["path", { d: "M6.53 9C4.6 8.8 3 7.1 3 5", key: "32zzws" }],
        ["path", { d: "M6 13H2", key: "82j7cp" }],
        ["path", { d: "M3 21c0-2.1 1.7-3.9 3.8-4", key: "4p0ekp" }],
        ["path", { d: "M20.97 5c0 2.1-1.6 3.8-3.5 4", key: "18gb23" }],
        ["path", { d: "M22 13h-4", key: "1jl80f" }],
        ["path", { d: "M17.2 17c2.1.1 3.8 1.9 3.8 4", key: "k3fwyw" }]
      ];
      var Bug = createLucideIcon("bug", __iconNode$l5);
      var __iconNode$l4 = [
        ["path", { d: "M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z", key: "1b4qmf" }],
        ["path", { d: "M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2", key: "i71pzd" }],
        ["path", { d: "M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2", key: "10jefs" }],
        ["path", { d: "M10 6h4", key: "1itunk" }],
        ["path", { d: "M10 10h4", key: "tcdvrf" }],
        ["path", { d: "M10 14h4", key: "kelpxr" }],
        ["path", { d: "M10 18h4", key: "1ulq68" }]
      ];
      var Building2 = createLucideIcon("building-2", __iconNode$l4);
      var __iconNode$l3 = [
        ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", ry: "2", key: "76otgf" }],
        ["path", { d: "M9 22v-4h6v4", key: "r93iot" }],
        ["path", { d: "M8 6h.01", key: "1dz90k" }],
        ["path", { d: "M16 6h.01", key: "1x0f13" }],
        ["path", { d: "M12 6h.01", key: "1vi96p" }],
        ["path", { d: "M12 10h.01", key: "1nrarc" }],
        ["path", { d: "M12 14h.01", key: "1etili" }],
        ["path", { d: "M16 10h.01", key: "1m94wz" }],
        ["path", { d: "M16 14h.01", key: "1gbofw" }],
        ["path", { d: "M8 10h.01", key: "19clt8" }],
        ["path", { d: "M8 14h.01", key: "6423bh" }]
      ];
      var Building3 = createLucideIcon("building", __iconNode$l3);
      var __iconNode$l2 = [
        ["path", { d: "M4 6 2 7", key: "1mqr15" }],
        ["path", { d: "M10 6h4", key: "1itunk" }],
        ["path", { d: "m22 7-2-1", key: "1umjhc" }],
        ["rect", { width: "16", height: "16", x: "4", y: "3", rx: "2", key: "1wxw4b" }],
        ["path", { d: "M4 11h16", key: "mpoxn0" }],
        ["path", { d: "M8 15h.01", key: "a7atzg" }],
        ["path", { d: "M16 15h.01", key: "rnfrdf" }],
        ["path", { d: "M6 19v2", key: "1loha6" }],
        ["path", { d: "M18 21v-2", key: "sqyl04" }]
      ];
      var BusFront = createLucideIcon("bus-front", __iconNode$l2);
      var __iconNode$l1 = [
        ["path", { d: "M8 6v6", key: "18i7km" }],
        ["path", { d: "M15 6v6", key: "1sg6z9" }],
        ["path", { d: "M2 12h19.6", key: "de5uta" }],
        [
          "path",
          {
            d: "M18 18h3s.5-1.7.8-2.8c.1-.4.2-.8.2-1.2 0-.4-.1-.8-.2-1.2l-1.4-5C20.1 6.8 19.1 6 18 6H4a2 2 0 0 0-2 2v10h3",
            key: "1wwztk"
          }
        ],
        ["circle", { cx: "7", cy: "18", r: "2", key: "19iecd" }],
        ["path", { d: "M9 18h5", key: "lrx6i" }],
        ["circle", { cx: "16", cy: "18", r: "2", key: "1v4tcr" }]
      ];
      var Bus = createLucideIcon("bus", __iconNode$l1);
      var __iconNode$l0 = [
        ["path", { d: "M10 3h.01", key: "lbucoy" }],
        ["path", { d: "M14 2h.01", key: "1k8aa1" }],
        ["path", { d: "m2 9 20-5", key: "1kz0j5" }],
        ["path", { d: "M12 12V6.5", key: "1vbrij" }],
        ["rect", { width: "16", height: "10", x: "4", y: "12", rx: "3", key: "if91er" }],
        ["path", { d: "M9 12v5", key: "3anwtq" }],
        ["path", { d: "M15 12v5", key: "5xh3zn" }],
        ["path", { d: "M4 17h16", key: "g4d7ey" }]
      ];
      var CableCar = createLucideIcon("cable-car", __iconNode$l0);
      var __iconNode$k$ = [
        [
          "path",
          {
            d: "M17 21v-2a1 1 0 0 1-1-1v-1a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1",
            key: "10bnsj"
          }
        ],
        ["path", { d: "M19 15V6.5a1 1 0 0 0-7 0v11a1 1 0 0 1-7 0V9", key: "1eqmu1" }],
        ["path", { d: "M21 21v-2h-4", key: "14zm7j" }],
        ["path", { d: "M3 5h4V3", key: "z442eg" }],
        [
          "path",
          { d: "M7 5a1 1 0 0 1 1 1v1a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a1 1 0 0 1 1-1V3", key: "ebdjd7" }
        ]
      ];
      var Cable = createLucideIcon("cable", __iconNode$k$);
      var __iconNode$k_ = [
        ["circle", { cx: "9", cy: "7", r: "2", key: "1305pl" }],
        [
          "path",
          { d: "M7.2 7.9 3 11v9c0 .6.4 1 1 1h16c.6 0 1-.4 1-1v-9c0-2-3-6-7-8l-3.6 2.6", key: "xle13f" }
        ],
        ["path", { d: "M16 13H3", key: "1wpj08" }],
        ["path", { d: "M16 17H3", key: "3lvfcd" }]
      ];
      var CakeSlice = createLucideIcon("cake-slice", __iconNode$k_);
      var __iconNode$kZ = [
        ["path", { d: "M20 21v-8a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v8", key: "1w3rig" }],
        ["path", { d: "M4 16s.5-1 2-1 2.5 2 4 2 2.5-2 4-2 2.5 2 4 2 2-1 2-1", key: "n2jgmb" }],
        ["path", { d: "M2 21h20", key: "1nyx9w" }],
        ["path", { d: "M7 8v3", key: "1qtyvj" }],
        ["path", { d: "M12 8v3", key: "hwp4zt" }],
        ["path", { d: "M17 8v3", key: "1i6e5u" }],
        ["path", { d: "M7 4h.01", key: "1bh4kh" }],
        ["path", { d: "M12 4h.01", key: "1ujb9j" }],
        ["path", { d: "M17 4h.01", key: "1upcoc" }]
      ];
      var Cake = createLucideIcon("cake", __iconNode$kZ);
      var __iconNode$kY = [
        ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
        ["line", { x1: "8", x2: "16", y1: "6", y2: "6", key: "x4nwl0" }],
        ["line", { x1: "16", x2: "16", y1: "14", y2: "18", key: "wjye3r" }],
        ["path", { d: "M16 10h.01", key: "1m94wz" }],
        ["path", { d: "M12 10h.01", key: "1nrarc" }],
        ["path", { d: "M8 10h.01", key: "19clt8" }],
        ["path", { d: "M12 14h.01", key: "1etili" }],
        ["path", { d: "M8 14h.01", key: "6423bh" }],
        ["path", { d: "M12 18h.01", key: "mhygvu" }],
        ["path", { d: "M8 18h.01", key: "lrp35t" }]
      ];
      var Calculator = createLucideIcon("calculator", __iconNode$kY);
      var __iconNode$kX = [
        ["path", { d: "M11 14h1v4", key: "fy54vd" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["rect", { x: "3", y: "4", width: "18", height: "18", rx: "2", key: "12vinp" }]
      ];
      var Calendar1 = createLucideIcon("calendar-1", __iconNode$kX);
      var __iconNode$kW = [
        ["path", { d: "m14 18 4 4 4-4", key: "1waygx" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M18 14v8", key: "irew45" }],
        [
          "path",
          { d: "M21 11.354V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7.343", key: "bse4f3" }
        ],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M8 2v4", key: "1cmpym" }]
      ];
      var CalendarArrowDown = createLucideIcon("calendar-arrow-down", __iconNode$kW);
      var __iconNode$kV = [
        ["path", { d: "m14 18 4-4 4 4", key: "ftkppy" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M18 22v-8", key: "su0gjh" }],
        ["path", { d: "M21 11.343V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h9", key: "1exg90" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M8 2v4", key: "1cmpym" }]
      ];
      var CalendarArrowUp = createLucideIcon("calendar-arrow-up", __iconNode$kV);
      var __iconNode$kU = [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M21 14V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8", key: "bce9hv" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "m16 20 2 2 4-4", key: "13tcca" }]
      ];
      var CalendarCheck2 = createLucideIcon("calendar-check-2", __iconNode$kU);
      var __iconNode$kT = [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "m9 16 2 2 4-4", key: "19s6y9" }]
      ];
      var CalendarCheck3 = createLucideIcon("calendar-check", __iconNode$kT);
      var __iconNode$kS = [
        ["path", { d: "M21 7.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.5", key: "1osxxc" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M3 10h5", key: "r794hk" }],
        ["path", { d: "M17.5 17.5 16 16.3V14", key: "akvzfd" }],
        ["circle", { cx: "16", cy: "16", r: "6", key: "qoo3c4" }]
      ];
      var CalendarClock = createLucideIcon("calendar-clock", __iconNode$kS);
      var __iconNode$kR = [
        ["path", { d: "m15.228 16.852-.923-.383", key: "npixar" }],
        ["path", { d: "m15.228 19.148-.923.383", key: "51cr3n" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "m16.47 14.305.382.923", key: "obybxd" }],
        ["path", { d: "m16.852 20.772-.383.924", key: "dpfhf9" }],
        ["path", { d: "m19.148 15.228.383-.923", key: "1reyyz" }],
        ["path", { d: "m19.53 21.696-.382-.924", key: "1goivc" }],
        ["path", { d: "m20.772 16.852.924-.383", key: "htqkph" }],
        ["path", { d: "m20.772 19.148.924.383", key: "9w9pjp" }],
        ["path", { d: "M21 11V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6", key: "1dju0s" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }]
      ];
      var CalendarCog = createLucideIcon("calendar-cog", __iconNode$kR);
      var __iconNode$kQ = [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M8 14h.01", key: "6423bh" }],
        ["path", { d: "M12 14h.01", key: "1etili" }],
        ["path", { d: "M16 14h.01", key: "1gbofw" }],
        ["path", { d: "M8 18h.01", key: "lrp35t" }],
        ["path", { d: "M12 18h.01", key: "mhygvu" }],
        ["path", { d: "M16 18h.01", key: "kzsmim" }]
      ];
      var CalendarDays = createLucideIcon("calendar-days", __iconNode$kQ);
      var __iconNode$kP = [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M21 17V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11Z", key: "kg77oy" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M15 22v-4a2 2 0 0 1 2-2h4", key: "1gnbqr" }]
      ];
      var CalendarFold = createLucideIcon("calendar-fold", __iconNode$kP);
      var __iconNode$kO = [
        ["path", { d: "M3 10h18V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7", key: "136lmk" }],
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        [
          "path",
          {
            d: "M21.29 14.7a2.43 2.43 0 0 0-2.65-.52c-.3.12-.57.3-.8.53l-.34.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L17.5 22l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z",
            key: "1t7hil"
          }
        ]
      ];
      var CalendarHeart = createLucideIcon("calendar-heart", __iconNode$kO);
      var __iconNode$kN = [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M10 16h4", key: "17e571" }]
      ];
      var CalendarMinus2 = createLucideIcon("calendar-minus-2", __iconNode$kN);
      var __iconNode$kM = [
        ["path", { d: "M16 19h6", key: "xwg31i" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M21 15V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8.5", key: "1scpom" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M8 2v4", key: "1cmpym" }]
      ];
      var CalendarMinus = createLucideIcon("calendar-minus", __iconNode$kM);
      var __iconNode$kL = [
        ["path", { d: "M4.2 4.2A2 2 0 0 0 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 1.82-1.18", key: "16swn3" }],
        ["path", { d: "M21 15.5V6a2 2 0 0 0-2-2H9.5", key: "yhw86o" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M3 10h7", key: "1wap6i" }],
        ["path", { d: "M21 10h-5.5", key: "quycpq" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ];
      var CalendarOff = createLucideIcon("calendar-off", __iconNode$kL);
      var __iconNode$kK = [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M10 16h4", key: "17e571" }],
        ["path", { d: "M12 14v4", key: "1thi36" }]
      ];
      var CalendarPlus2 = createLucideIcon("calendar-plus-2", __iconNode$kK);
      var __iconNode$kJ = [
        ["path", { d: "M16 19h6", key: "xwg31i" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M19 16v6", key: "tddt3s" }],
        ["path", { d: "M21 12.598V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8.5", key: "1glfrc" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M8 2v4", key: "1cmpym" }]
      ];
      var CalendarPlus = createLucideIcon("calendar-plus", __iconNode$kJ);
      var __iconNode$kI = [
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M17 14h-6", key: "bkmgh3" }],
        ["path", { d: "M13 18H7", key: "bb0bb7" }],
        ["path", { d: "M7 14h.01", key: "1qa3f1" }],
        ["path", { d: "M17 18h.01", key: "1bdyru" }]
      ];
      var CalendarRange = createLucideIcon("calendar-range", __iconNode$kI);
      var __iconNode$kH = [
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M21 11.75V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7.25", key: "1jrsq6" }],
        ["path", { d: "m22 22-1.875-1.875", key: "13zax7" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }]
      ];
      var CalendarSearch = createLucideIcon("calendar-search", __iconNode$kH);
      var __iconNode$kG = [
        ["path", { d: "M11 10v4h4", key: "172dkj" }],
        ["path", { d: "m11 14 1.535-1.605a5 5 0 0 1 8 1.5", key: "vu0qm5" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "m21 18-1.535 1.605a5 5 0 0 1-8-1.5", key: "1qgeyt" }],
        ["path", { d: "M21 22v-4h-4", key: "hrummi" }],
        ["path", { d: "M21 8.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h4.3", key: "mctw84" }],
        ["path", { d: "M3 10h4", key: "1el30a" }],
        ["path", { d: "M8 2v4", key: "1cmpym" }]
      ];
      var CalendarSync = createLucideIcon("calendar-sync", __iconNode$kG);
      var __iconNode$kF = [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8", key: "3spt84" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "m17 22 5-5", key: "1k6ppv" }],
        ["path", { d: "m17 17 5 5", key: "p7ous7" }]
      ];
      var CalendarX2 = createLucideIcon("calendar-x-2", __iconNode$kF);
      var __iconNode$kE = [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["path", { d: "M3 10h18", key: "8toen8" }],
        ["path", { d: "m14 14-4 4", key: "rymu2i" }],
        ["path", { d: "m10 14 4 4", key: "3sz06r" }]
      ];
      var CalendarX = createLucideIcon("calendar-x", __iconNode$kE);
      var __iconNode$kD = [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
        ["path", { d: "M3 10h18", key: "8toen8" }]
      ];
      var Calendar = createLucideIcon("calendar", __iconNode$kD);
      var __iconNode$kC = [
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }],
        ["path", { d: "M7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16", key: "qmtpty" }],
        ["path", { d: "M9.5 4h5L17 7h3a2 2 0 0 1 2 2v7.5", key: "1ufyfc" }],
        ["path", { d: "M14.121 15.121A3 3 0 1 1 9.88 10.88", key: "11zox6" }]
      ];
      var CameraOff = createLucideIcon("camera-off", __iconNode$kC);
      var __iconNode$kB = [
        [
          "path",
          {
            d: "M5.7 21a2 2 0 0 1-3.5-2l8.6-14a6 6 0 0 1 10.4 6 2 2 0 1 1-3.464-2 2 2 0 1 0-3.464-2Z",
            key: "isaq8g"
          }
        ],
        ["path", { d: "M17.75 7 15 2.1", key: "12x7e8" }],
        ["path", { d: "M10.9 4.8 13 9", key: "100a87" }],
        ["path", { d: "m7.9 9.7 2 4.4", key: "ntfhaj" }],
        ["path", { d: "M4.9 14.7 7 18.9", key: "1x43jy" }]
      ];
      var CandyCane = createLucideIcon("candy-cane", __iconNode$kB);
      var __iconNode$kA = [
        [
          "path",
          {
            d: "M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z",
            key: "1tc9qg"
          }
        ],
        ["circle", { cx: "12", cy: "13", r: "3", key: "1vg3eu" }]
      ];
      var Camera = createLucideIcon("camera", __iconNode$kA);
      var __iconNode$kz = [
        ["path", { d: "M10 10v7.9", key: "m8g9tt" }],
        ["path", { d: "M11.802 6.145a5 5 0 0 1 6.053 6.053", key: "dn87i3" }],
        ["path", { d: "M14 6.1v2.243", key: "1kzysn" }],
        [
          "path",
          { d: "m15.5 15.571-.964.964a5 5 0 0 1-7.071 0 5 5 0 0 1 0-7.07l.964-.965", key: "3sxy18" }
        ],
        [
          "path",
          {
            d: "M16 7V3a1 1 0 0 1 1.707-.707 2.5 2.5 0 0 0 2.152.717 1 1 0 0 1 1.131 1.131 2.5 2.5 0 0 0 .717 2.152A1 1 0 0 1 21 8h-4",
            key: "gpb6xx"
          }
        ],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        [
          "path",
          {
            d: "M8 17v4a1 1 0 0 1-1.707.707 2.5 2.5 0 0 0-2.152-.717 1 1 0 0 1-1.131-1.131 2.5 2.5 0 0 0-.717-2.152A1 1 0 0 1 3 16h4",
            key: "qexcha"
          }
        ]
      ];
      var CandyOff = createLucideIcon("candy-off", __iconNode$kz);
      var __iconNode$ky = [
        ["path", { d: "M10 7v10.9", key: "1gynux" }],
        ["path", { d: "M14 6.1V17", key: "116kdf" }],
        [
          "path",
          {
            d: "M16 7V3a1 1 0 0 1 1.707-.707 2.5 2.5 0 0 0 2.152.717 1 1 0 0 1 1.131 1.131 2.5 2.5 0 0 0 .717 2.152A1 1 0 0 1 21 8h-4",
            key: "gpb6xx"
          }
        ],
        [
          "path",
          {
            d: "M16.536 7.465a5 5 0 0 0-7.072 0l-2 2a5 5 0 0 0 0 7.07 5 5 0 0 0 7.072 0l2-2a5 5 0 0 0 0-7.07",
            key: "1tsln4"
          }
        ],
        [
          "path",
          {
            d: "M8 17v4a1 1 0 0 1-1.707.707 2.5 2.5 0 0 0-2.152-.717 1 1 0 0 1-1.131-1.131 2.5 2.5 0 0 0-.717-2.152A1 1 0 0 1 3 16h4",
            key: "qexcha"
          }
        ]
      ];
      var Candy = createLucideIcon("candy", __iconNode$ky);
      var __iconNode$kx = [
        ["path", { d: "M12 22v-4", key: "1utk9m" }],
        [
          "path",
          {
            d: "M7 12c-1.5 0-4.5 1.5-5 3 3.5 1.5 6 1 6 1-1.5 1.5-2 3.5-2 5 2.5 0 4.5-1.5 6-3 1.5 1.5 3.5 3 6 3 0-1.5-.5-3.5-2-5 0 0 2.5.5 6-1-.5-1.5-3.5-3-5-3 1.5-1 4-4 4-6-2.5 0-5.5 1.5-7 3 0-2.5-.5-5-2-7-1.5 2-2 4.5-2 7-1.5-1.5-4.5-3-7-3 0 2 2.5 5 4 6",
            key: "1mezod"
          }
        ]
      ];
      var Cannabis = createLucideIcon("cannabis", __iconNode$kx);
      var __iconNode$kw = [
        ["path", { d: "M10.5 5H19a2 2 0 0 1 2 2v8.5", key: "jqtk4d" }],
        ["path", { d: "M17 11h-.5", key: "1961ue" }],
        ["path", { d: "M19 19H5a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2", key: "1keqsi" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M7 11h4", key: "1o1z6v" }],
        ["path", { d: "M7 15h2.5", key: "1ina1g" }]
      ];
      var CaptionsOff = createLucideIcon("captions-off", __iconNode$kw);
      var __iconNode$kv = [
        [
          "path",
          { d: "m21 8-2 2-1.5-3.7A2 2 0 0 0 15.646 5H8.4a2 2 0 0 0-1.903 1.257L5 10 3 8", key: "1imjwt" }
        ],
        ["path", { d: "M7 14h.01", key: "1qa3f1" }],
        ["path", { d: "M17 14h.01", key: "7oqj8z" }],
        ["rect", { width: "18", height: "8", x: "3", y: "10", rx: "2", key: "a7itu8" }],
        ["path", { d: "M5 18v2", key: "ppbyun" }],
        ["path", { d: "M19 18v2", key: "gy7782" }]
      ];
      var CarFront = createLucideIcon("car-front", __iconNode$kv);
      var __iconNode$ku = [
        ["rect", { width: "18", height: "14", x: "3", y: "5", rx: "2", ry: "2", key: "12ruh7" }],
        ["path", { d: "M7 15h4M15 15h2M7 11h2M13 11h4", key: "1ueiar" }]
      ];
      var Captions = createLucideIcon("captions", __iconNode$ku);
      var __iconNode$kt = [
        [
          "path",
          {
            d: "M19 17h2c.6 0 1-.4 1-1v-3c0-.9-.7-1.7-1.5-1.9C18.7 10.6 16 10 16 10s-1.3-1.4-2.2-2.3c-.5-.4-1.1-.7-1.8-.7H5c-.6 0-1.1.4-1.4.9l-1.4 2.9A3.7 3.7 0 0 0 2 12v4c0 .6.4 1 1 1h2",
            key: "5owen"
          }
        ],
        ["circle", { cx: "7", cy: "17", r: "2", key: "u2ysq9" }],
        ["path", { d: "M9 17h6", key: "r8uit2" }],
        ["circle", { cx: "17", cy: "17", r: "2", key: "axvx0g" }]
      ];
      var Car = createLucideIcon("car", __iconNode$kt);
      var __iconNode$ks = [
        ["path", { d: "M10 2h4", key: "n1abiw" }],
        [
          "path",
          { d: "m21 8-2 2-1.5-3.7A2 2 0 0 0 15.646 5H8.4a2 2 0 0 0-1.903 1.257L5 10 3 8", key: "1imjwt" }
        ],
        ["path", { d: "M7 14h.01", key: "1qa3f1" }],
        ["path", { d: "M17 14h.01", key: "7oqj8z" }],
        ["rect", { width: "18", height: "8", x: "3", y: "10", rx: "2", key: "a7itu8" }],
        ["path", { d: "M5 18v2", key: "ppbyun" }],
        ["path", { d: "M19 18v2", key: "gy7782" }]
      ];
      var CarTaxiFront = createLucideIcon("car-taxi-front", __iconNode$ks);
      var __iconNode$kr = [
        ["path", { d: "M18 19V9a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v8a2 2 0 0 0 2 2h2", key: "19jm3t" }],
        ["path", { d: "M2 9h3a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2", key: "13hakp" }],
        ["path", { d: "M22 17v1a1 1 0 0 1-1 1H10v-9a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v9", key: "1crci8" }],
        ["circle", { cx: "8", cy: "19", r: "2", key: "t8fc5s" }]
      ];
      var Caravan = createLucideIcon("caravan", __iconNode$kr);
      var __iconNode$kq = [
        ["circle", { cx: "7", cy: "12", r: "3", key: "12clwm" }],
        ["path", { d: "M10 9v6", key: "17i7lo" }],
        ["circle", { cx: "17", cy: "12", r: "3", key: "gl7c2s" }],
        ["path", { d: "M14 7v8", key: "dl84cr" }]
      ];
      var CaseLower = createLucideIcon("case-lower", __iconNode$kq);
      var __iconNode$kp = [
        [
          "path",
          {
            d: "M2.27 21.7s9.87-3.5 12.73-6.36a4.5 4.5 0 0 0-6.36-6.37C5.77 11.84 2.27 21.7 2.27 21.7zM8.64 14l-2.05-2.04M15.34 15l-2.46-2.46",
            key: "rfqxbe"
          }
        ],
        ["path", { d: "M22 9s-1.33-2-3.5-2C16.86 7 15 9 15 9s1.33 2 3.5 2S22 9 22 9z", key: "6b25w4" }],
        ["path", { d: "M15 2s-2 1.33-2 3.5S15 9 15 9s2-1.84 2-3.5C17 3.33 15 2 15 2z", key: "fn65lo" }]
      ];
      var Carrot = createLucideIcon("carrot", __iconNode$kp);
      var __iconNode$ko = [
        ["path", { d: "m3 15 4-8 4 8", key: "1vwr6u" }],
        ["path", { d: "M4 13h6", key: "1r9ots" }],
        ["circle", { cx: "18", cy: "12", r: "3", key: "1kchzo" }],
        ["path", { d: "M21 9v6", key: "anns31" }]
      ];
      var CaseSensitive = createLucideIcon("case-sensitive", __iconNode$ko);
      var __iconNode$kn = [
        ["path", { d: "m3 15 4-8 4 8", key: "1vwr6u" }],
        ["path", { d: "M4 13h6", key: "1r9ots" }],
        ["path", { d: "M15 11h4.5a2 2 0 0 1 0 4H15V7h4a2 2 0 0 1 0 4", key: "1sqfas" }]
      ];
      var CaseUpper = createLucideIcon("case-upper", __iconNode$kn);
      var __iconNode$km = [
        ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
        ["circle", { cx: "8", cy: "10", r: "2", key: "1xl4ub" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["circle", { cx: "16", cy: "10", r: "2", key: "r14t7q" }],
        ["path", { d: "m6 20 .7-2.9A1.4 1.4 0 0 1 8.1 16h7.8a1.4 1.4 0 0 1 1.4 1l.7 3", key: "l01ucn" }]
      ];
      var CassetteTape = createLucideIcon("cassette-tape", __iconNode$km);
      var __iconNode$kl = [
        ["path", { d: "M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6", key: "3zrzxg" }],
        ["path", { d: "M2 12a9 9 0 0 1 8 8", key: "g6cvee" }],
        ["path", { d: "M2 16a5 5 0 0 1 4 4", key: "1y1dii" }],
        ["line", { x1: "2", x2: "2.01", y1: "20", y2: "20", key: "xu2jvo" }]
      ];
      var Cast = createLucideIcon("cast", __iconNode$kl);
      var __iconNode$kk = [
        ["path", { d: "M22 20v-9H2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2Z", key: "109fe4" }],
        ["path", { d: "M18 11V4H6v7", key: "mon5oj" }],
        ["path", { d: "M15 22v-4a3 3 0 0 0-3-3a3 3 0 0 0-3 3v4", key: "1k4jtn" }],
        ["path", { d: "M22 11V9", key: "3zbp94" }],
        ["path", { d: "M2 11V9", key: "1x5rnq" }],
        ["path", { d: "M6 4V2", key: "1rsq15" }],
        ["path", { d: "M18 4V2", key: "1jsdo1" }],
        ["path", { d: "M10 4V2", key: "75d9ly" }],
        ["path", { d: "M14 4V2", key: "8nj3z6" }]
      ];
      var Castle = createLucideIcon("castle", __iconNode$kk);
      var __iconNode$kj = [
        [
          "path",
          {
            d: "M12 5c.67 0 1.35.09 2 .26 1.78-2 5.03-2.84 6.42-2.26 1.4.58-.42 7-.42 7 .57 1.07 1 2.24 1 3.44C21 17.9 16.97 21 12 21s-9-3-9-7.56c0-1.25.5-2.4 1-3.44 0 0-1.89-6.42-.5-7 1.39-.58 4.72.23 6.5 2.23A9.04 9.04 0 0 1 12 5Z",
            key: "x6xyqk"
          }
        ],
        ["path", { d: "M8 14v.5", key: "1nzgdb" }],
        ["path", { d: "M16 14v.5", key: "1lajdz" }],
        ["path", { d: "M11.25 16.25h1.5L12 17l-.75-.75Z", key: "12kq1m" }]
      ];
      var Cat = createLucideIcon("cat", __iconNode$kj);
      var __iconNode$ki = [
        [
          "path",
          {
            d: "M16.75 12h3.632a1 1 0 0 1 .894 1.447l-2.034 4.069a1 1 0 0 1-1.708.134l-2.124-2.97",
            key: "ir91b5"
          }
        ],
        [
          "path",
          {
            d: "M17.106 9.053a1 1 0 0 1 .447 1.341l-3.106 6.211a1 1 0 0 1-1.342.447L3.61 12.3a2.92 2.92 0 0 1-1.3-3.91L3.69 5.6a2.92 2.92 0 0 1 3.92-1.3z",
            key: "jlp8i1"
          }
        ],
        ["path", { d: "M2 19h3.76a2 2 0 0 0 1.8-1.1L9 15", key: "19bib8" }],
        ["path", { d: "M2 21v-4", key: "l40lih" }],
        ["path", { d: "M7 9h.01", key: "19b3jx" }]
      ];
      var Cctv = createLucideIcon("cctv", __iconNode$ki);
      var __iconNode$kh = [
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
        [
          "path",
          {
            d: "M7 11.207a.5.5 0 0 1 .146-.353l2-2a.5.5 0 0 1 .708 0l3.292 3.292a.5.5 0 0 0 .708 0l4.292-4.292a.5.5 0 0 1 .854.353V16a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1z",
            key: "q0gr47"
          }
        ]
      ];
      var ChartArea = createLucideIcon("chart-area", __iconNode$kh);
      var __iconNode$kg = [
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
        ["rect", { x: "7", y: "13", width: "9", height: "4", rx: "1", key: "1iip1u" }],
        ["rect", { x: "7", y: "5", width: "12", height: "4", rx: "1", key: "1anskk" }]
      ];
      var ChartBarBig = createLucideIcon("chart-bar-big", __iconNode$kg);
      var __iconNode$kf = [
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
        ["path", { d: "M7 11h8", key: "1feolt" }],
        ["path", { d: "M7 16h3", key: "ur6vzw" }],
        ["path", { d: "M7 6h12", key: "sz5b0d" }]
      ];
      var ChartBarDecreasing = createLucideIcon("chart-bar-decreasing", __iconNode$kf);
      var __iconNode$ke = [
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
        ["path", { d: "M7 11h8", key: "1feolt" }],
        ["path", { d: "M7 16h12", key: "wsnu98" }],
        ["path", { d: "M7 6h3", key: "w9rmul" }]
      ];
      var ChartBarIncreasing = createLucideIcon("chart-bar-increasing", __iconNode$ke);
      var __iconNode$kd = [
        ["path", { d: "M11 13v4", key: "vyy2rb" }],
        ["path", { d: "M15 5v4", key: "1gx88a" }],
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
        ["rect", { x: "7", y: "13", width: "9", height: "4", rx: "1", key: "1iip1u" }],
        ["rect", { x: "7", y: "5", width: "12", height: "4", rx: "1", key: "1anskk" }]
      ];
      var ChartBarStacked = createLucideIcon("chart-bar-stacked", __iconNode$kd);
      var __iconNode$kc = [
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
        ["path", { d: "M7 16h8", key: "srdodz" }],
        ["path", { d: "M7 11h12", key: "127s9w" }],
        ["path", { d: "M7 6h3", key: "w9rmul" }]
      ];
      var ChartBar = createLucideIcon("chart-bar", __iconNode$kc);
      var __iconNode$kb = [
        ["path", { d: "M9 5v4", key: "14uxtq" }],
        ["rect", { width: "4", height: "6", x: "7", y: "9", rx: "1", key: "f4fvz0" }],
        ["path", { d: "M9 15v2", key: "r5rk32" }],
        ["path", { d: "M17 3v2", key: "1l2re6" }],
        ["rect", { width: "4", height: "8", x: "15", y: "5", rx: "1", key: "z38je5" }],
        ["path", { d: "M17 13v3", key: "5l0wba" }],
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }]
      ];
      var ChartCandlestick = createLucideIcon("chart-candlestick", __iconNode$kb);
      var __iconNode$ka = [
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
        ["rect", { x: "15", y: "5", width: "4", height: "12", rx: "1", key: "q8uenq" }],
        ["rect", { x: "7", y: "8", width: "4", height: "9", rx: "1", key: "sr5ea" }]
      ];
      var ChartColumnBig = createLucideIcon("chart-column-big", __iconNode$ka);
      var __iconNode$k9 = [
        ["path", { d: "M13 17V9", key: "1fwyjl" }],
        ["path", { d: "M18 17v-3", key: "1sqioe" }],
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
        ["path", { d: "M8 17V5", key: "1wzmnc" }]
      ];
      var ChartColumnDecreasing = createLucideIcon("chart-column-decreasing", __iconNode$k9);
      var __iconNode$k8 = [
        ["path", { d: "M13 17V9", key: "1fwyjl" }],
        ["path", { d: "M18 17V5", key: "sfb6ij" }],
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
        ["path", { d: "M8 17v-3", key: "17ska0" }]
      ];
      var ChartColumnIncreasing = createLucideIcon("chart-column-increasing", __iconNode$k8);
      var __iconNode$k7 = [
        ["path", { d: "M11 13H7", key: "t0o9gq" }],
        ["path", { d: "M19 9h-4", key: "rera1j" }],
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
        ["rect", { x: "15", y: "5", width: "4", height: "12", rx: "1", key: "q8uenq" }],
        ["rect", { x: "7", y: "8", width: "4", height: "9", rx: "1", key: "sr5ea" }]
      ];
      var ChartColumnStacked = createLucideIcon("chart-column-stacked", __iconNode$k7);
      var __iconNode$k6 = [
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
        ["path", { d: "M18 17V9", key: "2bz60n" }],
        ["path", { d: "M13 17V5", key: "1frdt8" }],
        ["path", { d: "M8 17v-3", key: "17ska0" }]
      ];
      var ChartColumn = createLucideIcon("chart-column", __iconNode$k6);
      var __iconNode$k5 = [
        ["path", { d: "M10 6h8", key: "zvc2xc" }],
        ["path", { d: "M12 16h6", key: "yi5mkt" }],
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
        ["path", { d: "M8 11h7", key: "wz2hg0" }]
      ];
      var ChartGantt = createLucideIcon("chart-gantt", __iconNode$k5);
      var __iconNode$k4 = [
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
        ["path", { d: "m19 9-5 5-4-4-3 3", key: "2osh9i" }]
      ];
      var ChartLine = createLucideIcon("chart-line", __iconNode$k4);
      var __iconNode$k3 = [
        ["path", { d: "m13.11 7.664 1.78 2.672", key: "go2gg9" }],
        ["path", { d: "m14.162 12.788-3.324 1.424", key: "11x848" }],
        ["path", { d: "m20 4-6.06 1.515", key: "1wxxh7" }],
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
        ["circle", { cx: "12", cy: "6", r: "2", key: "1jj5th" }],
        ["circle", { cx: "16", cy: "12", r: "2", key: "4ma0v8" }],
        ["circle", { cx: "9", cy: "15", r: "2", key: "lf2ghp" }]
      ];
      var ChartNetwork = createLucideIcon("chart-network", __iconNode$k3);
      var __iconNode$k2 = [
        ["path", { d: "M12 20V10", key: "g8npz5" }],
        ["path", { d: "M18 20v-4", key: "8uic4z" }],
        ["path", { d: "M6 20V4", key: "1w1bmo" }]
      ];
      var ChartNoAxesColumnDecreasing = createLucideIcon("chart-no-axes-column-decreasing", __iconNode$k2);
      var __iconNode$k1 = [
        ["line", { x1: "12", x2: "12", y1: "20", y2: "10", key: "1vz5eb" }],
        ["line", { x1: "18", x2: "18", y1: "20", y2: "4", key: "cun8e5" }],
        ["line", { x1: "6", x2: "6", y1: "20", y2: "16", key: "hq0ia6" }]
      ];
      var ChartNoAxesColumnIncreasing = createLucideIcon("chart-no-axes-column-increasing", __iconNode$k1);
      var __iconNode$k0 = [
        ["line", { x1: "18", x2: "18", y1: "20", y2: "10", key: "1xfpm4" }],
        ["line", { x1: "12", x2: "12", y1: "20", y2: "4", key: "be30l9" }],
        ["line", { x1: "6", x2: "6", y1: "20", y2: "14", key: "1r4le6" }]
      ];
      var ChartNoAxesColumn = createLucideIcon("chart-no-axes-column", __iconNode$k0);
      var __iconNode$j$ = [
        ["path", { d: "M12 16v5", key: "zza2cw" }],
        ["path", { d: "M16 14v7", key: "1g90b9" }],
        ["path", { d: "M20 10v11", key: "1iqoj0" }],
        [
          "path",
          { d: "m22 3-8.646 8.646a.5.5 0 0 1-.708 0L9.354 8.354a.5.5 0 0 0-.707 0L2 15", key: "1fw8x9" }
        ],
        ["path", { d: "M4 18v3", key: "1yp0dc" }],
        ["path", { d: "M8 14v7", key: "n3cwzv" }]
      ];
      var ChartNoAxesCombined = createLucideIcon("chart-no-axes-combined", __iconNode$j$);
      var __iconNode$j_ = [
        ["path", { d: "M8 6h10", key: "9lnwnk" }],
        ["path", { d: "M6 12h9", key: "1g9pqf" }],
        ["path", { d: "M11 18h7", key: "c8dzvl" }]
      ];
      var ChartNoAxesGantt = createLucideIcon("chart-no-axes-gantt", __iconNode$j_);
      var __iconNode$jZ = [
        [
          "path",
          {
            d: "M21 12c.552 0 1.005-.449.95-.998a10 10 0 0 0-8.953-8.951c-.55-.055-.998.398-.998.95v8a1 1 0 0 0 1 1z",
            key: "pzmjnu"
          }
        ],
        ["path", { d: "M21.21 15.89A10 10 0 1 1 8 2.83", key: "k2fpak" }]
      ];
      var ChartPie = createLucideIcon("chart-pie", __iconNode$jZ);
      var __iconNode$jY = [
        ["circle", { cx: "7.5", cy: "7.5", r: ".5", fill: "currentColor", key: "kqv944" }],
        ["circle", { cx: "18.5", cy: "5.5", r: ".5", fill: "currentColor", key: "lysivs" }],
        ["circle", { cx: "11.5", cy: "11.5", r: ".5", fill: "currentColor", key: "byv1b8" }],
        ["circle", { cx: "7.5", cy: "16.5", r: ".5", fill: "currentColor", key: "nkw3mc" }],
        ["circle", { cx: "17.5", cy: "14.5", r: ".5", fill: "currentColor", key: "1gjh6j" }],
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }]
      ];
      var ChartScatter = createLucideIcon("chart-scatter", __iconNode$jY);
      var __iconNode$jX = [
        ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
        ["path", { d: "M7 16c.5-2 1.5-7 4-7 2 0 2 3 4 3 2.5 0 4.5-5 5-7", key: "lw07rv" }]
      ];
      var ChartSpline = createLucideIcon("chart-spline", __iconNode$jX);
      var __iconNode$jW = [
        ["path", { d: "M18 6 7 17l-5-5", key: "116fxf" }],
        ["path", { d: "m22 10-7.5 7.5L13 16", key: "ke71qq" }]
      ];
      var CheckCheck = createLucideIcon("check-check", __iconNode$jW);
      var __iconNode$jV = [["path", { d: "M20 6 9 17l-5-5", key: "1gmf2c" }]];
      var Check = createLucideIcon("check", __iconNode$jV);
      var __iconNode$jU = [
        [
          "path",
          {
            d: "M17 21a1 1 0 0 0 1-1v-5.35c0-.457.316-.844.727-1.041a4 4 0 0 0-2.134-7.589 5 5 0 0 0-9.186 0 4 4 0 0 0-2.134 7.588c.411.198.727.585.727 1.041V20a1 1 0 0 0 1 1Z",
            key: "1qvrer"
          }
        ],
        ["path", { d: "M6 17h12", key: "1jwigz" }]
      ];
      var ChefHat = createLucideIcon("chef-hat", __iconNode$jU);
      var __iconNode$jT = [
        ["path", { d: "M2 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z", key: "cvxqlc" }],
        ["path", { d: "M12 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z", key: "1ostrc" }],
        ["path", { d: "M7 14c3.22-2.91 4.29-8.75 5-12 1.66 2.38 4.94 9 5 12", key: "hqx58h" }],
        ["path", { d: "M22 9c-4.29 0-7.14-2.33-10-7 5.71 0 10 4.67 10 7Z", key: "eykp1o" }]
      ];
      var Cherry = createLucideIcon("cherry", __iconNode$jT);
      var __iconNode$jS = [["path", { d: "m6 9 6 6 6-6", key: "qrunsl" }]];
      var ChevronDown3 = createLucideIcon("chevron-down", __iconNode$jS);
      var __iconNode$jR = [
        ["path", { d: "m17 18-6-6 6-6", key: "1yerx2" }],
        ["path", { d: "M7 6v12", key: "1p53r6" }]
      ];
      var ChevronFirst = createLucideIcon("chevron-first", __iconNode$jR);
      var __iconNode$jQ = [
        ["path", { d: "m7 18 6-6-6-6", key: "lwmzdw" }],
        ["path", { d: "M17 6v12", key: "1o0aio" }]
      ];
      var ChevronLast = createLucideIcon("chevron-last", __iconNode$jQ);
      var __iconNode$jP = [["path", { d: "m15 18-6-6 6-6", key: "1wnfg3" }]];
      var ChevronLeft2 = createLucideIcon("chevron-left", __iconNode$jP);
      var __iconNode$jO = [["path", { d: "m9 18 6-6-6-6", key: "mthhwq" }]];
      var ChevronRight5 = createLucideIcon("chevron-right", __iconNode$jO);
      var __iconNode$jN = [["path", { d: "m18 15-6-6-6 6", key: "153udz" }]];
      var ChevronUp = createLucideIcon("chevron-up", __iconNode$jN);
      var __iconNode$jM = [
        ["path", { d: "m7 6 5 5 5-5", key: "1lc07p" }],
        ["path", { d: "m7 13 5 5 5-5", key: "1d48rs" }]
      ];
      var ChevronsDown = createLucideIcon("chevrons-down", __iconNode$jM);
      var __iconNode$jL = [
        ["path", { d: "m7 20 5-5 5 5", key: "13a0gw" }],
        ["path", { d: "m7 4 5 5 5-5", key: "1kwcof" }]
      ];
      var ChevronsDownUp = createLucideIcon("chevrons-down-up", __iconNode$jL);
      var __iconNode$jK = [
        ["path", { d: "m18 8 4 4-4 4", key: "1ak13k" }],
        ["path", { d: "m6 8-4 4 4 4", key: "15zrgr" }],
        ["path", { d: "M8 12h.01", key: "czm47f" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }],
        ["path", { d: "M16 12h.01", key: "1l6xoz" }]
      ];
      var ChevronsLeftRightEllipsis = createLucideIcon("chevrons-left-right-ellipsis", __iconNode$jK);
      var __iconNode$jJ = [
        ["path", { d: "m9 7-5 5 5 5", key: "j5w590" }],
        ["path", { d: "m15 7 5 5-5 5", key: "1bl6da" }]
      ];
      var ChevronsLeftRight = createLucideIcon("chevrons-left-right", __iconNode$jJ);
      var __iconNode$jI = [
        ["path", { d: "m11 17-5-5 5-5", key: "13zhaf" }],
        ["path", { d: "m18 17-5-5 5-5", key: "h8a8et" }]
      ];
      var ChevronsLeft = createLucideIcon("chevrons-left", __iconNode$jI);
      var __iconNode$jH = [
        ["path", { d: "m20 17-5-5 5-5", key: "30x0n2" }],
        ["path", { d: "m4 17 5-5-5-5", key: "16spf4" }]
      ];
      var ChevronsRightLeft = createLucideIcon("chevrons-right-left", __iconNode$jH);
      var __iconNode$jG = [
        ["path", { d: "m6 17 5-5-5-5", key: "xnjwq" }],
        ["path", { d: "m13 17 5-5-5-5", key: "17xmmf" }]
      ];
      var ChevronsRight = createLucideIcon("chevrons-right", __iconNode$jG);
      var __iconNode$jF = [
        ["path", { d: "m7 15 5 5 5-5", key: "1hf1tw" }],
        ["path", { d: "m7 9 5-5 5 5", key: "sgt6xg" }]
      ];
      var ChevronsUpDown = createLucideIcon("chevrons-up-down", __iconNode$jF);
      var __iconNode$jE = [
        ["path", { d: "m17 11-5-5-5 5", key: "e8nh98" }],
        ["path", { d: "m17 18-5-5-5 5", key: "2avn1x" }]
      ];
      var ChevronsUp = createLucideIcon("chevrons-up", __iconNode$jE);
      var __iconNode$jD = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
        ["line", { x1: "21.17", x2: "12", y1: "8", y2: "8", key: "a0cw5f" }],
        ["line", { x1: "3.95", x2: "8.54", y1: "6.06", y2: "14", key: "1kftof" }],
        ["line", { x1: "10.88", x2: "15.46", y1: "21.94", y2: "14", key: "1ymyh8" }]
      ];
      var Chrome = createLucideIcon("chrome", __iconNode$jD);
      var __iconNode$jC = [
        ["path", { d: "M10 9h4", key: "u4k05v" }],
        ["path", { d: "M12 7v5", key: "ma6bk" }],
        ["path", { d: "M14 22v-4a2 2 0 0 0-4 0v4", key: "1pdhuj" }],
        [
          "path",
          {
            d: "M18 22V5.618a1 1 0 0 0-.553-.894l-4.553-2.277a2 2 0 0 0-1.788 0L6.553 4.724A1 1 0 0 0 6 5.618V22",
            key: "1rkokr"
          }
        ],
        [
          "path",
          {
            d: "m18 7 3.447 1.724a1 1 0 0 1 .553.894V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9.618a1 1 0 0 1 .553-.894L6 7",
            key: "1w6esw"
          }
        ]
      ];
      var Church = createLucideIcon("church", __iconNode$jC);
      var __iconNode$jB = [
        ["path", { d: "M17 12H3a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h14", key: "1mb5g1" }],
        ["path", { d: "M18 8c0-2.5-2-2.5-2-5", key: "1il607" }],
        ["path", { d: "M21 16a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1", key: "1yl5r7" }],
        ["path", { d: "M22 8c0-2.5-2-2.5-2-5", key: "1gah44" }],
        ["path", { d: "M7 12v4", key: "jqww69" }]
      ];
      var Cigarette = createLucideIcon("cigarette", __iconNode$jB);
      var __iconNode$jA = [
        ["path", { d: "M12 12H3a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h13", key: "1gdiyg" }],
        ["path", { d: "M18 8c0-2.5-2-2.5-2-5", key: "1il607" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M21 12a1 1 0 0 1 1 1v2a1 1 0 0 1-.5.866", key: "166zjj" }],
        ["path", { d: "M22 8c0-2.5-2-2.5-2-5", key: "1gah44" }],
        ["path", { d: "M7 12v4", key: "jqww69" }]
      ];
      var CigaretteOff = createLucideIcon("cigarette-off", __iconNode$jA);
      var __iconNode$jz = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["line", { x1: "12", x2: "12", y1: "8", y2: "12", key: "1pkeuh" }],
        ["line", { x1: "12", x2: "12.01", y1: "16", y2: "16", key: "4dfq90" }]
      ];
      var CircleAlert = createLucideIcon("circle-alert", __iconNode$jz);
      var __iconNode$jy = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M12 8v8", key: "napkw2" }],
        ["path", { d: "m8 12 4 4 4-4", key: "k98ssh" }]
      ];
      var CircleArrowDown = createLucideIcon("circle-arrow-down", __iconNode$jy);
      var __iconNode$jx = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M16 12H8", key: "1fr5h0" }],
        ["path", { d: "m12 8-4 4 4 4", key: "15vm53" }]
      ];
      var CircleArrowLeft = createLucideIcon("circle-arrow-left", __iconNode$jx);
      var __iconNode$jw = [
        ["path", { d: "M2 12a10 10 0 1 1 10 10", key: "1yn6ov" }],
        ["path", { d: "m2 22 10-10", key: "28ilpk" }],
        ["path", { d: "M8 22H2v-6", key: "sulq54" }]
      ];
      var CircleArrowOutDownLeft = createLucideIcon("circle-arrow-out-down-left", __iconNode$jw);
      var __iconNode$jv = [
        ["path", { d: "M12 22a10 10 0 1 1 10-10", key: "130bv5" }],
        ["path", { d: "M22 22 12 12", key: "131aw7" }],
        ["path", { d: "M22 16v6h-6", key: "1gvm70" }]
      ];
      var CircleArrowOutDownRight = createLucideIcon("circle-arrow-out-down-right", __iconNode$jv);
      var __iconNode$ju = [
        ["path", { d: "M2 8V2h6", key: "hiwtdz" }],
        ["path", { d: "m2 2 10 10", key: "1oh8rs" }],
        ["path", { d: "M12 2A10 10 0 1 1 2 12", key: "rrk4fa" }]
      ];
      var CircleArrowOutUpLeft = createLucideIcon("circle-arrow-out-up-left", __iconNode$ju);
      var __iconNode$jt = [
        ["path", { d: "M22 12A10 10 0 1 1 12 2", key: "1fm58d" }],
        ["path", { d: "M22 2 12 12", key: "yg2myt" }],
        ["path", { d: "M16 2h6v6", key: "zan5cs" }]
      ];
      var CircleArrowOutUpRight = createLucideIcon("circle-arrow-out-up-right", __iconNode$jt);
      var __iconNode$js = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "m12 16 4-4-4-4", key: "1i9zcv" }]
      ];
      var CircleArrowRight = createLucideIcon("circle-arrow-right", __iconNode$js);
      var __iconNode$jr = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m16 12-4-4-4 4", key: "177agl" }],
        ["path", { d: "M12 16V8", key: "1sbj14" }]
      ];
      var CircleArrowUp = createLucideIcon("circle-arrow-up", __iconNode$jr);
      var __iconNode$jq = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
      ];
      var CircleCheck = createLucideIcon("circle-check", __iconNode$jq);
      var __iconNode$jp = [
        ["path", { d: "M21.801 10A10 10 0 1 1 17 3.335", key: "yps3ct" }],
        ["path", { d: "m9 11 3 3L22 4", key: "1pflzl" }]
      ];
      var CircleCheckBig = createLucideIcon("circle-check-big", __iconNode$jp);
      var __iconNode$jo = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m16 10-4 4-4-4", key: "894hmk" }]
      ];
      var CircleChevronDown = createLucideIcon("circle-chevron-down", __iconNode$jo);
      var __iconNode$jn = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m14 16-4-4 4-4", key: "ojs7w8" }]
      ];
      var CircleChevronLeft = createLucideIcon("circle-chevron-left", __iconNode$jn);
      var __iconNode$jm = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m10 8 4 4-4 4", key: "1wy4r4" }]
      ];
      var CircleChevronRight = createLucideIcon("circle-chevron-right", __iconNode$jm);
      var __iconNode$jl = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m8 14 4-4 4 4", key: "fy2ptz" }]
      ];
      var CircleChevronUp = createLucideIcon("circle-chevron-up", __iconNode$jl);
      var __iconNode$jk = [
        ["path", { d: "M10.1 2.182a10 10 0 0 1 3.8 0", key: "5ilxe3" }],
        ["path", { d: "M13.9 21.818a10 10 0 0 1-3.8 0", key: "11zvb9" }],
        ["path", { d: "M17.609 3.721a10 10 0 0 1 2.69 2.7", key: "1iw5b2" }],
        ["path", { d: "M2.182 13.9a10 10 0 0 1 0-3.8", key: "c0bmvh" }],
        ["path", { d: "M20.279 17.609a10 10 0 0 1-2.7 2.69", key: "1ruxm7" }],
        ["path", { d: "M21.818 10.1a10 10 0 0 1 0 3.8", key: "qkgqxc" }],
        ["path", { d: "M3.721 6.391a10 10 0 0 1 2.7-2.69", key: "1mcia2" }],
        ["path", { d: "M6.391 20.279a10 10 0 0 1-2.69-2.7", key: "1fvljs" }]
      ];
      var CircleDashed = createLucideIcon("circle-dashed", __iconNode$jk);
      var __iconNode$jj = [
        ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }],
        ["line", { x1: "12", x2: "12", y1: "16", y2: "16", key: "aqc6ln" }],
        ["line", { x1: "12", x2: "12", y1: "8", y2: "8", key: "1mkcni" }],
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
      ];
      var CircleDivide = createLucideIcon("circle-divide", __iconNode$jj);
      var __iconNode$ji = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8", key: "1h4pet" }],
        ["path", { d: "M12 18V6", key: "zqpxq5" }]
      ];
      var CircleDollarSign = createLucideIcon("circle-dollar-sign", __iconNode$ji);
      var __iconNode$jh = [
        ["path", { d: "M10.1 2.18a9.93 9.93 0 0 1 3.8 0", key: "1qdqn0" }],
        ["path", { d: "M17.6 3.71a9.95 9.95 0 0 1 2.69 2.7", key: "1bq7p6" }],
        ["path", { d: "M21.82 10.1a9.93 9.93 0 0 1 0 3.8", key: "1rlaqf" }],
        ["path", { d: "M20.29 17.6a9.95 9.95 0 0 1-2.7 2.69", key: "1xk03u" }],
        ["path", { d: "M13.9 21.82a9.94 9.94 0 0 1-3.8 0", key: "l7re25" }],
        ["path", { d: "M6.4 20.29a9.95 9.95 0 0 1-2.69-2.7", key: "1v18p6" }],
        ["path", { d: "M2.18 13.9a9.93 9.93 0 0 1 0-3.8", key: "xdo6bj" }],
        ["path", { d: "M3.71 6.4a9.95 9.95 0 0 1 2.7-2.69", key: "1jjmaz" }],
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
      ];
      var CircleDotDashed = createLucideIcon("circle-dot-dashed", __iconNode$jh);
      var __iconNode$jg = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M17 12h.01", key: "1m0b6t" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }],
        ["path", { d: "M7 12h.01", key: "eqddd0" }]
      ];
      var CircleEllipsis = createLucideIcon("circle-ellipsis", __iconNode$jg);
      var __iconNode$jf = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
      ];
      var CircleDot = createLucideIcon("circle-dot", __iconNode$jf);
      var __iconNode$je = [
        ["path", { d: "M7 10h10", key: "1101jm" }],
        ["path", { d: "M7 14h10", key: "1mhdw3" }],
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
      ];
      var CircleEqual = createLucideIcon("circle-equal", __iconNode$je);
      var __iconNode$jd = [
        ["path", { d: "M12 2a10 10 0 0 1 7.38 16.75", key: "175t95" }],
        ["path", { d: "m16 12-4-4-4 4", key: "177agl" }],
        ["path", { d: "M12 16V8", key: "1sbj14" }],
        ["path", { d: "M2.5 8.875a10 10 0 0 0-.5 3", key: "1vce0s" }],
        ["path", { d: "M2.83 16a10 10 0 0 0 2.43 3.4", key: "o3fkw4" }],
        ["path", { d: "M4.636 5.235a10 10 0 0 1 .891-.857", key: "1szpfk" }],
        ["path", { d: "M8.644 21.42a10 10 0 0 0 7.631-.38", key: "9yhvd4" }]
      ];
      var CircleFadingArrowUp = createLucideIcon("circle-fading-arrow-up", __iconNode$jd);
      var __iconNode$jc = [
        ["path", { d: "M15.6 2.7a10 10 0 1 0 5.7 5.7", key: "1e0p6d" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
        ["path", { d: "M13.4 10.6 19 5", key: "1kr7tw" }]
      ];
      var CircleGauge = createLucideIcon("circle-gauge", __iconNode$jc);
      var __iconNode$jb = [
        ["path", { d: "M12 2a10 10 0 0 1 7.38 16.75", key: "175t95" }],
        ["path", { d: "M12 8v8", key: "napkw2" }],
        ["path", { d: "M16 12H8", key: "1fr5h0" }],
        ["path", { d: "M2.5 8.875a10 10 0 0 0-.5 3", key: "1vce0s" }],
        ["path", { d: "M2.83 16a10 10 0 0 0 2.43 3.4", key: "o3fkw4" }],
        ["path", { d: "M4.636 5.235a10 10 0 0 1 .891-.857", key: "1szpfk" }],
        ["path", { d: "M8.644 21.42a10 10 0 0 0 7.631-.38", key: "9yhvd4" }]
      ];
      var CircleFadingPlus = createLucideIcon("circle-fading-plus", __iconNode$jb);
      var __iconNode$ja = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3", key: "1u773s" }],
        ["path", { d: "M12 17h.01", key: "p32p05" }]
      ];
      var CircleHelp = createLucideIcon("circle-help", __iconNode$ja);
      var __iconNode$j9 = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }]
      ];
      var CircleMinus = createLucideIcon("circle-minus", __iconNode$j9);
      var __iconNode$j8 = [
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M8.35 2.69A10 10 0 0 1 21.3 15.65", key: "1pfsoa" }],
        ["path", { d: "M19.08 19.08A10 10 0 1 1 4.92 4.92", key: "1ablyi" }]
      ];
      var CircleOff = createLucideIcon("circle-off", __iconNode$j8);
      var __iconNode$j7 = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m5 5 14 14", key: "11anup" }],
        ["path", { d: "M13 13a3 3 0 1 0 0-6H9v2", key: "uoagbd" }],
        ["path", { d: "M9 17v-2.34", key: "a9qo08" }]
      ];
      var CircleParkingOff = createLucideIcon("circle-parking-off", __iconNode$j7);
      var __iconNode$j6 = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M9 17V7h4a3 3 0 0 1 0 6H9", key: "1dfk2c" }]
      ];
      var CircleParking = createLucideIcon("circle-parking", __iconNode$j6);
      var __iconNode$j5 = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["line", { x1: "10", x2: "10", y1: "15", y2: "9", key: "c1nkhi" }],
        ["line", { x1: "14", x2: "14", y1: "15", y2: "9", key: "h65svq" }]
      ];
      var CirclePause = createLucideIcon("circle-pause", __iconNode$j5);
      var __iconNode$j4 = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polygon", { points: "10 8 16 12 10 16 10 8", key: "1cimsy" }]
      ];
      var CirclePlay = createLucideIcon("circle-play", __iconNode$j4);
      var __iconNode$j3 = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        ["path", { d: "M9 9h.01", key: "1q5me6" }],
        ["path", { d: "M15 15h.01", key: "lqbp3k" }]
      ];
      var CirclePercent = createLucideIcon("circle-percent", __iconNode$j3);
      var __iconNode$j2 = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "M12 8v8", key: "napkw2" }]
      ];
      var CirclePlus = createLucideIcon("circle-plus", __iconNode$j2);
      var __iconNode$j1 = [
        ["path", { d: "M12 7v4", key: "xawao1" }],
        ["path", { d: "M7.998 9.003a5 5 0 1 0 8-.005", key: "1pek45" }],
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
      ];
      var CirclePower = createLucideIcon("circle-power", __iconNode$j1);
      var __iconNode$j0 = [
        ["path", { d: "M22 2 2 22", key: "y4kqgn" }],
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
      ];
      var CircleSlash2 = createLucideIcon("circle-slash-2", __iconNode$j0);
      var __iconNode$i$ = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["line", { x1: "9", x2: "15", y1: "15", y2: "9", key: "1dfufj" }]
      ];
      var CircleSlash = createLucideIcon("circle-slash", __iconNode$i$);
      var __iconNode$i_ = [["circle", { cx: "12", cy: "12", r: "6", key: "1vlfrh" }]];
      var CircleSmall = createLucideIcon("circle-small", __iconNode$i_);
      var __iconNode$iZ = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["rect", { x: "9", y: "9", width: "6", height: "6", rx: "1", key: "1ssd4o" }]
      ];
      var CircleStop = createLucideIcon("circle-stop", __iconNode$iZ);
      var __iconNode$iY = [
        ["path", { d: "M18 20a6 6 0 0 0-12 0", key: "1qehca" }],
        ["circle", { cx: "12", cy: "10", r: "4", key: "1h16sb" }],
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
      ];
      var CircleUserRound = createLucideIcon("circle-user-round", __iconNode$iY);
      var __iconNode$iX = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
        ["path", { d: "M7 20.662V19a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v1.662", key: "154egf" }]
      ];
      var CircleUser = createLucideIcon("circle-user", __iconNode$iX);
      var __iconNode$iW = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        ["path", { d: "m9 9 6 6", key: "z0biqf" }]
      ];
      var CircleX = createLucideIcon("circle-x", __iconNode$iW);
      var __iconNode$iV = [["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]];
      var Circle = createLucideIcon("circle", __iconNode$iV);
      var __iconNode$iU = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M11 9h4a2 2 0 0 0 2-2V3", key: "1ve2rv" }],
        ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
        ["path", { d: "M7 21v-4a2 2 0 0 1 2-2h4", key: "1fwkro" }],
        ["circle", { cx: "15", cy: "15", r: "2", key: "3i40o0" }]
      ];
      var CircuitBoard = createLucideIcon("circuit-board", __iconNode$iU);
      var __iconNode$iT = [
        [
          "path",
          {
            d: "M21.66 17.67a1.08 1.08 0 0 1-.04 1.6A12 12 0 0 1 4.73 2.38a1.1 1.1 0 0 1 1.61-.04z",
            key: "4ite01"
          }
        ],
        ["path", { d: "M19.65 15.66A8 8 0 0 1 8.35 4.34", key: "1gxipu" }],
        ["path", { d: "m14 10-5.5 5.5", key: "92pfem" }],
        ["path", { d: "M14 17.85V10H6.15", key: "xqmtsk" }]
      ];
      var Citrus = createLucideIcon("citrus", __iconNode$iT);
      var __iconNode$iS = [
        [
          "path",
          { d: "M20.2 6 3 11l-.9-2.4c-.3-1.1.3-2.2 1.3-2.5l13.5-4c1.1-.3 2.2.3 2.5 1.3Z", key: "1tn4o7" }
        ],
        ["path", { d: "m6.2 5.3 3.1 3.9", key: "iuk76l" }],
        ["path", { d: "m12.4 3.4 3.1 4", key: "6hsd6n" }],
        ["path", { d: "M3 11h18v8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Z", key: "ltgou9" }]
      ];
      var Clapperboard = createLucideIcon("clapperboard", __iconNode$iS);
      var __iconNode$iR = [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
        [
          "path",
          {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
          }
        ],
        ["path", { d: "m9 14 2 2 4-4", key: "df797q" }]
      ];
      var ClipboardCheck2 = createLucideIcon("clipboard-check", __iconNode$iR);
      var __iconNode$iQ = [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
        ["path", { d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2", key: "4jdomd" }],
        ["path", { d: "M16 4h2a2 2 0 0 1 2 2v4", key: "3hqy98" }],
        ["path", { d: "M21 14H11", key: "1bme5i" }],
        ["path", { d: "m15 10-4 4 4 4", key: "5dvupr" }]
      ];
      var ClipboardCopy = createLucideIcon("clipboard-copy", __iconNode$iQ);
      var __iconNode$iP = [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
        [
          "path",
          {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
          }
        ],
        ["path", { d: "M12 11h4", key: "1jrz19" }],
        ["path", { d: "M12 16h4", key: "n85exb" }],
        ["path", { d: "M8 11h.01", key: "1dfujw" }],
        ["path", { d: "M8 16h.01", key: "18s6g9" }]
      ];
      var ClipboardList = createLucideIcon("clipboard-list", __iconNode$iP);
      var __iconNode$iO = [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
        [
          "path",
          {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
          }
        ],
        ["path", { d: "M9 14h6", key: "159ibu" }]
      ];
      var ClipboardMinus = createLucideIcon("clipboard-minus", __iconNode$iO);
      var __iconNode$iN = [
        ["path", { d: "M11 14h10", key: "1w8e9d" }],
        ["path", { d: "M16 4h2a2 2 0 0 1 2 2v1.344", key: "1e62lh" }],
        ["path", { d: "m17 18 4-4-4-4", key: "z2g111" }],
        ["path", { d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 1.793-1.113", key: "bjbb7m" }],
        ["rect", { x: "8", y: "2", width: "8", height: "4", rx: "1", key: "ublpy" }]
      ];
      var ClipboardPaste = createLucideIcon("clipboard-paste", __iconNode$iN);
      var __iconNode$iM = [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", key: "1oijnt" }],
        ["path", { d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-.5", key: "1but9f" }],
        ["path", { d: "M16 4h2a2 2 0 0 1 1.73 1", key: "1p8n7l" }],
        ["path", { d: "M8 18h1", key: "13wk12" }],
        [
          "path",
          {
            d: "M21.378 12.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
            key: "2t3380"
          }
        ]
      ];
      var ClipboardPenLine = createLucideIcon("clipboard-pen-line", __iconNode$iM);
      var __iconNode$iL = [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", key: "1oijnt" }],
        ["path", { d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-5.5", key: "cereej" }],
        ["path", { d: "M4 13.5V6a2 2 0 0 1 2-2h2", key: "5ua5vh" }],
        [
          "path",
          {
            d: "M13.378 15.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
            key: "1y4qbx"
          }
        ]
      ];
      var ClipboardPen = createLucideIcon("clipboard-pen", __iconNode$iL);
      var __iconNode$iK = [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
        [
          "path",
          {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
          }
        ],
        ["path", { d: "M9 12v-1h6v1", key: "iehl6m" }],
        ["path", { d: "M11 17h2", key: "12w5me" }],
        ["path", { d: "M12 11v6", key: "1bwqyc" }]
      ];
      var ClipboardType = createLucideIcon("clipboard-type", __iconNode$iK);
      var __iconNode$iJ = [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
        [
          "path",
          {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
          }
        ],
        ["path", { d: "M9 14h6", key: "159ibu" }],
        ["path", { d: "M12 17v-6", key: "1y8rbf" }]
      ];
      var ClipboardPlus = createLucideIcon("clipboard-plus", __iconNode$iJ);
      var __iconNode$iI = [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
        [
          "path",
          {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
          }
        ],
        ["path", { d: "m15 11-6 6", key: "1toa9n" }],
        ["path", { d: "m9 11 6 6", key: "wlibny" }]
      ];
      var ClipboardX = createLucideIcon("clipboard-x", __iconNode$iI);
      var __iconNode$iH = [
        ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
        [
          "path",
          {
            d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
            key: "116196"
          }
        ]
      ];
      var Clipboard = createLucideIcon("clipboard", __iconNode$iH);
      var __iconNode$iG = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 14.5 8", key: "12zbmj" }]
      ];
      var Clock1 = createLucideIcon("clock-1", __iconNode$iG);
      var __iconNode$iF = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 8 10", key: "atfzqc" }]
      ];
      var Clock10 = createLucideIcon("clock-10", __iconNode$iF);
      var __iconNode$iE = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 9.5 8", key: "l5bg6f" }]
      ];
      var Clock11 = createLucideIcon("clock-11", __iconNode$iE);
      var __iconNode$iD = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12", key: "1fub01" }]
      ];
      var Clock12 = createLucideIcon("clock-12", __iconNode$iD);
      var __iconNode$iC = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 16 10", key: "1g230d" }]
      ];
      var Clock22 = createLucideIcon("clock-2", __iconNode$iC);
      var __iconNode$iB = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 16.5 12", key: "1aq6pp" }]
      ];
      var Clock3 = createLucideIcon("clock-3", __iconNode$iB);
      var __iconNode$iA = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 16 14", key: "68esgv" }]
      ];
      var Clock4 = createLucideIcon("clock-4", __iconNode$iA);
      var __iconNode$iz = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 14.5 16", key: "1pcbox" }]
      ];
      var Clock5 = createLucideIcon("clock-5", __iconNode$iz);
      var __iconNode$iy = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 12 16.5", key: "hb2qv6" }]
      ];
      var Clock6 = createLucideIcon("clock-6", __iconNode$iy);
      var __iconNode$ix = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 9.5 16", key: "ka3394" }]
      ];
      var Clock7 = createLucideIcon("clock-7", __iconNode$ix);
      var __iconNode$iw = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 8 14", key: "tmc9b4" }]
      ];
      var Clock8 = createLucideIcon("clock-8", __iconNode$iw);
      var __iconNode$iv = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 7.5 12", key: "1k60p0" }]
      ];
      var Clock9 = createLucideIcon("clock-9", __iconNode$iv);
      var __iconNode$iu = [
        ["path", { d: "M12 6v6l4 2", key: "mmk7yg" }],
        ["path", { d: "M16 21.16a10 10 0 1 1 5-13.516", key: "cxo92l" }],
        ["path", { d: "M20 11.5v6", key: "2ei3xq" }],
        ["path", { d: "M20 21.5h.01", key: "1r2dzp" }]
      ];
      var ClockAlert = createLucideIcon("clock-alert", __iconNode$iu);
      var __iconNode$it = [
        ["path", { d: "M12.338 21.994A10 10 0 1 1 21.925 13.227", key: "1i7shu" }],
        ["path", { d: "M12 6v6l2 1", key: "19cm8n" }],
        ["path", { d: "m14 18 4 4 4-4", key: "1waygx" }],
        ["path", { d: "M18 14v8", key: "irew45" }]
      ];
      var ClockArrowDown = createLucideIcon("clock-arrow-down", __iconNode$it);
      var __iconNode$is = [
        ["path", { d: "M13.228 21.925A10 10 0 1 1 21.994 12.338", key: "1fzlyi" }],
        ["path", { d: "M12 6v6l1.562.781", key: "1ujuk9" }],
        ["path", { d: "m14 18 4-4 4 4", key: "ftkppy" }],
        ["path", { d: "M18 22v-8", key: "su0gjh" }]
      ];
      var ClockArrowUp = createLucideIcon("clock-arrow-up", __iconNode$is);
      var __iconNode$ir = [
        ["path", { d: "M12 2a10 10 0 0 1 7.38 16.75", key: "175t95" }],
        ["path", { d: "M12 6v6l4 2", key: "mmk7yg" }],
        ["path", { d: "M2.5 8.875a10 10 0 0 0-.5 3", key: "1vce0s" }],
        ["path", { d: "M2.83 16a10 10 0 0 0 2.43 3.4", key: "o3fkw4" }],
        ["path", { d: "M4.636 5.235a10 10 0 0 1 .891-.857", key: "1szpfk" }],
        ["path", { d: "M8.644 21.42a10 10 0 0 0 7.631-.38", key: "9yhvd4" }]
      ];
      var ClockFading = createLucideIcon("clock-fading", __iconNode$ir);
      var __iconNode$iq = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["polyline", { points: "12 6 12 12 16 14", key: "68esgv" }]
      ];
      var Clock13 = createLucideIcon("clock", __iconNode$iq);
      var __iconNode$ip = [
        ["path", { d: "M12 12v4", key: "tww15h" }],
        ["path", { d: "M12 20h.01", key: "zekei9" }],
        ["path", { d: "M17 18h.5a1 1 0 0 0 0-9h-1.79A7 7 0 1 0 7 17.708", key: "xsb5ju" }]
      ];
      var CloudAlert = createLucideIcon("cloud-alert", __iconNode$ip);
      var __iconNode$io = [
        ["path", { d: "m10.852 19.772-.383.924", key: "r7sl7d" }],
        ["path", { d: "m13.148 14.228.383-.923", key: "1d5zpm" }],
        ["path", { d: "M13.148 19.772a3 3 0 1 0-2.296-5.544l-.383-.923", key: "1ydik7" }],
        ["path", { d: "m13.53 20.696-.382-.924a3 3 0 1 1-2.296-5.544", key: "1m1vsf" }],
        ["path", { d: "m14.772 15.852.923-.383", key: "660p6e" }],
        ["path", { d: "m14.772 18.148.923.383", key: "hrcpis" }],
        [
          "path",
          {
            d: "M4.2 15.1a7 7 0 1 1 9.93-9.858A7 7 0 0 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.2",
            key: "j2q98n"
          }
        ],
        ["path", { d: "m9.228 15.852-.923-.383", key: "1p9ong" }],
        ["path", { d: "m9.228 18.148-.923.383", key: "6558rz" }]
      ];
      var CloudCog = createLucideIcon("cloud-cog", __iconNode$io);
      var __iconNode$in = [
        ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
        ["path", { d: "M8 19v1", key: "1dk2by" }],
        ["path", { d: "M8 14v1", key: "84yxot" }],
        ["path", { d: "M16 19v1", key: "v220m7" }],
        ["path", { d: "M16 14v1", key: "g12gj6" }],
        ["path", { d: "M12 21v1", key: "q8vafk" }],
        ["path", { d: "M12 16v1", key: "1mx6rx" }]
      ];
      var CloudDrizzle = createLucideIcon("cloud-drizzle", __iconNode$in);
      var __iconNode$im = [
        ["path", { d: "M12 13v8l-4-4", key: "1f5nwf" }],
        ["path", { d: "m12 21 4-4", key: "1lfcce" }],
        ["path", { d: "M4.393 15.269A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.436 8.284", key: "ui1hmy" }]
      ];
      var CloudDownload = createLucideIcon("cloud-download", __iconNode$im);
      var __iconNode$il = [
        ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
        ["path", { d: "M16 17H7", key: "pygtm1" }],
        ["path", { d: "M17 21H9", key: "1u2q02" }]
      ];
      var CloudFog = createLucideIcon("cloud-fog", __iconNode$il);
      var __iconNode$ik = [
        ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
        ["path", { d: "M16 14v2", key: "a1is7l" }],
        ["path", { d: "M8 14v2", key: "1e9m6t" }],
        ["path", { d: "M16 20h.01", key: "xwek51" }],
        ["path", { d: "M8 20h.01", key: "1vjney" }],
        ["path", { d: "M12 16v2", key: "z66u1j" }],
        ["path", { d: "M12 22h.01", key: "1urd7a" }]
      ];
      var CloudHail = createLucideIcon("cloud-hail", __iconNode$ik);
      var __iconNode$ij = [
        ["path", { d: "M6 16.326A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 .5 8.973", key: "1cez44" }],
        ["path", { d: "m13 12-3 5h4l-3 5", key: "1t22er" }]
      ];
      var CloudLightning = createLucideIcon("cloud-lightning", __iconNode$ij);
      var __iconNode$ii = [
        ["path", { d: "M10.188 8.5A6 6 0 0 1 16 4a1 1 0 0 0 6 6 6 6 0 0 1-3 5.197", key: "erj67n" }],
        ["path", { d: "M11 20v2", key: "174qtz" }],
        ["path", { d: "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24", key: "1qmrp3" }],
        ["path", { d: "M7 19v2", key: "12npes" }]
      ];
      var CloudMoonRain = createLucideIcon("cloud-moon-rain", __iconNode$ii);
      var __iconNode$ih = [
        ["path", { d: "M10.188 8.5A6 6 0 0 1 16 4a1 1 0 0 0 6 6 6 6 0 0 1-3 5.197", key: "erj67n" }],
        ["path", { d: "M13 16a3 3 0 1 1 0 6H7a5 5 0 1 1 4.9-6Z", key: "p44pc9" }]
      ];
      var CloudMoon = createLucideIcon("cloud-moon", __iconNode$ih);
      var __iconNode$ig = [
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M5.782 5.782A7 7 0 0 0 9 19h8.5a4.5 4.5 0 0 0 1.307-.193", key: "yfwify" }],
        [
          "path",
          { d: "M21.532 16.5A4.5 4.5 0 0 0 17.5 10h-1.79A7.008 7.008 0 0 0 10 5.07", key: "jlfiyv" }
        ]
      ];
      var CloudOff = createLucideIcon("cloud-off", __iconNode$ig);
      var __iconNode$if = [
        ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
        ["path", { d: "m9.2 22 3-7", key: "sb5f6j" }],
        ["path", { d: "m9 13-3 7", key: "500co5" }],
        ["path", { d: "m17 13-3 7", key: "8t2fiy" }]
      ];
      var CloudRainWind = createLucideIcon("cloud-rain-wind", __iconNode$if);
      var __iconNode$ie = [
        ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
        ["path", { d: "M16 14v6", key: "1j4efv" }],
        ["path", { d: "M8 14v6", key: "17c4r9" }],
        ["path", { d: "M12 16v6", key: "c8a4gj" }]
      ];
      var CloudRain = createLucideIcon("cloud-rain", __iconNode$ie);
      var __iconNode$id = [
        ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
        ["path", { d: "M8 15h.01", key: "a7atzg" }],
        ["path", { d: "M8 19h.01", key: "puxtts" }],
        ["path", { d: "M12 17h.01", key: "p32p05" }],
        ["path", { d: "M12 21h.01", key: "h35vbk" }],
        ["path", { d: "M16 15h.01", key: "rnfrdf" }],
        ["path", { d: "M16 19h.01", key: "1vcnzz" }]
      ];
      var CloudSnow = createLucideIcon("cloud-snow", __iconNode$id);
      var __iconNode$ic = [
        ["path", { d: "M12 2v2", key: "tus03m" }],
        ["path", { d: "m4.93 4.93 1.41 1.41", key: "149t6j" }],
        ["path", { d: "M20 12h2", key: "1q8mjw" }],
        ["path", { d: "m19.07 4.93-1.41 1.41", key: "1shlcs" }],
        ["path", { d: "M15.947 12.65a4 4 0 0 0-5.925-4.128", key: "dpwdj0" }],
        ["path", { d: "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24", key: "1qmrp3" }],
        ["path", { d: "M11 20v2", key: "174qtz" }],
        ["path", { d: "M7 19v2", key: "12npes" }]
      ];
      var CloudSunRain = createLucideIcon("cloud-sun-rain", __iconNode$ic);
      var __iconNode$ib = [
        ["path", { d: "M12 2v2", key: "tus03m" }],
        ["path", { d: "m4.93 4.93 1.41 1.41", key: "149t6j" }],
        ["path", { d: "M20 12h2", key: "1q8mjw" }],
        ["path", { d: "m19.07 4.93-1.41 1.41", key: "1shlcs" }],
        ["path", { d: "M15.947 12.65a4 4 0 0 0-5.925-4.128", key: "dpwdj0" }],
        ["path", { d: "M13 22H7a5 5 0 1 1 4.9-6H13a3 3 0 0 1 0 6Z", key: "s09mg5" }]
      ];
      var CloudSun = createLucideIcon("cloud-sun", __iconNode$ib);
      var __iconNode$ia = [
        ["path", { d: "M12 13v8", key: "1l5pq0" }],
        ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
        ["path", { d: "m8 17 4-4 4 4", key: "1quai1" }]
      ];
      var CloudUpload = createLucideIcon("cloud-upload", __iconNode$ia);
      var __iconNode$i9 = [
        ["path", { d: "M17.5 19H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z", key: "p7xjir" }]
      ];
      var Cloud = createLucideIcon("cloud", __iconNode$i9);
      var __iconNode$i8 = [
        ["path", { d: "M17.5 21H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z", key: "gqqjvc" }],
        ["path", { d: "M22 10a3 3 0 0 0-3-3h-2.207a5.502 5.502 0 0 0-10.702.5", key: "1p2s76" }]
      ];
      var Cloudy = createLucideIcon("cloudy", __iconNode$i8);
      var __iconNode$i7 = [
        ["path", { d: "M16.17 7.83 2 22", key: "t58vo8" }],
        [
          "path",
          {
            d: "M4.02 12a2.827 2.827 0 1 1 3.81-4.17A2.827 2.827 0 1 1 12 4.02a2.827 2.827 0 1 1 4.17 3.81A2.827 2.827 0 1 1 19.98 12a2.827 2.827 0 1 1-3.81 4.17A2.827 2.827 0 1 1 12 19.98a2.827 2.827 0 1 1-4.17-3.81A1 1 0 1 1 4 12",
            key: "17k36q"
          }
        ],
        ["path", { d: "m7.83 7.83 8.34 8.34", key: "1d7sxk" }]
      ];
      var Clover = createLucideIcon("clover", __iconNode$i7);
      var __iconNode$i6 = [
        [
          "path",
          {
            d: "M17.28 9.05a5.5 5.5 0 1 0-10.56 0A5.5 5.5 0 1 0 12 17.66a5.5 5.5 0 1 0 5.28-8.6Z",
            key: "27yuqz"
          }
        ],
        ["path", { d: "M12 17.66L12 22", key: "ogfahf" }]
      ];
      var Club = createLucideIcon("club", __iconNode$i6);
      var __iconNode$i5 = [
        ["path", { d: "m18 16 4-4-4-4", key: "1inbqp" }],
        ["path", { d: "m6 8-4 4 4 4", key: "15zrgr" }],
        ["path", { d: "m14.5 4-5 16", key: "e7oirm" }]
      ];
      var CodeXml = createLucideIcon("code-xml", __iconNode$i5);
      var __iconNode$i4 = [
        ["polyline", { points: "16 18 22 12 16 6", key: "z7tu5w" }],
        ["polyline", { points: "8 6 2 12 8 18", key: "1eg1df" }]
      ];
      var Code = createLucideIcon("code", __iconNode$i4);
      var __iconNode$i3 = [
        ["polygon", { points: "12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2", key: "srzb37" }],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "15.5", key: "1t73f2" }],
        ["polyline", { points: "22 8.5 12 15.5 2 8.5", key: "ajlxae" }],
        ["polyline", { points: "2 15.5 12 8.5 22 15.5", key: "susrui" }],
        ["line", { x1: "12", x2: "12", y1: "2", y2: "8.5", key: "2cldga" }]
      ];
      var Codepen = createLucideIcon("codepen", __iconNode$i3);
      var __iconNode$i2 = [
        [
          "path",
          {
            d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
            key: "yt0hxn"
          }
        ],
        ["polyline", { points: "7.5 4.21 12 6.81 16.5 4.21", key: "fabo96" }],
        ["polyline", { points: "7.5 19.79 7.5 14.6 3 12", key: "z377f1" }],
        ["polyline", { points: "21 12 16.5 14.6 16.5 19.79", key: "9nrev1" }],
        ["polyline", { points: "3.27 6.96 12 12.01 20.73 6.96", key: "1180pa" }],
        ["line", { x1: "12", x2: "12", y1: "22.08", y2: "12", key: "3z3uq6" }]
      ];
      var Codesandbox = createLucideIcon("codesandbox", __iconNode$i2);
      var __iconNode$i1 = [
        ["path", { d: "M10 2v2", key: "7u0qdc" }],
        ["path", { d: "M14 2v2", key: "6buw04" }],
        [
          "path",
          {
            d: "M16 8a1 1 0 0 1 1 1v8a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4V9a1 1 0 0 1 1-1h14a4 4 0 1 1 0 8h-1",
            key: "pwadti"
          }
        ],
        ["path", { d: "M6 2v2", key: "colzsn" }]
      ];
      var Coffee = createLucideIcon("coffee", __iconNode$i1);
      var __iconNode$i0 = [
        ["path", { d: "M12 20a8 8 0 1 0 0-16 8 8 0 0 0 0 16Z", key: "sobvz5" }],
        ["path", { d: "M12 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z", key: "11i496" }],
        ["path", { d: "M12 2v2", key: "tus03m" }],
        ["path", { d: "M12 22v-2", key: "1osdcq" }],
        ["path", { d: "m17 20.66-1-1.73", key: "eq3orb" }],
        ["path", { d: "M11 10.27 7 3.34", key: "16pf9h" }],
        ["path", { d: "m20.66 17-1.73-1", key: "sg0v6f" }],
        ["path", { d: "m3.34 7 1.73 1", key: "1ulond" }],
        ["path", { d: "M14 12h8", key: "4f43i9" }],
        ["path", { d: "M2 12h2", key: "1t8f8n" }],
        ["path", { d: "m20.66 7-1.73 1", key: "1ow05n" }],
        ["path", { d: "m3.34 17 1.73-1", key: "nuk764" }],
        ["path", { d: "m17 3.34-1 1.73", key: "2wel8s" }],
        ["path", { d: "m11 13.73-4 6.93", key: "794ttg" }]
      ];
      var Cog = createLucideIcon("cog", __iconNode$i0);
      var __iconNode$h$ = [
        ["circle", { cx: "8", cy: "8", r: "6", key: "3yglwk" }],
        ["path", { d: "M18.09 10.37A6 6 0 1 1 10.34 18", key: "t5s6rm" }],
        ["path", { d: "M7 6h1v4", key: "1obek4" }],
        ["path", { d: "m16.71 13.88.7.71-2.82 2.82", key: "1rbuyh" }]
      ];
      var Coins = createLucideIcon("coins", __iconNode$h$);
      var __iconNode$h_ = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M12 3v18", key: "108xh3" }]
      ];
      var Columns2 = createLucideIcon("columns-2", __iconNode$h_);
      var __iconNode$hZ = [
        ["path", { d: "M10.5 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v5.5", key: "1g2yzs" }],
        ["path", { d: "m14.3 19.6 1-.4", key: "11sv9r" }],
        ["path", { d: "M15 3v7.5", key: "7lm50a" }],
        ["path", { d: "m15.2 16.9-.9-.3", key: "1t7mvx" }],
        ["path", { d: "m16.6 21.7.3-.9", key: "1j67ps" }],
        ["path", { d: "m16.8 15.3-.4-1", key: "1ei7r6" }],
        ["path", { d: "m19.1 15.2.3-.9", key: "18r7jp" }],
        ["path", { d: "m19.6 21.7-.4-1", key: "z2vh2" }],
        ["path", { d: "m20.7 16.8 1-.4", key: "19m87a" }],
        ["path", { d: "m21.7 19.4-.9-.3", key: "1qgwi9" }],
        ["path", { d: "M9 3v18", key: "fh3hqa" }],
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }]
      ];
      var Columns3Cog = createLucideIcon("columns-3-cog", __iconNode$hZ);
      var __iconNode$hY = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 3v18", key: "fh3hqa" }],
        ["path", { d: "M15 3v18", key: "14nvp0" }]
      ];
      var Columns3 = createLucideIcon("columns-3", __iconNode$hY);
      var __iconNode$hX = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M7.5 3v18", key: "w0wo6v" }],
        ["path", { d: "M12 3v18", key: "108xh3" }],
        ["path", { d: "M16.5 3v18", key: "10tjh1" }]
      ];
      var Columns4 = createLucideIcon("columns-4", __iconNode$hX);
      var __iconNode$hW = [
        ["path", { d: "M10 18H5a3 3 0 0 1-3-3v-1", key: "ru65g8" }],
        ["path", { d: "M14 2a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2", key: "e30een" }],
        ["path", { d: "M20 2a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2", key: "2ahx8o" }],
        ["path", { d: "m7 21 3-3-3-3", key: "127cv2" }],
        ["rect", { x: "14", y: "14", width: "8", height: "8", rx: "2", key: "1b0bso" }],
        ["rect", { x: "2", y: "2", width: "8", height: "8", rx: "2", key: "1x09vl" }]
      ];
      var Combine = createLucideIcon("combine", __iconNode$hW);
      var __iconNode$hV = [
        [
          "path",
          { d: "M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3", key: "11bfej" }
        ]
      ];
      var Command = createLucideIcon("command", __iconNode$hV);
      var __iconNode$hU = [
        [
          "path",
          {
            d: "m16.24 7.76-1.804 5.411a2 2 0 0 1-1.265 1.265L7.76 16.24l1.804-5.411a2 2 0 0 1 1.265-1.265z",
            key: "9ktpf1"
          }
        ],
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
      ];
      var Compass = createLucideIcon("compass", __iconNode$hU);
      var __iconNode$hT = [
        [
          "path",
          {
            d: "M15.536 11.293a1 1 0 0 0 0 1.414l2.376 2.377a1 1 0 0 0 1.414 0l2.377-2.377a1 1 0 0 0 0-1.414l-2.377-2.377a1 1 0 0 0-1.414 0z",
            key: "1uwlt4"
          }
        ],
        [
          "path",
          {
            d: "M2.297 11.293a1 1 0 0 0 0 1.414l2.377 2.377a1 1 0 0 0 1.414 0l2.377-2.377a1 1 0 0 0 0-1.414L6.088 8.916a1 1 0 0 0-1.414 0z",
            key: "10291m"
          }
        ],
        [
          "path",
          {
            d: "M8.916 17.912a1 1 0 0 0 0 1.415l2.377 2.376a1 1 0 0 0 1.414 0l2.377-2.376a1 1 0 0 0 0-1.415l-2.377-2.376a1 1 0 0 0-1.414 0z",
            key: "1tqoq1"
          }
        ],
        [
          "path",
          {
            d: "M8.916 4.674a1 1 0 0 0 0 1.414l2.377 2.376a1 1 0 0 0 1.414 0l2.377-2.376a1 1 0 0 0 0-1.414l-2.377-2.377a1 1 0 0 0-1.414 0z",
            key: "1x6lto"
          }
        ]
      ];
      var Component4 = createLucideIcon("component", __iconNode$hT);
      var __iconNode$hS = [
        ["rect", { width: "14", height: "8", x: "5", y: "2", rx: "2", key: "wc9tft" }],
        ["rect", { width: "20", height: "8", x: "2", y: "14", rx: "2", key: "w68u3i" }],
        ["path", { d: "M6 18h2", key: "rwmk9e" }],
        ["path", { d: "M12 18h6", key: "aqd8w3" }]
      ];
      var Computer = createLucideIcon("computer", __iconNode$hS);
      var __iconNode$hR = [
        [
          "path",
          { d: "M3 20a1 1 0 0 1-1-1v-1a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1Z", key: "1pvr1r" }
        ],
        ["path", { d: "M20 16a8 8 0 1 0-16 0", key: "1pa543" }],
        ["path", { d: "M12 4v4", key: "1bq03y" }],
        ["path", { d: "M10 4h4", key: "1xpv9s" }]
      ];
      var ConciergeBell = createLucideIcon("concierge-bell", __iconNode$hR);
      var __iconNode$hQ = [
        ["path", { d: "m20.9 18.55-8-15.98a1 1 0 0 0-1.8 0l-8 15.98", key: "53pte7" }],
        ["ellipse", { cx: "12", cy: "19", rx: "9", ry: "3", key: "1ji25f" }]
      ];
      var Cone = createLucideIcon("cone", __iconNode$hQ);
      var __iconNode$hP = [
        ["rect", { x: "2", y: "6", width: "20", height: "8", rx: "1", key: "1estib" }],
        ["path", { d: "M17 14v7", key: "7m2elx" }],
        ["path", { d: "M7 14v7", key: "1cm7wv" }],
        ["path", { d: "M17 3v3", key: "1v4jwn" }],
        ["path", { d: "M7 3v3", key: "7o6guu" }],
        ["path", { d: "M10 14 2.3 6.3", key: "1023jk" }],
        ["path", { d: "m14 6 7.7 7.7", key: "1s8pl2" }],
        ["path", { d: "m8 6 8 8", key: "hl96qh" }]
      ];
      var Construction = createLucideIcon("construction", __iconNode$hP);
      var __iconNode$hO = [
        ["path", { d: "M16 2v2", key: "scm5qe" }],
        ["path", { d: "M17.915 22a6 6 0 0 0-12 0", key: "suqz9p" }],
        ["path", { d: "M8 2v2", key: "pbkmx" }],
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
        ["rect", { x: "3", y: "4", width: "18", height: "18", rx: "2", key: "12vinp" }]
      ];
      var ContactRound = createLucideIcon("contact-round", __iconNode$hO);
      var __iconNode$hN = [
        ["path", { d: "M16 2v2", key: "scm5qe" }],
        ["path", { d: "M7 22v-2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2", key: "1waht3" }],
        ["path", { d: "M8 2v2", key: "pbkmx" }],
        ["circle", { cx: "12", cy: "11", r: "3", key: "itu57m" }],
        ["rect", { x: "3", y: "4", width: "18", height: "18", rx: "2", key: "12vinp" }]
      ];
      var Contact2 = createLucideIcon("contact", __iconNode$hN);
      var __iconNode$hM = [
        [
          "path",
          {
            d: "M22 7.7c0-.6-.4-1.2-.8-1.5l-6.3-3.9a1.72 1.72 0 0 0-1.7 0l-10.3 6c-.5.2-.9.8-.9 1.4v6.6c0 .5.4 1.2.8 1.5l6.3 3.9a1.72 1.72 0 0 0 1.7 0l10.3-6c.5-.3.9-1 .9-1.5Z",
            key: "1t2lqe"
          }
        ],
        ["path", { d: "M10 21.9V14L2.1 9.1", key: "o7czzq" }],
        ["path", { d: "m10 14 11.9-6.9", key: "zm5e20" }],
        ["path", { d: "M14 19.8v-8.1", key: "159ecu" }],
        ["path", { d: "M18 17.5V9.4", key: "11uown" }]
      ];
      var Container = createLucideIcon("container", __iconNode$hM);
      var __iconNode$hL = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M12 18a6 6 0 0 0 0-12v12z", key: "j4l70d" }]
      ];
      var Contrast = createLucideIcon("contrast", __iconNode$hL);
      var __iconNode$hK = [
        ["path", { d: "M12 2a10 10 0 1 0 10 10 4 4 0 0 1-5-5 4 4 0 0 1-5-5", key: "laymnq" }],
        ["path", { d: "M8.5 8.5v.01", key: "ue8clq" }],
        ["path", { d: "M16 15.5v.01", key: "14dtrp" }],
        ["path", { d: "M12 12v.01", key: "u5ubse" }],
        ["path", { d: "M11 17v.01", key: "1hyl5a" }],
        ["path", { d: "M7 14v.01", key: "uct60s" }]
      ];
      var Cookie = createLucideIcon("cookie", __iconNode$hK);
      var __iconNode$hJ = [
        ["path", { d: "M2 12h20", key: "9i4pu4" }],
        ["path", { d: "M20 12v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-8", key: "u0tga0" }],
        ["path", { d: "m4 8 16-4", key: "16g0ng" }],
        [
          "path",
          {
            d: "m8.86 6.78-.45-1.81a2 2 0 0 1 1.45-2.43l1.94-.48a2 2 0 0 1 2.43 1.46l.45 1.8",
            key: "12cejc"
          }
        ]
      ];
      var CookingPot = createLucideIcon("cooking-pot", __iconNode$hJ);
      var __iconNode$hI = [
        ["path", { d: "m12 15 2 2 4-4", key: "2c609p" }],
        ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
        ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
      ];
      var CopyCheck = createLucideIcon("copy-check", __iconNode$hI);
      var __iconNode$hH = [
        ["line", { x1: "12", x2: "18", y1: "15", y2: "15", key: "1nscbv" }],
        ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
        ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
      ];
      var CopyMinus = createLucideIcon("copy-minus", __iconNode$hH);
      var __iconNode$hG = [
        ["line", { x1: "15", x2: "15", y1: "12", y2: "18", key: "1p7wdc" }],
        ["line", { x1: "12", x2: "18", y1: "15", y2: "15", key: "1nscbv" }],
        ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
        ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
      ];
      var CopyPlus = createLucideIcon("copy-plus", __iconNode$hG);
      var __iconNode$hF = [
        ["line", { x1: "12", x2: "18", y1: "18", y2: "12", key: "ebkxgr" }],
        ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
        ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
      ];
      var CopySlash = createLucideIcon("copy-slash", __iconNode$hF);
      var __iconNode$hE = [
        ["line", { x1: "12", x2: "18", y1: "12", y2: "18", key: "1rg63v" }],
        ["line", { x1: "12", x2: "18", y1: "18", y2: "12", key: "ebkxgr" }],
        ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
        ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
      ];
      var CopyX = createLucideIcon("copy-x", __iconNode$hE);
      var __iconNode$hD = [
        ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
        ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
      ];
      var Copy = createLucideIcon("copy", __iconNode$hD);
      var __iconNode$hC = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M9.17 14.83a4 4 0 1 0 0-5.66", key: "1sveal" }]
      ];
      var Copyleft = createLucideIcon("copyleft", __iconNode$hC);
      var __iconNode$hB = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M14.83 14.83a4 4 0 1 1 0-5.66", key: "1i56pz" }]
      ];
      var Copyright = createLucideIcon("copyright", __iconNode$hB);
      var __iconNode$hA = [
        ["polyline", { points: "9 10 4 15 9 20", key: "r3jprv" }],
        ["path", { d: "M20 4v7a4 4 0 0 1-4 4H4", key: "6o5b7l" }]
      ];
      var CornerDownLeft = createLucideIcon("corner-down-left", __iconNode$hA);
      var __iconNode$hz = [
        ["polyline", { points: "15 10 20 15 15 20", key: "1q7qjw" }],
        ["path", { d: "M4 4v7a4 4 0 0 0 4 4h12", key: "z08zvw" }]
      ];
      var CornerDownRight = createLucideIcon("corner-down-right", __iconNode$hz);
      var __iconNode$hy = [
        ["polyline", { points: "14 15 9 20 4 15", key: "nkc4i" }],
        ["path", { d: "M20 4h-7a4 4 0 0 0-4 4v12", key: "nbpdq2" }]
      ];
      var CornerLeftDown = createLucideIcon("corner-left-down", __iconNode$hy);
      var __iconNode$hx = [
        ["polyline", { points: "14 9 9 4 4 9", key: "m9oyvo" }],
        ["path", { d: "M20 20h-7a4 4 0 0 1-4-4V4", key: "1blwi3" }]
      ];
      var CornerLeftUp = createLucideIcon("corner-left-up", __iconNode$hx);
      var __iconNode$hw = [
        ["polyline", { points: "10 15 15 20 20 15", key: "axus6l" }],
        ["path", { d: "M4 4h7a4 4 0 0 1 4 4v12", key: "wcbgct" }]
      ];
      var CornerRightDown = createLucideIcon("corner-right-down", __iconNode$hw);
      var __iconNode$hv = [
        ["polyline", { points: "10 9 15 4 20 9", key: "1lr6px" }],
        ["path", { d: "M4 20h7a4 4 0 0 0 4-4V4", key: "1plgdj" }]
      ];
      var CornerRightUp = createLucideIcon("corner-right-up", __iconNode$hv);
      var __iconNode$hu = [
        ["polyline", { points: "9 14 4 9 9 4", key: "881910" }],
        ["path", { d: "M20 20v-7a4 4 0 0 0-4-4H4", key: "1nkjon" }]
      ];
      var CornerUpLeft = createLucideIcon("corner-up-left", __iconNode$hu);
      var __iconNode$ht = [
        ["polyline", { points: "15 14 20 9 15 4", key: "1tbx3s" }],
        ["path", { d: "M4 20v-7a4 4 0 0 1 4-4h12", key: "1lu4f8" }]
      ];
      var CornerUpRight = createLucideIcon("corner-up-right", __iconNode$ht);
      var __iconNode$hs = [
        ["path", { d: "M12 20v2", key: "1lh1kg" }],
        ["path", { d: "M12 2v2", key: "tus03m" }],
        ["path", { d: "M17 20v2", key: "1rnc9c" }],
        ["path", { d: "M17 2v2", key: "11trls" }],
        ["path", { d: "M2 12h2", key: "1t8f8n" }],
        ["path", { d: "M2 17h2", key: "7oei6x" }],
        ["path", { d: "M2 7h2", key: "asdhe0" }],
        ["path", { d: "M20 12h2", key: "1q8mjw" }],
        ["path", { d: "M20 17h2", key: "1fpfkl" }],
        ["path", { d: "M20 7h2", key: "1o8tra" }],
        ["path", { d: "M7 20v2", key: "4gnj0m" }],
        ["path", { d: "M7 2v2", key: "1i4yhu" }],
        ["rect", { x: "4", y: "4", width: "16", height: "16", rx: "2", key: "1vbyd7" }],
        ["rect", { x: "8", y: "8", width: "8", height: "8", rx: "1", key: "z9xiuo" }]
      ];
      var Cpu = createLucideIcon("cpu", __iconNode$hs);
      var __iconNode$hr = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        [
          "path",
          { d: "M10 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1", key: "1ss3eq" }
        ],
        [
          "path",
          { d: "M17 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1", key: "1od56t" }
        ]
      ];
      var CreativeCommons = createLucideIcon("creative-commons", __iconNode$hr);
      var __iconNode$hq = [
        ["rect", { width: "20", height: "14", x: "2", y: "5", rx: "2", key: "ynyp8z" }],
        ["line", { x1: "2", x2: "22", y1: "10", y2: "10", key: "1b3vmo" }]
      ];
      var CreditCard = createLucideIcon("credit-card", __iconNode$hq);
      var __iconNode$hp = [
        [
          "path",
          {
            d: "m4.6 13.11 5.79-3.21c1.89-1.05 4.79 1.78 3.71 3.71l-3.22 5.81C8.8 23.16.79 15.23 4.6 13.11Z",
            key: "1ozxlb"
          }
        ],
        [
          "path",
          {
            d: "m10.5 9.5-1-2.29C9.2 6.48 8.8 6 8 6H4.5C2.79 6 2 6.5 2 8.5a7.71 7.71 0 0 0 2 4.83",
            key: "ffuyb5"
          }
        ],
        ["path", { d: "M8 6c0-1.55.24-4-2-4-2 0-2.5 2.17-2.5 4", key: "osnpzi" }],
        [
          "path",
          {
            d: "m14.5 13.5 2.29 1c.73.3 1.21.7 1.21 1.5v3.5c0 1.71-.5 2.5-2.5 2.5a7.71 7.71 0 0 1-4.83-2",
            key: "1vubaw"
          }
        ],
        ["path", { d: "M18 16c1.55 0 4-.24 4 2 0 2-2.17 2.5-4 2.5", key: "wxr772" }]
      ];
      var Croissant = createLucideIcon("croissant", __iconNode$hp);
      var __iconNode$ho = [
        ["path", { d: "M6 2v14a2 2 0 0 0 2 2h14", key: "ron5a4" }],
        ["path", { d: "M18 22V8a2 2 0 0 0-2-2H2", key: "7s9ehn" }]
      ];
      var Crop = createLucideIcon("crop", __iconNode$ho);
      var __iconNode$hn = [
        [
          "path",
          {
            d: "M4 9a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h4a1 1 0 0 1 1 1v4a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-4a1 1 0 0 1 1-1h4a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-4a1 1 0 0 1-1-1V4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4a1 1 0 0 1-1 1z",
            key: "1xbrqy"
          }
        ]
      ];
      var Cross = createLucideIcon("cross", __iconNode$hn);
      var __iconNode$hm = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["line", { x1: "22", x2: "18", y1: "12", y2: "12", key: "l9bcsi" }],
        ["line", { x1: "6", x2: "2", y1: "12", y2: "12", key: "13hhkx" }],
        ["line", { x1: "12", x2: "12", y1: "6", y2: "2", key: "10w3f3" }],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "18", key: "15g9kq" }]
      ];
      var Crosshair = createLucideIcon("crosshair", __iconNode$hm);
      var __iconNode$hl = [
        [
          "path",
          {
            d: "M11.562 3.266a.5.5 0 0 1 .876 0L15.39 8.87a1 1 0 0 0 1.516.294L21.183 5.5a.5.5 0 0 1 .798.519l-2.834 10.246a1 1 0 0 1-.956.734H5.81a1 1 0 0 1-.957-.734L2.02 6.02a.5.5 0 0 1 .798-.519l4.276 3.664a1 1 0 0 0 1.516-.294z",
            key: "1vdc57"
          }
        ],
        ["path", { d: "M5 21h14", key: "11awu3" }]
      ];
      var Crown = createLucideIcon("crown", __iconNode$hl);
      var __iconNode$hk = [
        [
          "path",
          {
            d: "m21.12 6.4-6.05-4.06a2 2 0 0 0-2.17-.05L2.95 8.41a2 2 0 0 0-.95 1.7v5.82a2 2 0 0 0 .88 1.66l6.05 4.07a2 2 0 0 0 2.17.05l9.95-6.12a2 2 0 0 0 .95-1.7V8.06a2 2 0 0 0-.88-1.66Z",
            key: "1u2ovd"
          }
        ],
        ["path", { d: "M10 22v-8L2.25 9.15", key: "11pn4q" }],
        ["path", { d: "m10 14 11.77-6.87", key: "1kt1wh" }]
      ];
      var Cuboid = createLucideIcon("cuboid", __iconNode$hk);
      var __iconNode$hj = [
        ["path", { d: "m6 8 1.75 12.28a2 2 0 0 0 2 1.72h4.54a2 2 0 0 0 2-1.72L18 8", key: "8166m8" }],
        ["path", { d: "M5 8h14", key: "pcz4l3" }],
        ["path", { d: "M7 15a6.47 6.47 0 0 1 5 0 6.47 6.47 0 0 0 5 0", key: "yjz344" }],
        ["path", { d: "m12 8 1-6h2", key: "3ybfa4" }]
      ];
      var CupSoda = createLucideIcon("cup-soda", __iconNode$hj);
      var __iconNode$hi = [
        ["circle", { cx: "12", cy: "12", r: "8", key: "46899m" }],
        ["line", { x1: "3", x2: "6", y1: "3", y2: "6", key: "1jkytn" }],
        ["line", { x1: "21", x2: "18", y1: "3", y2: "6", key: "14zfjt" }],
        ["line", { x1: "3", x2: "6", y1: "21", y2: "18", key: "iusuec" }],
        ["line", { x1: "21", x2: "18", y1: "21", y2: "18", key: "yj2dd7" }]
      ];
      var Currency = createLucideIcon("currency", __iconNode$hi);
      var __iconNode$hh = [
        ["ellipse", { cx: "12", cy: "5", rx: "9", ry: "3", key: "msslwz" }],
        ["path", { d: "M3 5v14a9 3 0 0 0 18 0V5", key: "aqi0yr" }]
      ];
      var Cylinder = createLucideIcon("cylinder", __iconNode$hh);
      var __iconNode$hg = [
        [
          "path",
          { d: "M11 11.31c1.17.56 1.54 1.69 3.5 1.69 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1", key: "157kva" }
        ],
        ["path", { d: "M11.75 18c.35.5 1.45 1 2.75 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1", key: "d7q6m6" }],
        ["path", { d: "M2 10h4", key: "l0bgd4" }],
        ["path", { d: "M2 14h4", key: "1gsvsf" }],
        ["path", { d: "M2 18h4", key: "1bu2t1" }],
        ["path", { d: "M2 6h4", key: "aawbzj" }],
        [
          "path",
          { d: "M7 3a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1L10 4a1 1 0 0 0-1-1z", key: "pr6s65" }
        ]
      ];
      var Dam = createLucideIcon("dam", __iconNode$hg);
      var __iconNode$hf = [
        ["ellipse", { cx: "12", cy: "5", rx: "9", ry: "3", key: "msslwz" }],
        ["path", { d: "M3 12a9 3 0 0 0 5 2.69", key: "1ui2ym" }],
        ["path", { d: "M21 9.3V5", key: "6k6cib" }],
        ["path", { d: "M3 5v14a9 3 0 0 0 6.47 2.88", key: "i62tjy" }],
        ["path", { d: "M12 12v4h4", key: "1bxaet" }],
        [
          "path",
          {
            d: "M13 20a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L12 16",
            key: "1f4ei9"
          }
        ]
      ];
      var DatabaseBackup = createLucideIcon("database-backup", __iconNode$hf);
      var __iconNode$he = [
        ["ellipse", { cx: "12", cy: "5", rx: "9", ry: "3", key: "msslwz" }],
        ["path", { d: "M3 5V19A9 3 0 0 0 15 21.84", key: "14ibmq" }],
        ["path", { d: "M21 5V8", key: "1marbg" }],
        ["path", { d: "M21 12L18 17H22L19 22", key: "zafso" }],
        ["path", { d: "M3 12A9 3 0 0 0 14.59 14.87", key: "1y4wr8" }]
      ];
      var DatabaseZap = createLucideIcon("database-zap", __iconNode$he);
      var __iconNode$hd = [
        ["ellipse", { cx: "12", cy: "5", rx: "9", ry: "3", key: "msslwz" }],
        ["path", { d: "M3 5V19A9 3 0 0 0 21 19V5", key: "1wlel7" }],
        ["path", { d: "M3 12A9 3 0 0 0 21 12", key: "mv7ke4" }]
      ];
      var Database = createLucideIcon("database", __iconNode$hd);
      var __iconNode$hc = [
        ["path", { d: "m13 21-3-3 3-3", key: "s3o1nf" }],
        ["path", { d: "M20 18H10", key: "14r3mt" }],
        ["path", { d: "M3 11h.01", key: "1eifu7" }],
        ["rect", { x: "6", y: "3", width: "5", height: "8", rx: "2.5", key: "v9paqo" }]
      ];
      var DecimalsArrowLeft = createLucideIcon("decimals-arrow-left", __iconNode$hc);
      var __iconNode$hb = [
        ["path", { d: "M10 18h10", key: "1y5s8o" }],
        ["path", { d: "m17 21 3-3-3-3", key: "1ammt0" }],
        ["path", { d: "M3 11h.01", key: "1eifu7" }],
        ["rect", { x: "15", y: "3", width: "5", height: "8", rx: "2.5", key: "76md6a" }],
        ["rect", { x: "6", y: "3", width: "5", height: "8", rx: "2.5", key: "v9paqo" }]
      ];
      var DecimalsArrowRight = createLucideIcon("decimals-arrow-right", __iconNode$hb);
      var __iconNode$ha = [
        [
          "path",
          {
            d: "M10 5a2 2 0 0 0-1.344.519l-6.328 5.74a1 1 0 0 0 0 1.481l6.328 5.741A2 2 0 0 0 10 19h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2z",
            key: "1yo7s0"
          }
        ],
        ["path", { d: "m12 9 6 6", key: "anjzzh" }],
        ["path", { d: "m18 9-6 6", key: "1fp51s" }]
      ];
      var Delete = createLucideIcon("delete", __iconNode$ha);
      var __iconNode$h9 = [
        ["circle", { cx: "12", cy: "4", r: "2", key: "muu5ef" }],
        [
          "path",
          {
            d: "M10.2 3.2C5.5 4 2 8.1 2 13a2 2 0 0 0 4 0v-1a2 2 0 0 1 4 0v4a2 2 0 0 0 4 0v-4a2 2 0 0 1 4 0v1a2 2 0 0 0 4 0c0-4.9-3.5-9-8.2-9.8",
            key: "lfo06j"
          }
        ],
        ["path", { d: "M3.2 14.8a9 9 0 0 0 17.6 0", key: "12xarc" }]
      ];
      var Dessert = createLucideIcon("dessert", __iconNode$h9);
      var __iconNode$h8 = [
        ["circle", { cx: "19", cy: "19", r: "2", key: "17f5cg" }],
        ["circle", { cx: "5", cy: "5", r: "2", key: "1gwv83" }],
        ["path", { d: "M6.48 3.66a10 10 0 0 1 13.86 13.86", key: "xr8kdq" }],
        ["path", { d: "m6.41 6.41 11.18 11.18", key: "uhpjw7" }],
        ["path", { d: "M3.66 6.48a10 10 0 0 0 13.86 13.86", key: "cldpwv" }]
      ];
      var Diameter = createLucideIcon("diameter", __iconNode$h8);
      var __iconNode$h7 = [
        [
          "path",
          {
            d: "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0z",
            key: "1ey20j"
          }
        ],
        ["path", { d: "M8 12h8", key: "1wcyev" }]
      ];
      var DiamondMinus = createLucideIcon("diamond-minus", __iconNode$h7);
      var __iconNode$h6 = [
        [
          "path",
          {
            d: "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0Z",
            key: "1tpxz2"
          }
        ],
        ["path", { d: "M9.2 9.2h.01", key: "1b7bvt" }],
        ["path", { d: "m14.5 9.5-5 5", key: "17q4r4" }],
        ["path", { d: "M14.7 14.8h.01", key: "17nsh4" }]
      ];
      var DiamondPercent = createLucideIcon("diamond-percent", __iconNode$h6);
      var __iconNode$h5 = [
        ["path", { d: "M12 8v8", key: "napkw2" }],
        [
          "path",
          {
            d: "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0z",
            key: "1ey20j"
          }
        ],
        ["path", { d: "M8 12h8", key: "1wcyev" }]
      ];
      var DiamondPlus = createLucideIcon("diamond-plus", __iconNode$h5);
      var __iconNode$h4 = [
        [
          "path",
          {
            d: "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41l-7.59-7.59a2.41 2.41 0 0 0-3.41 0Z",
            key: "1f1r0c"
          }
        ]
      ];
      var Diamond = createLucideIcon("diamond", __iconNode$h4);
      var __iconNode$h3 = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }]
      ];
      var Dice1 = createLucideIcon("dice-1", __iconNode$h3);
      var __iconNode$h2 = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "M15 9h.01", key: "x1ddxp" }],
        ["path", { d: "M9 15h.01", key: "fzyn71" }]
      ];
      var Dice2 = createLucideIcon("dice-2", __iconNode$h2);
      var __iconNode$h1 = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "M16 8h.01", key: "cr5u4v" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }],
        ["path", { d: "M8 16h.01", key: "18s6g9" }]
      ];
      var Dice3 = createLucideIcon("dice-3", __iconNode$h1);
      var __iconNode$h0 = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "M16 8h.01", key: "cr5u4v" }],
        ["path", { d: "M8 8h.01", key: "1e4136" }],
        ["path", { d: "M8 16h.01", key: "18s6g9" }],
        ["path", { d: "M16 16h.01", key: "1f9h7w" }]
      ];
      var Dice4 = createLucideIcon("dice-4", __iconNode$h0);
      var __iconNode$g$ = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "M16 8h.01", key: "cr5u4v" }],
        ["path", { d: "M8 8h.01", key: "1e4136" }],
        ["path", { d: "M8 16h.01", key: "18s6g9" }],
        ["path", { d: "M16 16h.01", key: "1f9h7w" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }]
      ];
      var Dice5 = createLucideIcon("dice-5", __iconNode$g$);
      var __iconNode$g_ = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "M16 8h.01", key: "cr5u4v" }],
        ["path", { d: "M16 12h.01", key: "1l6xoz" }],
        ["path", { d: "M16 16h.01", key: "1f9h7w" }],
        ["path", { d: "M8 8h.01", key: "1e4136" }],
        ["path", { d: "M8 12h.01", key: "czm47f" }],
        ["path", { d: "M8 16h.01", key: "18s6g9" }]
      ];
      var Dice6 = createLucideIcon("dice-6", __iconNode$g_);
      var __iconNode$gZ = [
        ["rect", { width: "12", height: "12", x: "2", y: "10", rx: "2", ry: "2", key: "6agr2n" }],
        [
          "path",
          { d: "m17.92 14 3.5-3.5a2.24 2.24 0 0 0 0-3l-5-4.92a2.24 2.24 0 0 0-3 0L10 6", key: "1o487t" }
        ],
        ["path", { d: "M6 18h.01", key: "uhywen" }],
        ["path", { d: "M10 14h.01", key: "ssrbsk" }],
        ["path", { d: "M15 6h.01", key: "cblpky" }],
        ["path", { d: "M18 9h.01", key: "2061c0" }]
      ];
      var Dices = createLucideIcon("dices", __iconNode$gZ);
      var __iconNode$gY = [
        ["path", { d: "M12 3v14", key: "7cf3v8" }],
        ["path", { d: "M5 10h14", key: "elsbfy" }],
        ["path", { d: "M5 21h14", key: "11awu3" }]
      ];
      var Diff = createLucideIcon("diff", __iconNode$gY);
      var __iconNode$gX = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }]
      ];
      var Disc2 = createLucideIcon("disc-2", __iconNode$gX);
      var __iconNode$gW = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M6 12c0-1.7.7-3.2 1.8-4.2", key: "oqkarx" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
        ["path", { d: "M18 12c0 1.7-.7 3.2-1.8 4.2", key: "1eah9h" }]
      ];
      var Disc3 = createLucideIcon("disc-3", __iconNode$gW);
      var __iconNode$gV = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
      ];
      var Disc = createLucideIcon("disc", __iconNode$gV);
      var __iconNode$gU = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["circle", { cx: "12", cy: "12", r: "5", key: "nd82uf" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }]
      ];
      var DiscAlbum = createLucideIcon("disc-album", __iconNode$gU);
      var __iconNode$gT = [
        ["circle", { cx: "12", cy: "6", r: "1", key: "1bh7o1" }],
        ["line", { x1: "5", x2: "19", y1: "12", y2: "12", key: "13b5wn" }],
        ["circle", { cx: "12", cy: "18", r: "1", key: "lqb9t5" }]
      ];
      var Divide = createLucideIcon("divide", __iconNode$gT);
      var __iconNode$gS = [
        ["path", { d: "M15 2c-1.35 1.5-2.092 3-2.5 4.5L14 8", key: "1bivrr" }],
        ["path", { d: "m17 6-2.891-2.891", key: "xu6p2f" }],
        ["path", { d: "M2 15c3.333-3 6.667-3 10-3", key: "nxix30" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "m20 9 .891.891", key: "3xwk7g" }],
        ["path", { d: "M22 9c-1.5 1.35-3 2.092-4.5 2.5l-1-1", key: "18cutr" }],
        ["path", { d: "M3.109 14.109 4 15", key: "q76aoh" }],
        ["path", { d: "m6.5 12.5 1 1", key: "cs35ky" }],
        ["path", { d: "m7 18 2.891 2.891", key: "1sisit" }],
        ["path", { d: "M9 22c1.35-1.5 2.092-3 2.5-4.5L10 16", key: "rlvei3" }]
      ];
      var DnaOff = createLucideIcon("dna-off", __iconNode$gS);
      var __iconNode$gR = [
        ["path", { d: "m10 16 1.5 1.5", key: "11lckj" }],
        ["path", { d: "m14 8-1.5-1.5", key: "1ohn8i" }],
        ["path", { d: "M15 2c-1.798 1.998-2.518 3.995-2.807 5.993", key: "80uv8i" }],
        ["path", { d: "m16.5 10.5 1 1", key: "696xn5" }],
        ["path", { d: "m17 6-2.891-2.891", key: "xu6p2f" }],
        ["path", { d: "M2 15c6.667-6 13.333 0 20-6", key: "1pyr53" }],
        ["path", { d: "m20 9 .891.891", key: "3xwk7g" }],
        ["path", { d: "M3.109 14.109 4 15", key: "q76aoh" }],
        ["path", { d: "m6.5 12.5 1 1", key: "cs35ky" }],
        ["path", { d: "m7 18 2.891 2.891", key: "1sisit" }],
        ["path", { d: "M9 22c1.798-1.998 2.518-3.995 2.807-5.993", key: "q3hbxp" }]
      ];
      var Dna = createLucideIcon("dna", __iconNode$gR);
      var __iconNode$gQ = [
        ["path", { d: "M2 8h20", key: "d11cs7" }],
        ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
        ["path", { d: "M6 16h12", key: "u522kt" }]
      ];
      var Dock = createLucideIcon("dock", __iconNode$gQ);
      var __iconNode$gP = [
        ["path", { d: "M11.25 16.25h1.5L12 17z", key: "w7jh35" }],
        ["path", { d: "M16 14v.5", key: "1lajdz" }],
        [
          "path",
          {
            d: "M4.42 11.247A13.152 13.152 0 0 0 4 14.556C4 18.728 7.582 21 12 21s8-2.272 8-6.444a11.702 11.702 0 0 0-.493-3.309",
            key: "u7s9ue"
          }
        ],
        ["path", { d: "M8 14v.5", key: "1nzgdb" }],
        [
          "path",
          {
            d: "M8.5 8.5c-.384 1.05-1.083 2.028-2.344 2.5-1.931.722-3.576-.297-3.656-1-.113-.994 1.177-6.53 4-7 1.923-.321 3.651.845 3.651 2.235A7.497 7.497 0 0 1 14 5.277c0-1.39 1.844-2.598 3.767-2.277 2.823.47 4.113 6.006 4 7-.08.703-1.725 1.722-3.656 1-1.261-.472-1.855-1.45-2.239-2.5",
            key: "v8hric"
          }
        ]
      ];
      var Dog = createLucideIcon("dog", __iconNode$gP);
      var __iconNode$gO = [
        ["line", { x1: "12", x2: "12", y1: "2", y2: "22", key: "7eqyqh" }],
        ["path", { d: "M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6", key: "1b0p4s" }]
      ];
      var DollarSign = createLucideIcon("dollar-sign", __iconNode$gO);
      var __iconNode$gN = [
        [
          "path",
          {
            d: "M20.5 10a2.5 2.5 0 0 1-2.4-3H18a2.95 2.95 0 0 1-2.6-4.4 10 10 0 1 0 6.3 7.1c-.3.2-.8.3-1.2.3",
            key: "19sr3x"
          }
        ],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
      ];
      var Donut = createLucideIcon("donut", __iconNode$gN);
      var __iconNode$gM = [
        ["path", { d: "M18 20V6a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v14", key: "36qu9e" }],
        ["path", { d: "M2 20h20", key: "owomy5" }],
        ["path", { d: "M14 12v.01", key: "xfcn54" }]
      ];
      var DoorClosed = createLucideIcon("door-closed", __iconNode$gM);
      var __iconNode$gL = [
        ["path", { d: "M13 4h3a2 2 0 0 1 2 2v14", key: "hrm0s9" }],
        ["path", { d: "M2 20h3", key: "1gaodv" }],
        ["path", { d: "M13 20h9", key: "s90cdi" }],
        ["path", { d: "M10 12v.01", key: "vx6srw" }],
        [
          "path",
          {
            d: "M13 4.562v16.157a1 1 0 0 1-1.242.97L5 20V5.562a2 2 0 0 1 1.515-1.94l4-1A2 2 0 0 1 13 4.561Z",
            key: "199qr4"
          }
        ]
      ];
      var DoorOpen = createLucideIcon("door-open", __iconNode$gL);
      var __iconNode$gK = [["circle", { cx: "12.1", cy: "12.1", r: "1", key: "18d7e5" }]];
      var Dot = createLucideIcon("dot", __iconNode$gK);
      var __iconNode$gJ = [
        ["path", { d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4", key: "ih7n3h" }],
        ["polyline", { points: "7 10 12 15 17 10", key: "2ggqvy" }],
        ["line", { x1: "12", x2: "12", y1: "15", y2: "3", key: "1vk2je" }]
      ];
      var Download5 = createLucideIcon("download", __iconNode$gJ);
      var __iconNode$gI = [
        ["path", { d: "m12.99 6.74 1.93 3.44", key: "iwagvd" }],
        ["path", { d: "M19.136 12a10 10 0 0 1-14.271 0", key: "ppmlo4" }],
        ["path", { d: "m21 21-2.16-3.84", key: "vylbct" }],
        ["path", { d: "m3 21 8.02-14.26", key: "1ssaw4" }],
        ["circle", { cx: "12", cy: "5", r: "2", key: "f1ur92" }]
      ];
      var DraftingCompass = createLucideIcon("drafting-compass", __iconNode$gI);
      var __iconNode$gH = [
        ["path", { d: "M10 11h.01", key: "d2at3l" }],
        ["path", { d: "M14 6h.01", key: "k028ub" }],
        ["path", { d: "M18 6h.01", key: "1v4wsw" }],
        ["path", { d: "M6.5 13.1h.01", key: "1748ia" }],
        ["path", { d: "M22 5c0 9-4 12-6 12s-6-3-6-12c0-2 2-3 6-3s6 1 6 3", key: "172yzv" }],
        ["path", { d: "M17.4 9.9c-.8.8-2 .8-2.8 0", key: "1obv0w" }],
        [
          "path",
          {
            d: "M10.1 7.1C9 7.2 7.7 7.7 6 8.6c-3.5 2-4.7 3.9-3.7 5.6 4.5 7.8 9.5 8.4 11.2 7.4.9-.5 1.9-2.1 1.9-4.7",
            key: "rqjl8i"
          }
        ],
        ["path", { d: "M9.1 16.5c.3-1.1 1.4-1.7 2.4-1.4", key: "1mr6wy" }]
      ];
      var Drama = createLucideIcon("drama", __iconNode$gH);
      var __iconNode$gG = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M19.13 5.09C15.22 9.14 10 10.44 2.25 10.94", key: "hpej1" }],
        ["path", { d: "M21.75 12.84c-6.62-1.41-12.14 1-16.38 6.32", key: "1tr44o" }],
        ["path", { d: "M8.56 2.75c4.37 6 6 9.42 8 17.72", key: "kbh691" }]
      ];
      var Dribbble = createLucideIcon("dribbble", __iconNode$gG);
      var __iconNode$gF = [
        [
          "path",
          { d: "M10 18a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H5a3 3 0 0 1-3-3 1 1 0 0 1 1-1z", key: "ioqxb1" }
        ],
        [
          "path",
          {
            d: "M13 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1l-.81 3.242a1 1 0 0 1-.97.758H8",
            key: "1rs59n"
          }
        ],
        ["path", { d: "M14 4h3a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-3", key: "105ega" }],
        ["path", { d: "M18 6h4", key: "66u95g" }],
        ["path", { d: "m5 10-2 8", key: "xt2lic" }],
        ["path", { d: "m7 18 2-8", key: "1bzku2" }]
      ];
      var Drill = createLucideIcon("drill", __iconNode$gF);
      var __iconNode$gE = [
        [
          "path",
          {
            d: "M18.715 13.186C18.29 11.858 17.384 10.607 16 9.5c-2-1.6-3.5-4-4-6.5a10.7 10.7 0 0 1-.884 2.586",
            key: "8suz2t"
          }
        ],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        [
          "path",
          { d: "M8.795 8.797A11 11 0 0 1 8 9.5C6 11.1 5 13 5 15a7 7 0 0 0 13.222 3.208", key: "19dw9m" }
        ]
      ];
      var DropletOff = createLucideIcon("droplet-off", __iconNode$gE);
      var __iconNode$gD = [
        [
          "path",
          {
            d: "M12 22a7 7 0 0 0 7-7c0-2-1-3.9-3-5.5s-3.5-4-4-6.5c-.5 2.5-2 4.9-4 6.5C6 11.1 5 13 5 15a7 7 0 0 0 7 7z",
            key: "c7niix"
          }
        ]
      ];
      var Droplet = createLucideIcon("droplet", __iconNode$gD);
      var __iconNode$gC = [
        [
          "path",
          {
            d: "M7 16.3c2.2 0 4-1.83 4-4.05 0-1.16-.57-2.26-1.71-3.19S7.29 6.75 7 5.3c-.29 1.45-1.14 2.84-2.29 3.76S3 11.1 3 12.25c0 2.22 1.8 4.05 4 4.05z",
            key: "1ptgy4"
          }
        ],
        [
          "path",
          {
            d: "M12.56 6.6A10.97 10.97 0 0 0 14 3.02c.5 2.5 2 4.9 4 6.5s3 3.5 3 5.5a6.98 6.98 0 0 1-11.91 4.97",
            key: "1sl1rz"
          }
        ]
      ];
      var Droplets = createLucideIcon("droplets", __iconNode$gC);
      var __iconNode$gB = [
        ["path", { d: "m2 2 8 8", key: "1v6059" }],
        ["path", { d: "m22 2-8 8", key: "173r8a" }],
        ["ellipse", { cx: "12", cy: "9", rx: "10", ry: "5", key: "liohsx" }],
        ["path", { d: "M7 13.4v7.9", key: "1yi6u9" }],
        ["path", { d: "M12 14v8", key: "1tn2tj" }],
        ["path", { d: "M17 13.4v7.9", key: "eqz2v3" }],
        ["path", { d: "M2 9v8a10 5 0 0 0 20 0V9", key: "1750ul" }]
      ];
      var Drum = createLucideIcon("drum", __iconNode$gB);
      var __iconNode$gA = [
        [
          "path",
          { d: "M15.4 15.63a7.875 6 135 1 1 6.23-6.23 4.5 3.43 135 0 0-6.23 6.23", key: "1dtqwm" }
        ],
        [
          "path",
          {
            d: "m8.29 12.71-2.6 2.6a2.5 2.5 0 1 0-1.65 4.65A2.5 2.5 0 1 0 8.7 18.3l2.59-2.59",
            key: "1oq1fw"
          }
        ]
      ];
      var Drumstick = createLucideIcon("drumstick", __iconNode$gA);
      var __iconNode$gz = [
        ["path", { d: "M14.4 14.4 9.6 9.6", key: "ic80wn" }],
        [
          "path",
          {
            d: "M18.657 21.485a2 2 0 1 1-2.829-2.828l-1.767 1.768a2 2 0 1 1-2.829-2.829l6.364-6.364a2 2 0 1 1 2.829 2.829l-1.768 1.767a2 2 0 1 1 2.828 2.829z",
            key: "nnl7wr"
          }
        ],
        ["path", { d: "m21.5 21.5-1.4-1.4", key: "1f1ice" }],
        ["path", { d: "M3.9 3.9 2.5 2.5", key: "1evmna" }],
        [
          "path",
          {
            d: "M6.404 12.768a2 2 0 1 1-2.829-2.829l1.768-1.767a2 2 0 1 1-2.828-2.829l2.828-2.828a2 2 0 1 1 2.829 2.828l1.767-1.768a2 2 0 1 1 2.829 2.829z",
            key: "yhosts"
          }
        ]
      ];
      var Dumbbell = createLucideIcon("dumbbell", __iconNode$gz);
      var __iconNode$gy = [
        ["path", { d: "M6 18.5a3.5 3.5 0 1 0 7 0c0-1.57.92-2.52 2.04-3.46", key: "1qngmn" }],
        ["path", { d: "M6 8.5c0-.75.13-1.47.36-2.14", key: "b06bma" }],
        ["path", { d: "M8.8 3.15A6.5 6.5 0 0 1 19 8.5c0 1.63-.44 2.81-1.09 3.76", key: "g10hsz" }],
        ["path", { d: "M12.5 6A2.5 2.5 0 0 1 15 8.5M10 13a2 2 0 0 0 1.82-1.18", key: "ygzou7" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var EarOff = createLucideIcon("ear-off", __iconNode$gy);
      var __iconNode$gx = [
        ["path", { d: "M6 8.5a6.5 6.5 0 1 1 13 0c0 6-6 6-6 10a3.5 3.5 0 1 1-7 0", key: "1dfaln" }],
        ["path", { d: "M15 8.5a2.5 2.5 0 0 0-5 0v1a2 2 0 1 1 0 4", key: "1qnva7" }]
      ];
      var Ear = createLucideIcon("ear", __iconNode$gx);
      var __iconNode$gw = [
        ["path", { d: "M7 3.34V5a3 3 0 0 0 3 3", key: "w732o8" }],
        ["path", { d: "M11 21.95V18a2 2 0 0 0-2-2 2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05", key: "f02343" }],
        ["path", { d: "M21.54 15H17a2 2 0 0 0-2 2v4.54", key: "1djwo0" }],
        ["path", { d: "M12 2a10 10 0 1 0 9.54 13", key: "zjsr6q" }],
        ["path", { d: "M20 6V4a2 2 0 1 0-4 0v2", key: "1of5e8" }],
        ["rect", { width: "8", height: "5", x: "14", y: "6", rx: "1", key: "1fmf51" }]
      ];
      var EarthLock = createLucideIcon("earth-lock", __iconNode$gw);
      var __iconNode$gv = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M12 2a7 7 0 1 0 10 10", key: "1yuj32" }]
      ];
      var Eclipse = createLucideIcon("eclipse", __iconNode$gv);
      var __iconNode$gu = [
        ["path", { d: "M21.54 15H17a2 2 0 0 0-2 2v4.54", key: "1djwo0" }],
        [
          "path",
          {
            d: "M7 3.34V5a3 3 0 0 0 3 3a2 2 0 0 1 2 2c0 1.1.9 2 2 2a2 2 0 0 0 2-2c0-1.1.9-2 2-2h3.17",
            key: "1tzkfa"
          }
        ],
        ["path", { d: "M11 21.95V18a2 2 0 0 0-2-2a2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05", key: "14pb5j" }],
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
      ];
      var Earth = createLucideIcon("earth", __iconNode$gu);
      var __iconNode$gt = [
        ["circle", { cx: "11.5", cy: "12.5", r: "3.5", key: "1cl1mi" }],
        [
          "path",
          {
            d: "M3 8c0-3.5 2.5-6 6.5-6 5 0 4.83 3 7.5 5s5 2 5 6c0 4.5-2.5 6.5-7 6.5-2.5 0-2.5 2.5-6 2.5s-7-2-7-5.5c0-3 1.5-3 1.5-5C3.5 10 3 9 3 8Z",
            key: "165ef9"
          }
        ]
      ];
      var EggFried = createLucideIcon("egg-fried", __iconNode$gt);
      var __iconNode$gs = [
        [
          "path",
          {
            d: "M6.399 6.399C5.362 8.157 4.65 10.189 4.5 12c-.37 4.43 1.27 9.95 7.5 10 3.256-.026 5.259-1.547 6.375-3.625",
            key: "6et380"
          }
        ],
        [
          "path",
          {
            d: "M19.532 13.875A14.07 14.07 0 0 0 19.5 12c-.36-4.34-3.95-9.96-7.5-10-1.04.012-2.082.502-3.046 1.297",
            key: "gcdc3f"
          }
        ],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var EggOff = createLucideIcon("egg-off", __iconNode$gs);
      var __iconNode$gr = [
        [
          "path",
          {
            d: "M12 22c6.23-.05 7.87-5.57 7.5-10-.36-4.34-3.95-9.96-7.5-10-3.55.04-7.14 5.66-7.5 10-.37 4.43 1.27 9.95 7.5 10z",
            key: "1c39pg"
          }
        ]
      ];
      var Egg = createLucideIcon("egg", __iconNode$gr);
      var __iconNode$gq = [
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
        ["circle", { cx: "19", cy: "12", r: "1", key: "1wjl8i" }],
        ["circle", { cx: "5", cy: "12", r: "1", key: "1pcz8c" }]
      ];
      var Ellipsis = createLucideIcon("ellipsis", __iconNode$gq);
      var __iconNode$gp = [
        ["path", { d: "M5 15a6.5 6.5 0 0 1 7 0 6.5 6.5 0 0 0 7 0", key: "yrdkhy" }],
        ["path", { d: "M5 9a6.5 6.5 0 0 1 7 0 6.5 6.5 0 0 0 7 0", key: "gzkvyz" }]
      ];
      var EqualApproximately = createLucideIcon("equal-approximately", __iconNode$gp);
      var __iconNode$go = [
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
        ["circle", { cx: "12", cy: "5", r: "1", key: "gxeob9" }],
        ["circle", { cx: "12", cy: "19", r: "1", key: "lyex9k" }]
      ];
      var EllipsisVertical = createLucideIcon("ellipsis-vertical", __iconNode$go);
      var __iconNode$gn = [
        ["line", { x1: "5", x2: "19", y1: "9", y2: "9", key: "1nwqeh" }],
        ["line", { x1: "5", x2: "19", y1: "15", y2: "15", key: "g8yjpy" }],
        ["line", { x1: "19", x2: "5", y1: "5", y2: "19", key: "1x9vlm" }]
      ];
      var EqualNot = createLucideIcon("equal-not", __iconNode$gn);
      var __iconNode$gm = [
        [
          "path",
          {
            d: "m7 21-4.3-4.3c-1-1-1-2.5 0-3.4l9.6-9.6c1-1 2.5-1 3.4 0l5.6 5.6c1 1 1 2.5 0 3.4L13 21",
            key: "182aya"
          }
        ],
        ["path", { d: "M22 21H7", key: "t4ddhn" }],
        ["path", { d: "m5 11 9 9", key: "1mo9qw" }]
      ];
      var Eraser = createLucideIcon("eraser", __iconNode$gm);
      var __iconNode$gl = [
        ["line", { x1: "5", x2: "19", y1: "9", y2: "9", key: "1nwqeh" }],
        ["line", { x1: "5", x2: "19", y1: "15", y2: "15", key: "g8yjpy" }]
      ];
      var Equal = createLucideIcon("equal", __iconNode$gl);
      var __iconNode$gk = [
        [
          "path",
          {
            d: "m15 20 3-3h2a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h2l3 3z",
            key: "rbahqx"
          }
        ],
        ["path", { d: "M6 8v1", key: "1636ez" }],
        ["path", { d: "M10 8v1", key: "1talb4" }],
        ["path", { d: "M14 8v1", key: "1rsfgr" }],
        ["path", { d: "M18 8v1", key: "gnkwox" }]
      ];
      var EthernetPort = createLucideIcon("ethernet-port", __iconNode$gk);
      var __iconNode$gj = [
        ["path", { d: "M4 10h12", key: "1y6xl8" }],
        ["path", { d: "M4 14h9", key: "1loblj" }],
        [
          "path",
          {
            d: "M19 6a7.7 7.7 0 0 0-5.2-2A7.9 7.9 0 0 0 6 12c0 4.4 3.5 8 7.8 8 2 0 3.8-.8 5.2-2",
            key: "1j6lzo"
          }
        ]
      ];
      var Euro = createLucideIcon("euro", __iconNode$gj);
      var __iconNode$gi = [
        ["path", { d: "m15 15 6 6", key: "1s409w" }],
        ["path", { d: "m15 9 6-6", key: "ko1vev" }],
        ["path", { d: "M21 16.2V21h-4.8", key: "1hrera" }],
        ["path", { d: "M21 7.8V3h-4.8", key: "ul1q53" }],
        ["path", { d: "M3 16.2V21h4.8", key: "1x04uo" }],
        ["path", { d: "m3 21 6-6", key: "wwnumi" }],
        ["path", { d: "M3 7.8V3h4.8", key: "1ijppm" }],
        ["path", { d: "M9 9 3 3", key: "v551iv" }]
      ];
      var Expand = createLucideIcon("expand", __iconNode$gi);
      var __iconNode$gh = [
        ["path", { d: "M15 3h6v6", key: "1q9fwt" }],
        ["path", { d: "M10 14 21 3", key: "gplh6r" }],
        ["path", { d: "M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6", key: "a6xqqp" }]
      ];
      var ExternalLink = createLucideIcon("external-link", __iconNode$gh);
      var __iconNode$gg = [
        ["path", { d: "m15 18-.722-3.25", key: "1j64jw" }],
        ["path", { d: "M2 8a10.645 10.645 0 0 0 20 0", key: "1e7gxb" }],
        ["path", { d: "m20 15-1.726-2.05", key: "1cnuld" }],
        ["path", { d: "m4 15 1.726-2.05", key: "1dsqqd" }],
        ["path", { d: "m9 18 .722-3.25", key: "ypw2yx" }]
      ];
      var EyeClosed = createLucideIcon("eye-closed", __iconNode$gg);
      var __iconNode$gf = [
        [
          "path",
          {
            d: "M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49",
            key: "ct8e1f"
          }
        ],
        ["path", { d: "M14.084 14.158a3 3 0 0 1-4.242-4.242", key: "151rxh" }],
        [
          "path",
          {
            d: "M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143",
            key: "13bj9a"
          }
        ],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ];
      var EyeOff = createLucideIcon("eye-off", __iconNode$gf);
      var __iconNode$ge = [
        [
          "path",
          {
            d: "M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0",
            key: "1nclc0"
          }
        ],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
      ];
      var Eye = createLucideIcon("eye", __iconNode$ge);
      var __iconNode$gd = [
        [
          "path",
          { d: "M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z", key: "1jg4f8" }
        ]
      ];
      var Facebook2 = createLucideIcon("facebook", __iconNode$gd);
      var __iconNode$gc = [
        [
          "path",
          {
            d: "M2 20a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8l-7 5V8l-7 5V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "159hny"
          }
        ],
        ["path", { d: "M17 18h1", key: "uldtlt" }],
        ["path", { d: "M12 18h1", key: "s9uhes" }],
        ["path", { d: "M7 18h1", key: "1neino" }]
      ];
      var Factory = createLucideIcon("factory", __iconNode$gc);
      var __iconNode$gb = [
        [
          "path",
          {
            d: "M10.827 16.379a6.082 6.082 0 0 1-8.618-7.002l5.412 1.45a6.082 6.082 0 0 1 7.002-8.618l-1.45 5.412a6.082 6.082 0 0 1 8.618 7.002l-5.412-1.45a6.082 6.082 0 0 1-7.002 8.618l1.45-5.412Z",
            key: "484a7f"
          }
        ],
        ["path", { d: "M12 12v.01", key: "u5ubse" }]
      ];
      var Fan = createLucideIcon("fan", __iconNode$gb);
      var __iconNode$ga = [
        ["polygon", { points: "13 19 22 12 13 5 13 19", key: "587y9g" }],
        ["polygon", { points: "2 19 11 12 2 5 2 19", key: "3pweh0" }]
      ];
      var FastForward = createLucideIcon("fast-forward", __iconNode$ga);
      var __iconNode$g9 = [
        ["path", { d: "M4 3 2 5v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z", key: "1n2rgs" }],
        ["path", { d: "M6 8h4", key: "utf9t1" }],
        ["path", { d: "M6 18h4", key: "12yh4b" }],
        ["path", { d: "m12 3-2 2v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z", key: "3ha7mj" }],
        ["path", { d: "M14 8h4", key: "1r8wg2" }],
        ["path", { d: "M14 18h4", key: "1t3kbu" }],
        ["path", { d: "m20 3-2 2v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z", key: "dfd4e2" }]
      ];
      var Fence = createLucideIcon("fence", __iconNode$g9);
      var __iconNode$g8 = [
        [
          "path",
          {
            d: "M12.67 19a2 2 0 0 0 1.416-.588l6.154-6.172a6 6 0 0 0-8.49-8.49L5.586 9.914A2 2 0 0 0 5 11.328V18a1 1 0 0 0 1 1z",
            key: "18jl4k"
          }
        ],
        ["path", { d: "M16 8 2 22", key: "vp34q" }],
        ["path", { d: "M17.5 15H9", key: "1oz8nu" }]
      ];
      var Feather = createLucideIcon("feather", __iconNode$g8);
      var __iconNode$g7 = [
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
        ["path", { d: "M12 2v4", key: "3427ic" }],
        ["path", { d: "m6.8 15-3.5 2", key: "hjy98k" }],
        ["path", { d: "m20.7 7-3.5 2", key: "f08gto" }],
        ["path", { d: "M6.8 9 3.3 7", key: "1aevh4" }],
        ["path", { d: "m20.7 17-3.5-2", key: "1liqo3" }],
        ["path", { d: "m9 22 3-8 3 8", key: "wees03" }],
        ["path", { d: "M8 22h8", key: "rmew8v" }],
        ["path", { d: "M18 18.7a9 9 0 1 0-12 0", key: "dhzg4g" }]
      ];
      var FerrisWheel = createLucideIcon("ferris-wheel", __iconNode$g7);
      var __iconNode$g6 = [
        ["path", { d: "M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z", key: "1340ok" }],
        ["path", { d: "M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z", key: "1hz3m3" }],
        ["path", { d: "M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z", key: "1oz8n2" }],
        ["path", { d: "M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z", key: "1ff65i" }],
        ["path", { d: "M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z", key: "pdip6e" }]
      ];
      var Figma = createLucideIcon("figma", __iconNode$g6);
      var __iconNode$g5 = [
        ["path", { d: "M10 12v-1", key: "v7bkov" }],
        ["path", { d: "M10 18v-2", key: "1cjy8d" }],
        ["path", { d: "M10 7V6", key: "dljcrl" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        [
          "path",
          { d: "M15.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v16a2 2 0 0 0 .274 1.01", key: "gkbcor" }
        ],
        ["circle", { cx: "10", cy: "20", r: "2", key: "1xzdoj" }]
      ];
      var FileArchive = createLucideIcon("file-archive", __iconNode$g5);
      var __iconNode$g4 = [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2", key: "17k7jt" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["circle", { cx: "3", cy: "17", r: "1", key: "vo6nti" }],
        ["path", { d: "M2 17v-3a4 4 0 0 1 8 0v3", key: "1ggdre" }],
        ["circle", { cx: "9", cy: "17", r: "1", key: "bc1fq4" }]
      ];
      var FileAudio2 = createLucideIcon("file-audio-2", __iconNode$g4);
      var __iconNode$g3 = [
        ["path", { d: "M17.5 22h.5a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3", key: "rslqgf" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        [
          "path",
          {
            d: "M2 19a2 2 0 1 1 4 0v1a2 2 0 1 1-4 0v-4a6 6 0 0 1 12 0v4a2 2 0 1 1-4 0v-1a2 2 0 1 1 4 0",
            key: "9f7x3i"
          }
        ]
      ];
      var FileAudio = createLucideIcon("file-audio", __iconNode$g3);
      var __iconNode$g2 = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m8 18 4-4", key: "12zab0" }],
        ["path", { d: "M8 10v8h8", key: "tlaukw" }]
      ];
      var FileAxis3d = createLucideIcon("file-axis-3d", __iconNode$g2);
      var __iconNode$g1 = [
        [
          "path",
          {
            d: "m13.69 12.479 1.29 4.88a.5.5 0 0 1-.697.591l-1.844-.849a1 1 0 0 0-.88.001l-1.846.85a.5.5 0 0 1-.693-.593l1.29-4.88",
            key: "7a4gmr"
          }
        ],
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z", key: "1mlx9k" }],
        ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }]
      ];
      var FileBadge2 = createLucideIcon("file-badge-2", __iconNode$g1);
      var __iconNode$g0 = [
        ["path", { d: "M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3", key: "12ixgl" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M5 17a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z", key: "u0c8gj" }],
        ["path", { d: "M7 16.5 8 22l-3-1-3 1 1-5.5", key: "5gm2nr" }]
      ];
      var FileBadge = createLucideIcon("file-badge", __iconNode$g0);
      var __iconNode$f$ = [
        ["path", { d: "M14.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "16lz6z" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        [
          "path",
          {
            d: "M3 13.1a2 2 0 0 0-1 1.76v3.24a2 2 0 0 0 .97 1.78L6 21.7a2 2 0 0 0 2.03.01L11 19.9a2 2 0 0 0 1-1.76V14.9a2 2 0 0 0-.97-1.78L8 11.3a2 2 0 0 0-2.03-.01Z",
            key: "99pj1s"
          }
        ],
        ["path", { d: "M7 17v5", key: "1yj1jh" }],
        ["path", { d: "M11.7 14.2 7 17l-4.7-2.8", key: "1yk8tc" }]
      ];
      var FileBox = createLucideIcon("file-box", __iconNode$f$);
      var __iconNode$f_ = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M8 18v-2", key: "qcmpov" }],
        ["path", { d: "M12 18v-4", key: "q1q25u" }],
        ["path", { d: "M16 18v-6", key: "15y0np" }]
      ];
      var FileChartColumnIncreasing = createLucideIcon("file-chart-column-increasing", __iconNode$f_);
      var __iconNode$fZ = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M8 18v-1", key: "zg0ygc" }],
        ["path", { d: "M12 18v-6", key: "17g6i2" }],
        ["path", { d: "M16 18v-3", key: "j5jt4h" }]
      ];
      var FileChartColumn = createLucideIcon("file-chart-column", __iconNode$fZ);
      var __iconNode$fY = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m16 13-3.5 3.5-2-2L8 17", key: "zz7yod" }]
      ];
      var FileChartLine = createLucideIcon("file-chart-line", __iconNode$fY);
      var __iconNode$fX = [
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3.5", key: "13ddob" }],
        ["path", { d: "M4.017 11.512a6 6 0 1 0 8.466 8.475", key: "s6vs5t" }],
        [
          "path",
          {
            d: "M9 16a1 1 0 0 1-1-1v-4c0-.552.45-1.008.995-.917a6 6 0 0 1 4.922 4.922c.091.544-.365.995-.917.995z",
            key: "1dl6s6"
          }
        ]
      ];
      var FileChartPie = createLucideIcon("file-chart-pie", __iconNode$fX);
      var __iconNode$fW = [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m3 15 2 2 4-4", key: "1lhrkk" }]
      ];
      var FileCheck2 = createLucideIcon("file-check-2", __iconNode$fW);
      var __iconNode$fV = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m9 15 2 2 4-4", key: "1grp1n" }]
      ];
      var FileCheck = createLucideIcon("file-check", __iconNode$fV);
      var __iconNode$fU = [
        ["path", { d: "M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3", key: "37hlfg" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["circle", { cx: "8", cy: "16", r: "6", key: "10v15b" }],
        ["path", { d: "M9.5 17.5 8 16.25V14", key: "1o80t2" }]
      ];
      var FileClock = createLucideIcon("file-clock", __iconNode$fU);
      var __iconNode$fT = [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m5 12-3 3 3 3", key: "oke12k" }],
        ["path", { d: "m9 18 3-3-3-3", key: "112psh" }]
      ];
      var FileCode2 = createLucideIcon("file-code-2", __iconNode$fT);
      var __iconNode$fS = [
        ["path", { d: "M10 12.5 8 15l2 2.5", key: "1tg20x" }],
        ["path", { d: "m14 12.5 2 2.5-2 2.5", key: "yinavb" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z", key: "1mlx9k" }]
      ];
      var FileCode = createLucideIcon("file-code", __iconNode$fS);
      var __iconNode$fR = [
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m2.305 15.53.923-.382", key: "yfp9st" }],
        ["path", { d: "m3.228 12.852-.924-.383", key: "bckynb" }],
        [
          "path",
          {
            d: "M4.677 21.5a2 2 0 0 0 1.313.5H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2.5",
            key: "1yo3oz"
          }
        ],
        ["path", { d: "m4.852 11.228-.383-.923", key: "1j88i9" }],
        ["path", { d: "m4.852 16.772-.383.924", key: "sag1dv" }],
        ["path", { d: "m7.148 11.228.383-.923", key: "rj39hk" }],
        ["path", { d: "m7.53 17.696-.382-.924", key: "1uu5cs" }],
        ["path", { d: "m8.772 12.852.923-.383", key: "13811l" }],
        ["path", { d: "m8.772 15.148.923.383", key: "z1a5l0" }],
        ["circle", { cx: "6", cy: "14", r: "3", key: "a1xfv6" }]
      ];
      var FileCog = createLucideIcon("file-cog", __iconNode$fR);
      var __iconNode$fQ = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M9 10h6", key: "9gxzsh" }],
        ["path", { d: "M12 13V7", key: "h0r20n" }],
        ["path", { d: "M9 17h6", key: "r8uit2" }]
      ];
      var FileDiff = createLucideIcon("file-diff", __iconNode$fQ);
      var __iconNode$fP = [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["rect", { width: "4", height: "6", x: "2", y: "12", rx: "2", key: "jm304g" }],
        ["path", { d: "M10 12h2v6", key: "12zw74" }],
        ["path", { d: "M10 18h4", key: "1ulq68" }]
      ];
      var FileDigit = createLucideIcon("file-digit", __iconNode$fP);
      var __iconNode$fO = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M12 18v-6", key: "17g6i2" }],
        ["path", { d: "m9 15 3 3 3-3", key: "1npd3o" }]
      ];
      var FileDown = createLucideIcon("file-down", __iconNode$fO);
      var __iconNode$fN = [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2", key: "17k7jt" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        [
          "path",
          {
            d: "M10.29 10.7a2.43 2.43 0 0 0-2.66-.52c-.29.12-.56.3-.78.53l-.35.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L6.5 18l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z",
            key: "1c1fso"
          }
        ]
      ];
      var FileHeart = createLucideIcon("file-heart", __iconNode$fN);
      var __iconNode$fM = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["circle", { cx: "10", cy: "12", r: "2", key: "737tya" }],
        ["path", { d: "m20 17-1.296-1.296a2.41 2.41 0 0 0-3.408 0L9 22", key: "wt3hpn" }]
      ];
      var FileImage = createLucideIcon("file-image", __iconNode$fM);
      var __iconNode$fL = [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M2 15h10", key: "jfw4w8" }],
        ["path", { d: "m9 18 3-3-3-3", key: "112psh" }]
      ];
      var FileInput = createLucideIcon("file-input", __iconNode$fL);
      var __iconNode$fK = [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        [
          "path",
          { d: "M4 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1", key: "fq0c9t" }
        ],
        [
          "path",
          { d: "M8 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1", key: "4gibmv" }
        ]
      ];
      var FileJson2 = createLucideIcon("file-json-2", __iconNode$fK);
      var __iconNode$fJ = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        [
          "path",
          { d: "M10 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1", key: "1oajmo" }
        ],
        [
          "path",
          { d: "M14 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1", key: "mpwhp6" }
        ]
      ];
      var FileJson = createLucideIcon("file-json", __iconNode$fJ);
      var __iconNode$fI = [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v6", key: "rc0qvx" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["circle", { cx: "4", cy: "16", r: "2", key: "1ehqvc" }],
        ["path", { d: "m10 10-4.5 4.5", key: "7fwrp6" }],
        ["path", { d: "m9 11 1 1", key: "wa6s5q" }]
      ];
      var FileKey2 = createLucideIcon("file-key-2", __iconNode$fI);
      var __iconNode$fH = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["circle", { cx: "10", cy: "16", r: "2", key: "4ckbqe" }],
        ["path", { d: "m16 10-4.5 4.5", key: "7p3ebg" }],
        ["path", { d: "m15 11 1 1", key: "1bsyx3" }]
      ];
      var FileKey = createLucideIcon("file-key", __iconNode$fH);
      var __iconNode$fG = [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v1", key: "jmtmu2" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["rect", { width: "8", height: "5", x: "2", y: "13", rx: "1", key: "10y5wo" }],
        ["path", { d: "M8 13v-2a2 2 0 1 0-4 0v2", key: "1pdxzg" }]
      ];
      var FileLock2 = createLucideIcon("file-lock-2", __iconNode$fG);
      var __iconNode$fF = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["rect", { width: "8", height: "6", x: "8", y: "12", rx: "1", key: "3yr8at" }],
        ["path", { d: "M10 12v-2a2 2 0 1 1 4 0v2", key: "j4i8d" }]
      ];
      var FileLock = createLucideIcon("file-lock", __iconNode$fF);
      var __iconNode$fE = [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M3 15h6", key: "4e2qda" }]
      ];
      var FileMinus2 = createLucideIcon("file-minus-2", __iconNode$fE);
      var __iconNode$fD = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M9 15h6", key: "cctwl0" }]
      ];
      var FileMinus = createLucideIcon("file-minus", __iconNode$fD);
      var __iconNode$fC = [
        ["path", { d: "M10.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v8.4", key: "1d3kfm" }],
        ["path", { d: "M8 18v-7.7L16 9v7", key: "1oie6o" }],
        ["circle", { cx: "14", cy: "16", r: "2", key: "1bzzi3" }],
        ["circle", { cx: "6", cy: "18", r: "2", key: "1fncim" }]
      ];
      var FileMusic = createLucideIcon("file-music", __iconNode$fC);
      var __iconNode$fB = [
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M4 7V4a2 2 0 0 1 2-2 2 2 0 0 0-2 2", key: "1vk7w2" }],
        ["path", { d: "M4.063 20.999a2 2 0 0 0 2 1L18 22a2 2 0 0 0 2-2V7l-5-5H6", key: "1jink5" }],
        ["path", { d: "m5 11-3 3", key: "1dgrs4" }],
        ["path", { d: "m5 17-3-3h10", key: "1mvvaf" }]
      ];
      var FileOutput = createLucideIcon("file-output", __iconNode$fB);
      var __iconNode$fA = [
        [
          "path",
          {
            d: "m18 5-2.414-2.414A2 2 0 0 0 14.172 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2",
            key: "142zxg"
          }
        ],
        [
          "path",
          {
            d: "M21.378 12.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
            key: "2t3380"
          }
        ],
        ["path", { d: "M8 18h1", key: "13wk12" }]
      ];
      var FilePenLine = createLucideIcon("file-pen-line", __iconNode$fA);
      var __iconNode$fz = [
        ["path", { d: "M12.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v9.5", key: "1couwa" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        [
          "path",
          {
            d: "M13.378 15.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
            key: "1y4qbx"
          }
        ]
      ];
      var FilePen = createLucideIcon("file-pen", __iconNode$fz);
      var __iconNode$fy = [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M3 15h6", key: "4e2qda" }],
        ["path", { d: "M6 12v6", key: "1u72j0" }]
      ];
      var FilePlus2 = createLucideIcon("file-plus-2", __iconNode$fy);
      var __iconNode$fx = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M9 15h6", key: "cctwl0" }],
        ["path", { d: "M12 18v-6", key: "17g6i2" }]
      ];
      var FilePlus = createLucideIcon("file-plus", __iconNode$fx);
      var __iconNode$fw = [
        ["path", { d: "M12 17h.01", key: "p32p05" }],
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z", key: "1mlx9k" }],
        ["path", { d: "M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3", key: "mhlwft" }]
      ];
      var FileQuestion = createLucideIcon("file-question", __iconNode$fw);
      var __iconNode$fv = [
        ["path", { d: "M20 10V7l-5-5H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h4", key: "1rdf37" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M16 14a2 2 0 0 0-2 2", key: "ceaadl" }],
        ["path", { d: "M20 14a2 2 0 0 1 2 2", key: "1ny6zw" }],
        ["path", { d: "M20 22a2 2 0 0 0 2-2", key: "1l9q4k" }],
        ["path", { d: "M16 22a2 2 0 0 1-2-2", key: "1wqh5n" }]
      ];
      var FileScan = createLucideIcon("file-scan", __iconNode$fv);
      var __iconNode$fu = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["circle", { cx: "11.5", cy: "14.5", r: "2.5", key: "1bq0ko" }],
        ["path", { d: "M13.3 16.3 15 18", key: "2quom7" }]
      ];
      var FileSearch2 = createLucideIcon("file-search-2", __iconNode$fu);
      var __iconNode$ft = [
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        [
          "path",
          { d: "M4.268 21a2 2 0 0 0 1.727 1H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3", key: "ms7g94" }
        ],
        ["path", { d: "m9 18-1.5-1.5", key: "1j6qii" }],
        ["circle", { cx: "5", cy: "14", r: "3", key: "ufru5t" }]
      ];
      var FileSearch = createLucideIcon("file-search", __iconNode$ft);
      var __iconNode$fs = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "M10 11v2", key: "1s651w" }],
        ["path", { d: "M8 17h8", key: "wh5c61" }],
        ["path", { d: "M14 16v2", key: "12fp5e" }]
      ];
      var FileSliders = createLucideIcon("file-sliders", __iconNode$fs);
      var __iconNode$fr = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M8 13h2", key: "yr2amv" }],
        ["path", { d: "M14 13h2", key: "un5t4a" }],
        ["path", { d: "M8 17h2", key: "2yhykz" }],
        ["path", { d: "M14 17h2", key: "10kma7" }]
      ];
      var FileSpreadsheet4 = createLucideIcon("file-spreadsheet", __iconNode$fr);
      var __iconNode$fq = [
        ["path", { d: "M21 7h-3a2 2 0 0 1-2-2V2", key: "9rb54x" }],
        [
          "path",
          {
            d: "M21 6v6.5c0 .8-.7 1.5-1.5 1.5h-7c-.8 0-1.5-.7-1.5-1.5v-9c0-.8.7-1.5 1.5-1.5H17Z",
            key: "1059l0"
          }
        ],
        ["path", { d: "M7 8v8.8c0 .3.2.6.4.8.2.2.5.4.8.4H15", key: "16874u" }],
        ["path", { d: "M3 12v8.8c0 .3.2.6.4.8.2.2.5.4.8.4H11", key: "k2ox98" }]
      ];
      var FileStack = createLucideIcon("file-stack", __iconNode$fq);
      var __iconNode$fp = [
        ["path", { d: "m10 18 3-3-3-3", key: "18f6ys" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        [
          "path",
          {
            d: "M4 11V4a2 2 0 0 1 2-2h9l5 5v13a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h7",
            key: "50q2rw"
          }
        ]
      ];
      var FileSymlink = createLucideIcon("file-symlink", __iconNode$fp);
      var __iconNode$fo = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m8 16 2-2-2-2", key: "10vzyd" }],
        ["path", { d: "M12 18h4", key: "1wd2n7" }]
      ];
      var FileTerminal = createLucideIcon("file-terminal", __iconNode$fo);
      var __iconNode$fn = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M10 9H8", key: "b1mrlr" }],
        ["path", { d: "M16 13H8", key: "t4e002" }],
        ["path", { d: "M16 17H8", key: "z1uh3a" }]
      ];
      var FileText8 = createLucideIcon("file-text", __iconNode$fn);
      var __iconNode$fm = [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M2 13v-1h6v1", key: "1dh9dg" }],
        ["path", { d: "M5 12v6", key: "150t9c" }],
        ["path", { d: "M4 18h2", key: "1xrofg" }]
      ];
      var FileType2 = createLucideIcon("file-type-2", __iconNode$fm);
      var __iconNode$fl = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M9 13v-1h6v1", key: "1bb014" }],
        ["path", { d: "M12 12v6", key: "3ahymv" }],
        ["path", { d: "M11 18h2", key: "12mj7e" }]
      ];
      var FileType = createLucideIcon("file-type", __iconNode$fl);
      var __iconNode$fk = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M12 12v6", key: "3ahymv" }],
        ["path", { d: "m15 15-3-3-3 3", key: "15xj92" }]
      ];
      var FileUp = createLucideIcon("file-up", __iconNode$fk);
      var __iconNode$fj = [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["rect", { width: "8", height: "6", x: "2", y: "12", rx: "1", key: "1a6c1e" }],
        ["path", { d: "m10 15.5 4 2.5v-6l-4 2.5", key: "t7cp39" }]
      ];
      var FileVideo2 = createLucideIcon("file-video-2", __iconNode$fj);
      var __iconNode$fi = [
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M15 18a3 3 0 1 0-6 0", key: "16awa0" }],
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z", key: "1mlx9k" }],
        ["circle", { cx: "12", cy: "13", r: "2", key: "1c1ljs" }]
      ];
      var FileUser = createLucideIcon("file-user", __iconNode$fi);
      var __iconNode$fh = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m10 11 5 3-5 3v-6Z", key: "7ntvm4" }]
      ];
      var FileVideo = createLucideIcon("file-video", __iconNode$fh);
      var __iconNode$fg = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M8 15h.01", key: "a7atzg" }],
        ["path", { d: "M11.5 13.5a2.5 2.5 0 0 1 0 3", key: "1fccat" }],
        ["path", { d: "M15 12a5 5 0 0 1 0 6", key: "ps46cm" }]
      ];
      var FileVolume2 = createLucideIcon("file-volume-2", __iconNode$fg);
      var __iconNode$ff = [
        ["path", { d: "M11 11a5 5 0 0 1 0 6", key: "193qb2" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        [
          "path",
          { d: "M4 6.765V4a2 2 0 0 1 2-2h9l5 5v13a2 2 0 0 1-2 2H6a2 2 0 0 1-.93-.23", key: "ifyjnl" }
        ],
        [
          "path",
          {
            d: "M7 10.51a.5.5 0 0 0-.826-.38l-1.893 1.628A1 1 0 0 1 3.63 12H2.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h1.129a1 1 0 0 1 .652.242l1.893 1.63a.5.5 0 0 0 .826-.38z",
            key: "mk8rxu"
          }
        ]
      ];
      var FileVolume = createLucideIcon("file-volume", __iconNode$ff);
      var __iconNode$fe = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M12 9v4", key: "juzpu7" }],
        ["path", { d: "M12 17h.01", key: "p32p05" }]
      ];
      var FileWarning = createLucideIcon("file-warning", __iconNode$fe);
      var __iconNode$fd = [
        ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m8 12.5-5 5", key: "b853mi" }],
        ["path", { d: "m3 12.5 5 5", key: "1qls4r" }]
      ];
      var FileX2 = createLucideIcon("file-x-2", __iconNode$fd);
      var __iconNode$fc = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }]
      ];
      var File3 = createLucideIcon("file", __iconNode$fc);
      var __iconNode$fb = [
        ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "m14.5 12.5-5 5", key: "b62r18" }],
        ["path", { d: "m9.5 12.5 5 5", key: "1rk7el" }]
      ];
      var FileX = createLucideIcon("file-x", __iconNode$fb);
      var __iconNode$fa = [
        ["path", { d: "M20 7h-3a2 2 0 0 1-2-2V2", key: "x099mo" }],
        ["path", { d: "M9 18a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h7l4 4v10a2 2 0 0 1-2 2Z", key: "18t6ie" }],
        ["path", { d: "M3 7.6v12.8A1.6 1.6 0 0 0 4.6 22h9.8", key: "1nja0z" }]
      ];
      var Files = createLucideIcon("files", __iconNode$fa);
      var __iconNode$f9 = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M7 3v18", key: "bbkbws" }],
        ["path", { d: "M3 7.5h4", key: "zfgn84" }],
        ["path", { d: "M3 12h18", key: "1i2n21" }],
        ["path", { d: "M3 16.5h4", key: "1230mu" }],
        ["path", { d: "M17 3v18", key: "in4fa5" }],
        ["path", { d: "M17 7.5h4", key: "myr1c1" }],
        ["path", { d: "M17 16.5h4", key: "go4c1d" }]
      ];
      var Film2 = createLucideIcon("film", __iconNode$f9);
      var __iconNode$f8 = [
        ["path", { d: "M12 10a2 2 0 0 0-2 2c0 1.02-.1 2.51-.26 4", key: "1nerag" }],
        ["path", { d: "M14 13.12c0 2.38 0 6.38-1 8.88", key: "o46ks0" }],
        ["path", { d: "M17.29 21.02c.12-.6.43-2.3.5-3.02", key: "ptglia" }],
        ["path", { d: "M2 12a10 10 0 0 1 18-6", key: "ydlgp0" }],
        ["path", { d: "M2 16h.01", key: "1gqxmh" }],
        ["path", { d: "M21.8 16c.2-2 .131-5.354 0-6", key: "drycrb" }],
        ["path", { d: "M5 19.5C5.5 18 6 15 6 12a6 6 0 0 1 .34-2", key: "1tidbn" }],
        ["path", { d: "M8.65 22c.21-.66.45-1.32.57-2", key: "13wd9y" }],
        ["path", { d: "M9 6.8a6 6 0 0 1 9 5.2v2", key: "1fr1j5" }]
      ];
      var Fingerprint = createLucideIcon("fingerprint", __iconNode$f8);
      var __iconNode$f7 = [
        ["path", { d: "M15 6.5V3a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v3.5", key: "sqyvz" }],
        ["path", { d: "M9 18h8", key: "i7pszb" }],
        ["path", { d: "M18 3h-3", key: "7idoqj" }],
        ["path", { d: "M11 3a6 6 0 0 0-6 6v11", key: "1v5je3" }],
        ["path", { d: "M5 13h4", key: "svpcxo" }],
        ["path", { d: "M17 10a4 4 0 0 0-8 0v10a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2Z", key: "vsjego" }]
      ];
      var FireExtinguisher = createLucideIcon("fire-extinguisher", __iconNode$f7);
      var __iconNode$f6 = [
        [
          "path",
          {
            d: "M18 12.47v.03m0-.5v.47m-.475 5.056A6.744 6.744 0 0 1 15 18c-3.56 0-7.56-2.53-8.5-6 .348-1.28 1.114-2.433 2.121-3.38m3.444-2.088A8.802 8.802 0 0 1 15 6c3.56 0 6.06 2.54 7 6-.309 1.14-.786 2.177-1.413 3.058",
            key: "1j1hse"
          }
        ],
        [
          "path",
          {
            d: "M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33m7.48-4.372A9.77 9.77 0 0 1 16 6.07m0 11.86a9.77 9.77 0 0 1-1.728-3.618",
            key: "1q46z8"
          }
        ],
        [
          "path",
          {
            d: "m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98M8.53 3h5.27a2 2 0 0 1 1.98 1.67l.23 1.4M2 2l20 20",
            key: "1407gh"
          }
        ]
      ];
      var FishOff = createLucideIcon("fish-off", __iconNode$f6);
      var __iconNode$f5 = [
        ["path", { d: "M2 16s9-15 20-4C11 23 2 8 2 8", key: "h4oh4o" }]
      ];
      var FishSymbol = createLucideIcon("fish-symbol", __iconNode$f5);
      var __iconNode$f4 = [
        [
          "path",
          {
            d: "M6.5 12c.94-3.46 4.94-6 8.5-6 3.56 0 6.06 2.54 7 6-.94 3.47-3.44 6-7 6s-7.56-2.53-8.5-6Z",
            key: "15baut"
          }
        ],
        ["path", { d: "M18 12v.5", key: "18hhni" }],
        ["path", { d: "M16 17.93a9.77 9.77 0 0 1 0-11.86", key: "16dt7o" }],
        [
          "path",
          {
            d: "M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33",
            key: "l9di03"
          }
        ],
        [
          "path",
          { d: "M10.46 7.26C10.2 5.88 9.17 4.24 8 3h5.8a2 2 0 0 1 1.98 1.67l.23 1.4", key: "1kjonw" }
        ],
        [
          "path",
          { d: "m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98", key: "1zlm23" }
        ]
      ];
      var Fish = createLucideIcon("fish", __iconNode$f4);
      var __iconNode$f3 = [
        ["path", { d: "M8 2c3 0 5 2 8 2s4-1 4-1v11", key: "9rwyz9" }],
        ["path", { d: "M4 22V4", key: "1plyxx" }],
        ["path", { d: "M4 15s1-1 4-1 5 2 8 2", key: "1myooe" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var FlagOff = createLucideIcon("flag-off", __iconNode$f3);
      var __iconNode$f2 = [["path", { d: "M17 22V2L7 7l10 5", key: "1rmf0r" }]];
      var FlagTriangleLeft = createLucideIcon("flag-triangle-left", __iconNode$f2);
      var __iconNode$f1 = [["path", { d: "M7 22V2l10 5-10 5", key: "17n18y" }]];
      var FlagTriangleRight = createLucideIcon("flag-triangle-right", __iconNode$f1);
      var __iconNode$f0 = [
        ["path", { d: "M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z", key: "i9b6wo" }],
        ["line", { x1: "4", x2: "4", y1: "22", y2: "15", key: "1cm3nv" }]
      ];
      var Flag = createLucideIcon("flag", __iconNode$f0);
      var __iconNode$e$ = [
        [
          "path",
          {
            d: "M12 2c1 3 2.5 3.5 3.5 4.5A5 5 0 0 1 17 10a5 5 0 1 1-10 0c0-.3 0-.6.1-.9a2 2 0 1 0 3.3-2C8 4.5 11 2 12 2Z",
            key: "1ir223"
          }
        ],
        ["path", { d: "m5 22 14-4", key: "1brv4h" }],
        ["path", { d: "m5 18 14 4", key: "lgyyje" }]
      ];
      var FlameKindling = createLucideIcon("flame-kindling", __iconNode$e$);
      var __iconNode$e_ = [
        [
          "path",
          {
            d: "M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z",
            key: "96xj49"
          }
        ]
      ];
      var Flame = createLucideIcon("flame", __iconNode$e_);
      var __iconNode$eZ = [
        ["path", { d: "M16 16v4a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4", key: "1r120k" }],
        ["path", { d: "M7 2h11v4c0 2-2 2-2 4v1", key: "dz1920" }],
        ["line", { x1: "11", x2: "18", y1: "6", y2: "6", key: "bi1vpe" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var FlashlightOff = createLucideIcon("flashlight-off", __iconNode$eZ);
      var __iconNode$eY = [
        [
          "path",
          {
            d: "M18 6c0 2-2 2-2 4v10a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4V2h12z",
            key: "1orkel"
          }
        ],
        ["line", { x1: "6", x2: "18", y1: "6", y2: "6", key: "1z11jq" }],
        ["line", { x1: "12", x2: "12", y1: "12", y2: "12", key: "1f4yc1" }]
      ];
      var Flashlight = createLucideIcon("flashlight", __iconNode$eY);
      var __iconNode$eX = [
        ["path", { d: "M10 2v2.343", key: "15t272" }],
        ["path", { d: "M14 2v6.343", key: "sxr80q" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M20 20a2 2 0 0 1-2 2H6a2 2 0 0 1-1.755-2.96l5.227-9.563", key: "k0duyd" }],
        ["path", { d: "M6.453 15H15", key: "1f0z33" }],
        ["path", { d: "M8.5 2h7", key: "csnxdl" }]
      ];
      var FlaskConicalOff = createLucideIcon("flask-conical-off", __iconNode$eX);
      var __iconNode$eW = [
        [
          "path",
          {
            d: "M14 2v6a2 2 0 0 0 .245.96l5.51 10.08A2 2 0 0 1 18 22H6a2 2 0 0 1-1.755-2.96l5.51-10.08A2 2 0 0 0 10 8V2",
            key: "18mbvz"
          }
        ],
        ["path", { d: "M6.453 15h11.094", key: "3shlmq" }],
        ["path", { d: "M8.5 2h7", key: "csnxdl" }]
      ];
      var FlaskConical = createLucideIcon("flask-conical", __iconNode$eW);
      var __iconNode$eV = [
        ["path", { d: "M10 2v6.292a7 7 0 1 0 4 0V2", key: "1s42pc" }],
        ["path", { d: "M5 15h14", key: "m0yey3" }],
        ["path", { d: "M8.5 2h7", key: "csnxdl" }]
      ];
      var FlaskRound = createLucideIcon("flask-round", __iconNode$eV);
      var __iconNode$eU = [
        ["path", { d: "m3 7 5 5-5 5V7", key: "couhi7" }],
        ["path", { d: "m21 7-5 5 5 5V7", key: "6ouia7" }],
        ["path", { d: "M12 20v2", key: "1lh1kg" }],
        ["path", { d: "M12 14v2", key: "8jcxud" }],
        ["path", { d: "M12 8v2", key: "1woqiv" }],
        ["path", { d: "M12 2v2", key: "tus03m" }]
      ];
      var FlipHorizontal2 = createLucideIcon("flip-horizontal-2", __iconNode$eU);
      var __iconNode$eT = [
        ["path", { d: "M8 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h3", key: "1i73f7" }],
        ["path", { d: "M16 3h3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-3", key: "saxlbk" }],
        ["path", { d: "M12 20v2", key: "1lh1kg" }],
        ["path", { d: "M12 14v2", key: "8jcxud" }],
        ["path", { d: "M12 8v2", key: "1woqiv" }],
        ["path", { d: "M12 2v2", key: "tus03m" }]
      ];
      var FlipHorizontal = createLucideIcon("flip-horizontal", __iconNode$eT);
      var __iconNode$eS = [
        ["path", { d: "m17 3-5 5-5-5h10", key: "1ftt6x" }],
        ["path", { d: "m17 21-5-5-5 5h10", key: "1m0wmu" }],
        ["path", { d: "M4 12H2", key: "rhcxmi" }],
        ["path", { d: "M10 12H8", key: "s88cx1" }],
        ["path", { d: "M16 12h-2", key: "10asgb" }],
        ["path", { d: "M22 12h-2", key: "14jgyd" }]
      ];
      var FlipVertical2 = createLucideIcon("flip-vertical-2", __iconNode$eS);
      var __iconNode$eR = [
        ["path", { d: "M21 8V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v3", key: "14bfxa" }],
        ["path", { d: "M21 16v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-3", key: "14rx03" }],
        ["path", { d: "M4 12H2", key: "rhcxmi" }],
        ["path", { d: "M10 12H8", key: "s88cx1" }],
        ["path", { d: "M16 12h-2", key: "10asgb" }],
        ["path", { d: "M22 12h-2", key: "14jgyd" }]
      ];
      var FlipVertical = createLucideIcon("flip-vertical", __iconNode$eR);
      var __iconNode$eQ = [
        [
          "path",
          {
            d: "M12 5a3 3 0 1 1 3 3m-3-3a3 3 0 1 0-3 3m3-3v1M9 8a3 3 0 1 0 3 3M9 8h1m5 0a3 3 0 1 1-3 3m3-3h-1m-2 3v-1",
            key: "3pnvol"
          }
        ],
        ["circle", { cx: "12", cy: "8", r: "2", key: "1822b1" }],
        ["path", { d: "M12 10v12", key: "6ubwww" }],
        ["path", { d: "M12 22c4.2 0 7-1.667 7-5-4.2 0-7 1.667-7 5Z", key: "9hd38g" }],
        ["path", { d: "M12 22c-4.2 0-7-1.667-7-5 4.2 0 7 1.667 7 5Z", key: "ufn41s" }]
      ];
      var Flower2 = createLucideIcon("flower-2", __iconNode$eQ);
      var __iconNode$eP = [
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        [
          "path",
          {
            d: "M12 16.5A4.5 4.5 0 1 1 7.5 12 4.5 4.5 0 1 1 12 7.5a4.5 4.5 0 1 1 4.5 4.5 4.5 4.5 0 1 1-4.5 4.5",
            key: "14wa3c"
          }
        ],
        ["path", { d: "M12 7.5V9", key: "1oy5b0" }],
        ["path", { d: "M7.5 12H9", key: "eltsq1" }],
        ["path", { d: "M16.5 12H15", key: "vk5kw4" }],
        ["path", { d: "M12 16.5V15", key: "k7eayi" }],
        ["path", { d: "m8 8 1.88 1.88", key: "nxy4qf" }],
        ["path", { d: "M14.12 9.88 16 8", key: "1lst6k" }],
        ["path", { d: "m8 16 1.88-1.88", key: "h2eex1" }],
        ["path", { d: "M14.12 14.12 16 16", key: "uqkrx3" }]
      ];
      var Flower = createLucideIcon("flower", __iconNode$eP);
      var __iconNode$eO = [
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }]
      ];
      var Focus = createLucideIcon("focus", __iconNode$eO);
      var __iconNode$eN = [
        ["path", { d: "M2 12h6", key: "1wqiqv" }],
        ["path", { d: "M22 12h-6", key: "1eg9hc" }],
        ["path", { d: "M12 2v2", key: "tus03m" }],
        ["path", { d: "M12 8v2", key: "1woqiv" }],
        ["path", { d: "M12 14v2", key: "8jcxud" }],
        ["path", { d: "M12 20v2", key: "1lh1kg" }],
        ["path", { d: "m19 9-3 3 3 3", key: "12ol22" }],
        ["path", { d: "m5 15 3-3-3-3", key: "1kdhjc" }]
      ];
      var FoldHorizontal = createLucideIcon("fold-horizontal", __iconNode$eN);
      var __iconNode$eM = [
        ["path", { d: "M12 22v-6", key: "6o8u61" }],
        ["path", { d: "M12 8V2", key: "1wkif3" }],
        ["path", { d: "M4 12H2", key: "rhcxmi" }],
        ["path", { d: "M10 12H8", key: "s88cx1" }],
        ["path", { d: "M16 12h-2", key: "10asgb" }],
        ["path", { d: "M22 12h-2", key: "14jgyd" }],
        ["path", { d: "m15 19-3-3-3 3", key: "e37ymu" }],
        ["path", { d: "m15 5-3 3-3-3", key: "19d6lf" }]
      ];
      var FoldVertical = createLucideIcon("fold-vertical", __iconNode$eM);
      var __iconNode$eL = [
        ["circle", { cx: "15", cy: "19", r: "2", key: "u2pros" }],
        [
          "path",
          {
            d: "M20.9 19.8A2 2 0 0 0 22 18V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2h5.1",
            key: "1jj40k"
          }
        ],
        ["path", { d: "M15 11v-1", key: "cntcp" }],
        ["path", { d: "M15 17v-2", key: "1279jj" }]
      ];
      var FolderArchive = createLucideIcon("folder-archive", __iconNode$eL);
      var __iconNode$eK = [
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ],
        ["path", { d: "m9 13 2 2 4-4", key: "6343dt" }]
      ];
      var FolderCheck = createLucideIcon("folder-check", __iconNode$eK);
      var __iconNode$eJ = [
        ["circle", { cx: "16", cy: "16", r: "6", key: "qoo3c4" }],
        [
          "path",
          {
            d: "M7 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2",
            key: "1urifu"
          }
        ],
        ["path", { d: "M16 14v2l1 1", key: "xth2jh" }]
      ];
      var FolderClock = createLucideIcon("folder-clock", __iconNode$eJ);
      var __iconNode$eI = [
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ],
        ["path", { d: "M2 10h20", key: "1ir3d8" }]
      ];
      var FolderClosed = createLucideIcon("folder-closed", __iconNode$eI);
      var __iconNode$eH = [
        ["path", { d: "M10 10.5 8 13l2 2.5", key: "m4t9c1" }],
        ["path", { d: "m14 10.5 2 2.5-2 2.5", key: "14w2eb" }],
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2z",
            key: "1u1bxd"
          }
        ]
      ];
      var FolderCode = createLucideIcon("folder-code", __iconNode$eH);
      var __iconNode$eG = [
        [
          "path",
          {
            d: "M10.3 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.98a2 2 0 0 1 1.69.9l.66 1.2A2 2 0 0 0 12 6h8a2 2 0 0 1 2 2v3.3",
            key: "128dxu"
          }
        ],
        ["path", { d: "m14.305 19.53.923-.382", key: "3m78fa" }],
        ["path", { d: "m15.228 16.852-.923-.383", key: "npixar" }],
        ["path", { d: "m16.852 15.228-.383-.923", key: "5xggr7" }],
        ["path", { d: "m16.852 20.772-.383.924", key: "dpfhf9" }],
        ["path", { d: "m19.148 15.228.383-.923", key: "1reyyz" }],
        ["path", { d: "m19.53 21.696-.382-.924", key: "1goivc" }],
        ["path", { d: "m20.772 16.852.924-.383", key: "htqkph" }],
        ["path", { d: "m20.772 19.148.924.383", key: "9w9pjp" }],
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }]
      ];
      var FolderCog = createLucideIcon("folder-cog", __iconNode$eG);
      var __iconNode$eF = [
        [
          "path",
          {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
          }
        ],
        ["circle", { cx: "12", cy: "13", r: "1", key: "49l61u" }]
      ];
      var FolderDot = createLucideIcon("folder-dot", __iconNode$eF);
      var __iconNode$eE = [
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ],
        ["path", { d: "M12 10v6", key: "1bos4e" }],
        ["path", { d: "m15 13-3 3-3-3", key: "6j2sf0" }]
      ];
      var FolderDown = createLucideIcon("folder-down", __iconNode$eE);
      var __iconNode$eD = [
        [
          "path",
          {
            d: "M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v5",
            key: "1w6njk"
          }
        ],
        ["circle", { cx: "13", cy: "12", r: "2", key: "1j92g6" }],
        ["path", { d: "M18 19c-2.8 0-5-2.2-5-5v8", key: "pkpw2h" }],
        ["circle", { cx: "20", cy: "19", r: "2", key: "1obnsp" }]
      ];
      var FolderGit2 = createLucideIcon("folder-git-2", __iconNode$eD);
      var __iconNode$eC = [
        ["circle", { cx: "12", cy: "13", r: "2", key: "1c1ljs" }],
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ],
        ["path", { d: "M14 13h3", key: "1dgedf" }],
        ["path", { d: "M7 13h3", key: "1pygq7" }]
      ];
      var FolderGit = createLucideIcon("folder-git", __iconNode$eC);
      var __iconNode$eB = [
        [
          "path",
          {
            d: "M11 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v1.5",
            key: "6hud8k"
          }
        ],
        [
          "path",
          {
            d: "M13.9 17.45c-1.2-1.2-1.14-2.8-.2-3.73a2.43 2.43 0 0 1 3.44 0l.36.34.34-.34a2.43 2.43 0 0 1 3.45-.01c.95.95 1 2.53-.2 3.74L17.5 21Z",
            key: "wpff58"
          }
        ]
      ];
      var FolderHeart = createLucideIcon("folder-heart", __iconNode$eB);
      var __iconNode$eA = [
        [
          "path",
          {
            d: "M2 9V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-1",
            key: "fm4g5t"
          }
        ],
        ["path", { d: "M2 13h10", key: "pgb2dq" }],
        ["path", { d: "m9 16 3-3-3-3", key: "6m91ic" }]
      ];
      var FolderInput = createLucideIcon("folder-input", __iconNode$eA);
      var __iconNode$ez = [
        [
          "path",
          {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
          }
        ],
        ["path", { d: "M8 10v4", key: "tgpxqk" }],
        ["path", { d: "M12 10v2", key: "hh53o1" }],
        ["path", { d: "M16 10v6", key: "1d6xys" }]
      ];
      var FolderKanban = createLucideIcon("folder-kanban", __iconNode$ez);
      var __iconNode$ey = [
        ["circle", { cx: "16", cy: "20", r: "2", key: "1vifvg" }],
        [
          "path",
          {
            d: "M10 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v2",
            key: "3hgo9p"
          }
        ],
        ["path", { d: "m22 14-4.5 4.5", key: "1ef6z8" }],
        ["path", { d: "m21 15 1 1", key: "1ejcpy" }]
      ];
      var FolderKey = createLucideIcon("folder-key", __iconNode$ey);
      var __iconNode$ex = [
        ["rect", { width: "8", height: "5", x: "14", y: "17", rx: "1", key: "19aais" }],
        [
          "path",
          {
            d: "M10 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v2.5",
            key: "1w6v7t"
          }
        ],
        ["path", { d: "M20 17v-2a2 2 0 1 0-4 0v2", key: "pwaxnr" }]
      ];
      var FolderLock = createLucideIcon("folder-lock", __iconNode$ex);
      var __iconNode$ew = [
        ["path", { d: "M9 13h6", key: "1uhe8q" }],
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ]
      ];
      var FolderMinus = createLucideIcon("folder-minus", __iconNode$ew);
      var __iconNode$ev = [
        [
          "path",
          {
            d: "m6 14 1.45-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.55 6a2 2 0 0 1-1.94 1.5H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H18a2 2 0 0 1 2 2v2",
            key: "1nmvlm"
          }
        ],
        ["circle", { cx: "14", cy: "15", r: "1", key: "1gm4qj" }]
      ];
      var FolderOpenDot = createLucideIcon("folder-open-dot", __iconNode$ev);
      var __iconNode$eu = [
        [
          "path",
          {
            d: "m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2",
            key: "usdka0"
          }
        ]
      ];
      var FolderOpen = createLucideIcon("folder-open", __iconNode$eu);
      var __iconNode$et = [
        [
          "path",
          {
            d: "M2 7.5V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-1.5",
            key: "1yk7aj"
          }
        ],
        ["path", { d: "M2 13h10", key: "pgb2dq" }],
        ["path", { d: "m5 10-3 3 3 3", key: "1r8ie0" }]
      ];
      var FolderOutput = createLucideIcon("folder-output", __iconNode$et);
      var __iconNode$es = [
        [
          "path",
          {
            d: "M2 11.5V5a2 2 0 0 1 2-2h3.9c.7 0 1.3.3 1.7.9l.8 1.2c.4.6 1 .9 1.7.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-9.5",
            key: "a8xqs0"
          }
        ],
        [
          "path",
          {
            d: "M11.378 13.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
            key: "1saktj"
          }
        ]
      ];
      var FolderPen = createLucideIcon("folder-pen", __iconNode$es);
      var __iconNode$er = [
        ["path", { d: "M12 10v6", key: "1bos4e" }],
        ["path", { d: "M9 13h6", key: "1uhe8q" }],
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ]
      ];
      var FolderPlus = createLucideIcon("folder-plus", __iconNode$er);
      var __iconNode$eq = [
        [
          "path",
          {
            d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
            key: "1fr9dc"
          }
        ],
        ["circle", { cx: "12", cy: "13", r: "2", key: "1c1ljs" }],
        ["path", { d: "M12 15v5", key: "11xva1" }]
      ];
      var FolderRoot = createLucideIcon("folder-root", __iconNode$eq);
      var __iconNode$ep = [
        ["circle", { cx: "11.5", cy: "12.5", r: "2.5", key: "1ea5ju" }],
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ],
        ["path", { d: "M13.3 14.3 15 16", key: "1y4v1n" }]
      ];
      var FolderSearch2 = createLucideIcon("folder-search-2", __iconNode$ep);
      var __iconNode$eo = [
        [
          "path",
          {
            d: "M10.7 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v4.1",
            key: "1bw5m7"
          }
        ],
        ["path", { d: "m21 21-1.9-1.9", key: "1g2n9r" }],
        ["circle", { cx: "17", cy: "17", r: "3", key: "18b49y" }]
      ];
      var FolderSearch = createLucideIcon("folder-search", __iconNode$eo);
      var __iconNode$en = [
        [
          "path",
          {
            d: "M2 9V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h7",
            key: "x1c07l"
          }
        ],
        ["path", { d: "m8 16 3-3-3-3", key: "rlqrt1" }]
      ];
      var FolderSymlink = createLucideIcon("folder-symlink", __iconNode$en);
      var __iconNode$em = [
        [
          "path",
          {
            d: "M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v.5",
            key: "1dkoa9"
          }
        ],
        ["path", { d: "M12 10v4h4", key: "1czhmt" }],
        ["path", { d: "m12 14 1.535-1.605a5 5 0 0 1 8 1.5", key: "lvuxfi" }],
        ["path", { d: "M22 22v-4h-4", key: "1ewp4q" }],
        ["path", { d: "m22 18-1.535 1.605a5 5 0 0 1-8-1.5", key: "14ync0" }]
      ];
      var FolderSync = createLucideIcon("folder-sync", __iconNode$em);
      var __iconNode$el = [
        [
          "path",
          {
            d: "M20 10a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2.5a1 1 0 0 1-.8-.4l-.9-1.2A1 1 0 0 0 15 3h-2a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z",
            key: "hod4my"
          }
        ],
        [
          "path",
          {
            d: "M20 21a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-2.9a1 1 0 0 1-.88-.55l-.42-.85a1 1 0 0 0-.92-.6H13a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z",
            key: "w4yl2u"
          }
        ],
        ["path", { d: "M3 5a2 2 0 0 0 2 2h3", key: "f2jnh7" }],
        ["path", { d: "M3 3v13a2 2 0 0 0 2 2h3", key: "k8epm1" }]
      ];
      var FolderTree = createLucideIcon("folder-tree", __iconNode$el);
      var __iconNode$ek = [
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ],
        ["path", { d: "M12 10v6", key: "1bos4e" }],
        ["path", { d: "m9 13 3-3 3 3", key: "1pxg3c" }]
      ];
      var FolderUp = createLucideIcon("folder-up", __iconNode$ek);
      var __iconNode$ej = [
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ],
        ["path", { d: "m9.5 10.5 5 5", key: "ra9qjz" }],
        ["path", { d: "m14.5 10.5-5 5", key: "l2rkpq" }]
      ];
      var FolderX = createLucideIcon("folder-x", __iconNode$ej);
      var __iconNode$ei = [
        [
          "path",
          {
            d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
            key: "1kt360"
          }
        ]
      ];
      var Folder = createLucideIcon("folder", __iconNode$ei);
      var __iconNode$eh = [
        [
          "path",
          {
            d: "M20 17a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3.9a2 2 0 0 1-1.69-.9l-.81-1.2a2 2 0 0 0-1.67-.9H8a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2Z",
            key: "4u7rpt"
          }
        ],
        ["path", { d: "M2 8v11a2 2 0 0 0 2 2h14", key: "1eicx1" }]
      ];
      var Folders = createLucideIcon("folders", __iconNode$eh);
      var __iconNode$eg = [
        [
          "path",
          {
            d: "M4 16v-2.38C4 11.5 2.97 10.5 3 8c.03-2.72 1.49-6 4.5-6C9.37 2 10 3.8 10 5.5c0 3.11-2 5.66-2 8.68V16a2 2 0 1 1-4 0Z",
            key: "1dudjm"
          }
        ],
        [
          "path",
          {
            d: "M20 20v-2.38c0-2.12 1.03-3.12 1-5.62-.03-2.72-1.49-6-4.5-6C14.63 6 14 7.8 14 9.5c0 3.11 2 5.66 2 8.68V20a2 2 0 1 0 4 0Z",
            key: "l2t8xc"
          }
        ],
        ["path", { d: "M16 17h4", key: "1dejxt" }],
        ["path", { d: "M4 13h4", key: "1bwh8b" }]
      ];
      var Footprints = createLucideIcon("footprints", __iconNode$eg);
      var __iconNode$ef = [
        ["path", { d: "M12 12H5a2 2 0 0 0-2 2v5", key: "7zsz91" }],
        ["circle", { cx: "13", cy: "19", r: "2", key: "wjnkru" }],
        ["circle", { cx: "5", cy: "19", r: "2", key: "v8kfzx" }],
        ["path", { d: "M8 19h3m5-17v17h6M6 12V7c0-1.1.9-2 2-2h3l5 5", key: "13bk1p" }]
      ];
      var Forklift = createLucideIcon("forklift", __iconNode$ef);
      var __iconNode$ee = [
        ["polyline", { points: "15 17 20 12 15 7", key: "1w3sku" }],
        ["path", { d: "M4 18v-2a4 4 0 0 1 4-4h12", key: "jmiej9" }]
      ];
      var Forward = createLucideIcon("forward", __iconNode$ee);
      var __iconNode$ed = [
        ["line", { x1: "22", x2: "2", y1: "6", y2: "6", key: "15w7dq" }],
        ["line", { x1: "22", x2: "2", y1: "18", y2: "18", key: "1ip48p" }],
        ["line", { x1: "6", x2: "6", y1: "2", y2: "22", key: "a2lnyx" }],
        ["line", { x1: "18", x2: "18", y1: "2", y2: "22", key: "8vb6jd" }]
      ];
      var Frame = createLucideIcon("frame", __iconNode$ed);
      var __iconNode$ec = [
        ["path", { d: "M5 16V9h14V2H5l14 14h-7m-7 0 7 7v-7m-7 0h7", key: "1a2nng" }]
      ];
      var Framer = createLucideIcon("framer", __iconNode$ec);
      var __iconNode$eb = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M16 16s-1.5-2-4-2-4 2-4 2", key: "epbg0q" }],
        ["line", { x1: "9", x2: "9.01", y1: "9", y2: "9", key: "yxxnd0" }],
        ["line", { x1: "15", x2: "15.01", y1: "9", y2: "9", key: "1p4y9e" }]
      ];
      var Frown = createLucideIcon("frown", __iconNode$eb);
      var __iconNode$ea = [
        ["line", { x1: "3", x2: "15", y1: "22", y2: "22", key: "xegly4" }],
        ["line", { x1: "4", x2: "14", y1: "9", y2: "9", key: "xcnuvu" }],
        ["path", { d: "M14 22V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v18", key: "16j0yd" }],
        [
          "path",
          {
            d: "M14 13h2a2 2 0 0 1 2 2v2a2 2 0 0 0 2 2a2 2 0 0 0 2-2V9.83a2 2 0 0 0-.59-1.42L18 5",
            key: "7cu91f"
          }
        ]
      ];
      var Fuel = createLucideIcon("fuel", __iconNode$ea);
      var __iconNode$e9 = [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
        ["rect", { width: "10", height: "8", x: "7", y: "8", rx: "1", key: "vys8me" }]
      ];
      var Fullscreen = createLucideIcon("fullscreen", __iconNode$e9);
      var __iconNode$e8 = [
        [
          "path",
          {
            d: "M13.354 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14v6a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341l1.218-1.348",
            key: "8mvsmf"
          }
        ],
        ["path", { d: "M16 6h6", key: "1dogtp" }],
        ["path", { d: "M19 3v6", key: "1ytpjt" }]
      ];
      var FunnelPlus = createLucideIcon("funnel-plus", __iconNode$e8);
      var __iconNode$e7 = [
        [
          "path",
          {
            d: "M10 20a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341L21.74 4.67A1 1 0 0 0 21 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14z",
            key: "sc7q7i"
          }
        ]
      ];
      var Funnel = createLucideIcon("funnel", __iconNode$e7);
      var __iconNode$e6 = [
        [
          "path",
          {
            d: "M12.531 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14v6a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341l.427-.473",
            key: "ol2ft2"
          }
        ],
        ["path", { d: "m16.5 3.5 5 5", key: "15e6fa" }],
        ["path", { d: "m21.5 3.5-5 5", key: "m0lwru" }]
      ];
      var FunnelX = createLucideIcon("funnel-x", __iconNode$e6);
      var __iconNode$e5 = [
        ["path", { d: "M2 7v10", key: "a2pl2d" }],
        ["path", { d: "M6 5v14", key: "1kq3d7" }],
        ["rect", { width: "12", height: "18", x: "10", y: "3", rx: "2", key: "13i7bc" }]
      ];
      var GalleryHorizontalEnd = createLucideIcon("gallery-horizontal-end", __iconNode$e5);
      var __iconNode$e4 = [
        ["path", { d: "M2 3v18", key: "pzttux" }],
        ["rect", { width: "12", height: "18", x: "6", y: "3", rx: "2", key: "btr8bg" }],
        ["path", { d: "M22 3v18", key: "6jf3v" }]
      ];
      var GalleryHorizontal = createLucideIcon("gallery-horizontal", __iconNode$e4);
      var __iconNode$e3 = [
        ["rect", { width: "18", height: "14", x: "3", y: "3", rx: "2", key: "74y24f" }],
        ["path", { d: "M4 21h1", key: "16zlid" }],
        ["path", { d: "M9 21h1", key: "15o7lz" }],
        ["path", { d: "M14 21h1", key: "v9vybs" }],
        ["path", { d: "M19 21h1", key: "edywat" }]
      ];
      var GalleryThumbnails = createLucideIcon("gallery-thumbnails", __iconNode$e3);
      var __iconNode$e2 = [
        ["path", { d: "M7 2h10", key: "nczekb" }],
        ["path", { d: "M5 6h14", key: "u2x4p" }],
        ["rect", { width: "18", height: "12", x: "3", y: "10", rx: "2", key: "l0tzu3" }]
      ];
      var GalleryVerticalEnd = createLucideIcon("gallery-vertical-end", __iconNode$e2);
      var __iconNode$e1 = [
        ["path", { d: "M3 2h18", key: "15qxfx" }],
        ["rect", { width: "18", height: "12", x: "3", y: "6", rx: "2", key: "1439r6" }],
        ["path", { d: "M3 22h18", key: "8prr45" }]
      ];
      var GalleryVertical = createLucideIcon("gallery-vertical", __iconNode$e1);
      var __iconNode$e0 = [
        ["line", { x1: "6", x2: "10", y1: "11", y2: "11", key: "1gktln" }],
        ["line", { x1: "8", x2: "8", y1: "9", y2: "13", key: "qnk9ow" }],
        ["line", { x1: "15", x2: "15.01", y1: "12", y2: "12", key: "krot7o" }],
        ["line", { x1: "18", x2: "18.01", y1: "10", y2: "10", key: "1lcuu1" }],
        [
          "path",
          {
            d: "M17.32 5H6.68a4 4 0 0 0-3.978 3.59c-.006.052-.01.101-.017.152C2.604 9.416 2 14.456 2 16a3 3 0 0 0 3 3c1 0 1.5-.5 2-1l1.414-1.414A2 2 0 0 1 9.828 16h4.344a2 2 0 0 1 1.414.586L17 18c.5.5 1 1 2 1a3 3 0 0 0 3-3c0-1.545-.604-6.584-.685-7.258-.007-.05-.011-.1-.017-.151A4 4 0 0 0 17.32 5z",
            key: "mfqc10"
          }
        ]
      ];
      var Gamepad2 = createLucideIcon("gamepad-2", __iconNode$e0);
      var __iconNode$d$ = [
        ["line", { x1: "6", x2: "10", y1: "12", y2: "12", key: "161bw2" }],
        ["line", { x1: "8", x2: "8", y1: "10", y2: "14", key: "1i6ji0" }],
        ["line", { x1: "15", x2: "15.01", y1: "13", y2: "13", key: "dqpgro" }],
        ["line", { x1: "18", x2: "18.01", y1: "11", y2: "11", key: "meh2c" }],
        ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "2", key: "9lu3g6" }]
      ];
      var Gamepad = createLucideIcon("gamepad", __iconNode$d$);
      var __iconNode$d_ = [
        ["path", { d: "m12 14 4-4", key: "9kzdfg" }],
        ["path", { d: "M3.34 19a10 10 0 1 1 17.32 0", key: "19p75a" }]
      ];
      var Gauge = createLucideIcon("gauge", __iconNode$d_);
      var __iconNode$dZ = [
        ["path", { d: "m14.5 12.5-8 8a2.119 2.119 0 1 1-3-3l8-8", key: "15492f" }],
        ["path", { d: "m16 16 6-6", key: "vzrcl6" }],
        ["path", { d: "m8 8 6-6", key: "18bi4p" }],
        ["path", { d: "m9 7 8 8", key: "5jnvq1" }],
        ["path", { d: "m21 11-8-8", key: "z4y7zo" }]
      ];
      var Gavel = createLucideIcon("gavel", __iconNode$dZ);
      var __iconNode$dY = [
        ["path", { d: "M6 3h12l4 6-10 13L2 9Z", key: "1pcd5k" }],
        ["path", { d: "M11 3 8 9l4 13 4-13-3-6", key: "1fcu3u" }],
        ["path", { d: "M2 9h20", key: "16fsjt" }]
      ];
      var Gem = createLucideIcon("gem", __iconNode$dY);
      var __iconNode$dX = [
        ["path", { d: "M9 10h.01", key: "qbtxuw" }],
        ["path", { d: "M15 10h.01", key: "1qmjsl" }],
        [
          "path",
          {
            d: "M12 2a8 8 0 0 0-8 8v12l3-3 2.5 2.5L12 19l2.5 2.5L17 19l3 3V10a8 8 0 0 0-8-8z",
            key: "uwwb07"
          }
        ]
      ];
      var Ghost = createLucideIcon("ghost", __iconNode$dX);
      var __iconNode$dW = [
        ["rect", { x: "3", y: "8", width: "18", height: "4", rx: "1", key: "bkv52" }],
        ["path", { d: "M12 8v13", key: "1c76mn" }],
        ["path", { d: "M19 12v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-7", key: "6wjy6b" }],
        [
          "path",
          {
            d: "M7.5 8a2.5 2.5 0 0 1 0-5A4.8 8 0 0 1 12 8a4.8 8 0 0 1 4.5-5 2.5 2.5 0 0 1 0 5",
            key: "1ihvrl"
          }
        ]
      ];
      var Gift = createLucideIcon("gift", __iconNode$dW);
      var __iconNode$dV = [
        ["line", { x1: "6", x2: "6", y1: "3", y2: "15", key: "17qcm7" }],
        ["circle", { cx: "18", cy: "6", r: "3", key: "1h7g24" }],
        ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
        ["path", { d: "M18 9a9 9 0 0 1-9 9", key: "n2h4wq" }]
      ];
      var GitBranch = createLucideIcon("git-branch", __iconNode$dV);
      var __iconNode$dU = [
        ["path", { d: "M6 3v12", key: "qpgusn" }],
        ["path", { d: "M18 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6z", key: "1d02ji" }],
        ["path", { d: "M6 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6z", key: "chk6ph" }],
        ["path", { d: "M15 6a9 9 0 0 0-9 9", key: "or332x" }],
        ["path", { d: "M18 15v6", key: "9wciyi" }],
        ["path", { d: "M21 18h-6", key: "139f0c" }]
      ];
      var GitBranchPlus = createLucideIcon("git-branch-plus", __iconNode$dU);
      var __iconNode$dT = [
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        ["line", { x1: "3", x2: "9", y1: "12", y2: "12", key: "1dyftd" }],
        ["line", { x1: "15", x2: "21", y1: "12", y2: "12", key: "oup4p8" }]
      ];
      var GitCommitHorizontal = createLucideIcon("git-commit-horizontal", __iconNode$dT);
      var __iconNode$dS = [
        ["path", { d: "M12 3v6", key: "1holv5" }],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        ["path", { d: "M12 15v6", key: "a9ows0" }]
      ];
      var GitCommitVertical = createLucideIcon("git-commit-vertical", __iconNode$dS);
      var __iconNode$dR = [
        ["circle", { cx: "5", cy: "6", r: "3", key: "1qnov2" }],
        ["path", { d: "M12 6h5a2 2 0 0 1 2 2v7", key: "1yj91y" }],
        ["path", { d: "m15 9-3-3 3-3", key: "1lwv8l" }],
        ["circle", { cx: "19", cy: "18", r: "3", key: "1qljk2" }],
        ["path", { d: "M12 18H7a2 2 0 0 1-2-2V9", key: "16sdep" }],
        ["path", { d: "m9 15 3 3-3 3", key: "1m3kbl" }]
      ];
      var GitCompareArrows = createLucideIcon("git-compare-arrows", __iconNode$dR);
      var __iconNode$dQ = [
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["path", { d: "M13 6h3a2 2 0 0 1 2 2v7", key: "1yeb86" }],
        ["path", { d: "M11 18H8a2 2 0 0 1-2-2V9", key: "19pyzm" }]
      ];
      var GitCompare = createLucideIcon("git-compare", __iconNode$dQ);
      var __iconNode$dP = [
        ["circle", { cx: "12", cy: "18", r: "3", key: "1mpf1b" }],
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["circle", { cx: "18", cy: "6", r: "3", key: "1h7g24" }],
        ["path", { d: "M18 9v2c0 .6-.4 1-1 1H7c-.6 0-1-.4-1-1V9", key: "1uq4wg" }],
        ["path", { d: "M12 12v3", key: "158kv8" }]
      ];
      var GitFork = createLucideIcon("git-fork", __iconNode$dP);
      var __iconNode$dO = [
        ["circle", { cx: "5", cy: "6", r: "3", key: "1qnov2" }],
        ["path", { d: "M5 9v6", key: "158jrl" }],
        ["circle", { cx: "5", cy: "18", r: "3", key: "104gr9" }],
        ["path", { d: "M12 3v18", key: "108xh3" }],
        ["circle", { cx: "19", cy: "6", r: "3", key: "108a5v" }],
        ["path", { d: "M16 15.7A9 9 0 0 0 19 9", key: "1e3vqb" }]
      ];
      var GitGraph = createLucideIcon("git-graph", __iconNode$dO);
      var __iconNode$dN = [
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["path", { d: "M6 21V9a9 9 0 0 0 9 9", key: "7kw0sc" }]
      ];
      var GitMerge = createLucideIcon("git-merge", __iconNode$dN);
      var __iconNode$dM = [
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["path", { d: "M6 9v12", key: "1sc30k" }],
        ["path", { d: "m21 3-6 6", key: "16nqsk" }],
        ["path", { d: "m21 9-6-6", key: "9j17rh" }],
        ["path", { d: "M18 11.5V15", key: "65xf6f" }],
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }]
      ];
      var GitPullRequestClosed = createLucideIcon("git-pull-request-closed", __iconNode$dM);
      var __iconNode$dL = [
        ["circle", { cx: "5", cy: "6", r: "3", key: "1qnov2" }],
        ["path", { d: "M5 9v12", key: "ih889a" }],
        ["path", { d: "m15 9-3-3 3-3", key: "1lwv8l" }],
        ["path", { d: "M12 6h5a2 2 0 0 1 2 2v3", key: "1rbwk6" }],
        ["path", { d: "M19 15v6", key: "10aioa" }],
        ["path", { d: "M22 18h-6", key: "1d5gi5" }]
      ];
      var GitPullRequestCreateArrow = createLucideIcon("git-pull-request-create-arrow", __iconNode$dL);
      var __iconNode$dK = [
        ["circle", { cx: "5", cy: "6", r: "3", key: "1qnov2" }],
        ["path", { d: "M5 9v12", key: "ih889a" }],
        ["circle", { cx: "19", cy: "18", r: "3", key: "1qljk2" }],
        ["path", { d: "m15 9-3-3 3-3", key: "1lwv8l" }],
        ["path", { d: "M12 6h5a2 2 0 0 1 2 2v7", key: "1yj91y" }]
      ];
      var GitPullRequestArrow = createLucideIcon("git-pull-request-arrow", __iconNode$dK);
      var __iconNode$dJ = [
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["path", { d: "M6 9v12", key: "1sc30k" }],
        ["path", { d: "M13 6h3a2 2 0 0 1 2 2v3", key: "1jb6z3" }],
        ["path", { d: "M18 15v6", key: "9wciyi" }],
        ["path", { d: "M21 18h-6", key: "139f0c" }]
      ];
      var GitPullRequestCreate = createLucideIcon("git-pull-request-create", __iconNode$dJ);
      var __iconNode$dI = [
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["path", { d: "M18 6V5", key: "1oao2s" }],
        ["path", { d: "M18 11v-1", key: "11c8tz" }],
        ["line", { x1: "6", x2: "6", y1: "9", y2: "21", key: "rroup" }]
      ];
      var GitPullRequestDraft = createLucideIcon("git-pull-request-draft", __iconNode$dI);
      var __iconNode$dH = [
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["path", { d: "M13 6h3a2 2 0 0 1 2 2v7", key: "1yeb86" }],
        ["line", { x1: "6", x2: "6", y1: "9", y2: "21", key: "rroup" }]
      ];
      var GitPullRequest = createLucideIcon("git-pull-request", __iconNode$dH);
      var __iconNode$dG = [
        [
          "path",
          {
            d: "M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4",
            key: "tonef"
          }
        ],
        ["path", { d: "M9 18c-4.51 2-5-2-7-2", key: "9comsn" }]
      ];
      var Github = createLucideIcon("github", __iconNode$dG);
      var __iconNode$dF = [
        [
          "path",
          {
            d: "M5.116 4.104A1 1 0 0 1 6.11 3h11.78a1 1 0 0 1 .994 1.105L17.19 20.21A2 2 0 0 1 15.2 22H8.8a2 2 0 0 1-2-1.79z",
            key: "p55z4y"
          }
        ],
        ["path", { d: "M6 12a5 5 0 0 1 6 0 5 5 0 0 0 6 0", key: "mjntcy" }]
      ];
      var GlassWater = createLucideIcon("glass-water", __iconNode$dF);
      var __iconNode$dE = [
        [
          "path",
          {
            d: "m22 13.29-3.33-10a.42.42 0 0 0-.14-.18.38.38 0 0 0-.22-.11.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18l-2.26 6.67H8.32L6.1 3.26a.42.42 0 0 0-.1-.18.38.38 0 0 0-.26-.08.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18L2 13.29a.74.74 0 0 0 .27.83L12 21l9.69-6.88a.71.71 0 0 0 .31-.83Z",
            key: "148pdi"
          }
        ]
      ];
      var Gitlab = createLucideIcon("gitlab", __iconNode$dE);
      var __iconNode$dD = [
        ["circle", { cx: "6", cy: "15", r: "4", key: "vux9w4" }],
        ["circle", { cx: "18", cy: "15", r: "4", key: "18o8ve" }],
        ["path", { d: "M14 15a2 2 0 0 0-2-2 2 2 0 0 0-2 2", key: "1ag4bs" }],
        ["path", { d: "M2.5 13 5 7c.7-1.3 1.4-2 3-2", key: "1hm1gs" }],
        ["path", { d: "M21.5 13 19 7c-.7-1.3-1.5-2-3-2", key: "1r31ai" }]
      ];
      var Glasses = createLucideIcon("glasses", __iconNode$dD);
      var __iconNode$dC = [
        [
          "path",
          {
            d: "M15.686 15A14.5 14.5 0 0 1 12 22a14.5 14.5 0 0 1 0-20 10 10 0 1 0 9.542 13",
            key: "qkt0x6"
          }
        ],
        ["path", { d: "M2 12h8.5", key: "ovaggd" }],
        ["path", { d: "M20 6V4a2 2 0 1 0-4 0v2", key: "1of5e8" }],
        ["rect", { width: "8", height: "5", x: "14", y: "6", rx: "1", key: "1fmf51" }]
      ];
      var GlobeLock = createLucideIcon("globe-lock", __iconNode$dC);
      var __iconNode$dB = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20", key: "13o1zl" }],
        ["path", { d: "M2 12h20", key: "9i4pu4" }]
      ];
      var Globe = createLucideIcon("globe", __iconNode$dB);
      var __iconNode$dA = [
        ["path", { d: "M12 13V2l8 4-8 4", key: "5wlwwj" }],
        ["path", { d: "M20.561 10.222a9 9 0 1 1-12.55-5.29", key: "1c0wjv" }],
        ["path", { d: "M8.002 9.997a5 5 0 1 0 8.9 2.02", key: "gb1g7m" }]
      ];
      var Goal = createLucideIcon("goal", __iconNode$dA);
      var __iconNode$dz = [
        ["path", { d: "M18 11.5V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1.4", key: "edstyy" }],
        ["path", { d: "M14 10V8a2 2 0 0 0-2-2a2 2 0 0 0-2 2v2", key: "19wdwo" }],
        ["path", { d: "M10 9.9V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v5", key: "1lugqo" }],
        ["path", { d: "M6 14a2 2 0 0 0-2-2a2 2 0 0 0-2 2", key: "1hbeus" }],
        [
          "path",
          { d: "M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-4a8 8 0 0 1-8-8 2 2 0 1 1 4 0", key: "1etffm" }
        ]
      ];
      var Grab = createLucideIcon("grab", __iconNode$dz);
      var __iconNode$dy = [
        ["path", { d: "M22 5V2l-5.89 5.89", key: "1eenpo" }],
        ["circle", { cx: "16.6", cy: "15.89", r: "3", key: "xjtalx" }],
        ["circle", { cx: "8.11", cy: "7.4", r: "3", key: "u2fv6i" }],
        ["circle", { cx: "12.35", cy: "11.65", r: "3", key: "i6i8g7" }],
        ["circle", { cx: "13.91", cy: "5.85", r: "3", key: "6ye0dv" }],
        ["circle", { cx: "18.15", cy: "10.09", r: "3", key: "snx9no" }],
        ["circle", { cx: "6.56", cy: "13.2", r: "3", key: "17x4xg" }],
        ["circle", { cx: "10.8", cy: "17.44", r: "3", key: "1hogw9" }],
        ["circle", { cx: "5", cy: "19", r: "3", key: "1sn6vo" }]
      ];
      var Grape = createLucideIcon("grape", __iconNode$dy);
      var __iconNode$dx = [
        [
          "path",
          {
            d: "M21.42 10.922a1 1 0 0 0-.019-1.838L12.83 5.18a2 2 0 0 0-1.66 0L2.6 9.08a1 1 0 0 0 0 1.832l8.57 3.908a2 2 0 0 0 1.66 0z",
            key: "j76jl0"
          }
        ],
        ["path", { d: "M22 10v6", key: "1lu8f3" }],
        ["path", { d: "M6 12.5V16a6 3 0 0 0 12 0v-3.5", key: "1r8lef" }]
      ];
      var GraduationCap = createLucideIcon("graduation-cap", __iconNode$dx);
      var __iconNode$dw = [
        [
          "path",
          {
            d: "M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3",
            key: "11za1p"
          }
        ],
        ["path", { d: "m16 19 2 2 4-4", key: "1b14m6" }]
      ];
      var Grid2x2Check = createLucideIcon("grid-2x2-check", __iconNode$dw);
      var __iconNode$dv = [
        [
          "path",
          {
            d: "M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3",
            key: "11za1p"
          }
        ],
        ["path", { d: "M16 19h6", key: "xwg31i" }],
        ["path", { d: "M19 22v-6", key: "qhmiwi" }]
      ];
      var Grid2x2Plus = createLucideIcon("grid-2x2-plus", __iconNode$dv);
      var __iconNode$du = [
        [
          "path",
          {
            d: "M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3",
            key: "11za1p"
          }
        ],
        ["path", { d: "m16 16 5 5", key: "8tpb07" }],
        ["path", { d: "m16 21 5-5", key: "193jll" }]
      ];
      var Grid2x2X = createLucideIcon("grid-2x2-x", __iconNode$du);
      var __iconNode$dt = [
        ["path", { d: "M12 3v18", key: "108xh3" }],
        ["path", { d: "M3 12h18", key: "1i2n21" }],
        ["rect", { x: "3", y: "3", width: "18", height: "18", rx: "2", key: "h1oib" }]
      ];
      var Grid2x22 = createLucideIcon("grid-2x2", __iconNode$dt);
      var __iconNode$ds = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 9h18", key: "1pudct" }],
        ["path", { d: "M3 15h18", key: "5xshup" }],
        ["path", { d: "M9 3v18", key: "fh3hqa" }],
        ["path", { d: "M15 3v18", key: "14nvp0" }]
      ];
      var Grid3x3 = createLucideIcon("grid-3x3", __iconNode$ds);
      var __iconNode$dr = [
        ["circle", { cx: "12", cy: "9", r: "1", key: "124mty" }],
        ["circle", { cx: "19", cy: "9", r: "1", key: "1ruzo2" }],
        ["circle", { cx: "5", cy: "9", r: "1", key: "1a8b28" }],
        ["circle", { cx: "12", cy: "15", r: "1", key: "1e56xg" }],
        ["circle", { cx: "19", cy: "15", r: "1", key: "1a92ep" }],
        ["circle", { cx: "5", cy: "15", r: "1", key: "5r1jwy" }]
      ];
      var GripHorizontal = createLucideIcon("grip-horizontal", __iconNode$dr);
      var __iconNode$dq = [
        ["circle", { cx: "9", cy: "12", r: "1", key: "1vctgf" }],
        ["circle", { cx: "9", cy: "5", r: "1", key: "hp0tcf" }],
        ["circle", { cx: "9", cy: "19", r: "1", key: "fkjjf6" }],
        ["circle", { cx: "15", cy: "12", r: "1", key: "1tmaij" }],
        ["circle", { cx: "15", cy: "5", r: "1", key: "19l28e" }],
        ["circle", { cx: "15", cy: "19", r: "1", key: "f4zoj3" }]
      ];
      var GripVertical = createLucideIcon("grip-vertical", __iconNode$dq);
      var __iconNode$dp = [
        ["circle", { cx: "12", cy: "5", r: "1", key: "gxeob9" }],
        ["circle", { cx: "19", cy: "5", r: "1", key: "w8mnmm" }],
        ["circle", { cx: "5", cy: "5", r: "1", key: "lttvr7" }],
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
        ["circle", { cx: "19", cy: "12", r: "1", key: "1wjl8i" }],
        ["circle", { cx: "5", cy: "12", r: "1", key: "1pcz8c" }],
        ["circle", { cx: "12", cy: "19", r: "1", key: "lyex9k" }],
        ["circle", { cx: "19", cy: "19", r: "1", key: "shf9b7" }],
        ["circle", { cx: "5", cy: "19", r: "1", key: "bfqh0e" }]
      ];
      var Grip = createLucideIcon("grip", __iconNode$dp);
      var __iconNode$do = [
        ["path", { d: "M3 7V5c0-1.1.9-2 2-2h2", key: "adw53z" }],
        ["path", { d: "M17 3h2c1.1 0 2 .9 2 2v2", key: "an4l38" }],
        ["path", { d: "M21 17v2c0 1.1-.9 2-2 2h-2", key: "144t0e" }],
        ["path", { d: "M7 21H5c-1.1 0-2-.9-2-2v-2", key: "rtnfgi" }],
        ["rect", { width: "7", height: "5", x: "7", y: "7", rx: "1", key: "1eyiv7" }],
        ["rect", { width: "7", height: "5", x: "10", y: "12", rx: "1", key: "1qlmkx" }]
      ];
      var Group = createLucideIcon("group", __iconNode$do);
      var __iconNode$dn = [
        ["path", { d: "m11.9 12.1 4.514-4.514", key: "109xqo" }],
        [
          "path",
          {
            d: "M20.1 2.3a1 1 0 0 0-1.4 0l-1.114 1.114A2 2 0 0 0 17 4.828v1.344a2 2 0 0 1-.586 1.414A2 2 0 0 1 17.828 7h1.344a2 2 0 0 0 1.414-.586L21.7 5.3a1 1 0 0 0 0-1.4z",
            key: "txyc8t"
          }
        ],
        ["path", { d: "m6 16 2 2", key: "16qmzd" }],
        [
          "path",
          {
            d: "M8.2 9.9C8.7 8.8 9.8 8 11 8c2.8 0 5 2.2 5 5 0 1.2-.8 2.3-1.9 2.8l-.9.4A2 2 0 0 0 12 18a4 4 0 0 1-4 4c-3.3 0-6-2.7-6-6a4 4 0 0 1 4-4 2 2 0 0 0 1.8-1.2z",
            key: "1u8q3z"
          }
        ],
        ["circle", { cx: "11.5", cy: "12.5", r: ".5", fill: "currentColor", key: "16onso" }]
      ];
      var Guitar = createLucideIcon("guitar", __iconNode$dn);
      var __iconNode$dm = [
        ["path", { d: "M13.144 21.144A7.274 10.445 45 1 0 2.856 10.856", key: "1k1t7q" }],
        [
          "path",
          {
            d: "M13.144 21.144A7.274 4.365 45 0 0 2.856 10.856a7.274 4.365 45 0 0 10.288 10.288",
            key: "153t1g"
          }
        ],
        [
          "path",
          {
            d: "M16.565 10.435 18.6 8.4a2.501 2.501 0 1 0 1.65-4.65 2.5 2.5 0 1 0-4.66 1.66l-2.024 2.025",
            key: "gzrt0n"
          }
        ],
        ["path", { d: "m8.5 16.5-1-1", key: "otr954" }]
      ];
      var Ham = createLucideIcon("ham", __iconNode$dm);
      var __iconNode$dl = [
        ["path", { d: "m15 12-8.373 8.373a1 1 0 1 1-3-3L12 9", key: "eefl8a" }],
        ["path", { d: "m18 15 4-4", key: "16gjal" }],
        [
          "path",
          {
            d: "m21.5 11.5-1.914-1.914A2 2 0 0 1 19 8.172V7l-2.26-2.26a6 6 0 0 0-4.202-1.756L9 2.96l.92.82A6.18 6.18 0 0 1 12 8.4V10l2 2h1.172a2 2 0 0 1 1.414.586L18.5 14.5",
            key: "b7pghm"
          }
        ]
      ];
      var Hammer = createLucideIcon("hammer", __iconNode$dl);
      var __iconNode$dk = [
        ["path", { d: "M11 15h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 17", key: "geh8rc" }],
        [
          "path",
          {
            d: "m7 21 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9",
            key: "1fto5m"
          }
        ],
        ["path", { d: "m2 16 6 6", key: "1pfhp9" }],
        ["circle", { cx: "16", cy: "9", r: "2.9", key: "1n0dlu" }],
        ["circle", { cx: "6", cy: "5", r: "3", key: "151irh" }]
      ];
      var HandCoins = createLucideIcon("hand-coins", __iconNode$dk);
      var __iconNode$dj = [
        ["path", { d: "M11 14h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 16", key: "1ifwr1" }],
        [
          "path",
          {
            d: "m7 20 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9",
            key: "17abbs"
          }
        ],
        ["path", { d: "m2 15 6 6", key: "10dquu" }],
        [
          "path",
          {
            d: "M19.5 8.5c.7-.7 1.5-1.6 1.5-2.7A2.73 2.73 0 0 0 16 4a2.78 2.78 0 0 0-5 1.8c0 1.2.8 2 1.5 2.8L16 12Z",
            key: "1h3036"
          }
        ]
      ];
      var HandHeart = createLucideIcon("hand-heart", __iconNode$dj);
      var __iconNode$di = [
        ["path", { d: "M11 12h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 14", key: "1j4xps" }],
        [
          "path",
          {
            d: "m7 18 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9",
            key: "uospg8"
          }
        ],
        ["path", { d: "m2 13 6 6", key: "16e5sb" }]
      ];
      var HandHelping = createLucideIcon("hand-helping", __iconNode$di);
      var __iconNode$dh = [
        ["path", { d: "M18 12.5V10a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1.4", key: "wc6myp" }],
        ["path", { d: "M14 11V9a2 2 0 1 0-4 0v2", key: "94qvcw" }],
        ["path", { d: "M10 10.5V5a2 2 0 1 0-4 0v9", key: "m1ah89" }],
        [
          "path",
          {
            d: "m7 15-1.76-1.76a2 2 0 0 0-2.83 2.82l3.6 3.6C7.5 21.14 9.2 22 12 22h2a8 8 0 0 0 8-8V7a2 2 0 1 0-4 0v5",
            key: "t1skq1"
          }
        ]
      ];
      var HandMetal = createLucideIcon("hand-metal", __iconNode$dh);
      var __iconNode$dg = [
        ["path", { d: "M12 3V2", key: "ar7q03" }],
        [
          "path",
          {
            d: "m15.4 17.4 3.2-2.8a2 2 0 1 1 2.8 2.9l-3.6 3.3c-.7.8-1.7 1.2-2.8 1.2h-4c-1.1 0-2.1-.4-2.8-1.2l-1.302-1.464A1 1 0 0 0 6.151 19H5",
            key: "n2g93r"
          }
        ],
        ["path", { d: "M2 14h12a2 2 0 0 1 0 4h-2", key: "1o2jem" }],
        ["path", { d: "M4 10h16", key: "img6z1" }],
        ["path", { d: "M5 10a7 7 0 0 1 14 0", key: "1ega1o" }],
        ["path", { d: "M5 14v6a1 1 0 0 1-1 1H2", key: "1hescx" }]
      ];
      var HandPlatter = createLucideIcon("hand-platter", __iconNode$dg);
      var __iconNode$df = [
        ["path", { d: "M18 11V6a2 2 0 0 0-2-2a2 2 0 0 0-2 2", key: "1fvzgz" }],
        ["path", { d: "M14 10V4a2 2 0 0 0-2-2a2 2 0 0 0-2 2v2", key: "1kc0my" }],
        ["path", { d: "M10 10.5V6a2 2 0 0 0-2-2a2 2 0 0 0-2 2v8", key: "10h0bg" }],
        [
          "path",
          {
            d: "M18 8a2 2 0 1 1 4 0v6a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15",
            key: "1s1gnw"
          }
        ]
      ];
      var Hand = createLucideIcon("hand", __iconNode$df);
      var __iconNode$de = [
        ["path", { d: "M12 2v8", key: "1q4o3n" }],
        ["path", { d: "m16 6-4 4-4-4", key: "6wukr" }],
        ["rect", { width: "20", height: "8", x: "2", y: "14", rx: "2", key: "w68u3i" }],
        ["path", { d: "M6 18h.01", key: "uhywen" }],
        ["path", { d: "M10 18h.01", key: "h775k" }]
      ];
      var HardDriveDownload = createLucideIcon("hard-drive-download", __iconNode$de);
      var __iconNode$dd = [
        ["path", { d: "m11 17 2 2a1 1 0 1 0 3-3", key: "efffak" }],
        [
          "path",
          {
            d: "m14 14 2.5 2.5a1 1 0 1 0 3-3l-3.88-3.88a3 3 0 0 0-4.24 0l-.88.88a1 1 0 1 1-3-3l2.81-2.81a5.79 5.79 0 0 1 7.06-.87l.47.28a2 2 0 0 0 1.42.25L21 4",
            key: "9pr0kb"
          }
        ],
        ["path", { d: "m21 3 1 11h-2", key: "1tisrp" }],
        ["path", { d: "M3 3 2 14l6.5 6.5a1 1 0 1 0 3-3", key: "1uvwmv" }],
        ["path", { d: "M3 4h8", key: "1ep09j" }]
      ];
      var Handshake = createLucideIcon("handshake", __iconNode$dd);
      var __iconNode$dc = [
        ["path", { d: "m16 6-4-4-4 4", key: "13yo43" }],
        ["path", { d: "M12 2v8", key: "1q4o3n" }],
        ["rect", { width: "20", height: "8", x: "2", y: "14", rx: "2", key: "w68u3i" }],
        ["path", { d: "M6 18h.01", key: "uhywen" }],
        ["path", { d: "M10 18h.01", key: "h775k" }]
      ];
      var HardDriveUpload = createLucideIcon("hard-drive-upload", __iconNode$dc);
      var __iconNode$db = [
        ["line", { x1: "22", x2: "2", y1: "12", y2: "12", key: "1y58io" }],
        [
          "path",
          {
            d: "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z",
            key: "oot6mr"
          }
        ],
        ["line", { x1: "6", x2: "6.01", y1: "16", y2: "16", key: "sgf278" }],
        ["line", { x1: "10", x2: "10.01", y1: "16", y2: "16", key: "1l4acy" }]
      ];
      var HardDrive = createLucideIcon("hard-drive", __iconNode$db);
      var __iconNode$da = [
        ["path", { d: "M10 10V5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v5", key: "1p9q5i" }],
        ["path", { d: "M14 6a6 6 0 0 1 6 6v3", key: "1hnv84" }],
        ["path", { d: "M4 15v-3a6 6 0 0 1 6-6", key: "9ciidu" }],
        ["rect", { x: "2", y: "15", width: "20", height: "4", rx: "1", key: "g3x8cw" }]
      ];
      var HardHat = createLucideIcon("hard-hat", __iconNode$da);
      var __iconNode$d9 = [
        ["line", { x1: "4", x2: "20", y1: "9", y2: "9", key: "4lhtct" }],
        ["line", { x1: "4", x2: "20", y1: "15", y2: "15", key: "vyu0kd" }],
        ["line", { x1: "10", x2: "8", y1: "3", y2: "21", key: "1ggp8o" }],
        ["line", { x1: "16", x2: "14", y1: "3", y2: "21", key: "weycgp" }]
      ];
      var Hash = createLucideIcon("hash", __iconNode$d9);
      var __iconNode$d8 = [
        ["path", { d: "m5.2 6.2 1.4 1.4", key: "17imol" }],
        ["path", { d: "M2 13h2", key: "13gyu8" }],
        ["path", { d: "M20 13h2", key: "16rner" }],
        ["path", { d: "m17.4 7.6 1.4-1.4", key: "t4xlah" }],
        ["path", { d: "M22 17H2", key: "1gtaj3" }],
        ["path", { d: "M22 21H2", key: "1gy6en" }],
        ["path", { d: "M16 13a4 4 0 0 0-8 0", key: "1dyczq" }],
        ["path", { d: "M12 5V2.5", key: "1vytko" }]
      ];
      var Haze = createLucideIcon("haze", __iconNode$d8);
      var __iconNode$d7 = [
        [
          "path",
          {
            d: "M22 9a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h1l2 2h12l2-2h1a1 1 0 0 0 1-1Z",
            key: "2128wb"
          }
        ],
        ["path", { d: "M7.5 12h9", key: "1t0ckc" }]
      ];
      var HdmiPort = createLucideIcon("hdmi-port", __iconNode$d7);
      var __iconNode$d6 = [
        ["path", { d: "M4 12h8", key: "17cfdx" }],
        ["path", { d: "M4 18V6", key: "1rz3zl" }],
        ["path", { d: "M12 18V6", key: "zqpxq5" }],
        ["path", { d: "m17 12 3-2v8", key: "1hhhft" }]
      ];
      var Heading1 = createLucideIcon("heading-1", __iconNode$d6);
      var __iconNode$d5 = [
        ["path", { d: "M4 12h8", key: "17cfdx" }],
        ["path", { d: "M4 18V6", key: "1rz3zl" }],
        ["path", { d: "M12 18V6", key: "zqpxq5" }],
        ["path", { d: "M21 18h-4c0-4 4-3 4-6 0-1.5-2-2.5-4-1", key: "9jr5yi" }]
      ];
      var Heading2 = createLucideIcon("heading-2", __iconNode$d5);
      var __iconNode$d4 = [
        ["path", { d: "M4 12h8", key: "17cfdx" }],
        ["path", { d: "M4 18V6", key: "1rz3zl" }],
        ["path", { d: "M12 18V6", key: "zqpxq5" }],
        ["path", { d: "M17.5 10.5c1.7-1 3.5 0 3.5 1.5a2 2 0 0 1-2 2", key: "68ncm8" }],
        ["path", { d: "M17 17.5c2 1.5 4 .3 4-1.5a2 2 0 0 0-2-2", key: "1ejuhz" }]
      ];
      var Heading3 = createLucideIcon("heading-3", __iconNode$d4);
      var __iconNode$d3 = [
        ["path", { d: "M12 18V6", key: "zqpxq5" }],
        ["path", { d: "M17 10v3a1 1 0 0 0 1 1h3", key: "tj5zdr" }],
        ["path", { d: "M21 10v8", key: "1kdml4" }],
        ["path", { d: "M4 12h8", key: "17cfdx" }],
        ["path", { d: "M4 18V6", key: "1rz3zl" }]
      ];
      var Heading4 = createLucideIcon("heading-4", __iconNode$d3);
      var __iconNode$d2 = [
        ["path", { d: "M4 12h8", key: "17cfdx" }],
        ["path", { d: "M4 18V6", key: "1rz3zl" }],
        ["path", { d: "M12 18V6", key: "zqpxq5" }],
        ["path", { d: "M17 13v-3h4", key: "1nvgqp" }],
        [
          "path",
          { d: "M17 17.7c.4.2.8.3 1.3.3 1.5 0 2.7-1.1 2.7-2.5S19.8 13 18.3 13H17", key: "2nebdn" }
        ]
      ];
      var Heading5 = createLucideIcon("heading-5", __iconNode$d2);
      var __iconNode$d1 = [
        ["path", { d: "M4 12h8", key: "17cfdx" }],
        ["path", { d: "M4 18V6", key: "1rz3zl" }],
        ["path", { d: "M12 18V6", key: "zqpxq5" }],
        ["circle", { cx: "19", cy: "16", r: "2", key: "15mx69" }],
        ["path", { d: "M20 10c-2 2-3 3.5-3 6", key: "f35dl0" }]
      ];
      var Heading6 = createLucideIcon("heading-6", __iconNode$d1);
      var __iconNode$d0 = [
        ["path", { d: "M6 12h12", key: "8npq4p" }],
        ["path", { d: "M6 20V4", key: "1w1bmo" }],
        ["path", { d: "M18 20V4", key: "o2hl4u" }]
      ];
      var Heading = createLucideIcon("heading", __iconNode$d0);
      var __iconNode$c$ = [
        ["path", { d: "M21 14h-1.343", key: "1jdnxi" }],
        ["path", { d: "M9.128 3.47A9 9 0 0 1 21 12v3.343", key: "6kipu2" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M20.414 20.414A2 2 0 0 1 19 21h-1a2 2 0 0 1-2-2v-3", key: "9x50f4" }],
        [
          "path",
          {
            d: "M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 2.636-6.364",
            key: "1bkxnm"
          }
        ]
      ];
      var HeadphoneOff = createLucideIcon("headphone-off", __iconNode$c$);
      var __iconNode$c_ = [
        [
          "path",
          {
            d: "M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 18 0v7a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3",
            key: "1xhozi"
          }
        ]
      ];
      var Headphones2 = createLucideIcon("headphones", __iconNode$c_);
      var __iconNode$cZ = [
        [
          "path",
          {
            d: "M3 11h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5Zm0 0a9 9 0 1 1 18 0m0 0v5a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3Z",
            key: "12oyoe"
          }
        ],
        ["path", { d: "M21 16v2a4 4 0 0 1-4 4h-5", key: "1x7m43" }]
      ];
      var Headset = createLucideIcon("headset", __iconNode$cZ);
      var __iconNode$cY = [
        [
          "path",
          {
            d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
            key: "c3ymky"
          }
        ],
        ["path", { d: "m12 13-1-1 2-2-3-3 2-2", key: "xjdxli" }]
      ];
      var HeartCrack = createLucideIcon("heart-crack", __iconNode$cY);
      var __iconNode$cX = [
        [
          "path",
          {
            d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
            key: "c3ymky"
          }
        ],
        [
          "path",
          {
            d: "M12 5 9.04 7.96a2.17 2.17 0 0 0 0 3.08c.82.82 2.13.85 3 .07l2.07-1.9a2.82 2.82 0 0 1 3.79 0l2.96 2.66",
            key: "4oyue0"
          }
        ],
        ["path", { d: "m18 15-2-2", key: "60u0ii" }],
        ["path", { d: "m15 18-2-2", key: "6p76be" }]
      ];
      var HeartHandshake = createLucideIcon("heart-handshake", __iconNode$cX);
      var __iconNode$cW = [
        [
          "path",
          {
            d: "M13.5 19.5 12 21l-7-7c-1.5-1.45-3-3.2-3-5.5A5.5 5.5 0 0 1 7.5 3c1.76 0 3 .5 4.5 2 1.5-1.5 2.74-2 4.5-2a5.5 5.5 0 0 1 5.402 6.5",
            key: "vd0vy5"
          }
        ],
        ["path", { d: "M15 15h6", key: "1u4692" }]
      ];
      var HeartMinus = createLucideIcon("heart-minus", __iconNode$cW);
      var __iconNode$cV = [
        ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }],
        [
          "path",
          { d: "M16.5 16.5 12 21l-7-7c-1.5-1.45-3-3.2-3-5.5a5.5 5.5 0 0 1 2.14-4.35", key: "3mpagl" }
        ],
        [
          "path",
          {
            d: "M8.76 3.1c1.15.22 2.13.78 3.24 1.9 1.5-1.5 2.74-2 4.5-2A5.5 5.5 0 0 1 22 8.5c0 2.12-1.3 3.78-2.67 5.17",
            key: "1gh3v3"
          }
        ]
      ];
      var HeartOff = createLucideIcon("heart-off", __iconNode$cV);
      var __iconNode$cU = [
        [
          "path",
          {
            d: "M13.5 19.5 12 21l-7-7c-1.5-1.45-3-3.2-3-5.5A5.5 5.5 0 0 1 7.5 3c1.76 0 3 .5 4.5 2 1.5-1.5 2.74-2 4.5-2a5.5 5.5 0 0 1 5.402 6.5",
            key: "vd0vy5"
          }
        ],
        ["path", { d: "M15 15h6", key: "1u4692" }],
        ["path", { d: "M18 12v6", key: "1houu1" }]
      ];
      var HeartPlus = createLucideIcon("heart-plus", __iconNode$cU);
      var __iconNode$cT = [
        [
          "path",
          {
            d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
            key: "c3ymky"
          }
        ],
        ["path", { d: "M3.22 12H9.5l.5-1 2 4.5 2-7 1.5 3.5h5.27", key: "1uw2ng" }]
      ];
      var HeartPulse = createLucideIcon("heart-pulse", __iconNode$cT);
      var __iconNode$cS = [
        [
          "path",
          {
            d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
            key: "c3ymky"
          }
        ]
      ];
      var Heart3 = createLucideIcon("heart", __iconNode$cS);
      var __iconNode$cR = [
        ["path", { d: "M11 8c2-3-2-3 0-6", key: "1ldv5m" }],
        ["path", { d: "M15.5 8c2-3-2-3 0-6", key: "1otqoz" }],
        ["path", { d: "M6 10h.01", key: "1lbq93" }],
        ["path", { d: "M6 14h.01", key: "zudwn7" }],
        ["path", { d: "M10 16v-4", key: "1c25yv" }],
        ["path", { d: "M14 16v-4", key: "1dkbt8" }],
        ["path", { d: "M18 16v-4", key: "1yg9me" }],
        [
          "path",
          { d: "M20 6a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3", key: "1ubg90" }
        ],
        ["path", { d: "M5 20v2", key: "1abpe8" }],
        ["path", { d: "M19 20v2", key: "kqn6ft" }]
      ];
      var Heater = createLucideIcon("heater", __iconNode$cR);
      var __iconNode$cQ = [
        [
          "path",
          {
            d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
            key: "yt0hxn"
          }
        ]
      ];
      var Hexagon = createLucideIcon("hexagon", __iconNode$cQ);
      var __iconNode$cP = [
        ["path", { d: "m9 11-6 6v3h9l3-3", key: "1a3l36" }],
        ["path", { d: "m22 12-4.6 4.6a2 2 0 0 1-2.8 0l-5.2-5.2a2 2 0 0 1 0-2.8L14 4", key: "14a9rk" }]
      ];
      var Highlighter = createLucideIcon("highlighter", __iconNode$cP);
      var __iconNode$cO = [
        ["path", { d: "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8", key: "1357e3" }],
        ["path", { d: "M3 3v5h5", key: "1xhq8a" }],
        ["path", { d: "M12 7v5l4 2", key: "1fdv2h" }]
      ];
      var History = createLucideIcon("history", __iconNode$cO);
      var __iconNode$cN = [
        ["path", { d: "M10.82 16.12c1.69.6 3.91.79 5.18.85.28.01.53-.09.7-.27", key: "qyzcap" }],
        [
          "path",
          {
            d: "M11.14 20.57c.52.24 2.44 1.12 4.08 1.37.46.06.86-.25.9-.71.12-1.52-.3-3.43-.5-4.28",
            key: "y078lb"
          }
        ],
        ["path", { d: "M16.13 21.05c1.65.63 3.68.84 4.87.91a.9.9 0 0 0 .7-.26", key: "1utre3" }],
        [
          "path",
          {
            d: "M17.99 5.52a20.83 20.83 0 0 1 3.15 4.5.8.8 0 0 1-.68 1.13c-1.17.1-2.5.02-3.9-.25",
            key: "17o9hm"
          }
        ],
        ["path", { d: "M20.57 11.14c.24.52 1.12 2.44 1.37 4.08.04.3-.08.59-.31.75", key: "1d1n4p" }],
        [
          "path",
          {
            d: "M4.93 4.93a10 10 0 0 0-.67 13.4c.35.43.96.4 1.17-.12.69-1.71 1.07-5.07 1.07-6.71 1.34.45 3.1.9 4.88.62a.85.85 0 0 0 .48-.24",
            key: "9uv3tt"
          }
        ],
        [
          "path",
          {
            d: "M5.52 17.99c1.05.95 2.91 2.42 4.5 3.15a.8.8 0 0 0 1.13-.68c.2-2.34-.33-5.3-1.57-8.28",
            key: "1292wz"
          }
        ],
        [
          "path",
          {
            d: "M8.35 2.68a10 10 0 0 1 9.98 1.58c.43.35.4.96-.12 1.17-1.5.6-4.3.98-6.07 1.05",
            key: "7ozu9p"
          }
        ],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ];
      var HopOff = createLucideIcon("hop-off", __iconNode$cN);
      var __iconNode$cM = [
        [
          "path",
          {
            d: "M10.82 16.12c1.69.6 3.91.79 5.18.85.55.03 1-.42.97-.97-.06-1.27-.26-3.5-.85-5.18",
            key: "18lxf1"
          }
        ],
        [
          "path",
          {
            d: "M11.5 6.5c1.64 0 5-.38 6.71-1.07.52-.2.55-.82.12-1.17A10 10 0 0 0 4.26 18.33c.35.43.96.4 1.17-.12.69-1.71 1.07-5.07 1.07-6.71 1.34.45 3.1.9 4.88.62a.88.88 0 0 0 .73-.74c.3-2.14-.15-3.5-.61-4.88",
            key: "vtfxrw"
          }
        ],
        [
          "path",
          {
            d: "M15.62 16.95c.2.85.62 2.76.5 4.28a.77.77 0 0 1-.9.7 16.64 16.64 0 0 1-4.08-1.36",
            key: "13hl71"
          }
        ],
        [
          "path",
          {
            d: "M16.13 21.05c1.65.63 3.68.84 4.87.91a.9.9 0 0 0 .96-.96 17.68 17.68 0 0 0-.9-4.87",
            key: "1sl8oj"
          }
        ],
        [
          "path",
          {
            d: "M16.94 15.62c.86.2 2.77.62 4.29.5a.77.77 0 0 0 .7-.9 16.64 16.64 0 0 0-1.36-4.08",
            key: "19c6kt"
          }
        ],
        [
          "path",
          {
            d: "M17.99 5.52a20.82 20.82 0 0 1 3.15 4.5.8.8 0 0 1-.68 1.13c-2.33.2-5.3-.32-8.27-1.57",
            key: "85ghs3"
          }
        ],
        ["path", { d: "M4.93 4.93 3 3a.7.7 0 0 1 0-1", key: "x087yj" }],
        [
          "path",
          {
            d: "M9.58 12.18c1.24 2.98 1.77 5.95 1.57 8.28a.8.8 0 0 1-1.13.68 20.82 20.82 0 0 1-4.5-3.15",
            key: "11xdqo"
          }
        ]
      ];
      var Hop = createLucideIcon("hop", __iconNode$cM);
      var __iconNode$cL = [
        ["path", { d: "M12 6v4", key: "16clxf" }],
        ["path", { d: "M14 14h-4", key: "esezmu" }],
        ["path", { d: "M14 18h-4", key: "16mqa2" }],
        ["path", { d: "M14 8h-4", key: "z8ypaz" }],
        [
          "path",
          {
            d: "M18 12h2a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-9a2 2 0 0 1 2-2h2",
            key: "b1k337"
          }
        ],
        ["path", { d: "M18 22V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v18", key: "16g51d" }]
      ];
      var Hospital = createLucideIcon("hospital", __iconNode$cL);
      var __iconNode$cK = [
        ["path", { d: "M10 22v-6.57", key: "1wmca3" }],
        ["path", { d: "M12 11h.01", key: "z322tv" }],
        ["path", { d: "M12 7h.01", key: "1ivr5q" }],
        ["path", { d: "M14 15.43V22", key: "1q2vjd" }],
        ["path", { d: "M15 16a5 5 0 0 0-6 0", key: "o9wqvi" }],
        ["path", { d: "M16 11h.01", key: "xkw8gn" }],
        ["path", { d: "M16 7h.01", key: "1kdx03" }],
        ["path", { d: "M8 11h.01", key: "1dfujw" }],
        ["path", { d: "M8 7h.01", key: "1vti4s" }],
        ["rect", { x: "4", y: "2", width: "16", height: "20", rx: "2", key: "1uxh74" }]
      ];
      var Hotel = createLucideIcon("hotel", __iconNode$cK);
      var __iconNode$cJ = [
        ["path", { d: "M5 22h14", key: "ehvnwv" }],
        ["path", { d: "M5 2h14", key: "pdyrp9" }],
        [
          "path",
          {
            d: "M17 22v-4.172a2 2 0 0 0-.586-1.414L12 12l-4.414 4.414A2 2 0 0 0 7 17.828V22",
            key: "1d314k"
          }
        ],
        [
          "path",
          { d: "M7 2v4.172a2 2 0 0 0 .586 1.414L12 12l4.414-4.414A2 2 0 0 0 17 6.172V2", key: "1vvvr6" }
        ]
      ];
      var Hourglass = createLucideIcon("hourglass", __iconNode$cJ);
      var __iconNode$cI = [
        ["path", { d: "M10 12V8.964", key: "1vll13" }],
        ["path", { d: "M14 12V8.964", key: "1x3qvg" }],
        [
          "path",
          { d: "M15 12a1 1 0 0 1 1 1v2a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2a1 1 0 0 1 1-1z", key: "ppykja" }
        ],
        [
          "path",
          {
            d: "M8.5 21H5a2 2 0 0 1-2-2v-9a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2h-5a2 2 0 0 1-2-2v-2",
            key: "1gvg2z"
          }
        ]
      ];
      var HousePlug = createLucideIcon("house-plug", __iconNode$cI);
      var __iconNode$cH = [
        [
          "path",
          {
            d: "M13.22 2.416a2 2 0 0 0-2.511.057l-7 5.999A2 2 0 0 0 3 10v9a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7.354",
            key: "5phn05"
          }
        ],
        ["path", { d: "M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8", key: "5wwlr5" }],
        ["path", { d: "M15 6h6", key: "1jlkvy" }],
        ["path", { d: "M18 3v6", key: "x1uolp" }]
      ];
      var HousePlus = createLucideIcon("house-plus", __iconNode$cH);
      var __iconNode$cG = [
        ["path", { d: "M9.5 13.866a4 4 0 0 1 5 .01", key: "1wy54i" }],
        ["path", { d: "M12 17h.01", key: "p32p05" }],
        [
          "path",
          {
            d: "M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z",
            key: "1d0kgt"
          }
        ],
        ["path", { d: "M7 10.754a8 8 0 0 1 10 0", key: "exoy2g" }]
      ];
      var HouseWifi = createLucideIcon("house-wifi", __iconNode$cG);
      var __iconNode$cF = [
        ["path", { d: "M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8", key: "5wwlr5" }],
        [
          "path",
          {
            d: "M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z",
            key: "1d0kgt"
          }
        ]
      ];
      var House = createLucideIcon("house", __iconNode$cF);
      var __iconNode$cE = [
        [
          "path",
          {
            d: "M12 17c5 0 8-2.69 8-6H4c0 3.31 3 6 8 6m-4 4h8m-4-3v3M5.14 11a3.5 3.5 0 1 1 6.71 0",
            key: "1uxfcu"
          }
        ],
        ["path", { d: "M12.14 11a3.5 3.5 0 1 1 6.71 0", key: "4k3m1s" }],
        ["path", { d: "M15.5 6.5a3.5 3.5 0 1 0-7 0", key: "zmuahr" }]
      ];
      var IceCreamBowl = createLucideIcon("ice-cream-bowl", __iconNode$cE);
      var __iconNode$cD = [
        ["path", { d: "m7 11 4.08 10.35a1 1 0 0 0 1.84 0L17 11", key: "1v6356" }],
        ["path", { d: "M17 7A5 5 0 0 0 7 7", key: "151p3v" }],
        ["path", { d: "M17 7a2 2 0 0 1 0 4H7a2 2 0 0 1 0-4", key: "1sdaij" }]
      ];
      var IceCreamCone = createLucideIcon("ice-cream-cone", __iconNode$cD);
      var __iconNode$cC = [
        [
          "path",
          {
            d: "M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21",
            key: "9csbqa"
          }
        ],
        ["path", { d: "m14 19 3 3v-5.5", key: "9ldu5r" }],
        ["path", { d: "m17 22 3-3", key: "1nkfve" }],
        ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }]
      ];
      var ImageDown = createLucideIcon("image-down", __iconNode$cC);
      var __iconNode$cB = [
        ["path", { d: "M16 10h2", key: "8sgtl7" }],
        ["path", { d: "M16 14h2", key: "epxaof" }],
        ["path", { d: "M6.17 15a3 3 0 0 1 5.66 0", key: "n6f512" }],
        ["circle", { cx: "9", cy: "11", r: "2", key: "yxgjnd" }],
        ["rect", { x: "2", y: "5", width: "20", height: "14", rx: "2", key: "qneu4z" }]
      ];
      var IdCard = createLucideIcon("id-card", __iconNode$cB);
      var __iconNode$cA = [
        ["path", { d: "M21 9v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7", key: "m87ecr" }],
        ["line", { x1: "16", x2: "22", y1: "5", y2: "5", key: "ez7e4s" }],
        ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
        ["path", { d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21", key: "1xmnt7" }]
      ];
      var ImageMinus = createLucideIcon("image-minus", __iconNode$cA);
      var __iconNode$cz = [
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }],
        ["path", { d: "M10.41 10.41a2 2 0 1 1-2.83-2.83", key: "1bzlo9" }],
        ["line", { x1: "13.5", x2: "6", y1: "13.5", y2: "21", key: "1q0aeu" }],
        ["line", { x1: "18", x2: "21", y1: "12", y2: "15", key: "5mozeu" }],
        [
          "path",
          {
            d: "M3.59 3.59A1.99 1.99 0 0 0 3 5v14a2 2 0 0 0 2 2h14c.55 0 1.052-.22 1.41-.59",
            key: "mmje98"
          }
        ],
        ["path", { d: "M21 15V5a2 2 0 0 0-2-2H9", key: "43el77" }]
      ];
      var ImageOff = createLucideIcon("image-off", __iconNode$cz);
      var __iconNode$cy = [
        ["path", { d: "m11 16-5 5", key: "j5f7ct" }],
        ["path", { d: "M11 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6.5", key: "7s81lt" }],
        [
          "path",
          {
            d: "M15.765 22a.5.5 0 0 1-.765-.424V13.38a.5.5 0 0 1 .765-.424l5.878 3.674a1 1 0 0 1 0 1.696z",
            key: "1omb6s"
          }
        ],
        ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }]
      ];
      var ImagePlay = createLucideIcon("image-play", __iconNode$cy);
      var __iconNode$cx = [
        ["path", { d: "M16 5h6", key: "1vod17" }],
        ["path", { d: "M19 2v6", key: "4bpg5p" }],
        ["path", { d: "M21 11.5V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7.5", key: "1ue2ih" }],
        ["path", { d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21", key: "1xmnt7" }],
        ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }]
      ];
      var ImagePlus = createLucideIcon("image-plus", __iconNode$cx);
      var __iconNode$cw = [
        [
          "path",
          {
            d: "M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21",
            key: "9csbqa"
          }
        ],
        ["path", { d: "m14 19.5 3-3 3 3", key: "9vmjn0" }],
        ["path", { d: "M17 22v-5.5", key: "1aa6fl" }],
        ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }]
      ];
      var ImageUp = createLucideIcon("image-up", __iconNode$cw);
      var __iconNode$cv = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
        ["path", { d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21", key: "1xmnt7" }]
      ];
      var Image = createLucideIcon("image", __iconNode$cv);
      var __iconNode$cu = [
        ["path", { d: "M16 3h5v5", key: "1806ms" }],
        ["path", { d: "M17 21h2a2 2 0 0 0 2-2", key: "130fy9" }],
        ["path", { d: "M21 12v3", key: "1wzk3p" }],
        ["path", { d: "m21 3-5 5", key: "1g5oa7" }],
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2", key: "kk3yz1" }],
        ["path", { d: "m5 21 4.144-4.144a1.21 1.21 0 0 1 1.712 0L13 19", key: "fyekpt" }],
        ["path", { d: "M9 3h3", key: "d52fa" }],
        ["rect", { x: "3", y: "11", width: "10", height: "10", rx: "1", key: "1wpmix" }]
      ];
      var ImageUpscale = createLucideIcon("image-upscale", __iconNode$cu);
      var __iconNode$ct = [
        ["path", { d: "M18 22H4a2 2 0 0 1-2-2V6", key: "pblm9e" }],
        ["path", { d: "m22 13-1.296-1.296a2.41 2.41 0 0 0-3.408 0L11 18", key: "nf6bnh" }],
        ["circle", { cx: "12", cy: "8", r: "2", key: "1822b1" }],
        ["rect", { width: "16", height: "16", x: "6", y: "2", rx: "2", key: "12espp" }]
      ];
      var Images = createLucideIcon("images", __iconNode$ct);
      var __iconNode$cs = [
        ["path", { d: "M12 3v12", key: "1x0j5s" }],
        ["path", { d: "m8 11 4 4 4-4", key: "1dohi6" }],
        [
          "path",
          {
            d: "M8 5H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-4",
            key: "1ywtjm"
          }
        ]
      ];
      var Import = createLucideIcon("import", __iconNode$cs);
      var __iconNode$cr = [
        ["polyline", { points: "22 12 16 12 14 15 10 15 8 12 2 12", key: "o97t9d" }],
        [
          "path",
          {
            d: "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z",
            key: "oot6mr"
          }
        ]
      ];
      var Inbox = createLucideIcon("inbox", __iconNode$cr);
      var __iconNode$cq = [
        ["path", { d: "M21 12H11", key: "wd7e0v" }],
        ["path", { d: "M21 18H11", key: "4wu86t" }],
        ["path", { d: "M21 6H11", key: "6dy1d6" }],
        ["path", { d: "m7 8-4 4 4 4", key: "o5hrat" }]
      ];
      var IndentDecrease = createLucideIcon("indent-decrease", __iconNode$cq);
      var __iconNode$cp = [
        ["path", { d: "M21 12H11", key: "wd7e0v" }],
        ["path", { d: "M21 18H11", key: "4wu86t" }],
        ["path", { d: "M21 6H11", key: "6dy1d6" }],
        ["path", { d: "m3 8 4 4-4 4", key: "1a3j6y" }]
      ];
      var IndentIncrease = createLucideIcon("indent-increase", __iconNode$cp);
      var __iconNode$co = [
        ["path", { d: "M6 3h12", key: "ggurg9" }],
        ["path", { d: "M6 8h12", key: "6g4wlu" }],
        ["path", { d: "m6 13 8.5 8", key: "u1kupk" }],
        ["path", { d: "M6 13h3", key: "wdp6ag" }],
        ["path", { d: "M9 13c6.667 0 6.667-10 0-10", key: "1nkvk2" }]
      ];
      var IndianRupee = createLucideIcon("indian-rupee", __iconNode$co);
      var __iconNode$cn = [
        ["path", { d: "M6 16c5 0 7-8 12-8a4 4 0 0 1 0 8c-5 0-7-8-12-8a4 4 0 1 0 0 8", key: "18ogeb" }]
      ];
      var Infinity2 = createLucideIcon("infinity", __iconNode$cn);
      var __iconNode$cm = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M12 16v-4", key: "1dtifu" }],
        ["path", { d: "M12 8h.01", key: "e9boi3" }]
      ];
      var Info = createLucideIcon("info", __iconNode$cm);
      var __iconNode$cl = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M7 7h.01", key: "7u93v4" }],
        ["path", { d: "M17 7h.01", key: "14a9sn" }],
        ["path", { d: "M7 17h.01", key: "19xn7k" }],
        ["path", { d: "M17 17h.01", key: "1sd3ek" }]
      ];
      var InspectionPanel = createLucideIcon("inspection-panel", __iconNode$cl);
      var __iconNode$ck = [
        ["rect", { width: "20", height: "20", x: "2", y: "2", rx: "5", ry: "5", key: "2e1cvw" }],
        ["path", { d: "M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z", key: "9exkf1" }],
        ["line", { x1: "17.5", x2: "17.51", y1: "6.5", y2: "6.5", key: "r4j83e" }]
      ];
      var Instagram = createLucideIcon("instagram", __iconNode$ck);
      var __iconNode$cj = [
        ["line", { x1: "19", x2: "10", y1: "4", y2: "4", key: "15jd3p" }],
        ["line", { x1: "14", x2: "5", y1: "20", y2: "20", key: "bu0au3" }],
        ["line", { x1: "15", x2: "9", y1: "4", y2: "20", key: "uljnxc" }]
      ];
      var Italic = createLucideIcon("italic", __iconNode$cj);
      var __iconNode$ci = [
        ["path", { d: "M20 10c0-4.4-3.6-8-8-8s-8 3.6-8 8 3.6 8 8 8h8", key: "4znkd0" }],
        ["polyline", { points: "16 14 20 18 16 22", key: "11njsm" }]
      ];
      var IterationCcw = createLucideIcon("iteration-ccw", __iconNode$ci);
      var __iconNode$ch = [
        ["path", { d: "M4 10c0-4.4 3.6-8 8-8s8 3.6 8 8-3.6 8-8 8H4", key: "tuf4su" }],
        ["polyline", { points: "8 22 4 18 8 14", key: "evkj9s" }]
      ];
      var IterationCw = createLucideIcon("iteration-cw", __iconNode$ch);
      var __iconNode$cg = [
        [
          "path",
          {
            d: "M21 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-2Z",
            key: "jg2n2t"
          }
        ],
        ["path", { d: "M6 15v-2", key: "gd6mvg" }],
        ["path", { d: "M12 15V9", key: "8c7uyn" }],
        ["circle", { cx: "12", cy: "6", r: "3", key: "1gm2ql" }]
      ];
      var Joystick = createLucideIcon("joystick", __iconNode$cg);
      var __iconNode$cf = [
        ["path", { d: "M12 9.5V21m0-11.5L6 3m6 6.5L18 3", key: "2ej80x" }],
        ["path", { d: "M6 15h12", key: "1hwgt5" }],
        ["path", { d: "M6 11h12", key: "wf4gp6" }]
      ];
      var JapaneseYen = createLucideIcon("japanese-yen", __iconNode$cf);
      var __iconNode$ce = [
        ["path", { d: "M6 5v11", key: "mdvv1e" }],
        ["path", { d: "M12 5v6", key: "14ar3b" }],
        ["path", { d: "M18 5v14", key: "7ji314" }]
      ];
      var Kanban = createLucideIcon("kanban", __iconNode$ce);
      var __iconNode$cd = [
        [
          "path",
          {
            d: "M2.586 17.414A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814a6.5 6.5 0 1 0-4-4z",
            key: "1s6t7t"
          }
        ],
        ["circle", { cx: "16.5", cy: "7.5", r: ".5", fill: "currentColor", key: "w0ekpg" }]
      ];
      var KeyRound = createLucideIcon("key-round", __iconNode$cd);
      var __iconNode$cc = [
        [
          "path",
          {
            d: "M12.4 2.7a2.5 2.5 0 0 1 3.4 0l5.5 5.5a2.5 2.5 0 0 1 0 3.4l-3.7 3.7a2.5 2.5 0 0 1-3.4 0L8.7 9.8a2.5 2.5 0 0 1 0-3.4z",
            key: "165ttr"
          }
        ],
        ["path", { d: "m14 7 3 3", key: "1r5n42" }],
        [
          "path",
          {
            d: "m9.4 10.6-6.814 6.814A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814",
            key: "1ubxi2"
          }
        ]
      ];
      var KeySquare = createLucideIcon("key-square", __iconNode$cc);
      var __iconNode$cb = [
        ["path", { d: "m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4", key: "g0fldk" }],
        ["path", { d: "m21 2-9.6 9.6", key: "1j0ho8" }],
        ["circle", { cx: "7.5", cy: "15.5", r: "5.5", key: "yqb3hr" }]
      ];
      var Key = createLucideIcon("key", __iconNode$cb);
      var __iconNode$ca = [
        ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
        ["path", { d: "M6 8h4", key: "utf9t1" }],
        ["path", { d: "M14 8h.01", key: "1primd" }],
        ["path", { d: "M18 8h.01", key: "emo2bl" }],
        ["path", { d: "M2 12h20", key: "9i4pu4" }],
        ["path", { d: "M6 12v4", key: "dy92yo" }],
        ["path", { d: "M10 12v4", key: "1fxnav" }],
        ["path", { d: "M14 12v4", key: "1hft58" }],
        ["path", { d: "M18 12v4", key: "tjjnbz" }]
      ];
      var KeyboardMusic = createLucideIcon("keyboard-music", __iconNode$ca);
      var __iconNode$c9 = [
        ["path", { d: "M 20 4 A2 2 0 0 1 22 6", key: "1g1fkt" }],
        ["path", { d: "M 22 6 L 22 16.41", key: "1qjg3w" }],
        ["path", { d: "M 7 16 L 16 16", key: "n0yqwb" }],
        ["path", { d: "M 9.69 4 L 20 4", key: "kbpcgx" }],
        ["path", { d: "M14 8h.01", key: "1primd" }],
        ["path", { d: "M18 8h.01", key: "emo2bl" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M20 20H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2", key: "s23sx2" }],
        ["path", { d: "M6 8h.01", key: "x9i8wu" }],
        ["path", { d: "M8 12h.01", key: "czm47f" }]
      ];
      var KeyboardOff = createLucideIcon("keyboard-off", __iconNode$c9);
      var __iconNode$c8 = [
        ["path", { d: "M10 8h.01", key: "1r9ogq" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }],
        ["path", { d: "M14 8h.01", key: "1primd" }],
        ["path", { d: "M16 12h.01", key: "1l6xoz" }],
        ["path", { d: "M18 8h.01", key: "emo2bl" }],
        ["path", { d: "M6 8h.01", key: "x9i8wu" }],
        ["path", { d: "M7 16h10", key: "wp8him" }],
        ["path", { d: "M8 12h.01", key: "czm47f" }],
        ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }]
      ];
      var Keyboard = createLucideIcon("keyboard", __iconNode$c8);
      var __iconNode$c7 = [
        ["path", { d: "M12 2v5", key: "nd4vlx" }],
        ["path", { d: "M14.829 15.998a3 3 0 1 1-5.658 0", key: "1pybiy" }],
        [
          "path",
          {
            d: "M20.92 14.606A1 1 0 0 1 20 16H4a1 1 0 0 1-.92-1.394l3-7A1 1 0 0 1 7 7h10a1 1 0 0 1 .92.606z",
            key: "ma1wor"
          }
        ]
      ];
      var LampCeiling = createLucideIcon("lamp-ceiling", __iconNode$c7);
      var __iconNode$c6 = [
        [
          "path",
          {
            d: "M10.293 2.293a1 1 0 0 1 1.414 0l2.5 2.5 5.994 1.227a1 1 0 0 1 .506 1.687l-7 7a1 1 0 0 1-1.687-.506l-1.227-5.994-2.5-2.5a1 1 0 0 1 0-1.414z",
            key: "sb8slu"
          }
        ],
        ["path", { d: "m14.207 4.793-3.414 3.414", key: "m2x3oj" }],
        [
          "path",
          { d: "M3 20a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1z", key: "8b3myj" }
        ],
        ["path", { d: "m9.086 6.5-4.793 4.793a1 1 0 0 0-.18 1.17L7 18", key: "43s6cu" }]
      ];
      var LampDesk = createLucideIcon("lamp-desk", __iconNode$c6);
      var __iconNode$c5 = [
        ["path", { d: "M12 10v12", key: "6ubwww" }],
        [
          "path",
          {
            d: "M17.929 7.629A1 1 0 0 1 17 9H7a1 1 0 0 1-.928-1.371l2-5A1 1 0 0 1 9 2h6a1 1 0 0 1 .928.629z",
            key: "1o95gh"
          }
        ],
        ["path", { d: "M9 22h6", key: "1rlq3v" }]
      ];
      var LampFloor = createLucideIcon("lamp-floor", __iconNode$c5);
      var __iconNode$c4 = [
        [
          "path",
          {
            d: "M19.929 18.629A1 1 0 0 1 19 20H9a1 1 0 0 1-.928-1.371l2-5A1 1 0 0 1 11 13h6a1 1 0 0 1 .928.629z",
            key: "u4w2d7"
          }
        ],
        [
          "path",
          { d: "M6 3a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H5a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1z", key: "15356w" }
        ],
        ["path", { d: "M8 6h4a2 2 0 0 1 2 2v5", key: "1m6m7x" }]
      ];
      var LampWallDown = createLucideIcon("lamp-wall-down", __iconNode$c4);
      var __iconNode$c3 = [
        [
          "path",
          {
            d: "M19.929 9.629A1 1 0 0 1 19 11H9a1 1 0 0 1-.928-1.371l2-5A1 1 0 0 1 11 4h6a1 1 0 0 1 .928.629z",
            key: "1uvrbf"
          }
        ],
        [
          "path",
          { d: "M6 15a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H5a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1z", key: "154r2a" }
        ],
        ["path", { d: "M8 18h4a2 2 0 0 0 2-2v-5", key: "z9mbu0" }]
      ];
      var LampWallUp = createLucideIcon("lamp-wall-up", __iconNode$c3);
      var __iconNode$c2 = [
        ["path", { d: "M12 12v6", key: "3ahymv" }],
        [
          "path",
          {
            d: "M4.077 10.615A1 1 0 0 0 5 12h14a1 1 0 0 0 .923-1.385l-3.077-7.384A2 2 0 0 0 15 2H9a2 2 0 0 0-1.846 1.23Z",
            key: "1l7kg2"
          }
        ],
        [
          "path",
          { d: "M8 20a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1z", key: "1mmzpi" }
        ]
      ];
      var Lamp = createLucideIcon("lamp", __iconNode$c2);
      var __iconNode$c1 = [
        ["path", { d: "m12 8 6-3-6-3v10", key: "mvpnpy" }],
        [
          "path",
          {
            d: "m8 11.99-5.5 3.14a1 1 0 0 0 0 1.74l8.5 4.86a2 2 0 0 0 2 0l8.5-4.86a1 1 0 0 0 0-1.74L16 12",
            key: "ek95tt"
          }
        ],
        ["path", { d: "m6.49 12.85 11.02 6.3", key: "1kt42w" }],
        ["path", { d: "M17.51 12.85 6.5 19.15", key: "v55bdg" }]
      ];
      var LandPlot = createLucideIcon("land-plot", __iconNode$c1);
      var __iconNode$c0 = [
        ["line", { x1: "3", x2: "21", y1: "22", y2: "22", key: "j8o0r" }],
        ["line", { x1: "6", x2: "6", y1: "18", y2: "11", key: "10tf0k" }],
        ["line", { x1: "10", x2: "10", y1: "18", y2: "11", key: "54lgf6" }],
        ["line", { x1: "14", x2: "14", y1: "18", y2: "11", key: "380y" }],
        ["line", { x1: "18", x2: "18", y1: "18", y2: "11", key: "1kevvc" }],
        ["polygon", { points: "12 2 20 7 4 7", key: "jkujk7" }]
      ];
      var Landmark = createLucideIcon("landmark", __iconNode$c0);
      var __iconNode$b$ = [
        ["path", { d: "m5 8 6 6", key: "1wu5hv" }],
        ["path", { d: "m4 14 6-6 2-3", key: "1k1g8d" }],
        ["path", { d: "M2 5h12", key: "or177f" }],
        ["path", { d: "M7 2h1", key: "1t2jsx" }],
        ["path", { d: "m22 22-5-10-5 10", key: "don7ne" }],
        ["path", { d: "M14 18h6", key: "1m8k6r" }]
      ];
      var Languages = createLucideIcon("languages", __iconNode$b$);
      var __iconNode$b_ = [
        ["path", { d: "M2 20h20", key: "owomy5" }],
        ["path", { d: "m9 10 2 2 4-4", key: "1gnqz4" }],
        ["rect", { x: "3", y: "4", width: "18", height: "12", rx: "2", key: "8ur36m" }]
      ];
      var LaptopMinimalCheck = createLucideIcon("laptop-minimal-check", __iconNode$b_);
      var __iconNode$bZ = [
        [
          "path",
          {
            d: "M20 16V7a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v9m16 0H4m16 0 1.28 2.55a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45L4 16",
            key: "tarvll"
          }
        ]
      ];
      var Laptop = createLucideIcon("laptop", __iconNode$bZ);
      var __iconNode$bY = [
        ["rect", { width: "18", height: "12", x: "3", y: "4", rx: "2", ry: "2", key: "1qhy41" }],
        ["line", { x1: "2", x2: "22", y1: "20", y2: "20", key: "ni3hll" }]
      ];
      var LaptopMinimal = createLucideIcon("laptop-minimal", __iconNode$bY);
      var __iconNode$bX = [
        ["path", { d: "M7 22a5 5 0 0 1-2-4", key: "umushi" }],
        ["path", { d: "M7 16.93c.96.43 1.96.74 2.99.91", key: "ybbtv3" }],
        [
          "path",
          {
            d: "M3.34 14A6.8 6.8 0 0 1 2 10c0-4.42 4.48-8 10-8s10 3.58 10 8a7.19 7.19 0 0 1-.33 2",
            key: "gt5e1w"
          }
        ],
        ["path", { d: "M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z", key: "bq3ynw" }],
        [
          "path",
          {
            d: "M14.33 22h-.09a.35.35 0 0 1-.24-.32v-10a.34.34 0 0 1 .33-.34c.08 0 .15.03.21.08l7.34 6a.33.33 0 0 1-.21.59h-4.49l-2.57 3.85a.35.35 0 0 1-.28.14z",
            key: "72q637"
          }
        ]
      ];
      var LassoSelect = createLucideIcon("lasso-select", __iconNode$bX);
      var __iconNode$bW = [
        ["path", { d: "M7 22a5 5 0 0 1-2-4", key: "umushi" }],
        [
          "path",
          {
            d: "M3.3 14A6.8 6.8 0 0 1 2 10c0-4.4 4.5-8 10-8s10 3.6 10 8-4.5 8-10 8a12 12 0 0 1-5-1",
            key: "146dds"
          }
        ],
        ["path", { d: "M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z", key: "bq3ynw" }]
      ];
      var Lasso = createLucideIcon("lasso", __iconNode$bW);
      var __iconNode$bV = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M18 13a6 6 0 0 1-6 5 6 6 0 0 1-6-5h12Z", key: "b2q4dd" }],
        ["line", { x1: "9", x2: "9.01", y1: "9", y2: "9", key: "yxxnd0" }],
        ["line", { x1: "15", x2: "15.01", y1: "9", y2: "9", key: "1p4y9e" }]
      ];
      var Laugh = createLucideIcon("laugh", __iconNode$bV);
      var __iconNode$bU = [
        [
          "path",
          {
            d: "M13 13.74a2 2 0 0 1-2 0L2.5 8.87a1 1 0 0 1 0-1.74L11 2.26a2 2 0 0 1 2 0l8.5 4.87a1 1 0 0 1 0 1.74z",
            key: "15q6uc"
          }
        ],
        [
          "path",
          {
            d: "m20 14.285 1.5.845a1 1 0 0 1 0 1.74L13 21.74a2 2 0 0 1-2 0l-8.5-4.87a1 1 0 0 1 0-1.74l1.5-.845",
            key: "byia6g"
          }
        ]
      ];
      var Layers2 = createLucideIcon("layers-2", __iconNode$bU);
      var __iconNode$bT = [
        [
          "path",
          {
            d: "M12.83 2.18a2 2 0 0 0-1.66 0L2.6 6.08a1 1 0 0 0 0 1.83l8.58 3.91a2 2 0 0 0 1.66 0l8.58-3.9a1 1 0 0 0 0-1.83z",
            key: "zw3jo"
          }
        ],
        [
          "path",
          {
            d: "M2 12a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 12",
            key: "1wduqc"
          }
        ],
        [
          "path",
          {
            d: "M2 17a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 17",
            key: "kqbvx6"
          }
        ]
      ];
      var Layers = createLucideIcon("layers", __iconNode$bT);
      var __iconNode$bS = [
        ["rect", { width: "7", height: "9", x: "3", y: "3", rx: "1", key: "10lvy0" }],
        ["rect", { width: "7", height: "5", x: "14", y: "3", rx: "1", key: "16une8" }],
        ["rect", { width: "7", height: "9", x: "14", y: "12", rx: "1", key: "1hutg5" }],
        ["rect", { width: "7", height: "5", x: "3", y: "16", rx: "1", key: "ldoo1y" }]
      ];
      var LayoutDashboard2 = createLucideIcon("layout-dashboard", __iconNode$bS);
      var __iconNode$bR = [
        ["rect", { width: "7", height: "7", x: "3", y: "3", rx: "1", key: "1g98yp" }],
        ["rect", { width: "7", height: "7", x: "14", y: "3", rx: "1", key: "6d4xhi" }],
        ["rect", { width: "7", height: "7", x: "14", y: "14", rx: "1", key: "nxv5o0" }],
        ["rect", { width: "7", height: "7", x: "3", y: "14", rx: "1", key: "1bb6yr" }]
      ];
      var LayoutGrid = createLucideIcon("layout-grid", __iconNode$bR);
      var __iconNode$bQ = [
        ["rect", { width: "7", height: "7", x: "3", y: "3", rx: "1", key: "1g98yp" }],
        ["rect", { width: "7", height: "7", x: "3", y: "14", rx: "1", key: "1bb6yr" }],
        ["path", { d: "M14 4h7", key: "3xa0d5" }],
        ["path", { d: "M14 9h7", key: "1icrd9" }],
        ["path", { d: "M14 15h7", key: "1mj8o2" }],
        ["path", { d: "M14 20h7", key: "11slyb" }]
      ];
      var LayoutList = createLucideIcon("layout-list", __iconNode$bQ);
      var __iconNode$bP = [
        ["rect", { width: "7", height: "18", x: "3", y: "3", rx: "1", key: "2obqm" }],
        ["rect", { width: "7", height: "7", x: "14", y: "3", rx: "1", key: "6d4xhi" }],
        ["rect", { width: "7", height: "7", x: "14", y: "14", rx: "1", key: "nxv5o0" }]
      ];
      var LayoutPanelLeft = createLucideIcon("layout-panel-left", __iconNode$bP);
      var __iconNode$bO = [
        ["rect", { width: "18", height: "7", x: "3", y: "3", rx: "1", key: "f1a2em" }],
        ["rect", { width: "7", height: "7", x: "3", y: "14", rx: "1", key: "1bb6yr" }],
        ["rect", { width: "7", height: "7", x: "14", y: "14", rx: "1", key: "nxv5o0" }]
      ];
      var LayoutPanelTop = createLucideIcon("layout-panel-top", __iconNode$bO);
      var __iconNode$bN = [
        ["rect", { width: "18", height: "7", x: "3", y: "3", rx: "1", key: "f1a2em" }],
        ["rect", { width: "9", height: "7", x: "3", y: "14", rx: "1", key: "jqznyg" }],
        ["rect", { width: "5", height: "7", x: "16", y: "14", rx: "1", key: "q5h2i8" }]
      ];
      var LayoutTemplate = createLucideIcon("layout-template", __iconNode$bN);
      var __iconNode$bM = [
        [
          "path",
          {
            d: "M11 20A7 7 0 0 1 9.8 6.1C15.5 5 17 4.48 19 2c1 2 2 4.18 2 8 0 5.5-4.78 10-10 10Z",
            key: "nnexq3"
          }
        ],
        ["path", { d: "M2 21c0-3 1.85-5.36 5.08-6C9.5 14.52 12 13 13 12", key: "mt58a7" }]
      ];
      var Leaf = createLucideIcon("leaf", __iconNode$bM);
      var __iconNode$bL = [
        [
          "path",
          {
            d: "M2 22c1.25-.987 2.27-1.975 3.9-2.2a5.56 5.56 0 0 1 3.8 1.5 4 4 0 0 0 6.187-2.353 3.5 3.5 0 0 0 3.69-5.116A3.5 3.5 0 0 0 20.95 8 3.5 3.5 0 1 0 16 3.05a3.5 3.5 0 0 0-5.831 1.373 3.5 3.5 0 0 0-5.116 3.69 4 4 0 0 0-2.348 6.155C3.499 15.42 4.409 16.712 4.2 18.1 3.926 19.743 3.014 20.732 2 22",
            key: "1134nt"
          }
        ],
        ["path", { d: "M2 22 17 7", key: "1q7jp2" }]
      ];
      var LeafyGreen = createLucideIcon("leafy-green", __iconNode$bL);
      var __iconNode$bK = [
        [
          "path",
          {
            d: "M16 12h3a2 2 0 0 0 1.902-1.38l1.056-3.333A1 1 0 0 0 21 6H3a1 1 0 0 0-.958 1.287l1.056 3.334A2 2 0 0 0 5 12h3",
            key: "13jjxg"
          }
        ],
        ["path", { d: "M18 6V3a1 1 0 0 0-1-1h-3", key: "1550fe" }],
        ["rect", { width: "8", height: "12", x: "8", y: "10", rx: "1", key: "qmu8b6" }]
      ];
      var Lectern = createLucideIcon("lectern", __iconNode$bK);
      var __iconNode$bJ = [
        ["rect", { width: "8", height: "18", x: "3", y: "3", rx: "1", key: "oynpb5" }],
        ["path", { d: "M7 3v18", key: "bbkbws" }],
        [
          "path",
          {
            d: "M20.4 18.9c.2.5-.1 1.1-.6 1.3l-1.9.7c-.5.2-1.1-.1-1.3-.6L11.1 5.1c-.2-.5.1-1.1.6-1.3l1.9-.7c.5-.2 1.1.1 1.3.6Z",
            key: "1qboyk"
          }
        ]
      ];
      var LibraryBig4 = createLucideIcon("library-big", __iconNode$bJ);
      var __iconNode$bI = [
        ["path", { d: "M15 12h6", key: "upa0zy" }],
        ["path", { d: "M15 6h6", key: "1jlkvy" }],
        ["path", { d: "m3 13 3.553-7.724a.5.5 0 0 1 .894 0L11 13", key: "blevx4" }],
        ["path", { d: "M3 18h18", key: "1h113x" }],
        ["path", { d: "M3.92 11h6.16", key: "1bqo8m" }]
      ];
      var LetterText = createLucideIcon("letter-text", __iconNode$bI);
      var __iconNode$bH = [
        ["path", { d: "m16 6 4 14", key: "ji33uf" }],
        ["path", { d: "M12 6v14", key: "1n7gus" }],
        ["path", { d: "M8 8v12", key: "1gg7y9" }],
        ["path", { d: "M4 4v16", key: "6qkkli" }]
      ];
      var Library = createLucideIcon("library", __iconNode$bH);
      var __iconNode$bG = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "m4.93 4.93 4.24 4.24", key: "1ymg45" }],
        ["path", { d: "m14.83 9.17 4.24-4.24", key: "1cb5xl" }],
        ["path", { d: "m14.83 14.83 4.24 4.24", key: "q42g0n" }],
        ["path", { d: "m9.17 14.83-4.24 4.24", key: "bqpfvv" }],
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }]
      ];
      var LifeBuoy = createLucideIcon("life-buoy", __iconNode$bG);
      var __iconNode$bF = [
        ["path", { d: "M8 20V8c0-2.2 1.8-4 4-4 1.5 0 2.8.8 3.5 2", key: "1rtphz" }],
        ["path", { d: "M6 12h4", key: "a4o3ry" }],
        ["path", { d: "M14 12h2v8", key: "c1fccl" }],
        ["path", { d: "M6 20h4", key: "1i6q5t" }],
        ["path", { d: "M14 20h4", key: "lzx1xo" }]
      ];
      var Ligature = createLucideIcon("ligature", __iconNode$bF);
      var __iconNode$bE = [
        ["path", { d: "M16.8 11.2c.8-.9 1.2-2 1.2-3.2a6 6 0 0 0-9.3-5", key: "1fkcox" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M6.3 6.3a4.67 4.67 0 0 0 1.2 5.2c.7.7 1.3 1.5 1.5 2.5", key: "10m8kw" }],
        ["path", { d: "M9 18h6", key: "x1upvd" }],
        ["path", { d: "M10 22h4", key: "ceow96" }]
      ];
      var LightbulbOff = createLucideIcon("lightbulb-off", __iconNode$bE);
      var __iconNode$bD = [
        [
          "path",
          {
            d: "M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.7 1.3 1.5 1.5 2.5",
            key: "1gvzjb"
          }
        ],
        ["path", { d: "M9 18h6", key: "x1upvd" }],
        ["path", { d: "M10 22h4", key: "ceow96" }]
      ];
      var Lightbulb3 = createLucideIcon("lightbulb", __iconNode$bD);
      var __iconNode$bC = [
        ["path", { d: "M9 17H7A5 5 0 0 1 7 7", key: "10o201" }],
        ["path", { d: "M15 7h2a5 5 0 0 1 4 8", key: "1d3206" }],
        ["line", { x1: "8", x2: "12", y1: "12", y2: "12", key: "rvw6j4" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var Link2Off = createLucideIcon("link-2-off", __iconNode$bC);
      var __iconNode$bB = [
        ["path", { d: "M9 17H7A5 5 0 0 1 7 7h2", key: "8i5ue5" }],
        ["path", { d: "M15 7h2a5 5 0 1 1 0 10h-2", key: "1b9ql8" }],
        ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }]
      ];
      var Link22 = createLucideIcon("link-2", __iconNode$bB);
      var __iconNode$bA = [
        ["path", { d: "M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71", key: "1cjeqo" }],
        ["path", { d: "M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71", key: "19qd67" }]
      ];
      var Link3 = createLucideIcon("link", __iconNode$bA);
      var __iconNode$bz = [
        [
          "path",
          {
            d: "M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z",
            key: "c2jq9f"
          }
        ],
        ["rect", { width: "4", height: "12", x: "2", y: "9", key: "mk3on5" }],
        ["circle", { cx: "4", cy: "4", r: "2", key: "bt5ra8" }]
      ];
      var Linkedin2 = createLucideIcon("linkedin", __iconNode$bz);
      var __iconNode$by = [
        ["path", { d: "M11 18H3", key: "n3j2dh" }],
        ["path", { d: "m15 18 2 2 4-4", key: "1szwhi" }],
        ["path", { d: "M16 12H3", key: "1a2rj7" }],
        ["path", { d: "M16 6H3", key: "1wxfjs" }]
      ];
      var ListCheck = createLucideIcon("list-check", __iconNode$by);
      var __iconNode$bx = [
        ["path", { d: "m3 17 2 2 4-4", key: "1jhpwq" }],
        ["path", { d: "m3 7 2 2 4-4", key: "1obspn" }],
        ["path", { d: "M13 6h8", key: "15sg57" }],
        ["path", { d: "M13 12h8", key: "h98zly" }],
        ["path", { d: "M13 18h8", key: "oe0vm4" }]
      ];
      var ListChecks = createLucideIcon("list-checks", __iconNode$bx);
      var __iconNode$bw = [
        ["path", { d: "m3 10 2.5-2.5L3 5", key: "i6eama" }],
        ["path", { d: "m3 19 2.5-2.5L3 14", key: "w2gmor" }],
        ["path", { d: "M10 6h11", key: "c7qv1k" }],
        ["path", { d: "M10 12h11", key: "6m4ad9" }],
        ["path", { d: "M10 18h11", key: "11hvi2" }]
      ];
      var ListCollapse = createLucideIcon("list-collapse", __iconNode$bw);
      var __iconNode$bv = [
        ["path", { d: "M16 12H3", key: "1a2rj7" }],
        ["path", { d: "M16 6H3", key: "1wxfjs" }],
        ["path", { d: "M10 18H3", key: "13769t" }],
        ["path", { d: "M21 6v10a2 2 0 0 1-2 2h-5", key: "ilrcs8" }],
        ["path", { d: "m16 16-2 2 2 2", key: "kkc6pm" }]
      ];
      var ListEnd = createLucideIcon("list-end", __iconNode$bv);
      var __iconNode$bu = [
        ["path", { d: "M10 18h4", key: "1ulq68" }],
        ["path", { d: "M11 6H3", key: "1u26ik" }],
        ["path", { d: "M15 6h6", key: "1jlkvy" }],
        ["path", { d: "M18 9V3", key: "xwwp7m" }],
        ["path", { d: "M7 12h8", key: "7a1bxv" }]
      ];
      var ListFilterPlus = createLucideIcon("list-filter-plus", __iconNode$bu);
      var __iconNode$bt = [
        ["path", { d: "M3 6h18", key: "d0wm0j" }],
        ["path", { d: "M7 12h10", key: "b7w52i" }],
        ["path", { d: "M10 18h4", key: "1ulq68" }]
      ];
      var ListFilter = createLucideIcon("list-filter", __iconNode$bt);
      var __iconNode$bs = [
        ["path", { d: "M11 12H3", key: "51ecnj" }],
        ["path", { d: "M16 6H3", key: "1wxfjs" }],
        ["path", { d: "M16 18H3", key: "12xzn7" }],
        ["path", { d: "M21 12h-6", key: "bt1uis" }]
      ];
      var ListMinus = createLucideIcon("list-minus", __iconNode$bs);
      var __iconNode$br = [
        ["path", { d: "M21 15V6", key: "h1cx4g" }],
        ["path", { d: "M18.5 18a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z", key: "8saifv" }],
        ["path", { d: "M12 12H3", key: "18klou" }],
        ["path", { d: "M16 6H3", key: "1wxfjs" }],
        ["path", { d: "M12 18H3", key: "11ftsu" }]
      ];
      var ListMusic = createLucideIcon("list-music", __iconNode$br);
      var __iconNode$bq = [
        ["path", { d: "M10 12h11", key: "6m4ad9" }],
        ["path", { d: "M10 18h11", key: "11hvi2" }],
        ["path", { d: "M10 6h11", key: "c7qv1k" }],
        ["path", { d: "M4 10h2", key: "16xx2s" }],
        ["path", { d: "M4 6h1v4", key: "cnovpq" }],
        ["path", { d: "M6 18H4c0-1 2-2 2-3s-1-1.5-2-1", key: "m9a95d" }]
      ];
      var ListOrdered = createLucideIcon("list-ordered", __iconNode$bq);
      var __iconNode$bp = [
        ["path", { d: "M11 12H3", key: "51ecnj" }],
        ["path", { d: "M16 6H3", key: "1wxfjs" }],
        ["path", { d: "M16 18H3", key: "12xzn7" }],
        ["path", { d: "M18 9v6", key: "1twb98" }],
        ["path", { d: "M21 12h-6", key: "bt1uis" }]
      ];
      var ListPlus = createLucideIcon("list-plus", __iconNode$bp);
      var __iconNode$bo = [
        ["path", { d: "M21 6H3", key: "1jwq7v" }],
        ["path", { d: "M7 12H3", key: "13ou7f" }],
        ["path", { d: "M7 18H3", key: "1sijw9" }],
        [
          "path",
          {
            d: "M12 18a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L11 14",
            key: "qth677"
          }
        ],
        ["path", { d: "M11 10v4h4", key: "172dkj" }]
      ];
      var ListRestart = createLucideIcon("list-restart", __iconNode$bo);
      var __iconNode$bn = [
        ["path", { d: "M16 12H3", key: "1a2rj7" }],
        ["path", { d: "M16 18H3", key: "12xzn7" }],
        ["path", { d: "M10 6H3", key: "lf8lx7" }],
        ["path", { d: "M21 18V8a2 2 0 0 0-2-2h-5", key: "1hghli" }],
        ["path", { d: "m16 8-2-2 2-2", key: "160uvd" }]
      ];
      var ListStart = createLucideIcon("list-start", __iconNode$bn);
      var __iconNode$bm = [
        ["rect", { x: "3", y: "5", width: "6", height: "6", rx: "1", key: "1defrl" }],
        ["path", { d: "m3 17 2 2 4-4", key: "1jhpwq" }],
        ["path", { d: "M13 6h8", key: "15sg57" }],
        ["path", { d: "M13 12h8", key: "h98zly" }],
        ["path", { d: "M13 18h8", key: "oe0vm4" }]
      ];
      var ListTodo = createLucideIcon("list-todo", __iconNode$bm);
      var __iconNode$bl = [
        ["path", { d: "M21 12h-8", key: "1bmf0i" }],
        ["path", { d: "M21 6H8", key: "1pqkrb" }],
        ["path", { d: "M21 18h-8", key: "1tm79t" }],
        ["path", { d: "M3 6v4c0 1.1.9 2 2 2h3", key: "1ywdgy" }],
        ["path", { d: "M3 10v6c0 1.1.9 2 2 2h3", key: "2wc746" }]
      ];
      var ListTree = createLucideIcon("list-tree", __iconNode$bl);
      var __iconNode$bk = [
        ["path", { d: "M12 12H3", key: "18klou" }],
        ["path", { d: "M16 6H3", key: "1wxfjs" }],
        ["path", { d: "M12 18H3", key: "11ftsu" }],
        ["path", { d: "m16 12 5 3-5 3v-6Z", key: "zpskkp" }]
      ];
      var ListVideo = createLucideIcon("list-video", __iconNode$bk);
      var __iconNode$bj = [
        ["path", { d: "M11 12H3", key: "51ecnj" }],
        ["path", { d: "M16 6H3", key: "1wxfjs" }],
        ["path", { d: "M16 18H3", key: "12xzn7" }],
        ["path", { d: "m19 10-4 4", key: "1tz659" }],
        ["path", { d: "m15 10 4 4", key: "1n7nei" }]
      ];
      var ListX = createLucideIcon("list-x", __iconNode$bj);
      var __iconNode$bi = [
        ["path", { d: "M3 12h.01", key: "nlz23k" }],
        ["path", { d: "M3 18h.01", key: "1tta3j" }],
        ["path", { d: "M3 6h.01", key: "1rqtza" }],
        ["path", { d: "M8 12h13", key: "1za7za" }],
        ["path", { d: "M8 18h13", key: "1lx6n3" }],
        ["path", { d: "M8 6h13", key: "ik3vkj" }]
      ];
      var List2 = createLucideIcon("list", __iconNode$bi);
      var __iconNode$bh = [["path", { d: "M21 12a9 9 0 1 1-6.219-8.56", key: "13zald" }]];
      var LoaderCircle = createLucideIcon("loader-circle", __iconNode$bh);
      var __iconNode$bg = [
        ["path", { d: "M22 12a1 1 0 0 1-10 0 1 1 0 0 0-10 0", key: "1lzz15" }],
        ["path", { d: "M7 20.7a1 1 0 1 1 5-8.7 1 1 0 1 0 5-8.6", key: "1gnrpi" }],
        ["path", { d: "M7 3.3a1 1 0 1 1 5 8.6 1 1 0 1 0 5 8.6", key: "u9yy5q" }],
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
      ];
      var LoaderPinwheel = createLucideIcon("loader-pinwheel", __iconNode$bg);
      var __iconNode$bf = [
        ["path", { d: "M12 2v4", key: "3427ic" }],
        ["path", { d: "m16.2 7.8 2.9-2.9", key: "r700ao" }],
        ["path", { d: "M18 12h4", key: "wj9ykh" }],
        ["path", { d: "m16.2 16.2 2.9 2.9", key: "1bxg5t" }],
        ["path", { d: "M12 18v4", key: "jadmvz" }],
        ["path", { d: "m4.9 19.1 2.9-2.9", key: "bwix9q" }],
        ["path", { d: "M2 12h4", key: "j09sii" }],
        ["path", { d: "m4.9 4.9 2.9 2.9", key: "giyufr" }]
      ];
      var Loader3 = createLucideIcon("loader", __iconNode$bf);
      var __iconNode$be = [
        ["line", { x1: "2", x2: "5", y1: "12", y2: "12", key: "bvdh0s" }],
        ["line", { x1: "19", x2: "22", y1: "12", y2: "12", key: "1tbv5k" }],
        ["line", { x1: "12", x2: "12", y1: "2", y2: "5", key: "11lu5j" }],
        ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }],
        ["circle", { cx: "12", cy: "12", r: "7", key: "fim9np" }],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
      ];
      var LocateFixed = createLucideIcon("locate-fixed", __iconNode$be);
      var __iconNode$bd = [
        ["line", { x1: "2", x2: "5", y1: "12", y2: "12", key: "bvdh0s" }],
        ["line", { x1: "19", x2: "22", y1: "12", y2: "12", key: "1tbv5k" }],
        ["line", { x1: "12", x2: "12", y1: "2", y2: "5", key: "11lu5j" }],
        ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }],
        [
          "path",
          {
            d: "M7.11 7.11C5.83 8.39 5 10.1 5 12c0 3.87 3.13 7 7 7 1.9 0 3.61-.83 4.89-2.11",
            key: "1oh7ia"
          }
        ],
        [
          "path",
          {
            d: "M18.71 13.96c.19-.63.29-1.29.29-1.96 0-3.87-3.13-7-7-7-.67 0-1.33.1-1.96.29",
            key: "3qdecy"
          }
        ],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var LocateOff = createLucideIcon("locate-off", __iconNode$bd);
      var __iconNode$bc = [
        ["line", { x1: "2", x2: "5", y1: "12", y2: "12", key: "bvdh0s" }],
        ["line", { x1: "19", x2: "22", y1: "12", y2: "12", key: "1tbv5k" }],
        ["line", { x1: "12", x2: "12", y1: "2", y2: "5", key: "11lu5j" }],
        ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }],
        ["circle", { cx: "12", cy: "12", r: "7", key: "fim9np" }]
      ];
      var Locate = createLucideIcon("locate", __iconNode$bc);
      var __iconNode$bb = [
        ["path", { d: "M17.97 9.304A8 8 0 0 0 2 10c0 4.69 4.887 9.562 7.022 11.468", key: "1fahp3" }],
        [
          "path",
          {
            d: "M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
            key: "1817ys"
          }
        ],
        ["circle", { cx: "10", cy: "10", r: "3", key: "1ns7v1" }]
      ];
      var LocationEdit = createLucideIcon("location-edit", __iconNode$bb);
      var __iconNode$ba = [
        ["circle", { cx: "12", cy: "16", r: "1", key: "1au0dj" }],
        ["rect", { width: "18", height: "12", x: "3", y: "10", rx: "2", key: "l0tzu3" }],
        ["path", { d: "M7 10V7a5 5 0 0 1 9.33-2.5", key: "car5b7" }]
      ];
      var LockKeyholeOpen = createLucideIcon("lock-keyhole-open", __iconNode$ba);
      var __iconNode$b9 = [
        ["circle", { cx: "12", cy: "16", r: "1", key: "1au0dj" }],
        ["rect", { x: "3", y: "10", width: "18", height: "12", rx: "2", key: "6s8ecr" }],
        ["path", { d: "M7 10V7a5 5 0 0 1 10 0v3", key: "1pqi11" }]
      ];
      var LockKeyhole = createLucideIcon("lock-keyhole", __iconNode$b9);
      var __iconNode$b8 = [
        ["rect", { width: "18", height: "11", x: "3", y: "11", rx: "2", ry: "2", key: "1w4ew1" }],
        ["path", { d: "M7 11V7a5 5 0 0 1 9.9-1", key: "1mm8w8" }]
      ];
      var LockOpen = createLucideIcon("lock-open", __iconNode$b8);
      var __iconNode$b7 = [
        ["rect", { width: "18", height: "11", x: "3", y: "11", rx: "2", ry: "2", key: "1w4ew1" }],
        ["path", { d: "M7 11V7a5 5 0 0 1 10 0v4", key: "fwvmzm" }]
      ];
      var Lock = createLucideIcon("lock", __iconNode$b7);
      var __iconNode$b6 = [
        ["path", { d: "M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4", key: "u53s6r" }],
        ["polyline", { points: "10 17 15 12 10 7", key: "1ail0h" }],
        ["line", { x1: "15", x2: "3", y1: "12", y2: "12", key: "v6grx8" }]
      ];
      var LogIn = createLucideIcon("log-in", __iconNode$b6);
      var __iconNode$b5 = [
        ["path", { d: "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4", key: "1uf3rs" }],
        ["polyline", { points: "16 17 21 12 16 7", key: "1gabdz" }],
        ["line", { x1: "21", x2: "9", y1: "12", y2: "12", key: "1uyos4" }]
      ];
      var LogOut3 = createLucideIcon("log-out", __iconNode$b5);
      var __iconNode$b4 = [
        ["path", { d: "M13 12h8", key: "h98zly" }],
        ["path", { d: "M13 18h8", key: "oe0vm4" }],
        ["path", { d: "M13 6h8", key: "15sg57" }],
        ["path", { d: "M3 12h1", key: "lp3yf2" }],
        ["path", { d: "M3 18h1", key: "1eiwyy" }],
        ["path", { d: "M3 6h1", key: "rgxa97" }],
        ["path", { d: "M8 12h1", key: "1con00" }],
        ["path", { d: "M8 18h1", key: "13wk12" }],
        ["path", { d: "M8 6h1", key: "tn6mkg" }]
      ];
      var Logs = createLucideIcon("logs", __iconNode$b4);
      var __iconNode$b3 = [
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
        ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }],
        ["path", { d: "M11 11a2 2 0 0 0 4 0 4 4 0 0 0-8 0 6 6 0 0 0 12 0", key: "107gwy" }]
      ];
      var Lollipop = createLucideIcon("lollipop", __iconNode$b3);
      var __iconNode$b2 = [
        [
          "path",
          { d: "M6 20a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2", key: "1m57jg" }
        ],
        ["path", { d: "M8 18V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v14", key: "1l99gc" }],
        ["path", { d: "M10 20h4", key: "ni2waw" }],
        ["circle", { cx: "16", cy: "20", r: "2", key: "1vifvg" }],
        ["circle", { cx: "8", cy: "20", r: "2", key: "ckkr5m" }]
      ];
      var Luggage = createLucideIcon("luggage", __iconNode$b2);
      var __iconNode$b1 = [
        [
          "path",
          {
            d: "m6 15-4-4 6.75-6.77a7.79 7.79 0 0 1 11 11L13 22l-4-4 6.39-6.36a2.14 2.14 0 0 0-3-3L6 15",
            key: "1i3lhw"
          }
        ],
        ["path", { d: "m5 8 4 4", key: "j6kj7e" }],
        ["path", { d: "m12 15 4 4", key: "lnac28" }]
      ];
      var Magnet = createLucideIcon("magnet", __iconNode$b1);
      var __iconNode$b0 = [
        ["path", { d: "M22 15V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8", key: "fuxbkv" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
        ["path", { d: "M16 19h6", key: "xwg31i" }]
      ];
      var MailMinus = createLucideIcon("mail-minus", __iconNode$b0);
      var __iconNode$a$ = [
        ["path", { d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8", key: "12jkf8" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
        ["path", { d: "m16 19 2 2 4-4", key: "1b14m6" }]
      ];
      var MailCheck = createLucideIcon("mail-check", __iconNode$a$);
      var __iconNode$a_ = [
        [
          "path",
          {
            d: "M21.2 8.4c.5.38.8.97.8 1.6v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V10a2 2 0 0 1 .8-1.6l8-6a2 2 0 0 1 2.4 0l8 6Z",
            key: "1jhwl8"
          }
        ],
        ["path", { d: "m22 10-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 10", key: "1qfld7" }]
      ];
      var MailOpen = createLucideIcon("mail-open", __iconNode$a_);
      var __iconNode$aZ = [
        ["path", { d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8", key: "12jkf8" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
        ["path", { d: "M19 16v6", key: "tddt3s" }],
        ["path", { d: "M16 19h6", key: "xwg31i" }]
      ];
      var MailPlus = createLucideIcon("mail-plus", __iconNode$aZ);
      var __iconNode$aY = [
        ["path", { d: "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5", key: "e61zoh" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
        [
          "path",
          {
            d: "M18 15.28c.2-.4.5-.8.9-1a2.1 2.1 0 0 1 2.6.4c.3.4.5.8.5 1.3 0 1.3-2 2-2 2",
            key: "7z9rxb"
          }
        ],
        ["path", { d: "M20 22v.01", key: "12bgn6" }]
      ];
      var MailQuestion = createLucideIcon("mail-question", __iconNode$aY);
      var __iconNode$aX = [
        ["path", { d: "M22 12.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h7.5", key: "w80f2v" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
        ["path", { d: "M18 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z", key: "8lzu5m" }],
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
        ["path", { d: "m22 22-1.5-1.5", key: "1x83k4" }]
      ];
      var MailSearch = createLucideIcon("mail-search", __iconNode$aX);
      var __iconNode$aW = [
        ["path", { d: "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5", key: "e61zoh" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
        ["path", { d: "M20 14v4", key: "1hm744" }],
        ["path", { d: "M20 22v.01", key: "12bgn6" }]
      ];
      var MailWarning = createLucideIcon("mail-warning", __iconNode$aW);
      var __iconNode$aV = [
        ["path", { d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h9", key: "1j9vog" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
        ["path", { d: "m17 17 4 4", key: "1b3523" }],
        ["path", { d: "m21 17-4 4", key: "uinynz" }]
      ];
      var MailX = createLucideIcon("mail-x", __iconNode$aV);
      var __iconNode$aU = [
        ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
        ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }]
      ];
      var Mail4 = createLucideIcon("mail", __iconNode$aU);
      var __iconNode$aT = [
        [
          "path",
          {
            d: "M22 17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9.5C2 7 4 5 6.5 5H18c2.2 0 4 1.8 4 4v8Z",
            key: "1lbycx"
          }
        ],
        ["polyline", { points: "15,9 18,9 18,11", key: "1pm9c0" }],
        ["path", { d: "M6.5 5C9 5 11 7 11 9.5V17a2 2 0 0 1-2 2", key: "15i455" }],
        ["line", { x1: "6", x2: "7", y1: "10", y2: "10", key: "1e2scm" }]
      ];
      var Mailbox = createLucideIcon("mailbox", __iconNode$aT);
      var __iconNode$aS = [
        ["rect", { width: "16", height: "13", x: "6", y: "4", rx: "2", key: "1drq3f" }],
        ["path", { d: "m22 7-7.1 3.78c-.57.3-1.23.3-1.8 0L6 7", key: "xn252p" }],
        ["path", { d: "M2 8v11c0 1.1.9 2 2 2h14", key: "n13cji" }]
      ];
      var Mails = createLucideIcon("mails", __iconNode$aS);
      var __iconNode$aR = [
        [
          "path",
          {
            d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0",
            key: "1r0f0z"
          }
        ],
        ["path", { d: "m9 10 2 2 4-4", key: "1gnqz4" }]
      ];
      var MapPinCheckInside = createLucideIcon("map-pin-check-inside", __iconNode$aR);
      var __iconNode$aQ = [
        [
          "path",
          {
            d: "M19.43 12.935c.357-.967.57-1.955.57-2.935a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32.197 32.197 0 0 0 .813-.728",
            key: "1dq61d"
          }
        ],
        ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
        ["path", { d: "m16 18 2 2 4-4", key: "1mkfmb" }]
      ];
      var MapPinCheck = createLucideIcon("map-pin-check", __iconNode$aQ);
      var __iconNode$aP = [
        [
          "path",
          {
            d: "M15 22a1 1 0 0 1-1-1v-4a1 1 0 0 1 .445-.832l3-2a1 1 0 0 1 1.11 0l3 2A1 1 0 0 1 22 17v4a1 1 0 0 1-1 1z",
            key: "1p1rcz"
          }
        ],
        [
          "path",
          {
            d: "M18 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 .601.2",
            key: "mcbcs9"
          }
        ],
        ["path", { d: "M18 22v-3", key: "1t1ugv" }],
        ["circle", { cx: "10", cy: "10", r: "3", key: "1ns7v1" }]
      ];
      var MapPinHouse = createLucideIcon("map-pin-house", __iconNode$aP);
      var __iconNode$aO = [
        [
          "path",
          {
            d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0",
            key: "1r0f0z"
          }
        ],
        ["path", { d: "M9 10h6", key: "9gxzsh" }]
      ];
      var MapPinMinusInside = createLucideIcon("map-pin-minus-inside", __iconNode$aO);
      var __iconNode$aN = [
        [
          "path",
          {
            d: "M18.977 14C19.6 12.701 20 11.343 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32 32 0 0 0 .824-.738",
            key: "11uxia"
          }
        ],
        ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
        ["path", { d: "M16 18h6", key: "987eiv" }]
      ];
      var MapPinMinus = createLucideIcon("map-pin-minus", __iconNode$aN);
      var __iconNode$aM = [
        ["path", { d: "M12.75 7.09a3 3 0 0 1 2.16 2.16", key: "1d4wjd" }],
        [
          "path",
          {
            d: "M17.072 17.072c-1.634 2.17-3.527 3.912-4.471 4.727a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 1.432-4.568",
            key: "12yil7"
          }
        ],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M8.475 2.818A8 8 0 0 1 20 10c0 1.183-.31 2.377-.81 3.533", key: "lhrkcz" }],
        ["path", { d: "M9.13 9.13a3 3 0 0 0 3.74 3.74", key: "13wojd" }]
      ];
      var MapPinOff = createLucideIcon("map-pin-off", __iconNode$aM);
      var __iconNode$aL = [
        [
          "path",
          {
            d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0",
            key: "1r0f0z"
          }
        ],
        ["path", { d: "M12 7v6", key: "lw1j43" }],
        ["path", { d: "M9 10h6", key: "9gxzsh" }]
      ];
      var MapPinPlusInside = createLucideIcon("map-pin-plus-inside", __iconNode$aL);
      var __iconNode$aK = [
        [
          "path",
          {
            d: "M19.914 11.105A7.298 7.298 0 0 0 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32 32 0 0 0 .824-.738",
            key: "fcdtly"
          }
        ],
        ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
        ["path", { d: "M16 18h6", key: "987eiv" }],
        ["path", { d: "M19 15v6", key: "10aioa" }]
      ];
      var MapPinPlus = createLucideIcon("map-pin-plus", __iconNode$aK);
      var __iconNode$aJ = [
        [
          "path",
          {
            d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0",
            key: "1r0f0z"
          }
        ],
        ["path", { d: "m14.5 7.5-5 5", key: "3lb6iw" }],
        ["path", { d: "m9.5 7.5 5 5", key: "ko136h" }]
      ];
      var MapPinXInside = createLucideIcon("map-pin-x-inside", __iconNode$aJ);
      var __iconNode$aI = [
        [
          "path",
          {
            d: "M19.752 11.901A7.78 7.78 0 0 0 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 19 19 0 0 0 .09-.077",
            key: "y0ewhp"
          }
        ],
        ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
        ["path", { d: "m21.5 15.5-5 5", key: "11iqnx" }],
        ["path", { d: "m21.5 20.5-5-5", key: "1bylgx" }]
      ];
      var MapPinX = createLucideIcon("map-pin-x", __iconNode$aI);
      var __iconNode$aH = [
        [
          "path",
          {
            d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0",
            key: "1r0f0z"
          }
        ],
        ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }]
      ];
      var MapPin2 = createLucideIcon("map-pin", __iconNode$aH);
      var __iconNode$aG = [
        [
          "path",
          {
            d: "M18 8c0 3.613-3.869 7.429-5.393 8.795a1 1 0 0 1-1.214 0C9.87 15.429 6 11.613 6 8a6 6 0 0 1 12 0",
            key: "11u0oz"
          }
        ],
        ["circle", { cx: "12", cy: "8", r: "2", key: "1822b1" }],
        [
          "path",
          {
            d: "M8.714 14h-3.71a1 1 0 0 0-.948.683l-2.004 6A1 1 0 0 0 3 22h18a1 1 0 0 0 .948-1.316l-2-6a1 1 0 0 0-.949-.684h-3.712",
            key: "q8zwxj"
          }
        ]
      ];
      var MapPinned = createLucideIcon("map-pinned", __iconNode$aG);
      var __iconNode$aF = [
        [
          "path",
          {
            d: "m11 19-1.106-.552a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0l4.212 2.106a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619V12",
            key: "svfegj"
          }
        ],
        ["path", { d: "M15 5.764V12", key: "1ocw4k" }],
        ["path", { d: "M18 15v6", key: "9wciyi" }],
        ["path", { d: "M21 18h-6", key: "139f0c" }],
        ["path", { d: "M9 3.236v15", key: "1uimfh" }]
      ];
      var MapPlus = createLucideIcon("map-plus", __iconNode$aF);
      var __iconNode$aE = [
        [
          "path",
          {
            d: "M14.106 5.553a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619v12.764a1 1 0 0 1-.553.894l-4.553 2.277a2 2 0 0 1-1.788 0l-4.212-2.106a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0z",
            key: "169xi5"
          }
        ],
        ["path", { d: "M15 5.764v15", key: "1pn4in" }],
        ["path", { d: "M9 3.236v15", key: "1uimfh" }]
      ];
      var Map2 = createLucideIcon("map", __iconNode$aE);
      var __iconNode$aD = [
        ["path", { d: "m14 6 4 4", key: "1q72g9" }],
        ["path", { d: "M17 3h4v4", key: "19p9u1" }],
        ["path", { d: "m21 3-7.75 7.75", key: "1cjbfd" }],
        ["circle", { cx: "9", cy: "15", r: "6", key: "bx5svt" }]
      ];
      var MarsStroke = createLucideIcon("mars-stroke", __iconNode$aD);
      var __iconNode$aC = [
        ["path", { d: "M16 3h5v5", key: "1806ms" }],
        ["path", { d: "m21 3-6.75 6.75", key: "pv0uzu" }],
        ["circle", { cx: "10", cy: "14", r: "6", key: "1qwbdc" }]
      ];
      var Mars = createLucideIcon("mars", __iconNode$aC);
      var __iconNode$aB = [
        ["path", { d: "M8 22h8", key: "rmew8v" }],
        ["path", { d: "M12 11v11", key: "ur9y6a" }],
        ["path", { d: "m19 3-7 8-7-8Z", key: "1sgpiw" }]
      ];
      var Martini = createLucideIcon("martini", __iconNode$aB);
      var __iconNode$aA = [
        ["polyline", { points: "15 3 21 3 21 9", key: "mznyad" }],
        ["polyline", { points: "9 21 3 21 3 15", key: "1avn1i" }],
        ["line", { x1: "21", x2: "14", y1: "3", y2: "10", key: "ota7mn" }],
        ["line", { x1: "3", x2: "10", y1: "21", y2: "14", key: "1atl0r" }]
      ];
      var Maximize2 = createLucideIcon("maximize-2", __iconNode$aA);
      var __iconNode$az = [
        ["path", { d: "M8 3H5a2 2 0 0 0-2 2v3", key: "1dcmit" }],
        ["path", { d: "M21 8V5a2 2 0 0 0-2-2h-3", key: "1e4gt3" }],
        ["path", { d: "M3 16v3a2 2 0 0 0 2 2h3", key: "wsl5sc" }],
        ["path", { d: "M16 21h3a2 2 0 0 0 2-2v-3", key: "18trek" }]
      ];
      var Maximize = createLucideIcon("maximize", __iconNode$az);
      var __iconNode$ay = [
        [
          "path",
          {
            d: "M7.21 15 2.66 7.14a2 2 0 0 1 .13-2.2L4.4 2.8A2 2 0 0 1 6 2h12a2 2 0 0 1 1.6.8l1.6 2.14a2 2 0 0 1 .14 2.2L16.79 15",
            key: "143lza"
          }
        ],
        ["path", { d: "M11 12 5.12 2.2", key: "qhuxz6" }],
        ["path", { d: "m13 12 5.88-9.8", key: "hbye0f" }],
        ["path", { d: "M8 7h8", key: "i86dvs" }],
        ["circle", { cx: "12", cy: "17", r: "5", key: "qbz8iq" }],
        ["path", { d: "M12 18v-2h-.5", key: "fawc4q" }]
      ];
      var Medal = createLucideIcon("medal", __iconNode$ay);
      var __iconNode$ax = [
        ["path", { d: "m3 11 18-5v12L3 14v-3z", key: "n962bs" }],
        ["path", { d: "M11.6 16.8a3 3 0 1 1-5.8-1.6", key: "1yl0tm" }]
      ];
      var Megaphone = createLucideIcon("megaphone", __iconNode$ax);
      var __iconNode$aw = [
        ["path", { d: "M9.26 9.26 3 11v3l14.14 3.14", key: "3429n" }],
        ["path", { d: "M21 15.34V6l-7.31 2.03", key: "4o1dh8" }],
        ["path", { d: "M11.6 16.8a3 3 0 1 1-5.8-1.6", key: "1yl0tm" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var MegaphoneOff = createLucideIcon("megaphone-off", __iconNode$aw);
      var __iconNode$av = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["line", { x1: "8", x2: "16", y1: "15", y2: "15", key: "1xb1d9" }],
        ["line", { x1: "9", x2: "9.01", y1: "9", y2: "9", key: "yxxnd0" }],
        ["line", { x1: "15", x2: "15.01", y1: "9", y2: "9", key: "1p4y9e" }]
      ];
      var Meh = createLucideIcon("meh", __iconNode$av);
      var __iconNode$au = [
        ["path", { d: "M6 19v-3", key: "1nvgqn" }],
        ["path", { d: "M10 19v-3", key: "iu8nkm" }],
        ["path", { d: "M14 19v-3", key: "kcehxu" }],
        ["path", { d: "M18 19v-3", key: "1vh91z" }],
        ["path", { d: "M8 11V9", key: "63erz4" }],
        ["path", { d: "M16 11V9", key: "fru6f3" }],
        ["path", { d: "M12 11V9", key: "ha00sb" }],
        ["path", { d: "M2 15h20", key: "16ne18" }],
        [
          "path",
          {
            d: "M2 7a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v1.1a2 2 0 0 0 0 3.837V17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-5.1a2 2 0 0 0 0-3.837Z",
            key: "lhddv3"
          }
        ]
      ];
      var MemoryStick = createLucideIcon("memory-stick", __iconNode$au);
      var __iconNode$at = [
        ["line", { x1: "4", x2: "20", y1: "12", y2: "12", key: "1e0a9i" }],
        ["line", { x1: "4", x2: "20", y1: "6", y2: "6", key: "1owob3" }],
        ["line", { x1: "4", x2: "20", y1: "18", y2: "18", key: "yk5zj1" }]
      ];
      var Menu2 = createLucideIcon("menu", __iconNode$at);
      var __iconNode$as = [
        ["path", { d: "m8 6 4-4 4 4", key: "ybng9g" }],
        ["path", { d: "M12 2v10.3a4 4 0 0 1-1.172 2.872L4 22", key: "1hyw0i" }],
        ["path", { d: "m20 22-5-5", key: "1m27yz" }]
      ];
      var Merge = createLucideIcon("merge", __iconNode$as);
      var __iconNode$ar = [
        ["path", { d: "M10 9.5 8 12l2 2.5", key: "3mjy60" }],
        ["path", { d: "m14 9.5 2 2.5-2 2.5", key: "1bir2l" }],
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22z", key: "k85zhp" }]
      ];
      var MessageCircleCode = createLucideIcon("message-circle-code", __iconNode$ar);
      var __iconNode$aq = [
        ["path", { d: "M13.5 3.1c-.5 0-1-.1-1.5-.1s-1 .1-1.5.1", key: "16ll65" }],
        ["path", { d: "M19.3 6.8a10.45 10.45 0 0 0-2.1-2.1", key: "1nq77a" }],
        ["path", { d: "M20.9 13.5c.1-.5.1-1 .1-1.5s-.1-1-.1-1.5", key: "1sf7wn" }],
        ["path", { d: "M17.2 19.3a10.45 10.45 0 0 0 2.1-2.1", key: "x1hs5g" }],
        ["path", { d: "M10.5 20.9c.5.1 1 .1 1.5.1s1-.1 1.5-.1", key: "19m18z" }],
        ["path", { d: "M3.5 17.5 2 22l4.5-1.5", key: "1f36qi" }],
        ["path", { d: "M3.1 10.5c0 .5-.1 1-.1 1.5s.1 1 .1 1.5", key: "1vz3ju" }],
        ["path", { d: "M6.8 4.7a10.45 10.45 0 0 0-2.1 2.1", key: "19f9do" }]
      ];
      var MessageCircleDashed = createLucideIcon("message-circle-dashed", __iconNode$aq);
      var __iconNode$ap = [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
        [
          "path",
          {
            d: "M15.8 9.2a2.5 2.5 0 0 0-3.5 0l-.3.4-.35-.3a2.42 2.42 0 1 0-3.2 3.6l3.6 3.5 3.6-3.5c1.2-1.2 1.1-2.7.2-3.7",
            key: "43lnbm"
          }
        ]
      ];
      var MessageCircleHeart = createLucideIcon("message-circle-heart", __iconNode$ap);
      var __iconNode$ao = [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
        ["path", { d: "M8 12h.01", key: "czm47f" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }],
        ["path", { d: "M16 12h.01", key: "1l6xoz" }]
      ];
      var MessageCircleMore = createLucideIcon("message-circle-more", __iconNode$ao);
      var __iconNode$an = [
        ["path", { d: "M20.5 14.9A9 9 0 0 0 9.1 3.5", key: "1iebmn" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M5.6 5.6C3 8.3 2.2 12.5 4 16l-2 6 6-2c3.4 1.8 7.6 1.1 10.3-1.7", key: "1ov8ce" }]
      ];
      var MessageCircleOff = createLucideIcon("message-circle-off", __iconNode$an);
      var __iconNode$am = [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "M12 8v8", key: "napkw2" }]
      ];
      var MessageCirclePlus = createLucideIcon("message-circle-plus", __iconNode$am);
      var __iconNode$al = [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
        ["path", { d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3", key: "1u773s" }],
        ["path", { d: "M12 17h.01", key: "p32p05" }]
      ];
      var MessageCircleQuestion = createLucideIcon("message-circle-question", __iconNode$al);
      var __iconNode$ak = [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
        ["path", { d: "m10 15-3-3 3-3", key: "1pgupc" }],
        ["path", { d: "M7 12h7a2 2 0 0 1 2 2v1", key: "1gheu4" }]
      ];
      var MessageCircleReply = createLucideIcon("message-circle-reply", __iconNode$ak);
      var __iconNode$aj = [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
        ["path", { d: "M12 8v4", key: "1got3b" }],
        ["path", { d: "M12 16h.01", key: "1drbdi" }]
      ];
      var MessageCircleWarning = createLucideIcon("message-circle-warning", __iconNode$aj);
      var __iconNode$ai = [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        ["path", { d: "m9 9 6 6", key: "z0biqf" }]
      ];
      var MessageCircleX = createLucideIcon("message-circle-x", __iconNode$ai);
      var __iconNode$ah = [
        ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }]
      ];
      var MessageCircle2 = createLucideIcon("message-circle", __iconNode$ah);
      var __iconNode$ag = [
        ["path", { d: "M10 7.5 8 10l2 2.5", key: "xb17xw" }],
        ["path", { d: "m14 7.5 2 2.5-2 2.5", key: "5rap1v" }],
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }]
      ];
      var MessageSquareCode = createLucideIcon("message-square-code", __iconNode$ag);
      var __iconNode$af = [
        ["path", { d: "M10 17H7l-4 4v-7", key: "1r71xu" }],
        ["path", { d: "M14 17h1", key: "nufu4t" }],
        ["path", { d: "M14 3h1", key: "1ec4yj" }],
        ["path", { d: "M19 3a2 2 0 0 1 2 2", key: "18rm91" }],
        ["path", { d: "M21 14v1a2 2 0 0 1-2 2", key: "29akq3" }],
        ["path", { d: "M21 9v1", key: "mxsmne" }],
        ["path", { d: "M3 9v1", key: "1r0deq" }],
        ["path", { d: "M5 3a2 2 0 0 0-2 2", key: "y57alp" }],
        ["path", { d: "M9 3h1", key: "1yesri" }]
      ];
      var MessageSquareDashed = createLucideIcon("message-square-dashed", __iconNode$af);
      var __iconNode$ae = [
        ["path", { d: "m5 19-2 2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2", key: "1xuzuj" }],
        ["path", { d: "M9 10h6", key: "9gxzsh" }],
        ["path", { d: "M12 7v6", key: "lw1j43" }],
        ["path", { d: "M9 17h6", key: "r8uit2" }]
      ];
      var MessageSquareDiff = createLucideIcon("message-square-diff", __iconNode$ae);
      var __iconNode$ad = [
        ["path", { d: "M11.7 3H5a2 2 0 0 0-2 2v16l4-4h12a2 2 0 0 0 2-2v-2.7", key: "uodpkb" }],
        ["circle", { cx: "18", cy: "6", r: "3", key: "1h7g24" }]
      ];
      var MessageSquareDot = createLucideIcon("message-square-dot", __iconNode$ad);
      var __iconNode$ac = [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        [
          "path",
          {
            d: "M14.8 7.5a1.84 1.84 0 0 0-2.6 0l-.2.3-.3-.3a1.84 1.84 0 1 0-2.4 2.8L12 13l2.7-2.7c.9-.9.8-2.1.1-2.8",
            key: "1blaws"
          }
        ]
      ];
      var MessageSquareHeart = createLucideIcon("message-square-heart", __iconNode$ac);
      var __iconNode$ab = [
        ["path", { d: "M19 15v-2a2 2 0 1 0-4 0v2", key: "h3d1vz" }],
        ["path", { d: "M9 17H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v3.5", key: "xsnnhn" }],
        ["rect", { x: "13", y: "15", width: "8", height: "5", rx: "1", key: "1ccwuk" }]
      ];
      var MessageSquareLock = createLucideIcon("message-square-lock", __iconNode$ab);
      var __iconNode$aa = [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        ["path", { d: "M8 10h.01", key: "19clt8" }],
        ["path", { d: "M12 10h.01", key: "1nrarc" }],
        ["path", { d: "M16 10h.01", key: "1m94wz" }]
      ];
      var MessageSquareMore = createLucideIcon("message-square-more", __iconNode$aa);
      var __iconNode$a9 = [
        ["path", { d: "M21 15V5a2 2 0 0 0-2-2H9", key: "43el77" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M3.6 3.6c-.4.3-.6.8-.6 1.4v16l4-4h10", key: "pwpm4a" }]
      ];
      var MessageSquareOff = createLucideIcon("message-square-off", __iconNode$a9);
      var __iconNode$a8 = [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        ["path", { d: "M12 7v6", key: "lw1j43" }],
        ["path", { d: "M9 10h6", key: "9gxzsh" }]
      ];
      var MessageSquarePlus = createLucideIcon("message-square-plus", __iconNode$a8);
      var __iconNode$a7 = [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        ["path", { d: "M8 12a2 2 0 0 0 2-2V8H8", key: "1jfesj" }],
        ["path", { d: "M14 12a2 2 0 0 0 2-2V8h-2", key: "1dq9mh" }]
      ];
      var MessageSquareQuote = createLucideIcon("message-square-quote", __iconNode$a7);
      var __iconNode$a6 = [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        ["path", { d: "m10 7-3 3 3 3", key: "1eugdv" }],
        ["path", { d: "M17 13v-1a2 2 0 0 0-2-2H7", key: "ernfh3" }]
      ];
      var MessageSquareReply = createLucideIcon("message-square-reply", __iconNode$a6);
      var __iconNode$a5 = [
        ["path", { d: "M21 12v3a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h7", key: "tqtdkg" }],
        ["path", { d: "M16 3h5v5", key: "1806ms" }],
        ["path", { d: "m16 8 5-5", key: "15mbrl" }]
      ];
      var MessageSquareShare = createLucideIcon("message-square-share", __iconNode$a5);
      var __iconNode$a4 = [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        ["path", { d: "M13 8H7", key: "14i4kc" }],
        ["path", { d: "M17 12H7", key: "16if0g" }]
      ];
      var MessageSquareText = createLucideIcon("message-square-text", __iconNode$a4);
      var __iconNode$a3 = [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        ["path", { d: "M12 7v2", key: "stiyo7" }],
        ["path", { d: "M12 13h.01", key: "y0uutt" }]
      ];
      var MessageSquareWarning = createLucideIcon("message-square-warning", __iconNode$a3);
      var __iconNode$a2 = [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
        ["path", { d: "m14.5 7.5-5 5", key: "3lb6iw" }],
        ["path", { d: "m9.5 7.5 5 5", key: "ko136h" }]
      ];
      var MessageSquareX = createLucideIcon("message-square-x", __iconNode$a2);
      var __iconNode$a1 = [
        ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }]
      ];
      var MessageSquare = createLucideIcon("message-square", __iconNode$a1);
      var __iconNode$a0 = [
        ["path", { d: "M14 9a2 2 0 0 1-2 2H6l-4 4V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2z", key: "p1xzt8" }],
        ["path", { d: "M18 9h2a2 2 0 0 1 2 2v11l-4-4h-6a2 2 0 0 1-2-2v-1", key: "1cx29u" }]
      ];
      var MessagesSquare = createLucideIcon("messages-square", __iconNode$a0);
      var __iconNode$9$ = [
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }],
        ["path", { d: "M18.89 13.23A7.12 7.12 0 0 0 19 12v-2", key: "80xlxr" }],
        ["path", { d: "M5 10v2a7 7 0 0 0 12 5", key: "p2k8kg" }],
        ["path", { d: "M15 9.34V5a3 3 0 0 0-5.68-1.33", key: "1gzdoj" }],
        ["path", { d: "M9 9v3a3 3 0 0 0 5.12 2.12", key: "r2i35w" }],
        ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }]
      ];
      var MicOff = createLucideIcon("mic-off", __iconNode$9$);
      var __iconNode$9_ = [
        [
          "path",
          {
            d: "m11 7.601-5.994 8.19a1 1 0 0 0 .1 1.298l.817.818a1 1 0 0 0 1.314.087L15.09 12",
            key: "80a601"
          }
        ],
        [
          "path",
          {
            d: "M16.5 21.174C15.5 20.5 14.372 20 13 20c-2.058 0-3.928 2.356-6 2-2.072-.356-2.775-3.369-1.5-4.5",
            key: "j0ngtp"
          }
        ],
        ["circle", { cx: "16", cy: "7", r: "5", key: "d08jfb" }]
      ];
      var MicVocal = createLucideIcon("mic-vocal", __iconNode$9_);
      var __iconNode$9Z = [
        ["path", { d: "M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z", key: "131961" }],
        ["path", { d: "M19 10v2a7 7 0 0 1-14 0v-2", key: "1vc78b" }],
        ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }]
      ];
      var Mic = createLucideIcon("mic", __iconNode$9Z);
      var __iconNode$9Y = [
        ["path", { d: "M18 12h2", key: "quuxs7" }],
        ["path", { d: "M18 16h2", key: "zsn3lv" }],
        ["path", { d: "M18 20h2", key: "9x5y9y" }],
        ["path", { d: "M18 4h2", key: "1luxfb" }],
        ["path", { d: "M18 8h2", key: "nxqzg" }],
        ["path", { d: "M4 12h2", key: "1ltxp0" }],
        ["path", { d: "M4 16h2", key: "8a5zha" }],
        ["path", { d: "M4 20h2", key: "27dk57" }],
        ["path", { d: "M4 4h2", key: "10groj" }],
        ["path", { d: "M4 8h2", key: "18vq6w" }],
        [
          "path",
          {
            d: "M8 2a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-1.5c-.276 0-.494.227-.562.495a2 2 0 0 1-3.876 0C9.994 2.227 9.776 2 9.5 2z",
            key: "1681fp"
          }
        ]
      ];
      var Microchip = createLucideIcon("microchip", __iconNode$9Y);
      var __iconNode$9X = [
        ["path", { d: "M6 18h8", key: "1borvv" }],
        ["path", { d: "M3 22h18", key: "8prr45" }],
        ["path", { d: "M14 22a7 7 0 1 0 0-14h-1", key: "1jwaiy" }],
        ["path", { d: "M9 14h2", key: "197e7h" }],
        ["path", { d: "M9 12a2 2 0 0 1-2-2V6h6v4a2 2 0 0 1-2 2Z", key: "1bmzmy" }],
        ["path", { d: "M12 6V3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3", key: "1drr47" }]
      ];
      var Microscope = createLucideIcon("microscope", __iconNode$9X);
      var __iconNode$9W = [
        ["rect", { width: "20", height: "15", x: "2", y: "4", rx: "2", key: "2no95f" }],
        ["rect", { width: "8", height: "7", x: "6", y: "8", rx: "1", key: "zh9wx" }],
        ["path", { d: "M18 8v7", key: "o5zi4n" }],
        ["path", { d: "M6 19v2", key: "1loha6" }],
        ["path", { d: "M18 19v2", key: "1dawf0" }]
      ];
      var Microwave = createLucideIcon("microwave", __iconNode$9W);
      var __iconNode$9V = [
        ["path", { d: "M12 13v8", key: "1l5pq0" }],
        ["path", { d: "M12 3v3", key: "1n5kay" }],
        [
          "path",
          {
            d: "M4 6a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h13a2 2 0 0 0 1.152-.365l3.424-2.317a1 1 0 0 0 0-1.635l-3.424-2.318A2 2 0 0 0 17 6z",
            key: "1btarq"
          }
        ]
      ];
      var Milestone = createLucideIcon("milestone", __iconNode$9V);
      var __iconNode$9U = [
        ["path", { d: "M8 2h8", key: "1ssgc1" }],
        [
          "path",
          {
            d: "M9 2v1.343M15 2v2.789a4 4 0 0 0 .672 2.219l.656.984a4 4 0 0 1 .672 2.22v1.131M7.8 7.8l-.128.192A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-3",
            key: "y0ejgx"
          }
        ],
        ["path", { d: "M7 15a6.47 6.47 0 0 1 5 0 6.472 6.472 0 0 0 3.435.435", key: "iaxqsy" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var MilkOff = createLucideIcon("milk-off", __iconNode$9U);
      var __iconNode$9T = [
        ["path", { d: "M8 2h8", key: "1ssgc1" }],
        [
          "path",
          {
            d: "M9 2v2.789a4 4 0 0 1-.672 2.219l-.656.984A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-9.789a4 4 0 0 0-.672-2.219l-.656-.984A4 4 0 0 1 15 4.788V2",
            key: "qtp12x"
          }
        ],
        ["path", { d: "M7 15a6.472 6.472 0 0 1 5 0 6.47 6.47 0 0 0 5 0", key: "ygeh44" }]
      ];
      var Milk = createLucideIcon("milk", __iconNode$9T);
      var __iconNode$9S = [
        ["polyline", { points: "4 14 10 14 10 20", key: "11kfnr" }],
        ["polyline", { points: "20 10 14 10 14 4", key: "rlmsce" }],
        ["line", { x1: "14", x2: "21", y1: "10", y2: "3", key: "o5lafz" }],
        ["line", { x1: "3", x2: "10", y1: "21", y2: "14", key: "1atl0r" }]
      ];
      var Minimize2 = createLucideIcon("minimize-2", __iconNode$9S);
      var __iconNode$9R = [
        ["path", { d: "M8 3v3a2 2 0 0 1-2 2H3", key: "hohbtr" }],
        ["path", { d: "M21 8h-3a2 2 0 0 1-2-2V3", key: "5jw1f3" }],
        ["path", { d: "M3 16h3a2 2 0 0 1 2 2v3", key: "198tvr" }],
        ["path", { d: "M16 21v-3a2 2 0 0 1 2-2h3", key: "ph8mxp" }]
      ];
      var Minimize = createLucideIcon("minimize", __iconNode$9R);
      var __iconNode$9Q = [
        ["path", { d: "m9 10 2 2 4-4", key: "1gnqz4" }],
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }]
      ];
      var MonitorCheck = createLucideIcon("monitor-check", __iconNode$9Q);
      var __iconNode$9P = [["path", { d: "M5 12h14", key: "1ays0h" }]];
      var Minus = createLucideIcon("minus", __iconNode$9P);
      var __iconNode$9O = [
        ["circle", { cx: "19", cy: "6", r: "3", key: "108a5v" }],
        ["path", { d: "M22 12v3a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h9", key: "1fet9y" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }]
      ];
      var MonitorDot = createLucideIcon("monitor-dot", __iconNode$9O);
      var __iconNode$9N = [
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "m14.305 7.53.923-.382", key: "1mlnsw" }],
        ["path", { d: "m15.228 4.852-.923-.383", key: "82mpwg" }],
        ["path", { d: "m16.852 3.228-.383-.924", key: "ln4sir" }],
        ["path", { d: "m16.852 8.772-.383.923", key: "1dejw0" }],
        ["path", { d: "m19.148 3.228.383-.924", key: "192kgf" }],
        ["path", { d: "m19.53 9.696-.382-.924", key: "fiavlr" }],
        ["path", { d: "m20.772 4.852.924-.383", key: "1j8mgp" }],
        ["path", { d: "m20.772 7.148.924.383", key: "zix9be" }],
        ["path", { d: "M22 13v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7", key: "1tnzv8" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }],
        ["circle", { cx: "18", cy: "6", r: "3", key: "1h7g24" }]
      ];
      var MonitorCog = createLucideIcon("monitor-cog", __iconNode$9N);
      var __iconNode$9M = [
        ["path", { d: "M12 13V7", key: "h0r20n" }],
        ["path", { d: "m15 10-3 3-3-3", key: "lzhmyn" }],
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }]
      ];
      var MonitorDown = createLucideIcon("monitor-down", __iconNode$9M);
      var __iconNode$9L = [
        ["path", { d: "M17 17H4a2 2 0 0 1-2-2V5c0-1.5 1-2 1-2", key: "k0q8oc" }],
        ["path", { d: "M22 15V5a2 2 0 0 0-2-2H9", key: "cp1ac0" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ];
      var MonitorOff = createLucideIcon("monitor-off", __iconNode$9L);
      var __iconNode$9K = [
        ["path", { d: "M10 13V7", key: "1u13u9" }],
        ["path", { d: "M14 13V7", key: "1vj9om" }],
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }]
      ];
      var MonitorPause = createLucideIcon("monitor-pause", __iconNode$9K);
      var __iconNode$9J = [
        ["path", { d: "M18 8V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h8", key: "10dyio" }],
        ["path", { d: "M10 19v-3.96 3.15", key: "1irgej" }],
        ["path", { d: "M7 19h5", key: "qswx4l" }],
        ["rect", { width: "6", height: "10", x: "16", y: "12", rx: "2", key: "1egngj" }]
      ];
      var MonitorSmartphone = createLucideIcon("monitor-smartphone", __iconNode$9J);
      var __iconNode$9I = [
        [
          "path",
          {
            d: "M10 7.75a.75.75 0 0 1 1.142-.638l3.664 2.249a.75.75 0 0 1 0 1.278l-3.664 2.25a.75.75 0 0 1-1.142-.64z",
            key: "1pctta"
          }
        ],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }],
        ["rect", { x: "2", y: "3", width: "20", height: "14", rx: "2", key: "x3v2xh" }]
      ];
      var MonitorPlay = createLucideIcon("monitor-play", __iconNode$9I);
      var __iconNode$9H = [
        ["path", { d: "M5.5 20H8", key: "1k40s5" }],
        ["path", { d: "M17 9h.01", key: "1j24nn" }],
        ["rect", { width: "10", height: "16", x: "12", y: "4", rx: "2", key: "ixliua" }],
        ["path", { d: "M8 6H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4", key: "1mp6e1" }],
        ["circle", { cx: "17", cy: "15", r: "1", key: "tqvash" }]
      ];
      var MonitorSpeaker = createLucideIcon("monitor-speaker", __iconNode$9H);
      var __iconNode$9G = [
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }],
        ["rect", { x: "2", y: "3", width: "20", height: "14", rx: "2", key: "x3v2xh" }],
        ["rect", { x: "9", y: "7", width: "6", height: "6", rx: "1", key: "5m2oou" }]
      ];
      var MonitorStop = createLucideIcon("monitor-stop", __iconNode$9G);
      var __iconNode$9F = [
        ["path", { d: "m9 10 3-3 3 3", key: "11gsxs" }],
        ["path", { d: "M12 13V7", key: "h0r20n" }],
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }]
      ];
      var MonitorUp = createLucideIcon("monitor-up", __iconNode$9F);
      var __iconNode$9E = [
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
        ["line", { x1: "8", x2: "16", y1: "21", y2: "21", key: "1svkeh" }],
        ["line", { x1: "12", x2: "12", y1: "17", y2: "21", key: "vw1qmm" }]
      ];
      var Monitor = createLucideIcon("monitor", __iconNode$9E);
      var __iconNode$9D = [
        ["path", { d: "m14.5 12.5-5-5", key: "1jahn5" }],
        ["path", { d: "m9.5 12.5 5-5", key: "1k2t7b" }],
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }]
      ];
      var MonitorX = createLucideIcon("monitor-x", __iconNode$9D);
      var __iconNode$9C = [
        ["path", { d: "M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9", key: "4ay0iu" }],
        ["path", { d: "M20 3v4", key: "1olli1" }],
        ["path", { d: "M22 5h-4", key: "1gvqau" }]
      ];
      var MoonStar = createLucideIcon("moon-star", __iconNode$9C);
      var __iconNode$9B = [
        ["path", { d: "M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z", key: "a7tn18" }]
      ];
      var Moon = createLucideIcon("moon", __iconNode$9B);
      var __iconNode$9A = [
        ["path", { d: "m8 3 4 8 5-5 5 15H2L8 3z", key: "otkl63" }],
        [
          "path",
          { d: "M4.14 15.08c2.62-1.57 5.24-1.43 7.86.42 2.74 1.94 5.49 2 8.23.19", key: "1pvmmp" }
        ]
      ];
      var MountainSnow = createLucideIcon("mountain-snow", __iconNode$9A);
      var __iconNode$9z = [["path", { d: "m8 3 4 8 5-5 5 15H2L8 3z", key: "otkl63" }]];
      var Mountain = createLucideIcon("mountain", __iconNode$9z);
      var __iconNode$9y = [
        ["path", { d: "M12 6v.343", key: "1gyhex" }],
        ["path", { d: "M18.218 18.218A7 7 0 0 1 5 15V9a7 7 0 0 1 .782-3.218", key: "ukzz01" }],
        ["path", { d: "M19 13.343V9A7 7 0 0 0 8.56 2.902", key: "104jy9" }],
        ["path", { d: "M22 22 2 2", key: "1r8tn9" }]
      ];
      var MouseOff = createLucideIcon("mouse-off", __iconNode$9y);
      var __iconNode$9x = [
        [
          "path",
          {
            d: "M4.037 4.688a.495.495 0 0 1 .651-.651l16 6.5a.5.5 0 0 1-.063.947l-6.124 1.58a2 2 0 0 0-1.438 1.435l-1.579 6.126a.5.5 0 0 1-.947.063z",
            key: "edeuup"
          }
        ]
      ];
      var MousePointer2 = createLucideIcon("mouse-pointer-2", __iconNode$9x);
      var __iconNode$9w = [
        [
          "path",
          {
            d: "M2.034 2.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.944L8.204 7.545a1 1 0 0 0-.66.66l-1.066 3.443a.5.5 0 0 1-.944.033z",
            key: "11pp1i"
          }
        ],
        ["circle", { cx: "16", cy: "16", r: "6", key: "qoo3c4" }],
        ["path", { d: "m11.8 11.8 8.4 8.4", key: "oogvdj" }]
      ];
      var MousePointerBan = createLucideIcon("mouse-pointer-ban", __iconNode$9w);
      var __iconNode$9v = [
        ["path", { d: "M14 4.1 12 6", key: "ita8i4" }],
        ["path", { d: "m5.1 8-2.9-.8", key: "1go3kf" }],
        ["path", { d: "m6 12-1.9 2", key: "mnht97" }],
        ["path", { d: "M7.2 2.2 8 5.1", key: "1cfko1" }],
        [
          "path",
          {
            d: "M9.037 9.69a.498.498 0 0 1 .653-.653l11 4.5a.5.5 0 0 1-.074.949l-4.349 1.041a1 1 0 0 0-.74.739l-1.04 4.35a.5.5 0 0 1-.95.074z",
            key: "s0h3yz"
          }
        ]
      ];
      var MousePointerClick = createLucideIcon("mouse-pointer-click", __iconNode$9v);
      var __iconNode$9u = [
        ["path", { d: "M12.586 12.586 19 19", key: "ea5xo7" }],
        [
          "path",
          {
            d: "M3.688 3.037a.497.497 0 0 0-.651.651l6.5 15.999a.501.501 0 0 0 .947-.062l1.569-6.083a2 2 0 0 1 1.448-1.479l6.124-1.579a.5.5 0 0 0 .063-.947z",
            key: "277e5u"
          }
        ]
      ];
      var MousePointer = createLucideIcon("mouse-pointer", __iconNode$9u);
      var __iconNode$9t = [
        ["rect", { x: "5", y: "2", width: "14", height: "20", rx: "7", key: "11ol66" }],
        ["path", { d: "M12 6v4", key: "16clxf" }]
      ];
      var Mouse = createLucideIcon("mouse", __iconNode$9t);
      var __iconNode$9s = [
        ["path", { d: "M5 3v16h16", key: "1mqmf9" }],
        ["path", { d: "m5 19 6-6", key: "jh6hbb" }],
        ["path", { d: "m2 6 3-3 3 3", key: "tkyvxa" }],
        ["path", { d: "m18 16 3 3-3 3", key: "1d4glt" }]
      ];
      var Move3d = createLucideIcon("move-3d", __iconNode$9s);
      var __iconNode$9r = [
        ["path", { d: "M19 13v6h-6", key: "1hxl6d" }],
        ["path", { d: "M5 11V5h6", key: "12e2xe" }],
        ["path", { d: "m5 5 14 14", key: "11anup" }]
      ];
      var MoveDiagonal2 = createLucideIcon("move-diagonal-2", __iconNode$9r);
      var __iconNode$9q = [
        ["path", { d: "M11 19H5v-6", key: "8awifj" }],
        ["path", { d: "M13 5h6v6", key: "7voy1q" }],
        ["path", { d: "M19 5 5 19", key: "wwaj1z" }]
      ];
      var MoveDiagonal = createLucideIcon("move-diagonal", __iconNode$9q);
      var __iconNode$9p = [
        ["path", { d: "M11 19H5V13", key: "1akmht" }],
        ["path", { d: "M19 5L5 19", key: "72u4yj" }]
      ];
      var MoveDownLeft = createLucideIcon("move-down-left", __iconNode$9p);
      var __iconNode$9o = [
        ["path", { d: "M19 13V19H13", key: "10vkzq" }],
        ["path", { d: "M5 5L19 19", key: "5zm2fv" }]
      ];
      var MoveDownRight = createLucideIcon("move-down-right", __iconNode$9o);
      var __iconNode$9n = [
        ["path", { d: "M8 18L12 22L16 18", key: "cskvfv" }],
        ["path", { d: "M12 2V22", key: "r89rzk" }]
      ];
      var MoveDown = createLucideIcon("move-down", __iconNode$9n);
      var __iconNode$9m = [
        ["path", { d: "m18 8 4 4-4 4", key: "1ak13k" }],
        ["path", { d: "M2 12h20", key: "9i4pu4" }],
        ["path", { d: "m6 8-4 4 4 4", key: "15zrgr" }]
      ];
      var MoveHorizontal = createLucideIcon("move-horizontal", __iconNode$9m);
      var __iconNode$9l = [
        ["path", { d: "M6 8L2 12L6 16", key: "kyvwex" }],
        ["path", { d: "M2 12H22", key: "1m8cig" }]
      ];
      var MoveLeft = createLucideIcon("move-left", __iconNode$9l);
      var __iconNode$9k = [
        ["path", { d: "M18 8L22 12L18 16", key: "1r0oui" }],
        ["path", { d: "M2 12H22", key: "1m8cig" }]
      ];
      var MoveRight = createLucideIcon("move-right", __iconNode$9k);
      var __iconNode$9j = [
        ["path", { d: "M5 11V5H11", key: "3q78g9" }],
        ["path", { d: "M5 5L19 19", key: "5zm2fv" }]
      ];
      var MoveUpLeft = createLucideIcon("move-up-left", __iconNode$9j);
      var __iconNode$9i = [
        ["path", { d: "M13 5H19V11", key: "1n1gyv" }],
        ["path", { d: "M19 5L5 19", key: "72u4yj" }]
      ];
      var MoveUpRight = createLucideIcon("move-up-right", __iconNode$9i);
      var __iconNode$9h = [
        ["path", { d: "M12 2v20", key: "t6zp3m" }],
        ["path", { d: "m8 18 4 4 4-4", key: "bh5tu3" }],
        ["path", { d: "m8 6 4-4 4 4", key: "ybng9g" }]
      ];
      var MoveVertical = createLucideIcon("move-vertical", __iconNode$9h);
      var __iconNode$9g = [
        ["path", { d: "M8 6L12 2L16 6", key: "1yvkyx" }],
        ["path", { d: "M12 2V22", key: "r89rzk" }]
      ];
      var MoveUp = createLucideIcon("move-up", __iconNode$9g);
      var __iconNode$9f = [
        ["path", { d: "M12 2v20", key: "t6zp3m" }],
        ["path", { d: "m15 19-3 3-3-3", key: "11eu04" }],
        ["path", { d: "m19 9 3 3-3 3", key: "1mg7y2" }],
        ["path", { d: "M2 12h20", key: "9i4pu4" }],
        ["path", { d: "m5 9-3 3 3 3", key: "j64kie" }],
        ["path", { d: "m9 5 3-3 3 3", key: "l8vdw6" }]
      ];
      var Move = createLucideIcon("move", __iconNode$9f);
      var __iconNode$9e = [
        ["circle", { cx: "8", cy: "18", r: "4", key: "1fc0mg" }],
        ["path", { d: "M12 18V2l7 4", key: "g04rme" }]
      ];
      var Music2 = createLucideIcon("music-2", __iconNode$9e);
      var __iconNode$9d = [
        ["circle", { cx: "12", cy: "18", r: "4", key: "m3r9ws" }],
        ["path", { d: "M16 18V2", key: "40x2m5" }]
      ];
      var Music3 = createLucideIcon("music-3", __iconNode$9d);
      var __iconNode$9c = [
        ["path", { d: "M9 18V5l12-2v13", key: "1jmyc2" }],
        ["path", { d: "m9 9 12-2", key: "1e64n2" }],
        ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
        ["circle", { cx: "18", cy: "16", r: "3", key: "1hluhg" }]
      ];
      var Music4 = createLucideIcon("music-4", __iconNode$9c);
      var __iconNode$9b = [
        ["path", { d: "M9 18V5l12-2v13", key: "1jmyc2" }],
        ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
        ["circle", { cx: "18", cy: "16", r: "3", key: "1hluhg" }]
      ];
      var Music = createLucideIcon("music", __iconNode$9b);
      var __iconNode$9a = [
        ["path", { d: "M9.31 9.31 5 21l7-4 7 4-1.17-3.17", key: "qoq2o2" }],
        ["path", { d: "M14.53 8.88 12 2l-1.17 3.17", key: "k3sjzy" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var Navigation2Off = createLucideIcon("navigation-2-off", __iconNode$9a);
      var __iconNode$99 = [
        ["polygon", { points: "12 2 19 21 12 17 5 21 12 2", key: "x8c0qg" }]
      ];
      var Navigation2 = createLucideIcon("navigation-2", __iconNode$99);
      var __iconNode$98 = [
        ["path", { d: "M8.43 8.43 3 11l8 2 2 8 2.57-5.43", key: "1vdtb7" }],
        ["path", { d: "M17.39 11.73 22 2l-9.73 4.61", key: "tya3r6" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var NavigationOff = createLucideIcon("navigation-off", __iconNode$98);
      var __iconNode$97 = [
        ["polygon", { points: "3 11 22 2 13 21 11 13 3 11", key: "1ltx0t" }]
      ];
      var Navigation = createLucideIcon("navigation", __iconNode$97);
      var __iconNode$96 = [
        ["rect", { x: "16", y: "16", width: "6", height: "6", rx: "1", key: "4q2zg0" }],
        ["rect", { x: "2", y: "16", width: "6", height: "6", rx: "1", key: "8cvhb9" }],
        ["rect", { x: "9", y: "2", width: "6", height: "6", rx: "1", key: "1egb70" }],
        ["path", { d: "M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3", key: "1jsf9p" }],
        ["path", { d: "M12 12V8", key: "2874zd" }]
      ];
      var Network = createLucideIcon("network", __iconNode$96);
      var __iconNode$95 = [
        ["path", { d: "M15 18h-5", key: "95g1m2" }],
        ["path", { d: "M18 14h-8", key: "sponae" }],
        [
          "path",
          {
            d: "M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 1-4 0v-9a2 2 0 0 1 2-2h2",
            key: "39pd36"
          }
        ],
        ["rect", { width: "8", height: "4", x: "10", y: "6", rx: "1", key: "aywv1n" }]
      ];
      var Newspaper = createLucideIcon("newspaper", __iconNode$95);
      var __iconNode$94 = [
        ["path", { d: "M6 8.32a7.43 7.43 0 0 1 0 7.36", key: "9iaqei" }],
        ["path", { d: "M9.46 6.21a11.76 11.76 0 0 1 0 11.58", key: "1yha7l" }],
        ["path", { d: "M12.91 4.1a15.91 15.91 0 0 1 .01 15.8", key: "4iu2gk" }],
        ["path", { d: "M16.37 2a20.16 20.16 0 0 1 0 20", key: "sap9u2" }]
      ];
      var Nfc = createLucideIcon("nfc", __iconNode$94);
      var __iconNode$93 = [
        ["path", { d: "M12 2v10", key: "mnfbl" }],
        ["path", { d: "m8.5 4 7 4", key: "m1xjk3" }],
        ["path", { d: "m8.5 8 7-4", key: "t0m5j6" }],
        ["circle", { cx: "12", cy: "17", r: "5", key: "qbz8iq" }]
      ];
      var NonBinary = createLucideIcon("non-binary", __iconNode$93);
      var __iconNode$92 = [
        ["path", { d: "M13.4 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-7.4", key: "re6nr2" }],
        ["path", { d: "M2 6h4", key: "aawbzj" }],
        ["path", { d: "M2 10h4", key: "l0bgd4" }],
        ["path", { d: "M2 14h4", key: "1gsvsf" }],
        ["path", { d: "M2 18h4", key: "1bu2t1" }],
        [
          "path",
          {
            d: "M21.378 5.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
            key: "pqwjuv"
          }
        ]
      ];
      var NotebookPen = createLucideIcon("notebook-pen", __iconNode$92);
      var __iconNode$91 = [
        ["path", { d: "M2 6h4", key: "aawbzj" }],
        ["path", { d: "M2 10h4", key: "l0bgd4" }],
        ["path", { d: "M2 14h4", key: "1gsvsf" }],
        ["path", { d: "M2 18h4", key: "1bu2t1" }],
        ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
        ["path", { d: "M15 2v20", key: "dcj49h" }],
        ["path", { d: "M15 7h5", key: "1xj5lc" }],
        ["path", { d: "M15 12h5", key: "w5shd9" }],
        ["path", { d: "M15 17h5", key: "1qaofu" }]
      ];
      var NotebookTabs = createLucideIcon("notebook-tabs", __iconNode$91);
      var __iconNode$90 = [
        ["path", { d: "M2 6h4", key: "aawbzj" }],
        ["path", { d: "M2 10h4", key: "l0bgd4" }],
        ["path", { d: "M2 14h4", key: "1gsvsf" }],
        ["path", { d: "M2 18h4", key: "1bu2t1" }],
        ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
        ["path", { d: "M16 2v20", key: "rotuqe" }]
      ];
      var Notebook = createLucideIcon("notebook", __iconNode$90);
      var __iconNode$8$ = [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M12 2v4", key: "3427ic" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["path", { d: "M16 4h2a2 2 0 0 1 2 2v2", key: "j91f56" }],
        ["path", { d: "M20 12v2", key: "w8o0tu" }],
        ["path", { d: "M20 18v2a2 2 0 0 1-2 2h-1", key: "1c9ggx" }],
        ["path", { d: "M13 22h-2", key: "191ugt" }],
        ["path", { d: "M7 22H6a2 2 0 0 1-2-2v-2", key: "1rt9px" }],
        ["path", { d: "M4 14v-2", key: "1v0sqh" }],
        ["path", { d: "M4 8V6a2 2 0 0 1 2-2h2", key: "1mwabg" }],
        ["path", { d: "M8 10h6", key: "3oa6kw" }],
        ["path", { d: "M8 14h8", key: "1fgep2" }],
        ["path", { d: "M8 18h5", key: "17enja" }]
      ];
      var NotepadTextDashed = createLucideIcon("notepad-text-dashed", __iconNode$8$);
      var __iconNode$8_ = [
        ["path", { d: "M2 6h4", key: "aawbzj" }],
        ["path", { d: "M2 10h4", key: "l0bgd4" }],
        ["path", { d: "M2 14h4", key: "1gsvsf" }],
        ["path", { d: "M2 18h4", key: "1bu2t1" }],
        ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
        ["path", { d: "M9.5 8h5", key: "11mslq" }],
        ["path", { d: "M9.5 12H16", key: "ktog6x" }],
        ["path", { d: "M9.5 16H14", key: "p1seyn" }]
      ];
      var NotebookText = createLucideIcon("notebook-text", __iconNode$8_);
      var __iconNode$8Z = [
        ["path", { d: "M8 2v4", key: "1cmpym" }],
        ["path", { d: "M12 2v4", key: "3427ic" }],
        ["path", { d: "M16 2v4", key: "4m81vk" }],
        ["rect", { width: "16", height: "18", x: "4", y: "4", rx: "2", key: "1u9h20" }],
        ["path", { d: "M8 10h6", key: "3oa6kw" }],
        ["path", { d: "M8 14h8", key: "1fgep2" }],
        ["path", { d: "M8 18h5", key: "17enja" }]
      ];
      var NotepadText = createLucideIcon("notepad-text", __iconNode$8Z);
      var __iconNode$8Y = [
        ["path", { d: "M12 4V2", key: "1k5q1u" }],
        [
          "path",
          {
            d: "M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592a7.01 7.01 0 0 0 4.125-2.939",
            key: "1xcvy9"
          }
        ],
        ["path", { d: "M19 10v3.343", key: "163tfc" }],
        [
          "path",
          {
            d: "M12 12c-1.349-.573-1.905-1.005-2.5-2-.546.902-1.048 1.353-2.5 2-1.018-.644-1.46-1.08-2-2-1.028.71-1.69.918-3 1 1.081-1.048 1.757-2.03 2-3 .194-.776.84-1.551 1.79-2.21m11.654 5.997c.887-.457 1.28-.891 1.556-1.787 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4-.74 0-1.461.068-2.15.192",
            key: "17914v"
          }
        ],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var NutOff = createLucideIcon("nut-off", __iconNode$8Y);
      var __iconNode$8X = [
        ["path", { d: "M12 4V2", key: "1k5q1u" }],
        [
          "path",
          {
            d: "M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592A7.003 7.003 0 0 0 19 14v-4",
            key: "1tgyif"
          }
        ],
        [
          "path",
          {
            d: "M12 4C8 4 4.5 6 4 8c-.243.97-.919 1.952-2 3 1.31-.082 1.972-.29 3-1 .54.92.982 1.356 2 2 1.452-.647 1.954-1.098 2.5-2 .595.995 1.151 1.427 2.5 2 1.31-.621 1.862-1.058 2.5-2 .629.977 1.162 1.423 2.5 2 1.209-.548 1.68-.967 2-2 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4Z",
            key: "tnsqj"
          }
        ]
      ];
      var Nut = createLucideIcon("nut", __iconNode$8X);
      var __iconNode$8W = [
        ["path", { d: "M12 16h.01", key: "1drbdi" }],
        ["path", { d: "M12 8v4", key: "1got3b" }],
        [
          "path",
          {
            d: "M15.312 2a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586l-4.688-4.688A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2z",
            key: "1fd625"
          }
        ]
      ];
      var OctagonAlert = createLucideIcon("octagon-alert", __iconNode$8W);
      var __iconNode$8V = [
        [
          "path",
          {
            d: "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z",
            key: "2d38gg"
          }
        ],
        ["path", { d: "M8 12h8", key: "1wcyev" }]
      ];
      var OctagonMinus = createLucideIcon("octagon-minus", __iconNode$8V);
      var __iconNode$8U = [
        ["path", { d: "M10 15V9", key: "1lckn7" }],
        ["path", { d: "M14 15V9", key: "1muqhk" }],
        [
          "path",
          {
            d: "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z",
            key: "2d38gg"
          }
        ]
      ];
      var OctagonPause = createLucideIcon("octagon-pause", __iconNode$8U);
      var __iconNode$8T = [
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        [
          "path",
          {
            d: "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z",
            key: "2d38gg"
          }
        ],
        ["path", { d: "m9 9 6 6", key: "z0biqf" }]
      ];
      var OctagonX = createLucideIcon("octagon-x", __iconNode$8T);
      var __iconNode$8S = [
        [
          "path",
          {
            d: "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z",
            key: "2d38gg"
          }
        ]
      ];
      var Octagon = createLucideIcon("octagon", __iconNode$8S);
      var __iconNode$8R = [
        [
          "path",
          {
            d: "M3 20h4.5a.5.5 0 0 0 .5-.5v-.282a.52.52 0 0 0-.247-.437 8 8 0 1 1 8.494-.001.52.52 0 0 0-.247.438v.282a.5.5 0 0 0 .5.5H21",
            key: "1x94xo"
          }
        ]
      ];
      var Omega = createLucideIcon("omega", __iconNode$8R);
      var __iconNode$8Q = [
        ["path", { d: "M20.341 6.484A10 10 0 0 1 10.266 21.85", key: "1enhxb" }],
        ["path", { d: "M3.659 17.516A10 10 0 0 1 13.74 2.152", key: "1crzgf" }],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        ["circle", { cx: "19", cy: "5", r: "2", key: "mhkx31" }],
        ["circle", { cx: "5", cy: "19", r: "2", key: "v8kfzx" }]
      ];
      var Orbit = createLucideIcon("orbit", __iconNode$8Q);
      var __iconNode$8P = [
        ["path", { d: "M3 3h6l6 18h6", key: "ph9rgk" }],
        ["path", { d: "M14 3h7", key: "16f0ms" }]
      ];
      var Option = createLucideIcon("option", __iconNode$8P);
      var __iconNode$8O = [
        ["path", { d: "M12 12V4a1 1 0 0 1 1-1h6.297a1 1 0 0 1 .651 1.759l-4.696 4.025", key: "1bx4vc" }],
        [
          "path",
          {
            d: "m12 21-7.414-7.414A2 2 0 0 1 4 12.172V6.415a1.002 1.002 0 0 1 1.707-.707L20 20.009",
            key: "1h3km6"
          }
        ],
        [
          "path",
          {
            d: "m12.214 3.381 8.414 14.966a1 1 0 0 1-.167 1.199l-1.168 1.163a1 1 0 0 1-.706.291H6.351a1 1 0 0 1-.625-.219L3.25 18.8a1 1 0 0 1 .631-1.781l4.165.027",
            key: "1hj4wg"
          }
        ]
      ];
      var Origami = createLucideIcon("origami", __iconNode$8O);
      var __iconNode$8N = [
        ["path", { d: "M3 9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9Z", key: "1ront0" }],
        ["path", { d: "m3 9 2.45-4.9A2 2 0 0 1 7.24 3h9.52a2 2 0 0 1 1.8 1.1L21 9", key: "19h2x1" }],
        ["path", { d: "M12 3v6", key: "1holv5" }]
      ];
      var Package2 = createLucideIcon("package-2", __iconNode$8N);
      var __iconNode$8M = [
        ["path", { d: "m16 16 2 2 4-4", key: "gfu2re" }],
        [
          "path",
          {
            d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
            key: "e7tb2h"
          }
        ],
        ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
        ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "12", key: "a4e8g8" }]
      ];
      var PackageCheck = createLucideIcon("package-check", __iconNode$8M);
      var __iconNode$8L = [
        ["path", { d: "M16 16h6", key: "100bgy" }],
        [
          "path",
          {
            d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
            key: "e7tb2h"
          }
        ],
        ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
        ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "12", key: "a4e8g8" }]
      ];
      var PackageMinus = createLucideIcon("package-minus", __iconNode$8L);
      var __iconNode$8K = [
        ["path", { d: "M12 22v-9", key: "x3hkom" }],
        [
          "path",
          {
            d: "M15.17 2.21a1.67 1.67 0 0 1 1.63 0L21 4.57a1.93 1.93 0 0 1 0 3.36L8.82 14.79a1.655 1.655 0 0 1-1.64 0L3 12.43a1.93 1.93 0 0 1 0-3.36z",
            key: "2ntwy6"
          }
        ],
        [
          "path",
          {
            d: "M20 13v3.87a2.06 2.06 0 0 1-1.11 1.83l-6 3.08a1.93 1.93 0 0 1-1.78 0l-6-3.08A2.06 2.06 0 0 1 4 16.87V13",
            key: "1pmm1c"
          }
        ],
        [
          "path",
          {
            d: "M21 12.43a1.93 1.93 0 0 0 0-3.36L8.83 2.2a1.64 1.64 0 0 0-1.63 0L3 4.57a1.93 1.93 0 0 0 0 3.36l12.18 6.86a1.636 1.636 0 0 0 1.63 0z",
            key: "12ttoo"
          }
        ]
      ];
      var PackageOpen = createLucideIcon("package-open", __iconNode$8K);
      var __iconNode$8J = [
        ["path", { d: "M16 16h6", key: "100bgy" }],
        ["path", { d: "M19 13v6", key: "85cyf1" }],
        [
          "path",
          {
            d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
            key: "e7tb2h"
          }
        ],
        ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
        ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "12", key: "a4e8g8" }]
      ];
      var PackagePlus = createLucideIcon("package-plus", __iconNode$8J);
      var __iconNode$8I = [
        [
          "path",
          {
            d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
            key: "e7tb2h"
          }
        ],
        ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
        ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "12", key: "a4e8g8" }],
        ["circle", { cx: "18.5", cy: "15.5", r: "2.5", key: "b5zd12" }],
        ["path", { d: "M20.27 17.27 22 19", key: "1l4muz" }]
      ];
      var PackageSearch = createLucideIcon("package-search", __iconNode$8I);
      var __iconNode$8H = [
        [
          "path",
          {
            d: "M11 21.73a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73z",
            key: "1a0edw"
          }
        ],
        ["path", { d: "M12 22V12", key: "d0xqtd" }],
        ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
        ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }]
      ];
      var Package = createLucideIcon("package", __iconNode$8H);
      var __iconNode$8G = [
        [
          "path",
          {
            d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
            key: "e7tb2h"
          }
        ],
        ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
        ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
        ["line", { x1: "12", x2: "12", y1: "22", y2: "12", key: "a4e8g8" }],
        ["path", { d: "m17 13 5 5m-5 0 5-5", key: "im3w4b" }]
      ];
      var PackageX = createLucideIcon("package-x", __iconNode$8G);
      var __iconNode$8F = [
        [
          "path",
          { d: "m19 11-8-8-8.6 8.6a2 2 0 0 0 0 2.8l5.2 5.2c.8.8 2 .8 2.8 0L19 11Z", key: "irua1i" }
        ],
        ["path", { d: "m5 2 5 5", key: "1lls2c" }],
        ["path", { d: "M2 13h15", key: "1hkzvu" }],
        ["path", { d: "M22 20a2 2 0 1 1-4 0c0-1.6 1.7-2.4 2-4 .3 1.6 2 2.4 2 4Z", key: "xk76lq" }]
      ];
      var PaintBucket = createLucideIcon("paint-bucket", __iconNode$8F);
      var __iconNode$8E = [
        ["rect", { width: "16", height: "6", x: "2", y: "2", rx: "2", key: "jcyz7m" }],
        ["path", { d: "M10 16v-2a2 2 0 0 1 2-2h8a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2", key: "1b9h7c" }],
        ["rect", { width: "4", height: "6", x: "8", y: "16", rx: "1", key: "d6e7yl" }]
      ];
      var PaintRoller = createLucideIcon("paint-roller", __iconNode$8E);
      var __iconNode$8D = [
        ["path", { d: "m14.622 17.897-10.68-2.913", key: "vj2p1u" }],
        [
          "path",
          {
            d: "M18.376 2.622a1 1 0 1 1 3.002 3.002L17.36 9.643a.5.5 0 0 0 0 .707l.944.944a2.41 2.41 0 0 1 0 3.408l-.944.944a.5.5 0 0 1-.707 0L8.354 7.348a.5.5 0 0 1 0-.707l.944-.944a2.41 2.41 0 0 1 3.408 0l.944.944a.5.5 0 0 0 .707 0z",
            key: "18tc5c"
          }
        ],
        [
          "path",
          {
            d: "M9 8c-1.804 2.71-3.97 3.46-6.583 3.948a.507.507 0 0 0-.302.819l7.32 8.883a1 1 0 0 0 1.185.204C12.735 20.405 16 16.792 16 15",
            key: "ytzfxy"
          }
        ]
      ];
      var Paintbrush = createLucideIcon("paintbrush", __iconNode$8D);
      var __iconNode$8C = [
        ["path", { d: "M10 2v2", key: "7u0qdc" }],
        ["path", { d: "M14 2v4", key: "qmzblu" }],
        ["path", { d: "M17 2a1 1 0 0 1 1 1v9H6V3a1 1 0 0 1 1-1z", key: "ycvu00" }],
        [
          "path",
          {
            d: "M6 12a1 1 0 0 0-1 1v1a2 2 0 0 0 2 2h2a1 1 0 0 1 1 1v2.9a2 2 0 1 0 4 0V17a1 1 0 0 1 1-1h2a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1",
            key: "iw4wnp"
          }
        ]
      ];
      var PaintbrushVertical = createLucideIcon("paintbrush-vertical", __iconNode$8C);
      var __iconNode$8B = [
        [
          "path",
          {
            d: "M12 22a1 1 0 0 1 0-20 10 9 0 0 1 10 9 5 5 0 0 1-5 5h-2.25a1.75 1.75 0 0 0-1.4 2.8l.3.4a1.75 1.75 0 0 1-1.4 2.8z",
            key: "e79jfc"
          }
        ],
        ["circle", { cx: "13.5", cy: "6.5", r: ".5", fill: "currentColor", key: "1okk4w" }],
        ["circle", { cx: "17.5", cy: "10.5", r: ".5", fill: "currentColor", key: "f64h9f" }],
        ["circle", { cx: "6.5", cy: "12.5", r: ".5", fill: "currentColor", key: "qy21gx" }],
        ["circle", { cx: "8.5", cy: "7.5", r: ".5", fill: "currentColor", key: "fotxhn" }]
      ];
      var Palette = createLucideIcon("palette", __iconNode$8B);
      var __iconNode$8A = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 15h18", key: "5xshup" }],
        ["path", { d: "m15 8-3 3-3-3", key: "1oxy1z" }]
      ];
      var PanelBottomClose = createLucideIcon("panel-bottom-close", __iconNode$8A);
      var __iconNode$8z = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M14 15h1", key: "171nev" }],
        ["path", { d: "M19 15h2", key: "1vnucp" }],
        ["path", { d: "M3 15h2", key: "8bym0q" }],
        ["path", { d: "M9 15h1", key: "1tg3ks" }]
      ];
      var PanelBottomDashed = createLucideIcon("panel-bottom-dashed", __iconNode$8z);
      var __iconNode$8y = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 15h18", key: "5xshup" }],
        ["path", { d: "m9 10 3-3 3 3", key: "11gsxs" }]
      ];
      var PanelBottomOpen = createLucideIcon("panel-bottom-open", __iconNode$8y);
      var __iconNode$8x = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 15h18", key: "5xshup" }]
      ];
      var PanelBottom = createLucideIcon("panel-bottom", __iconNode$8x);
      var __iconNode$8w = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 3v18", key: "fh3hqa" }],
        ["path", { d: "m16 15-3-3 3-3", key: "14y99z" }]
      ];
      var PanelLeftClose2 = createLucideIcon("panel-left-close", __iconNode$8w);
      var __iconNode$8v = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 14v1", key: "askpd8" }],
        ["path", { d: "M9 19v2", key: "16tejx" }],
        ["path", { d: "M9 3v2", key: "1noubl" }],
        ["path", { d: "M9 9v1", key: "19ebxg" }]
      ];
      var PanelLeftDashed = createLucideIcon("panel-left-dashed", __iconNode$8v);
      var __iconNode$8u = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 3v18", key: "fh3hqa" }],
        ["path", { d: "m14 9 3 3-3 3", key: "8010ee" }]
      ];
      var PanelLeftOpen = createLucideIcon("panel-left-open", __iconNode$8u);
      var __iconNode$8t = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 3v18", key: "fh3hqa" }]
      ];
      var PanelLeft = createLucideIcon("panel-left", __iconNode$8t);
      var __iconNode$8s = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M15 3v18", key: "14nvp0" }],
        ["path", { d: "m8 9 3 3-3 3", key: "12hl5m" }]
      ];
      var PanelRightClose = createLucideIcon("panel-right-close", __iconNode$8s);
      var __iconNode$8r = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M15 14v1", key: "ilsfch" }],
        ["path", { d: "M15 19v2", key: "1fst2f" }],
        ["path", { d: "M15 3v2", key: "z204g4" }],
        ["path", { d: "M15 9v1", key: "z2a8b1" }]
      ];
      var PanelRightDashed = createLucideIcon("panel-right-dashed", __iconNode$8r);
      var __iconNode$8q = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M15 3v18", key: "14nvp0" }],
        ["path", { d: "m10 15-3-3 3-3", key: "1pgupc" }]
      ];
      var PanelRightOpen2 = createLucideIcon("panel-right-open", __iconNode$8q);
      var __iconNode$8p = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M15 3v18", key: "14nvp0" }]
      ];
      var PanelRight = createLucideIcon("panel-right", __iconNode$8p);
      var __iconNode$8o = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 9h18", key: "1pudct" }],
        ["path", { d: "m9 16 3-3 3 3", key: "1idcnm" }]
      ];
      var PanelTopClose = createLucideIcon("panel-top-close", __iconNode$8o);
      var __iconNode$8n = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M14 9h1", key: "l0svgy" }],
        ["path", { d: "M19 9h2", key: "te2zfg" }],
        ["path", { d: "M3 9h2", key: "1h4ldw" }],
        ["path", { d: "M9 9h1", key: "15jzuz" }]
      ];
      var PanelTopDashed = createLucideIcon("panel-top-dashed", __iconNode$8n);
      var __iconNode$8m = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 9h18", key: "1pudct" }],
        ["path", { d: "m15 14-3 3-3-3", key: "g215vf" }]
      ];
      var PanelTopOpen = createLucideIcon("panel-top-open", __iconNode$8m);
      var __iconNode$8l = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 9h18", key: "1pudct" }]
      ];
      var PanelTop = createLucideIcon("panel-top", __iconNode$8l);
      var __iconNode$8k = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 3v18", key: "fh3hqa" }],
        ["path", { d: "M9 15h12", key: "5ijen5" }]
      ];
      var PanelsLeftBottom = createLucideIcon("panels-left-bottom", __iconNode$8k);
      var __iconNode$8j = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 15h12", key: "1wkqb3" }],
        ["path", { d: "M15 3v18", key: "14nvp0" }]
      ];
      var PanelsRightBottom = createLucideIcon("panels-right-bottom", __iconNode$8j);
      var __iconNode$8i = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 9h18", key: "1pudct" }],
        ["path", { d: "M9 21V9", key: "1oto5p" }]
      ];
      var PanelsTopLeft = createLucideIcon("panels-top-left", __iconNode$8i);
      var __iconNode$8h = [
        ["path", { d: "M13.234 20.252 21 12.3", key: "1cbrk9" }],
        [
          "path",
          {
            d: "m16 6-8.414 8.586a2 2 0 0 0 0 2.828 2 2 0 0 0 2.828 0l8.414-8.586a4 4 0 0 0 0-5.656 4 4 0 0 0-5.656 0l-8.415 8.585a6 6 0 1 0 8.486 8.486",
            key: "1pkts6"
          }
        ]
      ];
      var Paperclip = createLucideIcon("paperclip", __iconNode$8h);
      var __iconNode$8g = [
        ["path", { d: "M8 21s-4-3-4-9 4-9 4-9", key: "uto9ud" }],
        ["path", { d: "M16 3s4 3 4 9-4 9-4 9", key: "4w2vsq" }]
      ];
      var Parentheses = createLucideIcon("parentheses", __iconNode$8g);
      var __iconNode$8f = [
        ["path", { d: "M11 15h2", key: "199qp6" }],
        ["path", { d: "M12 12v3", key: "158kv8" }],
        ["path", { d: "M12 19v3", key: "npa21l" }],
        [
          "path",
          {
            d: "M15.282 19a1 1 0 0 0 .948-.68l2.37-6.988a7 7 0 1 0-13.2 0l2.37 6.988a1 1 0 0 0 .948.68z",
            key: "1jofit"
          }
        ],
        ["path", { d: "M9 9a3 3 0 1 1 6 0", key: "jdoeu8" }]
      ];
      var ParkingMeter = createLucideIcon("parking-meter", __iconNode$8f);
      var __iconNode$8e = [
        ["path", { d: "M5.8 11.3 2 22l10.7-3.79", key: "gwxi1d" }],
        ["path", { d: "M4 3h.01", key: "1vcuye" }],
        ["path", { d: "M22 8h.01", key: "1mrtc2" }],
        ["path", { d: "M15 2h.01", key: "1cjtqr" }],
        ["path", { d: "M22 20h.01", key: "1mrys2" }],
        [
          "path",
          {
            d: "m22 2-2.24.75a2.9 2.9 0 0 0-1.96 3.12c.1.86-.57 1.63-1.45 1.63h-.38c-.86 0-1.6.6-1.76 1.44L14 10",
            key: "hbicv8"
          }
        ],
        [
          "path",
          { d: "m22 13-.82-.33c-.86-.34-1.82.2-1.98 1.11c-.11.7-.72 1.22-1.43 1.22H17", key: "1i94pl" }
        ],
        ["path", { d: "m11 2 .33.82c.34.86-.2 1.82-1.11 1.98C9.52 4.9 9 5.52 9 6.23V7", key: "1cofks" }],
        [
          "path",
          {
            d: "M11 13c1.93 1.93 2.83 4.17 2 5-.83.83-3.07-.07-5-2-1.93-1.93-2.83-4.17-2-5 .83-.83 3.07.07 5 2Z",
            key: "4kbmks"
          }
        ]
      ];
      var PartyPopper = createLucideIcon("party-popper", __iconNode$8e);
      var __iconNode$8d = [
        ["rect", { x: "14", y: "4", width: "4", height: "16", rx: "1", key: "zuxfzm" }],
        ["rect", { x: "6", y: "4", width: "4", height: "16", rx: "1", key: "1okwgv" }]
      ];
      var Pause = createLucideIcon("pause", __iconNode$8d);
      var __iconNode$8c = [
        ["circle", { cx: "11", cy: "4", r: "2", key: "vol9p0" }],
        ["circle", { cx: "18", cy: "8", r: "2", key: "17gozi" }],
        ["circle", { cx: "20", cy: "16", r: "2", key: "1v9bxh" }],
        [
          "path",
          {
            d: "M9 10a5 5 0 0 1 5 5v3.5a3.5 3.5 0 0 1-6.84 1.045Q6.52 17.48 4.46 16.84A3.5 3.5 0 0 1 5.5 10Z",
            key: "1ydw1z"
          }
        ]
      ];
      var PawPrint = createLucideIcon("paw-print", __iconNode$8c);
      var __iconNode$8b = [
        ["rect", { width: "14", height: "20", x: "5", y: "2", rx: "2", key: "1uq1d7" }],
        ["path", { d: "M15 14h.01", key: "1kp3bh" }],
        ["path", { d: "M9 6h6", key: "dgm16u" }],
        ["path", { d: "M9 10h6", key: "9gxzsh" }]
      ];
      var PcCase = createLucideIcon("pc-case", __iconNode$8b);
      var __iconNode$8a = [
        ["path", { d: "M12 20h9", key: "t2du7b" }],
        [
          "path",
          {
            d: "M16.376 3.622a1 1 0 0 1 3.002 3.002L7.368 18.635a2 2 0 0 1-.855.506l-2.872.838a.5.5 0 0 1-.62-.62l.838-2.872a2 2 0 0 1 .506-.854z",
            key: "1ykcvy"
          }
        ]
      ];
      var PenLine = createLucideIcon("pen-line", __iconNode$8a);
      var __iconNode$89 = [
        [
          "path",
          {
            d: "m10 10-6.157 6.162a2 2 0 0 0-.5.833l-1.322 4.36a.5.5 0 0 0 .622.624l4.358-1.323a2 2 0 0 0 .83-.5L14 13.982",
            key: "bjo8r8"
          }
        ],
        ["path", { d: "m12.829 7.172 4.359-4.346a1 1 0 1 1 3.986 3.986l-4.353 4.353", key: "16h5ne" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ];
      var PenOff = createLucideIcon("pen-off", __iconNode$89);
      var __iconNode$88 = [
        [
          "path",
          {
            d: "M15.707 21.293a1 1 0 0 1-1.414 0l-1.586-1.586a1 1 0 0 1 0-1.414l5.586-5.586a1 1 0 0 1 1.414 0l1.586 1.586a1 1 0 0 1 0 1.414z",
            key: "nt11vn"
          }
        ],
        [
          "path",
          {
            d: "m18 13-1.375-6.874a1 1 0 0 0-.746-.776L3.235 2.028a1 1 0 0 0-1.207 1.207L5.35 15.879a1 1 0 0 0 .776.746L13 18",
            key: "15qc1e"
          }
        ],
        ["path", { d: "m2.3 2.3 7.286 7.286", key: "1wuzzi" }],
        ["circle", { cx: "11", cy: "11", r: "2", key: "xmgehs" }]
      ];
      var PenTool = createLucideIcon("pen-tool", __iconNode$88);
      var __iconNode$87 = [
        [
          "path",
          {
            d: "M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z",
            key: "1a8usu"
          }
        ]
      ];
      var Pen = createLucideIcon("pen", __iconNode$87);
      var __iconNode$86 = [
        ["path", { d: "M12 20h9", key: "t2du7b" }],
        [
          "path",
          {
            d: "M16.376 3.622a1 1 0 0 1 3.002 3.002L7.368 18.635a2 2 0 0 1-.855.506l-2.872.838a.5.5 0 0 1-.62-.62l.838-2.872a2 2 0 0 1 .506-.854z",
            key: "1ykcvy"
          }
        ],
        ["path", { d: "m15 5 3 3", key: "1w25hb" }]
      ];
      var PencilLine = createLucideIcon("pencil-line", __iconNode$86);
      var __iconNode$85 = [
        [
          "path",
          {
            d: "m10 10-6.157 6.162a2 2 0 0 0-.5.833l-1.322 4.36a.5.5 0 0 0 .622.624l4.358-1.323a2 2 0 0 0 .83-.5L14 13.982",
            key: "bjo8r8"
          }
        ],
        ["path", { d: "m12.829 7.172 4.359-4.346a1 1 0 1 1 3.986 3.986l-4.353 4.353", key: "16h5ne" }],
        ["path", { d: "m15 5 4 4", key: "1mk7zo" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ];
      var PencilOff = createLucideIcon("pencil-off", __iconNode$85);
      var __iconNode$84 = [
        [
          "path",
          {
            d: "M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z",
            key: "1a8usu"
          }
        ],
        ["path", { d: "m15 5 4 4", key: "1mk7zo" }]
      ];
      var Pencil = createLucideIcon("pencil", __iconNode$84);
      var __iconNode$83 = [
        [
          "path",
          { d: "M13 7 8.7 2.7a2.41 2.41 0 0 0-3.4 0L2.7 5.3a2.41 2.41 0 0 0 0 3.4L7 13", key: "orapub" }
        ],
        ["path", { d: "m8 6 2-2", key: "115y1s" }],
        ["path", { d: "m18 16 2-2", key: "ee94s4" }],
        [
          "path",
          {
            d: "m17 11 4.3 4.3c.94.94.94 2.46 0 3.4l-2.6 2.6c-.94.94-2.46.94-3.4 0L11 17",
            key: "cfq27r"
          }
        ],
        [
          "path",
          {
            d: "M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z",
            key: "1a8usu"
          }
        ],
        ["path", { d: "m15 5 4 4", key: "1mk7zo" }]
      ];
      var PencilRuler = createLucideIcon("pencil-ruler", __iconNode$83);
      var __iconNode$82 = [
        [
          "path",
          {
            d: "M10.83 2.38a2 2 0 0 1 2.34 0l8 5.74a2 2 0 0 1 .73 2.25l-3.04 9.26a2 2 0 0 1-1.9 1.37H7.04a2 2 0 0 1-1.9-1.37L2.1 10.37a2 2 0 0 1 .73-2.25z",
            key: "2hea0t"
          }
        ]
      ];
      var Pentagon = createLucideIcon("pentagon", __iconNode$82);
      var __iconNode$81 = [
        ["line", { x1: "19", x2: "5", y1: "5", y2: "19", key: "1x9vlm" }],
        ["circle", { cx: "6.5", cy: "6.5", r: "2.5", key: "4mh3h7" }],
        ["circle", { cx: "17.5", cy: "17.5", r: "2.5", key: "1mdrzq" }]
      ];
      var Percent = createLucideIcon("percent", __iconNode$81);
      var __iconNode$80 = [
        ["circle", { cx: "12", cy: "5", r: "1", key: "gxeob9" }],
        ["path", { d: "m9 20 3-6 3 6", key: "se2kox" }],
        ["path", { d: "m6 8 6 2 6-2", key: "4o3us4" }],
        ["path", { d: "M12 10v4", key: "1kjpxc" }]
      ];
      var PersonStanding = createLucideIcon("person-standing", __iconNode$80);
      var __iconNode$7$ = [
        ["path", { d: "M20 11H4", key: "6ut86h" }],
        ["path", { d: "M20 7H4", key: "zbl0bi" }],
        ["path", { d: "M7 21V4a1 1 0 0 1 1-1h4a1 1 0 0 1 0 12H7", key: "1ana5r" }]
      ];
      var PhilippinePeso = createLucideIcon("philippine-peso", __iconNode$7$);
      var __iconNode$7_ = [
        [
          "path",
          {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
          }
        ],
        ["path", { d: "M14.05 2a9 9 0 0 1 8 7.94", key: "vmijpz" }],
        ["path", { d: "M14.05 6A5 5 0 0 1 18 10", key: "13nbpp" }]
      ];
      var PhoneCall = createLucideIcon("phone-call", __iconNode$7_);
      var __iconNode$7Z = [
        ["polyline", { points: "18 2 22 6 18 10", key: "6vjanh" }],
        ["line", { x1: "14", x2: "22", y1: "6", y2: "6", key: "1jsywh" }],
        [
          "path",
          {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
          }
        ]
      ];
      var PhoneForwarded = createLucideIcon("phone-forwarded", __iconNode$7Z);
      var __iconNode$7Y = [
        ["polyline", { points: "16 2 16 8 22 8", key: "1ygljm" }],
        ["line", { x1: "22", x2: "16", y1: "2", y2: "8", key: "1xzwqn" }],
        [
          "path",
          {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
          }
        ]
      ];
      var PhoneIncoming = createLucideIcon("phone-incoming", __iconNode$7Y);
      var __iconNode$7X = [
        ["line", { x1: "22", x2: "16", y1: "2", y2: "8", key: "1xzwqn" }],
        ["line", { x1: "16", x2: "22", y1: "2", y2: "8", key: "13zxdn" }],
        [
          "path",
          {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
          }
        ]
      ];
      var PhoneMissed = createLucideIcon("phone-missed", __iconNode$7X);
      var __iconNode$7W = [
        [
          "path",
          {
            d: "M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91",
            key: "z86iuo"
          }
        ],
        ["line", { x1: "22", x2: "2", y1: "2", y2: "22", key: "11kh81" }]
      ];
      var PhoneOff = createLucideIcon("phone-off", __iconNode$7W);
      var __iconNode$7V = [
        ["polyline", { points: "22 8 22 2 16 2", key: "1g204g" }],
        ["line", { x1: "16", x2: "22", y1: "8", y2: "2", key: "1ggias" }],
        [
          "path",
          {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
          }
        ]
      ];
      var PhoneOutgoing = createLucideIcon("phone-outgoing", __iconNode$7V);
      var __iconNode$7U = [
        [
          "path",
          {
            d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
            key: "foiqr5"
          }
        ]
      ];
      var Phone4 = createLucideIcon("phone", __iconNode$7U);
      var __iconNode$7T = [
        ["line", { x1: "9", x2: "9", y1: "4", y2: "20", key: "ovs5a5" }],
        ["path", { d: "M4 7c0-1.7 1.3-3 3-3h13", key: "10pag4" }],
        ["path", { d: "M18 20c-1.7 0-3-1.3-3-3V4", key: "1gaosr" }]
      ];
      var Pi = createLucideIcon("pi", __iconNode$7T);
      var __iconNode$7S = [
        [
          "path",
          {
            d: "M18.5 8c-1.4 0-2.6-.8-3.2-2A6.87 6.87 0 0 0 2 9v11a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-8.5C22 9.6 20.4 8 18.5 8",
            key: "lag0yf"
          }
        ],
        ["path", { d: "M2 14h20", key: "myj16y" }],
        ["path", { d: "M6 14v4", key: "9ng0ue" }],
        ["path", { d: "M10 14v4", key: "1v8uk5" }],
        ["path", { d: "M14 14v4", key: "1tqops" }],
        ["path", { d: "M18 14v4", key: "18uqwm" }]
      ];
      var Piano = createLucideIcon("piano", __iconNode$7S);
      var __iconNode$7R = [
        ["path", { d: "M14.531 12.469 6.619 20.38a1 1 0 1 1-3-3l7.912-7.912", key: "we99rg" }],
        [
          "path",
          {
            d: "M15.686 4.314A12.5 12.5 0 0 0 5.461 2.958 1 1 0 0 0 5.58 4.71a22 22 0 0 1 6.318 3.393",
            key: "1w6hck"
          }
        ],
        [
          "path",
          {
            d: "M17.7 3.7a1 1 0 0 0-1.4 0l-4.6 4.6a1 1 0 0 0 0 1.4l2.6 2.6a1 1 0 0 0 1.4 0l4.6-4.6a1 1 0 0 0 0-1.4z",
            key: "15hgfx"
          }
        ],
        [
          "path",
          {
            d: "M19.686 8.314a12.501 12.501 0 0 1 1.356 10.225 1 1 0 0 1-1.751-.119 22 22 0 0 0-3.393-6.319",
            key: "452b4h"
          }
        ]
      ];
      var Pickaxe = createLucideIcon("pickaxe", __iconNode$7R);
      var __iconNode$7Q = [
        ["path", { d: "M21 9V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10c0 1.1.9 2 2 2h4", key: "daa4of" }],
        ["rect", { width: "10", height: "7", x: "12", y: "13", rx: "2", key: "1nb8gs" }]
      ];
      var PictureInPicture2 = createLucideIcon("picture-in-picture-2", __iconNode$7Q);
      var __iconNode$7P = [
        ["path", { d: "M2 10h6V4", key: "zwrco" }],
        ["path", { d: "m2 4 6 6", key: "ug085t" }],
        ["path", { d: "M21 10V7a2 2 0 0 0-2-2h-7", key: "git5jr" }],
        ["path", { d: "M3 14v2a2 2 0 0 0 2 2h3", key: "1f7fh3" }],
        ["rect", { x: "12", y: "14", width: "10", height: "7", rx: "1", key: "1wjs3o" }]
      ];
      var PictureInPicture = createLucideIcon("picture-in-picture", __iconNode$7P);
      var __iconNode$7O = [
        [
          "path",
          {
            d: "M11 17h3v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3a3.16 3.16 0 0 0 2-2h1a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1h-1a5 5 0 0 0-2-4V3a4 4 0 0 0-3.2 1.6l-.3.4H11a6 6 0 0 0-6 6v1a5 5 0 0 0 2 4v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1z",
            key: "1piglc"
          }
        ],
        ["path", { d: "M16 10h.01", key: "1m94wz" }],
        ["path", { d: "M2 8v1a2 2 0 0 0 2 2h1", key: "1env43" }]
      ];
      var PiggyBank = createLucideIcon("piggy-bank", __iconNode$7O);
      var __iconNode$7N = [
        ["path", { d: "M14 3v11", key: "mlfb7b" }],
        ["path", { d: "M14 9h-3a3 3 0 0 1 0-6h9", key: "1ulc19" }],
        ["path", { d: "M18 3v11", key: "1phi0r" }],
        ["path", { d: "M22 18H2l4-4", key: "yt65j9" }],
        ["path", { d: "m6 22-4-4", key: "6jgyf5" }]
      ];
      var PilcrowLeft = createLucideIcon("pilcrow-left", __iconNode$7N);
      var __iconNode$7M = [
        ["path", { d: "M10 3v11", key: "o3l5kj" }],
        ["path", { d: "M10 9H7a1 1 0 0 1 0-6h8", key: "1wb1nc" }],
        ["path", { d: "M14 3v11", key: "mlfb7b" }],
        ["path", { d: "m18 14 4 4H2", key: "4r8io1" }],
        ["path", { d: "m22 18-4 4", key: "1hjjrd" }]
      ];
      var PilcrowRight = createLucideIcon("pilcrow-right", __iconNode$7M);
      var __iconNode$7L = [
        ["path", { d: "M13 4v16", key: "8vvj80" }],
        ["path", { d: "M17 4v16", key: "7dpous" }],
        ["path", { d: "M19 4H9.5a4.5 4.5 0 0 0 0 9H13", key: "sh4n9v" }]
      ];
      var Pilcrow = createLucideIcon("pilcrow", __iconNode$7L);
      var __iconNode$7K = [
        ["path", { d: "M18 11h-4a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h4", key: "17ldeb" }],
        ["path", { d: "M6 7v13a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V7", key: "nc37y6" }],
        ["rect", { width: "16", height: "5", x: "4", y: "2", rx: "1", key: "3jeezo" }]
      ];
      var PillBottle = createLucideIcon("pill-bottle", __iconNode$7K);
      var __iconNode$7J = [
        [
          "path",
          { d: "m10.5 20.5 10-10a4.95 4.95 0 1 0-7-7l-10 10a4.95 4.95 0 1 0 7 7Z", key: "wa1lgi" }
        ],
        ["path", { d: "m8.5 8.5 7 7", key: "rvfmvr" }]
      ];
      var Pill = createLucideIcon("pill", __iconNode$7J);
      var __iconNode$7I = [
        ["path", { d: "M12 17v5", key: "bb1du9" }],
        ["path", { d: "M15 9.34V7a1 1 0 0 1 1-1 2 2 0 0 0 0-4H7.89", key: "znwnzq" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        [
          "path",
          {
            d: "M9 9v1.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V16a1 1 0 0 0 1 1h11",
            key: "c9qhm2"
          }
        ]
      ];
      var PinOff = createLucideIcon("pin-off", __iconNode$7I);
      var __iconNode$7H = [
        ["path", { d: "M12 17v5", key: "bb1du9" }],
        [
          "path",
          {
            d: "M9 10.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V16a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V7a1 1 0 0 1 1-1 2 2 0 0 0 0-4H8a2 2 0 0 0 0 4 1 1 0 0 1 1 1z",
            key: "1nkz8b"
          }
        ]
      ];
      var Pin = createLucideIcon("pin", __iconNode$7H);
      var __iconNode$7G = [
        [
          "path",
          {
            d: "m12 9-8.414 8.414A2 2 0 0 0 3 18.828v1.344a2 2 0 0 1-.586 1.414A2 2 0 0 1 3.828 21h1.344a2 2 0 0 0 1.414-.586L15 12",
            key: "1y3wsu"
          }
        ],
        [
          "path",
          {
            d: "m18 9 .4.4a1 1 0 1 1-3 3l-3.8-3.8a1 1 0 1 1 3-3l.4.4 3.4-3.4a1 1 0 1 1 3 3z",
            key: "110lr1"
          }
        ],
        ["path", { d: "m2 22 .414-.414", key: "jhxm08" }]
      ];
      var Pipette = createLucideIcon("pipette", __iconNode$7G);
      var __iconNode$7F = [
        ["path", { d: "M2 22h20", key: "272qi7" }],
        [
          "path",
          {
            d: "M3.77 10.77 2 9l2-4.5 1.1.55c.55.28.9.84.9 1.45s.35 1.17.9 1.45L8 8.5l3-6 1.05.53a2 2 0 0 1 1.09 1.52l.72 5.4a2 2 0 0 0 1.09 1.52l4.4 2.2c.42.22.78.55 1.01.96l.6 1.03c.49.88-.06 1.98-1.06 2.1l-1.18.15c-.47.06-.95-.02-1.37-.24L4.29 11.15a2 2 0 0 1-.52-.38Z",
            key: "1ma21e"
          }
        ]
      ];
      var PlaneLanding = createLucideIcon("plane-landing", __iconNode$7F);
      var __iconNode$7E = [
        ["path", { d: "m12 14-1 1", key: "11onhr" }],
        ["path", { d: "m13.75 18.25-1.25 1.42", key: "1yisr3" }],
        ["path", { d: "M17.775 5.654a15.68 15.68 0 0 0-12.121 12.12", key: "1qtqk6" }],
        ["path", { d: "M18.8 9.3a1 1 0 0 0 2.1 7.7", key: "fbbbr2" }],
        [
          "path",
          {
            d: "M21.964 20.732a1 1 0 0 1-1.232 1.232l-18-5a1 1 0 0 1-.695-1.232A19.68 19.68 0 0 1 15.732 2.037a1 1 0 0 1 1.232.695z",
            key: "1hyfdd"
          }
        ]
      ];
      var Pizza = createLucideIcon("pizza", __iconNode$7E);
      var __iconNode$7D = [
        ["path", { d: "M2 22h20", key: "272qi7" }],
        [
          "path",
          {
            d: "M6.36 17.4 4 17l-2-4 1.1-.55a2 2 0 0 1 1.8 0l.17.1a2 2 0 0 0 1.8 0L8 12 5 6l.9-.45a2 2 0 0 1 2.09.2l4.02 3a2 2 0 0 0 2.1.2l4.19-2.06a2.41 2.41 0 0 1 1.73-.17L21 7a1.4 1.4 0 0 1 .87 1.99l-.38.76c-.23.46-.6.84-1.07 1.08L7.58 17.2a2 2 0 0 1-1.22.18Z",
            key: "fkigj9"
          }
        ]
      ];
      var PlaneTakeoff = createLucideIcon("plane-takeoff", __iconNode$7D);
      var __iconNode$7C = [
        [
          "path",
          {
            d: "M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z",
            key: "1v9wt8"
          }
        ]
      ];
      var Plane = createLucideIcon("plane", __iconNode$7C);
      var __iconNode$7B = [["polygon", { points: "6 3 20 12 6 21 6 3", key: "1oa8hb" }]];
      var Play5 = createLucideIcon("play", __iconNode$7B);
      var __iconNode$7A = [
        ["path", { d: "M9 2v6", key: "17ngun" }],
        ["path", { d: "M15 2v6", key: "s7yy2p" }],
        ["path", { d: "M12 17v5", key: "bb1du9" }],
        ["path", { d: "M5 8h14", key: "pcz4l3" }],
        ["path", { d: "M6 11V8h12v3a6 6 0 1 1-12 0Z", key: "wtfw2c" }]
      ];
      var Plug2 = createLucideIcon("plug-2", __iconNode$7A);
      var __iconNode$7z = [
        [
          "path",
          { d: "M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z", key: "goz73y" }
        ],
        ["path", { d: "m2 22 3-3", key: "19mgm9" }],
        ["path", { d: "M7.5 13.5 10 11", key: "7xgeeb" }],
        ["path", { d: "M10.5 16.5 13 14", key: "10btkg" }],
        ["path", { d: "m18 3-4 4h6l-4 4", key: "16psg9" }]
      ];
      var PlugZap = createLucideIcon("plug-zap", __iconNode$7z);
      var __iconNode$7y = [
        ["path", { d: "M5 12h14", key: "1ays0h" }],
        ["path", { d: "M12 5v14", key: "s699le" }]
      ];
      var Plus2 = createLucideIcon("plus", __iconNode$7y);
      var __iconNode$7x = [
        ["path", { d: "M12 22v-5", key: "1ega77" }],
        ["path", { d: "M9 8V2", key: "14iosj" }],
        ["path", { d: "M15 8V2", key: "18g5xt" }],
        ["path", { d: "M18 8v5a4 4 0 0 1-4 4h-4a4 4 0 0 1-4-4V8Z", key: "osxo6l" }]
      ];
      var Plug = createLucideIcon("plug", __iconNode$7x);
      var __iconNode$7w = [
        ["path", { d: "M3 2v1c0 1 2 1 2 2S3 6 3 7s2 1 2 2-2 1-2 2 2 1 2 2", key: "19w3oe" }],
        ["path", { d: "M18 6h.01", key: "1v4wsw" }],
        ["path", { d: "M6 18h.01", key: "uhywen" }],
        ["path", { d: "M20.83 8.83a4 4 0 0 0-5.66-5.66l-12 12a4 4 0 1 0 5.66 5.66Z", key: "6fykxj" }],
        ["path", { d: "M18 11.66V22a4 4 0 0 0 4-4V6", key: "1utzek" }]
      ];
      var PocketKnife = createLucideIcon("pocket-knife", __iconNode$7w);
      var __iconNode$7v = [
        [
          "path",
          {
            d: "M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z",
            key: "1mz881"
          }
        ],
        ["polyline", { points: "8 10 12 14 16 10", key: "w4mbv5" }]
      ];
      var Pocket = createLucideIcon("pocket", __iconNode$7v);
      var __iconNode$7u = [
        ["path", { d: "M16.85 18.58a9 9 0 1 0-9.7 0", key: "d71mpg" }],
        ["path", { d: "M8 14a5 5 0 1 1 8 0", key: "fc81rn" }],
        ["circle", { cx: "12", cy: "11", r: "1", key: "1gvufo" }],
        ["path", { d: "M13 17a1 1 0 1 0-2 0l.5 4.5a.5.5 0 1 0 1 0Z", key: "za5kbj" }]
      ];
      var Podcast = createLucideIcon("podcast", __iconNode$7u);
      var __iconNode$7t = [
        ["path", { d: "M22 14a8 8 0 0 1-8 8", key: "56vcr3" }],
        ["path", { d: "M18 11v-1a2 2 0 0 0-2-2a2 2 0 0 0-2 2", key: "1agjmk" }],
        ["path", { d: "M14 10V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1", key: "wdbh2u" }],
        ["path", { d: "M10 9.5V4a2 2 0 0 0-2-2a2 2 0 0 0-2 2v10", key: "1ibuk9" }],
        [
          "path",
          {
            d: "M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15",
            key: "g6ys72"
          }
        ]
      ];
      var Pointer = createLucideIcon("pointer", __iconNode$7t);
      var __iconNode$7s = [
        ["path", { d: "M10 4.5V4a2 2 0 0 0-2.41-1.957", key: "jsi14n" }],
        ["path", { d: "M13.9 8.4a2 2 0 0 0-1.26-1.295", key: "hirc7f" }],
        [
          "path",
          { d: "M21.7 16.2A8 8 0 0 0 22 14v-3a2 2 0 1 0-4 0v-1a2 2 0 0 0-3.63-1.158", key: "1jxb2e" }
        ],
        [
          "path",
          {
            d: "m7 15-1.8-1.8a2 2 0 0 0-2.79 2.86L6 19.7a7.74 7.74 0 0 0 6 2.3h2a8 8 0 0 0 5.657-2.343",
            key: "10r7hm"
          }
        ],
        ["path", { d: "M6 6v8", key: "tv5xkp" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ];
      var PointerOff = createLucideIcon("pointer-off", __iconNode$7s);
      var __iconNode$7r = [
        [
          "path",
          {
            d: "M18 8a2 2 0 0 0 0-4 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0 0 4",
            key: "10td1f"
          }
        ],
        ["path", { d: "M10 22 9 8", key: "yjptiv" }],
        ["path", { d: "m14 22 1-14", key: "8jwc8b" }],
        [
          "path",
          {
            d: "M20 8c.5 0 .9.4.8 1l-2.6 12c-.1.5-.7 1-1.2 1H7c-.6 0-1.1-.4-1.2-1L3.2 9c-.1-.6.3-1 .8-1Z",
            key: "1qo33t"
          }
        ]
      ];
      var Popcorn = createLucideIcon("popcorn", __iconNode$7r);
      var __iconNode$7q = [
        [
          "path",
          {
            d: "M18.6 14.4c.8-.8.8-2 0-2.8l-8.1-8.1a4.95 4.95 0 1 0-7.1 7.1l8.1 8.1c.9.7 2.1.7 2.9-.1Z",
            key: "1o68ps"
          }
        ],
        ["path", { d: "m22 22-5.5-5.5", key: "17o70y" }]
      ];
      var Popsicle = createLucideIcon("popsicle", __iconNode$7q);
      var __iconNode$7p = [
        ["path", { d: "M18.36 6.64A9 9 0 0 1 20.77 15", key: "dxknvb" }],
        ["path", { d: "M6.16 6.16a9 9 0 1 0 12.68 12.68", key: "1x7qb5" }],
        ["path", { d: "M12 2v4", key: "3427ic" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ];
      var PowerOff = createLucideIcon("power-off", __iconNode$7p);
      var __iconNode$7o = [
        ["path", { d: "M18 7c0-5.333-8-5.333-8 0", key: "1prm2n" }],
        ["path", { d: "M10 7v14", key: "18tmcs" }],
        ["path", { d: "M6 21h12", key: "4dkmi1" }],
        ["path", { d: "M6 13h10", key: "ybwr4a" }]
      ];
      var PoundSterling = createLucideIcon("pound-sterling", __iconNode$7o);
      var __iconNode$7n = [
        ["path", { d: "M12 2v10", key: "mnfbl" }],
        ["path", { d: "M18.4 6.6a9 9 0 1 1-12.77.04", key: "obofu9" }]
      ];
      var Power = createLucideIcon("power", __iconNode$7n);
      var __iconNode$7m = [
        ["path", { d: "M2 3h20", key: "91anmk" }],
        ["path", { d: "M21 3v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V3", key: "2k9sn8" }],
        ["path", { d: "m7 21 5-5 5 5", key: "bip4we" }]
      ];
      var Presentation = createLucideIcon("presentation", __iconNode$7m);
      var __iconNode$7l = [
        ["path", { d: "M13.5 22H7a1 1 0 0 1-1-1v-6a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v.5", key: "qeb09x" }],
        ["path", { d: "m16 19 2 2 4-4", key: "1b14m6" }],
        ["path", { d: "M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v2", key: "1md90i" }],
        ["path", { d: "M6 9V3a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6", key: "1itne7" }]
      ];
      var PrinterCheck = createLucideIcon("printer-check", __iconNode$7l);
      var __iconNode$7k = [
        [
          "path",
          {
            d: "M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2",
            key: "143wyd"
          }
        ],
        ["path", { d: "M6 9V3a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6", key: "1itne7" }],
        ["rect", { x: "6", y: "14", width: "12", height: "8", rx: "1", key: "1ue0tg" }]
      ];
      var Printer = createLucideIcon("printer", __iconNode$7k);
      var __iconNode$7j = [
        ["path", { d: "M5 7 3 5", key: "1yys58" }],
        ["path", { d: "M9 6V3", key: "1ptz9u" }],
        ["path", { d: "m13 7 2-2", key: "1w3vmq" }],
        ["circle", { cx: "9", cy: "13", r: "3", key: "1mma13" }],
        [
          "path",
          {
            d: "M11.83 12H20a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h2.17",
            key: "2frwzc"
          }
        ],
        ["path", { d: "M16 16h2", key: "dnq2od" }]
      ];
      var Projector = createLucideIcon("projector", __iconNode$7j);
      var __iconNode$7i = [
        ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
        ["path", { d: "M12 9v11", key: "1fnkrn" }],
        ["path", { d: "M2 9h13a2 2 0 0 1 2 2v9", key: "11z3ex" }]
      ];
      var Proportions = createLucideIcon("proportions", __iconNode$7i);
      var __iconNode$7h = [
        [
          "path",
          {
            d: "M15.39 4.39a1 1 0 0 0 1.68-.474 2.5 2.5 0 1 1 3.014 3.015 1 1 0 0 0-.474 1.68l1.683 1.682a2.414 2.414 0 0 1 0 3.414L19.61 15.39a1 1 0 0 1-1.68-.474 2.5 2.5 0 1 0-3.014 3.015 1 1 0 0 1 .474 1.68l-1.683 1.682a2.414 2.414 0 0 1-3.414 0L8.61 19.61a1 1 0 0 0-1.68.474 2.5 2.5 0 1 1-3.014-3.015 1 1 0 0 0 .474-1.68l-1.683-1.682a2.414 2.414 0 0 1 0-3.414L4.39 8.61a1 1 0 0 1 1.68.474 2.5 2.5 0 1 0 3.014-3.015 1 1 0 0 1-.474-1.68l1.683-1.682a2.414 2.414 0 0 1 3.414 0z",
            key: "w46dr5"
          }
        ]
      ];
      var Puzzle = createLucideIcon("puzzle", __iconNode$7h);
      var __iconNode$7g = [
        [
          "path",
          {
            d: "M2.5 16.88a1 1 0 0 1-.32-1.43l9-13.02a1 1 0 0 1 1.64 0l9 13.01a1 1 0 0 1-.32 1.44l-8.51 4.86a2 2 0 0 1-1.98 0Z",
            key: "aenxs0"
          }
        ],
        ["path", { d: "M12 2v20", key: "t6zp3m" }]
      ];
      var Pyramid = createLucideIcon("pyramid", __iconNode$7g);
      var __iconNode$7f = [
        ["rect", { width: "5", height: "5", x: "3", y: "3", rx: "1", key: "1tu5fj" }],
        ["rect", { width: "5", height: "5", x: "16", y: "3", rx: "1", key: "1v8r4q" }],
        ["rect", { width: "5", height: "5", x: "3", y: "16", rx: "1", key: "1x03jg" }],
        ["path", { d: "M21 16h-3a2 2 0 0 0-2 2v3", key: "177gqh" }],
        ["path", { d: "M21 21v.01", key: "ents32" }],
        ["path", { d: "M12 7v3a2 2 0 0 1-2 2H7", key: "8crl2c" }],
        ["path", { d: "M3 12h.01", key: "nlz23k" }],
        ["path", { d: "M12 3h.01", key: "n36tog" }],
        ["path", { d: "M12 16v.01", key: "133mhm" }],
        ["path", { d: "M16 12h1", key: "1slzba" }],
        ["path", { d: "M21 12v.01", key: "1lwtk9" }],
        ["path", { d: "M12 21v-1", key: "1880an" }]
      ];
      var QrCode = createLucideIcon("qr-code", __iconNode$7f);
      var __iconNode$7e = [
        [
          "path",
          {
            d: "M16 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2 1 1 0 0 1 1 1v1a2 2 0 0 1-2 2 1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 6 6 0 0 0 6-6V5a2 2 0 0 0-2-2z",
            key: "rib7q0"
          }
        ],
        [
          "path",
          {
            d: "M5 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2 1 1 0 0 1 1 1v1a2 2 0 0 1-2 2 1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 6 6 0 0 0 6-6V5a2 2 0 0 0-2-2z",
            key: "1ymkrd"
          }
        ]
      ];
      var Quote2 = createLucideIcon("quote", __iconNode$7e);
      var __iconNode$7d = [
        ["path", { d: "M13 16a3 3 0 0 1 2.24 5", key: "1epib5" }],
        ["path", { d: "M18 12h.01", key: "yjnet6" }],
        [
          "path",
          {
            d: "M18 21h-8a4 4 0 0 1-4-4 7 7 0 0 1 7-7h.2L9.6 6.4a1 1 0 1 1 2.8-2.8L15.8 7h.2c3.3 0 6 2.7 6 6v1a2 2 0 0 1-2 2h-1a3 3 0 0 0-3 3",
            key: "ue9ozu"
          }
        ],
        ["path", { d: "M20 8.54V4a2 2 0 1 0-4 0v3", key: "49iql8" }],
        ["path", { d: "M7.612 12.524a3 3 0 1 0-1.6 4.3", key: "1e33i0" }]
      ];
      var Rabbit = createLucideIcon("rabbit", __iconNode$7d);
      var __iconNode$7c = [
        ["path", { d: "M19.07 4.93A10 10 0 0 0 6.99 3.34", key: "z3du51" }],
        ["path", { d: "M4 6h.01", key: "oypzma" }],
        ["path", { d: "M2.29 9.62A10 10 0 1 0 21.31 8.35", key: "qzzz0" }],
        ["path", { d: "M16.24 7.76A6 6 0 1 0 8.23 16.67", key: "1yjesh" }],
        ["path", { d: "M12 18h.01", key: "mhygvu" }],
        ["path", { d: "M17.99 11.66A6 6 0 0 1 15.77 16.67", key: "1u2y91" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
        ["path", { d: "m13.41 10.59 5.66-5.66", key: "mhq4k0" }]
      ];
      var Radar = createLucideIcon("radar", __iconNode$7c);
      var __iconNode$7b = [
        ["path", { d: "M12 12h.01", key: "1mp3jc" }],
        [
          "path",
          {
            d: "M7.5 4.2c-.3-.5-.9-.7-1.3-.4C3.9 5.5 2.3 8.1 2 11c-.1.5.4 1 1 1h5c0-1.5.8-2.8 2-3.4-1.1-1.9-2-3.5-2.5-4.4z",
            key: "wy49g3"
          }
        ],
        [
          "path",
          {
            d: "M21 12c.6 0 1-.4 1-1-.3-2.9-1.8-5.5-4.1-7.1-.4-.3-1.1-.2-1.3.3-.6.9-1.5 2.5-2.6 4.3 1.2.7 2 2 2 3.5h5z",
            key: "vklnvr"
          }
        ],
        [
          "path",
          {
            d: "M7.5 19.8c-.3.5-.1 1.1.4 1.3 2.6 1.2 5.6 1.2 8.2 0 .5-.2.7-.8.4-1.3-.5-.9-1.4-2.5-2.5-4.3-1.2.7-2.8.7-4 0-1.1 1.8-2 3.4-2.5 4.3z",
            key: "wkdf1o"
          }
        ]
      ];
      var Radiation = createLucideIcon("radiation", __iconNode$7b);
      var __iconNode$7a = [
        [
          "path",
          {
            d: "M3 12h3.28a1 1 0 0 1 .948.684l2.298 7.934a.5.5 0 0 0 .96-.044L13.82 4.771A1 1 0 0 1 14.792 4H21",
            key: "1mqj8i"
          }
        ]
      ];
      var Radical = createLucideIcon("radical", __iconNode$7a);
      var __iconNode$79 = [
        ["path", { d: "M5 16v2", key: "g5qcv5" }],
        ["path", { d: "M19 16v2", key: "1gbaio" }],
        ["rect", { width: "20", height: "8", x: "2", y: "8", rx: "2", key: "vjsjur" }],
        ["path", { d: "M18 12h.01", key: "yjnet6" }]
      ];
      var RadioReceiver = createLucideIcon("radio-receiver", __iconNode$79);
      var __iconNode$78 = [
        ["path", { d: "M4.9 16.1C1 12.2 1 5.8 4.9 1.9", key: "s0qx1y" }],
        ["path", { d: "M7.8 4.7a6.14 6.14 0 0 0-.8 7.5", key: "1idnkw" }],
        ["circle", { cx: "12", cy: "9", r: "2", key: "1092wv" }],
        ["path", { d: "M16.2 4.8c2 2 2.26 5.11.8 7.47", key: "ojru2q" }],
        ["path", { d: "M19.1 1.9a9.96 9.96 0 0 1 0 14.1", key: "rhi7fg" }],
        ["path", { d: "M9.5 18h5", key: "mfy3pd" }],
        ["path", { d: "m8 22 4-11 4 11", key: "25yftu" }]
      ];
      var RadioTower = createLucideIcon("radio-tower", __iconNode$78);
      var __iconNode$77 = [
        ["path", { d: "M4.9 19.1C1 15.2 1 8.8 4.9 4.9", key: "1vaf9d" }],
        ["path", { d: "M7.8 16.2c-2.3-2.3-2.3-6.1 0-8.5", key: "u1ii0m" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
        ["path", { d: "M16.2 7.8c2.3 2.3 2.3 6.1 0 8.5", key: "1j5fej" }],
        ["path", { d: "M19.1 4.9C23 8.8 23 15.1 19.1 19", key: "10b0cb" }]
      ];
      var Radio = createLucideIcon("radio", __iconNode$77);
      var __iconNode$76 = [
        ["path", { d: "M20.34 17.52a10 10 0 1 0-2.82 2.82", key: "fydyku" }],
        ["circle", { cx: "19", cy: "19", r: "2", key: "17f5cg" }],
        ["path", { d: "m13.41 13.41 4.18 4.18", key: "1gqbwc" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
      ];
      var Radius = createLucideIcon("radius", __iconNode$76);
      var __iconNode$75 = [
        ["path", { d: "M5 15h14", key: "m0yey3" }],
        ["path", { d: "M5 9h14", key: "7tsvo6" }],
        ["path", { d: "m14 20-5-5 6-6-5-5", key: "1jo42i" }]
      ];
      var RailSymbol = createLucideIcon("rail-symbol", __iconNode$75);
      var __iconNode$74 = [
        ["path", { d: "M22 17a10 10 0 0 0-20 0", key: "ozegv" }],
        ["path", { d: "M6 17a6 6 0 0 1 12 0", key: "5giftw" }],
        ["path", { d: "M10 17a2 2 0 0 1 4 0", key: "gnsikk" }]
      ];
      var Rainbow = createLucideIcon("rainbow", __iconNode$74);
      var __iconNode$73 = [
        ["path", { d: "M13 22H4a2 2 0 0 1 0-4h12", key: "bt3f23" }],
        ["path", { d: "M13.236 18a3 3 0 0 0-2.2-5", key: "1tbvmo" }],
        ["path", { d: "M16 9h.01", key: "1bdo4e" }],
        [
          "path",
          {
            d: "M16.82 3.94a3 3 0 1 1 3.237 4.868l1.815 2.587a1.5 1.5 0 0 1-1.5 2.1l-2.872-.453a3 3 0 0 0-3.5 3",
            key: "9ch7kn"
          }
        ],
        ["path", { d: "M17 4.988a3 3 0 1 0-5.2 2.052A7 7 0 0 0 4 14.015 4 4 0 0 0 8 18", key: "3s7e9i" }]
      ];
      var Rat = createLucideIcon("rat", __iconNode$73);
      var __iconNode$72 = [
        ["rect", { width: "12", height: "20", x: "6", y: "2", rx: "2", key: "1oxtiu" }],
        ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "2", key: "9lu3g6" }]
      ];
      var Ratio = createLucideIcon("ratio", __iconNode$72);
      var __iconNode$71 = [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M8 12h5", key: "1g6qi8" }],
        ["path", { d: "M16 9.5a4 4 0 1 0 0 5.2", key: "b2px4r" }]
      ];
      var ReceiptEuro = createLucideIcon("receipt-euro", __iconNode$71);
      var __iconNode$70 = [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M12 6.5v11", key: "ecfhkf" }],
        ["path", { d: "M15 9.4a4 4 0 1 0 0 5.2", key: "1makmb" }]
      ];
      var ReceiptCent = createLucideIcon("receipt-cent", __iconNode$70);
      var __iconNode$6$ = [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M8 7h8", key: "i86dvs" }],
        ["path", { d: "M12 17.5 8 15h1a4 4 0 0 0 0-8", key: "grpkl4" }],
        ["path", { d: "M8 11h8", key: "vwpz6n" }]
      ];
      var ReceiptIndianRupee = createLucideIcon("receipt-indian-rupee", __iconNode$6$);
      var __iconNode$6_ = [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "m12 10 3-3", key: "1mc12w" }],
        ["path", { d: "m9 7 3 3v7.5", key: "39i0xv" }],
        ["path", { d: "M9 11h6", key: "1fldmi" }],
        ["path", { d: "M9 15h6", key: "cctwl0" }]
      ];
      var ReceiptJapaneseYen = createLucideIcon("receipt-japanese-yen", __iconNode$6_);
      var __iconNode$6Z = [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M8 13h5", key: "1k9z8w" }],
        ["path", { d: "M10 17V9.5a2.5 2.5 0 0 1 5 0", key: "1dzgp0" }],
        ["path", { d: "M8 17h7", key: "8mjdqu" }]
      ];
      var ReceiptPoundSterling = createLucideIcon("receipt-pound-sterling", __iconNode$6Z);
      var __iconNode$6Y = [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M8 15h5", key: "vxg57a" }],
        ["path", { d: "M8 11h5a2 2 0 1 0 0-4h-3v10", key: "1usi5u" }]
      ];
      var ReceiptRussianRuble = createLucideIcon("receipt-russian-ruble", __iconNode$6Y);
      var __iconNode$6X = [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M10 17V7h5", key: "k7jq18" }],
        ["path", { d: "M10 11h4", key: "1i0mka" }],
        ["path", { d: "M8 15h5", key: "vxg57a" }]
      ];
      var ReceiptSwissFranc = createLucideIcon("receipt-swiss-franc", __iconNode$6X);
      var __iconNode$6W = [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M14 8H8", key: "1l3xfs" }],
        ["path", { d: "M16 12H8", key: "1fr5h0" }],
        ["path", { d: "M13 16H8", key: "wsln4y" }]
      ];
      var ReceiptText = createLucideIcon("receipt-text", __iconNode$6W);
      var __iconNode$6V = [
        [
          "path",
          { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
        ],
        ["path", { d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8", key: "1h4pet" }],
        ["path", { d: "M12 17.5v-11", key: "1jc1ny" }]
      ];
      var Receipt = createLucideIcon("receipt", __iconNode$6V);
      var __iconNode$6U = [
        ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "2", key: "9lu3g6" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }],
        ["path", { d: "M17 12h.01", key: "1m0b6t" }],
        ["path", { d: "M7 12h.01", key: "eqddd0" }]
      ];
      var RectangleEllipsis = createLucideIcon("rectangle-ellipsis", __iconNode$6U);
      var __iconNode$6T = [
        [
          "path",
          {
            d: "M20 6a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-4a2 2 0 0 1-1.6-.8l-1.6-2.13a1 1 0 0 0-1.6 0L9.6 17.2A2 2 0 0 1 8 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2z",
            key: "d5y1f"
          }
        ]
      ];
      var RectangleGoggles = createLucideIcon("rectangle-goggles", __iconNode$6T);
      var __iconNode$6S = [
        ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "2", key: "9lu3g6" }]
      ];
      var RectangleHorizontal = createLucideIcon("rectangle-horizontal", __iconNode$6S);
      var __iconNode$6R = [
        ["rect", { width: "12", height: "20", x: "6", y: "2", rx: "2", key: "1oxtiu" }]
      ];
      var RectangleVertical = createLucideIcon("rectangle-vertical", __iconNode$6R);
      var __iconNode$6Q = [
        [
          "path",
          {
            d: "M7 19H4.815a1.83 1.83 0 0 1-1.57-.881 1.785 1.785 0 0 1-.004-1.784L7.196 9.5",
            key: "x6z5xu"
          }
        ],
        [
          "path",
          {
            d: "M11 19h8.203a1.83 1.83 0 0 0 1.556-.89 1.784 1.784 0 0 0 0-1.775l-1.226-2.12",
            key: "1x4zh5"
          }
        ],
        ["path", { d: "m14 16-3 3 3 3", key: "f6jyew" }],
        ["path", { d: "M8.293 13.596 7.196 9.5 3.1 10.598", key: "wf1obh" }],
        [
          "path",
          {
            d: "m9.344 5.811 1.093-1.892A1.83 1.83 0 0 1 11.985 3a1.784 1.784 0 0 1 1.546.888l3.943 6.843",
            key: "9tzpgr"
          }
        ],
        ["path", { d: "m13.378 9.633 4.096 1.098 1.097-4.096", key: "1oe83g" }]
      ];
      var Recycle = createLucideIcon("recycle", __iconNode$6Q);
      var __iconNode$6P = [
        ["path", { d: "m15 14 5-5-5-5", key: "12vg1m" }],
        ["path", { d: "M20 9H9.5A5.5 5.5 0 0 0 4 14.5A5.5 5.5 0 0 0 9.5 20H13", key: "6uklza" }]
      ];
      var Redo2 = createLucideIcon("redo-2", __iconNode$6P);
      var __iconNode$6O = [
        ["circle", { cx: "12", cy: "17", r: "1", key: "1ixnty" }],
        ["path", { d: "M21 7v6h-6", key: "3ptur4" }],
        ["path", { d: "M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7", key: "1kgawr" }]
      ];
      var RedoDot = createLucideIcon("redo-dot", __iconNode$6O);
      var __iconNode$6N = [
        ["path", { d: "M3 2v6h6", key: "18ldww" }],
        ["path", { d: "M21 12A9 9 0 0 0 6 5.3L3 8", key: "1pbrqz" }],
        ["path", { d: "M21 22v-6h-6", key: "usdfbe" }],
        ["path", { d: "M3 12a9 9 0 0 0 15 6.7l3-2.7", key: "1hosoe" }],
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
      ];
      var RefreshCcwDot = createLucideIcon("refresh-ccw-dot", __iconNode$6N);
      var __iconNode$6M = [
        ["path", { d: "M21 7v6h-6", key: "3ptur4" }],
        ["path", { d: "M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7", key: "1kgawr" }]
      ];
      var Redo = createLucideIcon("redo", __iconNode$6M);
      var __iconNode$6L = [
        ["path", { d: "M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8", key: "14sxne" }],
        ["path", { d: "M3 3v5h5", key: "1xhq8a" }],
        ["path", { d: "M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16", key: "1hlbsb" }],
        ["path", { d: "M16 16h5v5", key: "ccwih5" }]
      ];
      var RefreshCcw = createLucideIcon("refresh-ccw", __iconNode$6L);
      var __iconNode$6K = [
        ["path", { d: "M21 8L18.74 5.74A9.75 9.75 0 0 0 12 3C11 3 10.03 3.16 9.13 3.47", key: "1krf6h" }],
        ["path", { d: "M8 16H3v5", key: "1cv678" }],
        ["path", { d: "M3 12C3 9.51 4 7.26 5.64 5.64", key: "ruvoct" }],
        ["path", { d: "m3 16 2.26 2.26A9.75 9.75 0 0 0 12 21c2.49 0 4.74-1 6.36-2.64", key: "19q130" }],
        ["path", { d: "M21 12c0 1-.16 1.97-.47 2.87", key: "4w8emr" }],
        ["path", { d: "M21 3v5h-5", key: "1q7to0" }],
        ["path", { d: "M22 22 2 2", key: "1r8tn9" }]
      ];
      var RefreshCwOff = createLucideIcon("refresh-cw-off", __iconNode$6K);
      var __iconNode$6J = [
        ["path", { d: "M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8", key: "v9h5vc" }],
        ["path", { d: "M21 3v5h-5", key: "1q7to0" }],
        ["path", { d: "M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16", key: "3uifl3" }],
        ["path", { d: "M8 16H3v5", key: "1cv678" }]
      ];
      var RefreshCw = createLucideIcon("refresh-cw", __iconNode$6J);
      var __iconNode$6I = [
        [
          "path",
          { d: "M5 6a4 4 0 0 1 4-4h6a4 4 0 0 1 4 4v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6Z", key: "fpq118" }
        ],
        ["path", { d: "M5 10h14", key: "elsbfy" }],
        ["path", { d: "M15 7v6", key: "1nx30x" }]
      ];
      var Refrigerator = createLucideIcon("refrigerator", __iconNode$6I);
      var __iconNode$6H = [
        ["path", { d: "M4 7V4h16v3", key: "9msm58" }],
        ["path", { d: "M5 20h6", key: "1h6pxn" }],
        ["path", { d: "M13 4 8 20", key: "kqq6aj" }],
        ["path", { d: "m15 15 5 5", key: "me55sn" }],
        ["path", { d: "m20 15-5 5", key: "11p7ol" }]
      ];
      var RemoveFormatting = createLucideIcon("remove-formatting", __iconNode$6H);
      var __iconNode$6G = [
        ["path", { d: "M17 3v10", key: "15fgeh" }],
        ["path", { d: "m12.67 5.5 8.66 5", key: "1gpheq" }],
        ["path", { d: "m12.67 10.5 8.66-5", key: "1dkfa6" }],
        [
          "path",
          { d: "M9 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2z", key: "swwfx4" }
        ]
      ];
      var Regex = createLucideIcon("regex", __iconNode$6G);
      var __iconNode$6F = [
        ["path", { d: "m17 2 4 4-4 4", key: "nntrym" }],
        ["path", { d: "M3 11v-1a4 4 0 0 1 4-4h14", key: "84bu3i" }],
        ["path", { d: "m7 22-4-4 4-4", key: "1wqhfi" }],
        ["path", { d: "M21 13v1a4 4 0 0 1-4 4H3", key: "1rx37r" }],
        ["path", { d: "M11 10h1v4", key: "70cz1p" }]
      ];
      var Repeat1 = createLucideIcon("repeat-1", __iconNode$6F);
      var __iconNode$6E = [
        ["path", { d: "m2 9 3-3 3 3", key: "1ltn5i" }],
        ["path", { d: "M13 18H7a2 2 0 0 1-2-2V6", key: "1r6tfw" }],
        ["path", { d: "m22 15-3 3-3-3", key: "4rnwn2" }],
        ["path", { d: "M11 6h6a2 2 0 0 1 2 2v10", key: "2f72bc" }]
      ];
      var Repeat2 = createLucideIcon("repeat-2", __iconNode$6E);
      var __iconNode$6D = [
        ["path", { d: "m17 2 4 4-4 4", key: "nntrym" }],
        ["path", { d: "M3 11v-1a4 4 0 0 1 4-4h14", key: "84bu3i" }],
        ["path", { d: "m7 22-4-4 4-4", key: "1wqhfi" }],
        ["path", { d: "M21 13v1a4 4 0 0 1-4 4H3", key: "1rx37r" }]
      ];
      var Repeat = createLucideIcon("repeat", __iconNode$6D);
      var __iconNode$6C = [
        ["path", { d: "M14 14a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2", key: "1yyzbs" }],
        ["path", { d: "M14 4a2 2 0 0 1 2-2", key: "1w2hp7" }],
        ["path", { d: "M16 10a2 2 0 0 1-2-2", key: "shjach" }],
        ["path", { d: "M20 14a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2", key: "zfj4xr" }],
        ["path", { d: "M20 2a2 2 0 0 1 2 2", key: "188mtx" }],
        ["path", { d: "M22 8a2 2 0 0 1-2 2", key: "ddf4tu" }],
        ["path", { d: "m3 7 3 3 3-3", key: "x25e72" }],
        ["path", { d: "M6 10V5a 3 3 0 0 1 3-3h1", key: "1ageje" }],
        ["rect", { x: "2", y: "14", width: "8", height: "8", rx: "2", key: "4rksxw" }]
      ];
      var ReplaceAll = createLucideIcon("replace-all", __iconNode$6C);
      var __iconNode$6B = [
        ["path", { d: "M14 4a2 2 0 0 1 2-2", key: "1w2hp7" }],
        ["path", { d: "M16 10a2 2 0 0 1-2-2", key: "shjach" }],
        ["path", { d: "M20 2a2 2 0 0 1 2 2", key: "188mtx" }],
        ["path", { d: "M22 8a2 2 0 0 1-2 2", key: "ddf4tu" }],
        ["path", { d: "m3 7 3 3 3-3", key: "x25e72" }],
        ["path", { d: "M6 10V5a3 3 0 0 1 3-3h1", key: "3y3t5z" }],
        ["rect", { x: "2", y: "14", width: "8", height: "8", rx: "2", key: "4rksxw" }]
      ];
      var Replace = createLucideIcon("replace", __iconNode$6B);
      var __iconNode$6A = [
        ["polyline", { points: "7 17 2 12 7 7", key: "t83bqg" }],
        ["polyline", { points: "12 17 7 12 12 7", key: "1g4ajm" }],
        ["path", { d: "M22 18v-2a4 4 0 0 0-4-4H7", key: "1fcyog" }]
      ];
      var ReplyAll = createLucideIcon("reply-all", __iconNode$6A);
      var __iconNode$6z = [
        ["polyline", { points: "9 17 4 12 9 7", key: "hvgpf2" }],
        ["path", { d: "M20 18v-2a4 4 0 0 0-4-4H4", key: "5vmcpk" }]
      ];
      var Reply = createLucideIcon("reply", __iconNode$6z);
      var __iconNode$6y = [
        ["polygon", { points: "11 19 2 12 11 5 11 19", key: "14yba5" }],
        ["polygon", { points: "22 19 13 12 22 5 22 19", key: "1pi1cj" }]
      ];
      var Rewind = createLucideIcon("rewind", __iconNode$6y);
      var __iconNode$6x = [
        [
          "path",
          { d: "M12 11.22C11 9.997 10 9 10 8a2 2 0 0 1 4 0c0 1-.998 2.002-2.01 3.22", key: "1rnhq3" }
        ],
        ["path", { d: "m12 18 2.57-3.5", key: "116vt7" }],
        ["path", { d: "M6.243 9.016a7 7 0 0 1 11.507-.009", key: "10dq0b" }],
        ["path", { d: "M9.35 14.53 12 11.22", key: "tdsyp2" }],
        [
          "path",
          {
            d: "M9.35 14.53C7.728 12.246 6 10.221 6 7a6 5 0 0 1 12 0c-.005 3.22-1.778 5.235-3.43 7.5l3.557 4.527a1 1 0 0 1-.203 1.43l-1.894 1.36a1 1 0 0 1-1.384-.215L12 18l-2.679 3.593a1 1 0 0 1-1.39.213l-1.865-1.353a1 1 0 0 1-.203-1.422z",
            key: "nmifey"
          }
        ]
      ];
      var Ribbon = createLucideIcon("ribbon", __iconNode$6x);
      var __iconNode$6w = [
        ["polyline", { points: "3.5 2 6.5 12.5 18 12.5", key: "y3iy52" }],
        ["line", { x1: "9.5", x2: "5.5", y1: "12.5", y2: "20", key: "19vg5i" }],
        ["line", { x1: "15", x2: "18.5", y1: "12.5", y2: "20", key: "1inpmv" }],
        ["path", { d: "M2.75 18a13 13 0 0 0 18.5 0", key: "1nquas" }]
      ];
      var RockingChair = createLucideIcon("rocking-chair", __iconNode$6w);
      var __iconNode$6v = [
        [
          "path",
          {
            d: "M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z",
            key: "m3kijz"
          }
        ],
        [
          "path",
          {
            d: "m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z",
            key: "1fmvmk"
          }
        ],
        ["path", { d: "M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0", key: "1f8sc4" }],
        ["path", { d: "M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5", key: "qeys4" }]
      ];
      var Rocket = createLucideIcon("rocket", __iconNode$6v);
      var __iconNode$6u = [
        ["path", { d: "M6 19V5", key: "1r845m" }],
        ["path", { d: "M10 19V6.8", key: "9j2tfs" }],
        ["path", { d: "M14 19v-7.8", key: "10s8qv" }],
        ["path", { d: "M18 5v4", key: "1tajlv" }],
        ["path", { d: "M18 19v-6", key: "ielfq3" }],
        ["path", { d: "M22 19V9", key: "158nzp" }],
        ["path", { d: "M2 19V9a4 4 0 0 1 4-4c2 0 4 1.33 6 4s4 4 6 4a4 4 0 1 0-3-6.65", key: "1930oh" }]
      ];
      var RollerCoaster = createLucideIcon("roller-coaster", __iconNode$6u);
      var __iconNode$6t = [
        [
          "path",
          {
            d: "M16.466 7.5C15.643 4.237 13.952 2 12 2 9.239 2 7 6.477 7 12s2.239 10 5 10c.342 0 .677-.069 1-.2",
            key: "10n0gc"
          }
        ],
        ["path", { d: "m15.194 13.707 3.814 1.86-1.86 3.814", key: "16shm9" }],
        [
          "path",
          {
            d: "M19 15.57c-1.804.885-4.274 1.43-7 1.43-5.523 0-10-2.239-10-5s4.477-5 10-5c4.838 0 8.873 1.718 9.8 4",
            key: "1lxi77"
          }
        ]
      ];
      var Rotate3d = createLucideIcon("rotate-3d", __iconNode$6t);
      var __iconNode$6s = [
        ["path", { d: "m14.5 9.5 1 1", key: "159eiq" }],
        ["path", { d: "m15.5 8.5-4 4", key: "iirg3q" }],
        ["path", { d: "M3 12a9 9 0 1 0 9-9 9.74 9.74 0 0 0-6.74 2.74L3 8", key: "g2jlw" }],
        ["path", { d: "M3 3v5h5", key: "1xhq8a" }],
        ["circle", { cx: "10", cy: "14", r: "2", key: "1239so" }]
      ];
      var RotateCcwKey = createLucideIcon("rotate-ccw-key", __iconNode$6s);
      var __iconNode$6r = [
        ["path", { d: "M20 9V7a2 2 0 0 0-2-2h-6", key: "19z8uc" }],
        ["path", { d: "m15 2-3 3 3 3", key: "177bxs" }],
        ["path", { d: "M20 13v5a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2", key: "d36hnl" }]
      ];
      var RotateCcwSquare = createLucideIcon("rotate-ccw-square", __iconNode$6r);
      var __iconNode$6q = [
        ["path", { d: "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8", key: "1357e3" }],
        ["path", { d: "M3 3v5h5", key: "1xhq8a" }]
      ];
      var RotateCcw = createLucideIcon("rotate-ccw", __iconNode$6q);
      var __iconNode$6p = [
        ["path", { d: "M12 5H6a2 2 0 0 0-2 2v3", key: "l96uqu" }],
        ["path", { d: "m9 8 3-3-3-3", key: "1gzgc3" }],
        ["path", { d: "M4 14v4a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2", key: "1w2k5h" }]
      ];
      var RotateCwSquare = createLucideIcon("rotate-cw-square", __iconNode$6p);
      var __iconNode$6o = [
        ["path", { d: "M21 12a9 9 0 1 1-9-9c2.52 0 4.93 1 6.74 2.74L21 8", key: "1p45f6" }],
        ["path", { d: "M21 3v5h-5", key: "1q7to0" }]
      ];
      var RotateCw = createLucideIcon("rotate-cw", __iconNode$6o);
      var __iconNode$6n = [
        ["circle", { cx: "6", cy: "19", r: "3", key: "1kj8tv" }],
        ["path", { d: "M9 19h8.5c.4 0 .9-.1 1.3-.2", key: "1effex" }],
        ["path", { d: "M5.2 5.2A3.5 3.53 0 0 0 6.5 12H12", key: "k9y2ds" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M21 15.3a3.5 3.5 0 0 0-3.3-3.3", key: "11nlu2" }],
        ["path", { d: "M15 5h-4.3", key: "6537je" }],
        ["circle", { cx: "18", cy: "5", r: "3", key: "gq8acd" }]
      ];
      var RouteOff = createLucideIcon("route-off", __iconNode$6n);
      var __iconNode$6m = [
        ["circle", { cx: "6", cy: "19", r: "3", key: "1kj8tv" }],
        ["path", { d: "M9 19h8.5a3.5 3.5 0 0 0 0-7h-11a3.5 3.5 0 0 1 0-7H15", key: "1d8sl" }],
        ["circle", { cx: "18", cy: "5", r: "3", key: "gq8acd" }]
      ];
      var Route2 = createLucideIcon("route", __iconNode$6m);
      var __iconNode$6l = [
        ["rect", { width: "20", height: "8", x: "2", y: "14", rx: "2", key: "w68u3i" }],
        ["path", { d: "M6.01 18H6", key: "19vcac" }],
        ["path", { d: "M10.01 18H10", key: "uamcmx" }],
        ["path", { d: "M15 10v4", key: "qjz1xs" }],
        ["path", { d: "M17.84 7.17a4 4 0 0 0-5.66 0", key: "1rif40" }],
        ["path", { d: "M20.66 4.34a8 8 0 0 0-11.31 0", key: "6a5xfq" }]
      ];
      var Router2 = createLucideIcon("router", __iconNode$6l);
      var __iconNode$6k = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 12h18", key: "1i2n21" }]
      ];
      var Rows2 = createLucideIcon("rows-2", __iconNode$6k);
      var __iconNode$6j = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M21 9H3", key: "1338ky" }],
        ["path", { d: "M21 15H3", key: "9uk58r" }]
      ];
      var Rows3 = createLucideIcon("rows-3", __iconNode$6j);
      var __iconNode$6i = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M21 7.5H3", key: "1hm9pq" }],
        ["path", { d: "M21 12H3", key: "2avoz0" }],
        ["path", { d: "M21 16.5H3", key: "n7jzkj" }]
      ];
      var Rows4 = createLucideIcon("rows-4", __iconNode$6i);
      var __iconNode$6h = [
        ["path", { d: "M4 11a9 9 0 0 1 9 9", key: "pv89mb" }],
        ["path", { d: "M4 4a16 16 0 0 1 16 16", key: "k0647b" }],
        ["circle", { cx: "5", cy: "19", r: "1", key: "bfqh0e" }]
      ];
      var Rss = createLucideIcon("rss", __iconNode$6h);
      var __iconNode$6g = [
        ["path", { d: "M12 15v-3.014", key: "aw6ppf" }],
        ["path", { d: "M16 15v-3.014", key: "9e0vc7" }],
        ["path", { d: "M20 6H4", key: "1lfz86" }],
        ["path", { d: "M20 8V4", key: "1l2g47" }],
        ["path", { d: "M4 8V4", key: "sppxzt" }],
        ["path", { d: "M8 15v-3.014", key: "when08" }],
        ["rect", { x: "3", y: "12", width: "18", height: "7", rx: "1", key: "1ucwdz" }]
      ];
      var RulerDimensionLine = createLucideIcon("ruler-dimension-line", __iconNode$6g);
      var __iconNode$6f = [
        [
          "path",
          {
            d: "M21.3 15.3a2.4 2.4 0 0 1 0 3.4l-2.6 2.6a2.4 2.4 0 0 1-3.4 0L2.7 8.7a2.41 2.41 0 0 1 0-3.4l2.6-2.6a2.41 2.41 0 0 1 3.4 0Z",
            key: "icamh8"
          }
        ],
        ["path", { d: "m14.5 12.5 2-2", key: "inckbg" }],
        ["path", { d: "m11.5 9.5 2-2", key: "fmmyf7" }],
        ["path", { d: "m8.5 6.5 2-2", key: "vc6u1g" }],
        ["path", { d: "m17.5 15.5 2-2", key: "wo5hmg" }]
      ];
      var Ruler = createLucideIcon("ruler", __iconNode$6f);
      var __iconNode$6e = [
        ["path", { d: "M6 11h8a4 4 0 0 0 0-8H9v18", key: "18ai8t" }],
        ["path", { d: "M6 15h8", key: "1y8f6l" }]
      ];
      var RussianRuble = createLucideIcon("russian-ruble", __iconNode$6e);
      var __iconNode$6d = [
        ["path", { d: "M22 18H2a4 4 0 0 0 4 4h12a4 4 0 0 0 4-4Z", key: "1404fh" }],
        ["path", { d: "M21 14 10 2 3 14h18Z", key: "1nzg7v" }],
        ["path", { d: "M10 2v16", key: "1labyt" }]
      ];
      var Sailboat = createLucideIcon("sailboat", __iconNode$6d);
      var __iconNode$6c = [
        ["path", { d: "M7 21h10", key: "1b0cd5" }],
        ["path", { d: "M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z", key: "4rw317" }],
        [
          "path",
          {
            d: "M11.38 12a2.4 2.4 0 0 1-.4-4.77 2.4 2.4 0 0 1 3.2-2.77 2.4 2.4 0 0 1 3.47-.63 2.4 2.4 0 0 1 3.37 3.37 2.4 2.4 0 0 1-1.1 3.7 2.51 2.51 0 0 1 .03 1.1",
            key: "10xrj0"
          }
        ],
        ["path", { d: "m13 12 4-4", key: "1hckqy" }],
        ["path", { d: "M10.9 7.25A3.99 3.99 0 0 0 4 10c0 .73.2 1.41.54 2", key: "1p4srx" }]
      ];
      var Salad = createLucideIcon("salad", __iconNode$6c);
      var __iconNode$6b = [
        ["path", { d: "m2.37 11.223 8.372-6.777a2 2 0 0 1 2.516 0l8.371 6.777", key: "f1wd0e" }],
        ["path", { d: "M21 15a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-5.25", key: "1pfu07" }],
        ["path", { d: "M3 15a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h9", key: "1oq9qw" }],
        ["path", { d: "m6.67 15 6.13 4.6a2 2 0 0 0 2.8-.4l3.15-4.2", key: "1fnwu5" }],
        ["rect", { width: "20", height: "4", x: "2", y: "11", rx: "1", key: "itshg" }]
      ];
      var Sandwich = createLucideIcon("sandwich", __iconNode$6b);
      var __iconNode$6a = [
        ["path", { d: "M4 10a7.31 7.31 0 0 0 10 10Z", key: "1fzpp3" }],
        ["path", { d: "m9 15 3-3", key: "88sc13" }],
        ["path", { d: "M17 13a6 6 0 0 0-6-6", key: "15cc6u" }],
        ["path", { d: "M21 13A10 10 0 0 0 11 3", key: "11nf8s" }]
      ];
      var SatelliteDish = createLucideIcon("satellite-dish", __iconNode$6a);
      var __iconNode$69 = [
        ["path", { d: "M13 7 9 3 5 7l4 4", key: "vyckw6" }],
        ["path", { d: "m17 11 4 4-4 4-4-4", key: "rchckc" }],
        ["path", { d: "m8 12 4 4 6-6-4-4Z", key: "1sshf7" }],
        ["path", { d: "m16 8 3-3", key: "x428zp" }],
        ["path", { d: "M9 21a6 6 0 0 0-6-6", key: "1iajcf" }]
      ];
      var Satellite = createLucideIcon("satellite", __iconNode$69);
      var __iconNode$68 = [
        ["path", { d: "m20 19.5-5.5 1.2", key: "1aenhr" }],
        ["path", { d: "M14.5 4v11.22a1 1 0 0 0 1.242.97L20 15.2", key: "2rtezt" }],
        ["path", { d: "m2.978 19.351 5.549-1.363A2 2 0 0 0 10 16V2", key: "1kbm92" }],
        ["path", { d: "M20 10 4 13.5", key: "8nums9" }]
      ];
      var SaudiRiyal = createLucideIcon("saudi-riyal", __iconNode$68);
      var __iconNode$67 = [
        ["path", { d: "M10 2v3a1 1 0 0 0 1 1h5", key: "1xspal" }],
        ["path", { d: "M18 18v-6a1 1 0 0 0-1-1h-6a1 1 0 0 0-1 1v6", key: "1ra60u" }],
        ["path", { d: "M18 22H4a2 2 0 0 1-2-2V6", key: "pblm9e" }],
        [
          "path",
          {
            d: "M8 18a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9.172a2 2 0 0 1 1.414.586l2.828 2.828A2 2 0 0 1 22 6.828V16a2 2 0 0 1-2.01 2z",
            key: "1yve0x"
          }
        ]
      ];
      var SaveAll = createLucideIcon("save-all", __iconNode$67);
      var __iconNode$66 = [
        ["path", { d: "M13 13H8a1 1 0 0 0-1 1v7", key: "h8g396" }],
        ["path", { d: "M14 8h1", key: "1lfen6" }],
        ["path", { d: "M17 21v-4", key: "1yknxs" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        [
          "path",
          { d: "M20.41 20.41A2 2 0 0 1 19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 .59-1.41", key: "1t4vdl" }
        ],
        ["path", { d: "M29.5 11.5s5 5 4 5", key: "zzn4i6" }],
        ["path", { d: "M9 3h6.2a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V15", key: "24cby9" }]
      ];
      var SaveOff = createLucideIcon("save-off", __iconNode$66);
      var __iconNode$65 = [
        [
          "path",
          {
            d: "M15.2 3a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2z",
            key: "1c8476"
          }
        ],
        ["path", { d: "M17 21v-7a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v7", key: "1ydtos" }],
        ["path", { d: "M7 3v4a1 1 0 0 0 1 1h7", key: "t51u73" }]
      ];
      var Save = createLucideIcon("save", __iconNode$65);
      var __iconNode$64 = [
        ["path", { d: "M5 7v11a1 1 0 0 0 1 1h11", key: "13dt1j" }],
        ["path", { d: "M5.293 18.707 11 13", key: "ezgbsx" }],
        ["circle", { cx: "19", cy: "19", r: "2", key: "17f5cg" }],
        ["circle", { cx: "5", cy: "5", r: "2", key: "1gwv83" }]
      ];
      var Scale3d = createLucideIcon("scale-3d", __iconNode$64);
      var __iconNode$63 = [
        ["path", { d: "m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z", key: "7g6ntu" }],
        ["path", { d: "m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z", key: "ijws7r" }],
        ["path", { d: "M7 21h10", key: "1b0cd5" }],
        ["path", { d: "M12 3v18", key: "108xh3" }],
        ["path", { d: "M3 7h2c2 0 5-1 7-2 2 1 5 2 7 2h2", key: "3gwbw2" }]
      ];
      var Scale = createLucideIcon("scale", __iconNode$63);
      var __iconNode$62 = [
        ["path", { d: "M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7", key: "1m0v6g" }],
        ["path", { d: "M14 15H9v-5", key: "pi4jk9" }],
        ["path", { d: "M16 3h5v5", key: "1806ms" }],
        ["path", { d: "M21 3 9 15", key: "15kdhq" }]
      ];
      var Scaling = createLucideIcon("scaling", __iconNode$62);
      var __iconNode$61 = [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
        ["path", { d: "M8 7v10", key: "23sfjj" }],
        ["path", { d: "M12 7v10", key: "jspqdw" }],
        ["path", { d: "M17 7v10", key: "578dap" }]
      ];
      var ScanBarcode = createLucideIcon("scan-barcode", __iconNode$61);
      var __iconNode$60 = [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
        [
          "path",
          {
            d: "M18.944 12.33a1 1 0 0 0 0-.66 7.5 7.5 0 0 0-13.888 0 1 1 0 0 0 0 .66 7.5 7.5 0 0 0 13.888 0",
            key: "11ak4c"
          }
        ]
      ];
      var ScanEye = createLucideIcon("scan-eye", __iconNode$60);
      var __iconNode$5$ = [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
        ["path", { d: "M8 14s1.5 2 4 2 4-2 4-2", key: "1y1vjs" }],
        ["path", { d: "M9 9h.01", key: "1q5me6" }],
        ["path", { d: "M15 9h.01", key: "x1ddxp" }]
      ];
      var ScanFace = createLucideIcon("scan-face", __iconNode$5$);
      var __iconNode$5_ = [
        [
          "path",
          {
            d: "M11.246 16.657a1 1 0 0 0 1.508 0l3.57-4.101A2.75 2.75 0 1 0 12 9.168a2.75 2.75 0 1 0-4.324 3.388z",
            key: "1algrk"
          }
        ],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }]
      ];
      var ScanHeart = createLucideIcon("scan-heart", __iconNode$5_);
      var __iconNode$5Z = [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
        ["path", { d: "M7 12h10", key: "b7w52i" }]
      ];
      var ScanLine = createLucideIcon("scan-line", __iconNode$5Z);
      var __iconNode$5Y = [
        ["path", { d: "M17 12v4a1 1 0 0 1-1 1h-4", key: "uk4fdo" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M17 8V7", key: "q2g9wo" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M7 17h.01", key: "19xn7k" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
        ["rect", { x: "7", y: "7", width: "5", height: "5", rx: "1", key: "m9kyts" }]
      ];
      var ScanQrCode = createLucideIcon("scan-qr-code", __iconNode$5Y);
      var __iconNode$5X = [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        ["path", { d: "m16 16-1.9-1.9", key: "1dq9hf" }]
      ];
      var ScanSearch = createLucideIcon("scan-search", __iconNode$5X);
      var __iconNode$5W = [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
        ["path", { d: "M7 8h8", key: "1jbsf9" }],
        ["path", { d: "M7 12h10", key: "b7w52i" }],
        ["path", { d: "M7 16h6", key: "1vyc9m" }]
      ];
      var ScanText = createLucideIcon("scan-text", __iconNode$5W);
      var __iconNode$5V = [
        ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
        ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
        ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }]
      ];
      var Scan = createLucideIcon("scan", __iconNode$5V);
      var __iconNode$5U = [
        ["path", { d: "M14 22v-4a2 2 0 1 0-4 0v4", key: "hhkicm" }],
        [
          "path",
          {
            d: "m18 10 3.447 1.724a1 1 0 0 1 .553.894V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-7.382a1 1 0 0 1 .553-.894L6 10",
            key: "1xqip1"
          }
        ],
        ["path", { d: "M18 5v17", key: "1sw6gf" }],
        ["path", { d: "m4 6 7.106-3.553a2 2 0 0 1 1.788 0L20 6", key: "9d2mlk" }],
        ["path", { d: "M6 5v17", key: "1xfsm0" }],
        ["circle", { cx: "12", cy: "9", r: "2", key: "1092wv" }]
      ];
      var School = createLucideIcon("school", __iconNode$5U);
      var __iconNode$5T = [
        ["path", { d: "M5.42 9.42 8 12", key: "12pkuq" }],
        ["circle", { cx: "4", cy: "8", r: "2", key: "107mxr" }],
        ["path", { d: "m14 6-8.58 8.58", key: "gvzu5l" }],
        ["circle", { cx: "4", cy: "16", r: "2", key: "1ehqvc" }],
        ["path", { d: "M10.8 14.8 14 18", key: "ax7m9r" }],
        ["path", { d: "M16 12h-2", key: "10asgb" }],
        ["path", { d: "M22 12h-2", key: "14jgyd" }]
      ];
      var ScissorsLineDashed = createLucideIcon("scissors-line-dashed", __iconNode$5T);
      var __iconNode$5S = [
        ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
        ["path", { d: "M8.12 8.12 12 12", key: "1alkpv" }],
        ["path", { d: "M20 4 8.12 15.88", key: "xgtan2" }],
        ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
        ["path", { d: "M14.8 14.8 20 20", key: "ptml3r" }]
      ];
      var Scissors = createLucideIcon("scissors", __iconNode$5S);
      var __iconNode$5R = [
        ["path", { d: "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3", key: "i8wdob" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "m22 3-5 5", key: "12jva0" }],
        ["path", { d: "m17 3 5 5", key: "k36vhe" }]
      ];
      var ScreenShareOff = createLucideIcon("screen-share-off", __iconNode$5R);
      var __iconNode$5Q = [
        ["path", { d: "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3", key: "i8wdob" }],
        ["path", { d: "M8 21h8", key: "1ev6f3" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }],
        ["path", { d: "m17 8 5-5", key: "fqif7o" }],
        ["path", { d: "M17 3h5v5", key: "1o3tu8" }]
      ];
      var ScreenShare = createLucideIcon("screen-share", __iconNode$5Q);
      var __iconNode$5P = [
        ["path", { d: "M15 12h-5", key: "r7krc0" }],
        ["path", { d: "M15 8h-5", key: "1khuty" }],
        ["path", { d: "M19 17V5a2 2 0 0 0-2-2H4", key: "zz82l3" }],
        [
          "path",
          {
            d: "M8 21h12a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1H11a1 1 0 0 0-1 1v1a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v2a1 1 0 0 0 1 1h3",
            key: "1ph1d7"
          }
        ]
      ];
      var ScrollText = createLucideIcon("scroll-text", __iconNode$5P);
      var __iconNode$5O = [
        ["path", { d: "M19 17V5a2 2 0 0 0-2-2H4", key: "zz82l3" }],
        [
          "path",
          {
            d: "M8 21h12a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1H11a1 1 0 0 0-1 1v1a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v2a1 1 0 0 0 1 1h3",
            key: "1ph1d7"
          }
        ]
      ];
      var Scroll = createLucideIcon("scroll", __iconNode$5O);
      var __iconNode$5N = [
        ["path", { d: "m8 11 2 2 4-4", key: "1sed1v" }],
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
        ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
      ];
      var SearchCheck = createLucideIcon("search-check", __iconNode$5N);
      var __iconNode$5M = [
        ["path", { d: "m13 13.5 2-2.5-2-2.5", key: "1rvxrh" }],
        ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }],
        ["path", { d: "M9 8.5 7 11l2 2.5", key: "6ffwbx" }],
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }]
      ];
      var SearchCode = createLucideIcon("search-code", __iconNode$5M);
      var __iconNode$5L = [
        ["path", { d: "m13.5 8.5-5 5", key: "1cs55j" }],
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
        ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
      ];
      var SearchSlash = createLucideIcon("search-slash", __iconNode$5L);
      var __iconNode$5K = [
        ["path", { d: "m13.5 8.5-5 5", key: "1cs55j" }],
        ["path", { d: "m8.5 8.5 5 5", key: "a8mexj" }],
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
        ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
      ];
      var SearchX = createLucideIcon("search-x", __iconNode$5K);
      var __iconNode$5J = [
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
        ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
      ];
      var Search2 = createLucideIcon("search", __iconNode$5J);
      var __iconNode$5I = [
        ["path", { d: "M16 5a4 3 0 0 0-8 0c0 4 8 3 8 7a4 3 0 0 1-8 0", key: "vqan6v" }],
        ["path", { d: "M8 19a4 3 0 0 0 8 0c0-4-8-3-8-7a4 3 0 0 1 8 0", key: "wdjd8o" }]
      ];
      var Section = createLucideIcon("section", __iconNode$5I);
      var __iconNode$5H = [
        [
          "path",
          {
            d: "M3.714 3.048a.498.498 0 0 0-.683.627l2.843 7.627a2 2 0 0 1 0 1.396l-2.842 7.627a.498.498 0 0 0 .682.627l18-8.5a.5.5 0 0 0 0-.904z",
            key: "117uat"
          }
        ],
        ["path", { d: "M6 12h16", key: "s4cdu5" }]
      ];
      var SendHorizontal = createLucideIcon("send-horizontal", __iconNode$5H);
      var __iconNode$5G = [
        ["rect", { x: "14", y: "14", width: "8", height: "8", rx: "2", key: "1b0bso" }],
        ["rect", { x: "2", y: "2", width: "8", height: "8", rx: "2", key: "1x09vl" }],
        ["path", { d: "M7 14v1a2 2 0 0 0 2 2h1", key: "pao6x6" }],
        ["path", { d: "M14 7h1a2 2 0 0 1 2 2v1", key: "19tdru" }]
      ];
      var SendToBack = createLucideIcon("send-to-back", __iconNode$5G);
      var __iconNode$5F = [
        [
          "path",
          {
            d: "M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z",
            key: "1ffxy3"
          }
        ],
        ["path", { d: "m21.854 2.147-10.94 10.939", key: "12cjpa" }]
      ];
      var Send = createLucideIcon("send", __iconNode$5F);
      var __iconNode$5E = [
        ["line", { x1: "3", x2: "21", y1: "12", y2: "12", key: "10d38w" }],
        ["polyline", { points: "8 8 12 4 16 8", key: "zo8t4w" }],
        ["polyline", { points: "16 16 12 20 8 16", key: "1oyrid" }]
      ];
      var SeparatorHorizontal = createLucideIcon("separator-horizontal", __iconNode$5E);
      var __iconNode$5D = [
        ["line", { x1: "12", x2: "12", y1: "3", y2: "21", key: "1efggb" }],
        ["polyline", { points: "8 8 4 12 8 16", key: "bnfmv4" }],
        ["polyline", { points: "16 16 20 12 16 8", key: "u90052" }]
      ];
      var SeparatorVertical = createLucideIcon("separator-vertical", __iconNode$5D);
      var __iconNode$5C = [
        ["path", { d: "m10.852 14.772-.383.923", key: "11vil6" }],
        ["path", { d: "M13.148 14.772a3 3 0 1 0-2.296-5.544l-.383-.923", key: "1v3clb" }],
        ["path", { d: "m13.148 9.228.383-.923", key: "t2zzyc" }],
        ["path", { d: "m13.53 15.696-.382-.924a3 3 0 1 1-2.296-5.544", key: "1bxfiv" }],
        ["path", { d: "m14.772 10.852.923-.383", key: "k9m8cz" }],
        ["path", { d: "m14.772 13.148.923.383", key: "1xvhww" }],
        [
          "path",
          {
            d: "M4.5 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-.5",
            key: "tn8das"
          }
        ],
        [
          "path",
          {
            d: "M4.5 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-.5",
            key: "1g2pve"
          }
        ],
        ["path", { d: "M6 18h.01", key: "uhywen" }],
        ["path", { d: "M6 6h.01", key: "1utrut" }],
        ["path", { d: "m9.228 10.852-.923-.383", key: "1wtb30" }],
        ["path", { d: "m9.228 13.148-.923.383", key: "1a830x" }]
      ];
      var ServerCog = createLucideIcon("server-cog", __iconNode$5C);
      var __iconNode$5B = [
        [
          "path",
          {
            d: "M6 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-2",
            key: "4b9dqc"
          }
        ],
        [
          "path",
          {
            d: "M6 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-2",
            key: "22nnkd"
          }
        ],
        ["path", { d: "M6 6h.01", key: "1utrut" }],
        ["path", { d: "M6 18h.01", key: "uhywen" }],
        ["path", { d: "m13 6-4 6h6l-4 6", key: "14hqih" }]
      ];
      var ServerCrash = createLucideIcon("server-crash", __iconNode$5B);
      var __iconNode$5A = [
        ["path", { d: "M7 2h13a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-5", key: "bt2siv" }],
        ["path", { d: "M10 10 2.5 2.5C2 2 2 2.5 2 5v3a2 2 0 0 0 2 2h6z", key: "1hjrv1" }],
        ["path", { d: "M22 17v-1a2 2 0 0 0-2-2h-1", key: "1iynyr" }],
        ["path", { d: "M4 14a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16.5l1-.5.5.5-8-8H4z", key: "161ggg" }],
        ["path", { d: "M6 18h.01", key: "uhywen" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ];
      var ServerOff = createLucideIcon("server-off", __iconNode$5A);
      var __iconNode$5z = [
        ["rect", { width: "20", height: "8", x: "2", y: "2", rx: "2", ry: "2", key: "ngkwjq" }],
        ["rect", { width: "20", height: "8", x: "2", y: "14", rx: "2", ry: "2", key: "iecqi9" }],
        ["line", { x1: "6", x2: "6.01", y1: "6", y2: "6", key: "16zg32" }],
        ["line", { x1: "6", x2: "6.01", y1: "18", y2: "18", key: "nzw8ys" }]
      ];
      var Server = createLucideIcon("server", __iconNode$5z);
      var __iconNode$5y = [
        ["path", { d: "M20 7h-9", key: "3s1dr2" }],
        ["path", { d: "M14 17H5", key: "gfn3mx" }],
        ["circle", { cx: "17", cy: "17", r: "3", key: "18b49y" }],
        ["circle", { cx: "7", cy: "7", r: "3", key: "dfmy0x" }]
      ];
      var Settings2 = createLucideIcon("settings-2", __iconNode$5y);
      var __iconNode$5x = [
        [
          "path",
          {
            d: "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",
            key: "1qme2f"
          }
        ],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
      ];
      var Settings3 = createLucideIcon("settings", __iconNode$5x);
      var __iconNode$5w = [
        [
          "path",
          {
            d: "M8.3 10a.7.7 0 0 1-.626-1.079L11.4 3a.7.7 0 0 1 1.198-.043L16.3 8.9a.7.7 0 0 1-.572 1.1Z",
            key: "1bo67w"
          }
        ],
        ["rect", { x: "3", y: "14", width: "7", height: "7", rx: "1", key: "1bkyp8" }],
        ["circle", { cx: "17.5", cy: "17.5", r: "3.5", key: "w3z12y" }]
      ];
      var Shapes = createLucideIcon("shapes", __iconNode$5w);
      var __iconNode$5v = [
        ["circle", { cx: "18", cy: "5", r: "3", key: "gq8acd" }],
        ["circle", { cx: "6", cy: "12", r: "3", key: "w7nqdw" }],
        ["circle", { cx: "18", cy: "19", r: "3", key: "1xt0gg" }],
        ["line", { x1: "8.59", x2: "15.42", y1: "13.51", y2: "17.49", key: "47mynk" }],
        ["line", { x1: "15.41", x2: "8.59", y1: "6.51", y2: "10.49", key: "1n3mei" }]
      ];
      var Share2 = createLucideIcon("share-2", __iconNode$5v);
      var __iconNode$5u = [
        ["path", { d: "M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8", key: "1b2hhj" }],
        ["polyline", { points: "16 6 12 2 8 6", key: "m901s6" }],
        ["line", { x1: "12", x2: "12", y1: "2", y2: "15", key: "1p0rca" }]
      ];
      var Share = createLucideIcon("share", __iconNode$5u);
      var __iconNode$5t = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["line", { x1: "3", x2: "21", y1: "9", y2: "9", key: "1vqk6q" }],
        ["line", { x1: "3", x2: "21", y1: "15", y2: "15", key: "o2sbyz" }],
        ["line", { x1: "9", x2: "9", y1: "9", y2: "21", key: "1ib60c" }],
        ["line", { x1: "15", x2: "15", y1: "9", y2: "21", key: "1n26ft" }]
      ];
      var Sheet = createLucideIcon("sheet", __iconNode$5t);
      var __iconNode$5s = [
        [
          "path",
          {
            d: "M14 11a2 2 0 1 1-4 0 4 4 0 0 1 8 0 6 6 0 0 1-12 0 8 8 0 0 1 16 0 10 10 0 1 1-20 0 11.93 11.93 0 0 1 2.42-7.22 2 2 0 1 1 3.16 2.44",
            key: "1cn552"
          }
        ]
      ];
      var Shell = createLucideIcon("shell", __iconNode$5s);
      var __iconNode$5r = [
        [
          "path",
          {
            d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
            key: "oel41y"
          }
        ],
        ["path", { d: "M12 8v4", key: "1got3b" }],
        ["path", { d: "M12 16h.01", key: "1drbdi" }]
      ];
      var ShieldAlert = createLucideIcon("shield-alert", __iconNode$5r);
      var __iconNode$5q = [
        [
          "path",
          {
            d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
            key: "oel41y"
          }
        ],
        ["path", { d: "m4.243 5.21 14.39 12.472", key: "1c9a7c" }]
      ];
      var ShieldBan = createLucideIcon("shield-ban", __iconNode$5q);
      var __iconNode$5p = [
        [
          "path",
          {
            d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
            key: "oel41y"
          }
        ],
        ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
      ];
      var ShieldCheck = createLucideIcon("shield-check", __iconNode$5p);
      var __iconNode$5o = [
        [
          "path",
          {
            d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
            key: "oel41y"
          }
        ],
        ["path", { d: "M8 12h.01", key: "czm47f" }],
        ["path", { d: "M12 12h.01", key: "1mp3jc" }],
        ["path", { d: "M16 12h.01", key: "1l6xoz" }]
      ];
      var ShieldEllipsis = createLucideIcon("shield-ellipsis", __iconNode$5o);
      var __iconNode$5n = [
        [
          "path",
          {
            d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
            key: "oel41y"
          }
        ],
        ["path", { d: "M12 22V2", key: "zs6s6o" }]
      ];
      var ShieldHalf = createLucideIcon("shield-half", __iconNode$5n);
      var __iconNode$5m = [
        [
          "path",
          {
            d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
            key: "oel41y"
          }
        ],
        ["path", { d: "M9 12h6", key: "1c52cq" }]
      ];
      var ShieldMinus = createLucideIcon("shield-minus", __iconNode$5m);
      var __iconNode$5l = [
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        [
          "path",
          {
            d: "M5 5a1 1 0 0 0-1 1v7c0 5 3.5 7.5 7.67 8.94a1 1 0 0 0 .67.01c2.35-.82 4.48-1.97 5.9-3.71",
            key: "1jlk70"
          }
        ],
        [
          "path",
          {
            d: "M9.309 3.652A12.252 12.252 0 0 0 11.24 2.28a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1v7a9.784 9.784 0 0 1-.08 1.264",
            key: "18rp1v"
          }
        ]
      ];
      var ShieldOff = createLucideIcon("shield-off", __iconNode$5l);
      var __iconNode$5k = [
        [
          "path",
          {
            d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
            key: "oel41y"
          }
        ],
        ["path", { d: "M9 12h6", key: "1c52cq" }],
        ["path", { d: "M12 9v6", key: "199k2o" }]
      ];
      var ShieldPlus = createLucideIcon("shield-plus", __iconNode$5k);
      var __iconNode$5j = [
        [
          "path",
          {
            d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
            key: "oel41y"
          }
        ],
        ["path", { d: "M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3", key: "mhlwft" }],
        ["path", { d: "M12 17h.01", key: "p32p05" }]
      ];
      var ShieldQuestion = createLucideIcon("shield-question", __iconNode$5j);
      var __iconNode$5i = [
        [
          "path",
          {
            d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
            key: "oel41y"
          }
        ],
        ["path", { d: "M6.376 18.91a6 6 0 0 1 11.249.003", key: "hnjrf2" }],
        ["circle", { cx: "12", cy: "11", r: "4", key: "1gt34v" }]
      ];
      var ShieldUser = createLucideIcon("shield-user", __iconNode$5i);
      var __iconNode$5h = [
        [
          "path",
          {
            d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
            key: "oel41y"
          }
        ],
        ["path", { d: "m14.5 9.5-5 5", key: "17q4r4" }],
        ["path", { d: "m9.5 9.5 5 5", key: "18nt4w" }]
      ];
      var ShieldX = createLucideIcon("shield-x", __iconNode$5h);
      var __iconNode$5g = [
        [
          "path",
          {
            d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
            key: "oel41y"
          }
        ]
      ];
      var Shield2 = createLucideIcon("shield", __iconNode$5g);
      var __iconNode$5f = [
        ["circle", { cx: "12", cy: "12", r: "8", key: "46899m" }],
        ["path", { d: "M12 2v7.5", key: "1e5rl5" }],
        ["path", { d: "m19 5-5.23 5.23", key: "1ezxxf" }],
        ["path", { d: "M22 12h-7.5", key: "le1719" }],
        ["path", { d: "m19 19-5.23-5.23", key: "p3fmgn" }],
        ["path", { d: "M12 14.5V22", key: "dgcmos" }],
        ["path", { d: "M10.23 13.77 5 19", key: "qwopd4" }],
        ["path", { d: "M9.5 12H2", key: "r7bup8" }],
        ["path", { d: "M10.23 10.23 5 5", key: "k2y7lj" }],
        ["circle", { cx: "12", cy: "12", r: "2.5", key: "ix0uyj" }]
      ];
      var ShipWheel = createLucideIcon("ship-wheel", __iconNode$5f);
      var __iconNode$5e = [
        ["path", { d: "M12 10.189V14", key: "1p8cqu" }],
        ["path", { d: "M12 2v3", key: "qbqxhf" }],
        ["path", { d: "M19 13V7a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v6", key: "qpkstq" }],
        [
          "path",
          {
            d: "M19.38 20A11.6 11.6 0 0 0 21 14l-8.188-3.639a2 2 0 0 0-1.624 0L3 14a11.6 11.6 0 0 0 2.81 7.76",
            key: "7tigtc"
          }
        ],
        [
          "path",
          {
            d: "M2 21c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1s1.2 1 2.5 1c2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
            key: "1924j5"
          }
        ]
      ];
      var Ship = createLucideIcon("ship", __iconNode$5e);
      var __iconNode$5d = [
        [
          "path",
          {
            d: "M20.38 3.46 16 2a4 4 0 0 1-8 0L3.62 3.46a2 2 0 0 0-1.34 2.23l.58 3.47a1 1 0 0 0 .99.84H6v10c0 1.1.9 2 2 2h8a2 2 0 0 0 2-2V10h2.15a1 1 0 0 0 .99-.84l.58-3.47a2 2 0 0 0-1.34-2.23z",
            key: "1wgbhj"
          }
        ]
      ];
      var Shirt = createLucideIcon("shirt", __iconNode$5d);
      var __iconNode$5c = [
        ["path", { d: "M6 2 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4Z", key: "hou9p0" }],
        ["path", { d: "M3 6h18", key: "d0wm0j" }],
        ["path", { d: "M16 10a4 4 0 0 1-8 0", key: "1ltviw" }]
      ];
      var ShoppingBag = createLucideIcon("shopping-bag", __iconNode$5c);
      var __iconNode$5b = [
        ["path", { d: "m15 11-1 9", key: "5wnq3a" }],
        ["path", { d: "m19 11-4-7", key: "cnml18" }],
        ["path", { d: "M2 11h20", key: "3eubbj" }],
        ["path", { d: "m3.5 11 1.6 7.4a2 2 0 0 0 2 1.6h9.8a2 2 0 0 0 2-1.6l1.7-7.4", key: "yiazzp" }],
        ["path", { d: "M4.5 15.5h15", key: "13mye1" }],
        ["path", { d: "m5 11 4-7", key: "116ra9" }],
        ["path", { d: "m9 11 1 9", key: "1ojof7" }]
      ];
      var ShoppingBasket = createLucideIcon("shopping-basket", __iconNode$5b);
      var __iconNode$5a = [
        ["path", { d: "M2 22v-5l5-5 5 5-5 5z", key: "1fh25c" }],
        ["path", { d: "M9.5 14.5 16 8", key: "1smz5x" }],
        [
          "path",
          { d: "m17 2 5 5-.5.5a3.53 3.53 0 0 1-5 0s0 0 0 0a3.53 3.53 0 0 1 0-5L17 2", key: "1q8uv5" }
        ]
      ];
      var Shovel = createLucideIcon("shovel", __iconNode$5a);
      var __iconNode$59 = [
        ["circle", { cx: "8", cy: "21", r: "1", key: "jimo8o" }],
        ["circle", { cx: "19", cy: "21", r: "1", key: "13723u" }],
        [
          "path",
          {
            d: "M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12",
            key: "9zh506"
          }
        ]
      ];
      var ShoppingCart = createLucideIcon("shopping-cart", __iconNode$59);
      var __iconNode$58 = [
        ["path", { d: "m4 4 2.5 2.5", key: "uv2vmf" }],
        ["path", { d: "M13.5 6.5a4.95 4.95 0 0 0-7 7", key: "frdkwv" }],
        ["path", { d: "M15 5 5 15", key: "1ag8rq" }],
        ["path", { d: "M14 17v.01", key: "eokfpp" }],
        ["path", { d: "M10 16v.01", key: "14uyyl" }],
        ["path", { d: "M13 13v.01", key: "1v1k97" }],
        ["path", { d: "M16 10v.01", key: "5169yg" }],
        ["path", { d: "M11 20v.01", key: "cj92p8" }],
        ["path", { d: "M17 14v.01", key: "11cswd" }],
        ["path", { d: "M20 11v.01", key: "19e0od" }]
      ];
      var ShowerHead = createLucideIcon("shower-head", __iconNode$58);
      var __iconNode$57 = [
        ["path", { d: "M10 22v-5", key: "sfixh4" }],
        ["path", { d: "M14 19v-2", key: "pdve8j" }],
        ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
        ["path", { d: "M18 20v-3", key: "uox2gk" }],
        ["path", { d: "M2 13h20", key: "5evz65" }],
        ["path", { d: "M20 13V7l-5-5H6a2 2 0 0 0-2 2v9", key: "1rnpe2" }],
        ["path", { d: "M6 20v-3", key: "c6pdcb" }]
      ];
      var Shredder = createLucideIcon("shredder", __iconNode$57);
      var __iconNode$56 = [
        ["path", { d: "M11 12h.01", key: "1lr4k6" }],
        ["path", { d: "M13 22c.5-.5 1.12-1 2.5-1-1.38 0-2-.5-2.5-1", key: "fatpdi" }],
        [
          "path",
          {
            d: "M14 2a3.28 3.28 0 0 1-3.227 1.798l-6.17-.561A2.387 2.387 0 1 0 4.387 8H15.5a1 1 0 0 1 0 13 1 1 0 0 0 0-5H12a7 7 0 0 1-7-7V8",
            key: "kehrqe"
          }
        ],
        ["path", { d: "M14 8a8.5 8.5 0 0 1 0 8", key: "1imjx2" }],
        ["path", { d: "M16 16c2 0 4.5-4 4-6", key: "z0nejz" }]
      ];
      var Shrimp = createLucideIcon("shrimp", __iconNode$56);
      var __iconNode$55 = [
        ["path", { d: "M12 22v-7l-2-2", key: "eqv9mc" }],
        ["path", { d: "M17 8v.8A6 6 0 0 1 13.8 20H10A6.5 6.5 0 0 1 7 8a5 5 0 0 1 10 0Z", key: "ubcgy" }],
        ["path", { d: "m14 14-2 2", key: "847xa2" }]
      ];
      var Shrub = createLucideIcon("shrub", __iconNode$55);
      var __iconNode$54 = [
        ["path", { d: "m15 15 6 6m-6-6v4.8m0-4.8h4.8", key: "17vawe" }],
        ["path", { d: "M9 19.8V15m0 0H4.2M9 15l-6 6", key: "chjx8e" }],
        ["path", { d: "M15 4.2V9m0 0h4.8M15 9l6-6", key: "lav6yq" }],
        ["path", { d: "M9 4.2V9m0 0H4.2M9 9 3 3", key: "1pxi2q" }]
      ];
      var Shrink = createLucideIcon("shrink", __iconNode$54);
      var __iconNode$53 = [
        ["path", { d: "m18 14 4 4-4 4", key: "10pe0f" }],
        ["path", { d: "m18 2 4 4-4 4", key: "pucp1d" }],
        ["path", { d: "M2 18h1.973a4 4 0 0 0 3.3-1.7l5.454-8.6a4 4 0 0 1 3.3-1.7H22", key: "1ailkh" }],
        ["path", { d: "M2 6h1.972a4 4 0 0 1 3.6 2.2", key: "km57vx" }],
        ["path", { d: "M22 18h-6.041a4 4 0 0 1-3.3-1.8l-.359-.45", key: "os18l9" }]
      ];
      var Shuffle = createLucideIcon("shuffle", __iconNode$53);
      var __iconNode$52 = [
        [
          "path",
          {
            d: "M18 7V5a1 1 0 0 0-1-1H6.5a.5.5 0 0 0-.4.8l4.5 6a2 2 0 0 1 0 2.4l-4.5 6a.5.5 0 0 0 .4.8H17a1 1 0 0 0 1-1v-2",
            key: "wuwx1p"
          }
        ]
      ];
      var Sigma = createLucideIcon("sigma", __iconNode$52);
      var __iconNode$51 = [
        ["path", { d: "M2 20h.01", key: "4haj6o" }],
        ["path", { d: "M7 20v-4", key: "j294jx" }],
        ["path", { d: "M12 20v-8", key: "i3yub9" }],
        ["path", { d: "M17 20V8", key: "1tkaf5" }]
      ];
      var SignalHigh = createLucideIcon("signal-high", __iconNode$51);
      var __iconNode$50 = [
        ["path", { d: "M2 20h.01", key: "4haj6o" }],
        ["path", { d: "M7 20v-4", key: "j294jx" }]
      ];
      var SignalLow = createLucideIcon("signal-low", __iconNode$50);
      var __iconNode$4$ = [
        ["path", { d: "M2 20h.01", key: "4haj6o" }],
        ["path", { d: "M7 20v-4", key: "j294jx" }],
        ["path", { d: "M12 20v-8", key: "i3yub9" }]
      ];
      var SignalMedium = createLucideIcon("signal-medium", __iconNode$4$);
      var __iconNode$4_ = [["path", { d: "M2 20h.01", key: "4haj6o" }]];
      var SignalZero = createLucideIcon("signal-zero", __iconNode$4_);
      var __iconNode$4Z = [
        ["path", { d: "M2 20h.01", key: "4haj6o" }],
        ["path", { d: "M7 20v-4", key: "j294jx" }],
        ["path", { d: "M12 20v-8", key: "i3yub9" }],
        ["path", { d: "M17 20V8", key: "1tkaf5" }],
        ["path", { d: "M22 4v16", key: "sih9yq" }]
      ];
      var Signal = createLucideIcon("signal", __iconNode$4Z);
      var __iconNode$4Y = [
        [
          "path",
          {
            d: "m21 17-2.156-1.868A.5.5 0 0 0 18 15.5v.5a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1c0-2.545-3.991-3.97-8.5-4a1 1 0 0 0 0 5c4.153 0 4.745-11.295 5.708-13.5a2.5 2.5 0 1 1 3.31 3.284",
            key: "y32ogt"
          }
        ],
        ["path", { d: "M3 21h18", key: "itz85i" }]
      ];
      var Signature = createLucideIcon("signature", __iconNode$4Y);
      var __iconNode$4X = [
        ["path", { d: "M10 9H4L2 7l2-2h6", key: "1hq7x2" }],
        ["path", { d: "M14 5h6l2 2-2 2h-6", key: "bv62ej" }],
        ["path", { d: "M10 22V4a2 2 0 1 1 4 0v18", key: "eqpcf2" }],
        ["path", { d: "M8 22h8", key: "rmew8v" }]
      ];
      var SignpostBig = createLucideIcon("signpost-big", __iconNode$4X);
      var __iconNode$4W = [
        ["path", { d: "M12 13v8", key: "1l5pq0" }],
        ["path", { d: "M12 3v3", key: "1n5kay" }],
        [
          "path",
          {
            d: "M18 6a2 2 0 0 1 1.387.56l2.307 2.22a1 1 0 0 1 0 1.44l-2.307 2.22A2 2 0 0 1 18 13H6a2 2 0 0 1-1.387-.56l-2.306-2.22a1 1 0 0 1 0-1.44l2.306-2.22A2 2 0 0 1 6 6z",
            key: "gqqp9m"
          }
        ]
      ];
      var Signpost = createLucideIcon("signpost", __iconNode$4W);
      var __iconNode$4V = [
        ["path", { d: "M7 18v-6a5 5 0 1 1 10 0v6", key: "pcx96s" }],
        [
          "path",
          { d: "M5 21a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2z", key: "1b4s83" }
        ],
        ["path", { d: "M21 12h1", key: "jtio3y" }],
        ["path", { d: "M18.5 4.5 18 5", key: "g5sp9y" }],
        ["path", { d: "M2 12h1", key: "1uaihz" }],
        ["path", { d: "M12 2v1", key: "11qlp1" }],
        ["path", { d: "m4.929 4.929.707.707", key: "1i51kw" }],
        ["path", { d: "M12 12v6", key: "3ahymv" }]
      ];
      var Siren = createLucideIcon("siren", __iconNode$4V);
      var __iconNode$4U = [
        ["polygon", { points: "19 20 9 12 19 4 19 20", key: "o2sva" }],
        ["line", { x1: "5", x2: "5", y1: "19", y2: "5", key: "1ocqjk" }]
      ];
      var SkipBack = createLucideIcon("skip-back", __iconNode$4U);
      var __iconNode$4T = [
        ["polygon", { points: "5 4 15 12 5 20 5 4", key: "16p6eg" }],
        ["line", { x1: "19", x2: "19", y1: "5", y2: "19", key: "futhcm" }]
      ];
      var SkipForward = createLucideIcon("skip-forward", __iconNode$4T);
      var __iconNode$4S = [
        ["path", { d: "m12.5 17-.5-1-.5 1h1z", key: "3me087" }],
        [
          "path",
          {
            d: "M15 22a1 1 0 0 0 1-1v-1a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20v1a1 1 0 0 0 1 1z",
            key: "1o5pge"
          }
        ],
        ["circle", { cx: "15", cy: "12", r: "1", key: "1tmaij" }],
        ["circle", { cx: "9", cy: "12", r: "1", key: "1vctgf" }]
      ];
      var Skull = createLucideIcon("skull", __iconNode$4S);
      var __iconNode$4R = [
        ["rect", { width: "3", height: "8", x: "13", y: "2", rx: "1.5", key: "diqz80" }],
        ["path", { d: "M19 8.5V10h1.5A1.5 1.5 0 1 0 19 8.5", key: "183iwg" }],
        ["rect", { width: "3", height: "8", x: "8", y: "14", rx: "1.5", key: "hqg7r1" }],
        ["path", { d: "M5 15.5V14H3.5A1.5 1.5 0 1 0 5 15.5", key: "76g71w" }],
        ["rect", { width: "8", height: "3", x: "14", y: "13", rx: "1.5", key: "1kmz0a" }],
        ["path", { d: "M15.5 19H14v1.5a1.5 1.5 0 1 0 1.5-1.5", key: "jc4sz0" }],
        ["rect", { width: "8", height: "3", x: "2", y: "8", rx: "1.5", key: "1omvl4" }],
        ["path", { d: "M8.5 5H10V3.5A1.5 1.5 0 1 0 8.5 5", key: "16f3cl" }]
      ];
      var Slack = createLucideIcon("slack", __iconNode$4R);
      var __iconNode$4Q = [["path", { d: "M22 2 2 22", key: "y4kqgn" }]];
      var Slash = createLucideIcon("slash", __iconNode$4Q);
      var __iconNode$4P = [
        [
          "path",
          {
            d: "M11 16.586V19a1 1 0 0 1-1 1H2L18.37 3.63a1 1 0 1 1 3 3l-9.663 9.663a1 1 0 0 1-1.414 0L8 14",
            key: "1sllp5"
          }
        ]
      ];
      var Slice = createLucideIcon("slice", __iconNode$4P);
      var __iconNode$4O = [
        ["line", { x1: "21", x2: "14", y1: "4", y2: "4", key: "obuewd" }],
        ["line", { x1: "10", x2: "3", y1: "4", y2: "4", key: "1q6298" }],
        ["line", { x1: "21", x2: "12", y1: "12", y2: "12", key: "1iu8h1" }],
        ["line", { x1: "8", x2: "3", y1: "12", y2: "12", key: "ntss68" }],
        ["line", { x1: "21", x2: "16", y1: "20", y2: "20", key: "14d8ph" }],
        ["line", { x1: "12", x2: "3", y1: "20", y2: "20", key: "m0wm8r" }],
        ["line", { x1: "14", x2: "14", y1: "2", y2: "6", key: "14e1ph" }],
        ["line", { x1: "8", x2: "8", y1: "10", y2: "14", key: "1i6ji0" }],
        ["line", { x1: "16", x2: "16", y1: "18", y2: "22", key: "1lctlv" }]
      ];
      var SlidersHorizontal = createLucideIcon("sliders-horizontal", __iconNode$4O);
      var __iconNode$4N = [
        ["line", { x1: "4", x2: "4", y1: "21", y2: "14", key: "1p332r" }],
        ["line", { x1: "4", x2: "4", y1: "10", y2: "3", key: "gb41h5" }],
        ["line", { x1: "12", x2: "12", y1: "21", y2: "12", key: "hf2csr" }],
        ["line", { x1: "12", x2: "12", y1: "8", y2: "3", key: "1kfi7u" }],
        ["line", { x1: "20", x2: "20", y1: "21", y2: "16", key: "1lhrwl" }],
        ["line", { x1: "20", x2: "20", y1: "12", y2: "3", key: "16vvfq" }],
        ["line", { x1: "2", x2: "6", y1: "14", y2: "14", key: "1uebub" }],
        ["line", { x1: "10", x2: "14", y1: "8", y2: "8", key: "1yglbp" }],
        ["line", { x1: "18", x2: "22", y1: "16", y2: "16", key: "1jxqpz" }]
      ];
      var SlidersVertical = createLucideIcon("sliders-vertical", __iconNode$4N);
      var __iconNode$4M = [
        ["rect", { width: "14", height: "20", x: "5", y: "2", rx: "2", ry: "2", key: "1yt0o3" }],
        ["path", { d: "M12.667 8 10 12h4l-2.667 4", key: "h9lk2d" }]
      ];
      var SmartphoneCharging = createLucideIcon("smartphone-charging", __iconNode$4M);
      var __iconNode$4L = [
        ["rect", { width: "7", height: "12", x: "2", y: "6", rx: "1", key: "5nje8w" }],
        ["path", { d: "M13 8.32a7.43 7.43 0 0 1 0 7.36", key: "1g306n" }],
        ["path", { d: "M16.46 6.21a11.76 11.76 0 0 1 0 11.58", key: "uqvjvo" }],
        ["path", { d: "M19.91 4.1a15.91 15.91 0 0 1 .01 15.8", key: "ujntz3" }]
      ];
      var SmartphoneNfc = createLucideIcon("smartphone-nfc", __iconNode$4L);
      var __iconNode$4K = [
        ["rect", { width: "14", height: "20", x: "5", y: "2", rx: "2", ry: "2", key: "1yt0o3" }],
        ["path", { d: "M12 18h.01", key: "mhygvu" }]
      ];
      var Smartphone = createLucideIcon("smartphone", __iconNode$4K);
      var __iconNode$4J = [
        ["path", { d: "M22 11v1a10 10 0 1 1-9-10", key: "ew0xw9" }],
        ["path", { d: "M8 14s1.5 2 4 2 4-2 4-2", key: "1y1vjs" }],
        ["line", { x1: "9", x2: "9.01", y1: "9", y2: "9", key: "yxxnd0" }],
        ["line", { x1: "15", x2: "15.01", y1: "9", y2: "9", key: "1p4y9e" }],
        ["path", { d: "M16 5h6", key: "1vod17" }],
        ["path", { d: "M19 2v6", key: "4bpg5p" }]
      ];
      var SmilePlus = createLucideIcon("smile-plus", __iconNode$4J);
      var __iconNode$4I = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["path", { d: "M8 14s1.5 2 4 2 4-2 4-2", key: "1y1vjs" }],
        ["line", { x1: "9", x2: "9.01", y1: "9", y2: "9", key: "yxxnd0" }],
        ["line", { x1: "15", x2: "15.01", y1: "9", y2: "9", key: "1p4y9e" }]
      ];
      var Smile = createLucideIcon("smile", __iconNode$4I);
      var __iconNode$4H = [
        ["path", { d: "M2 13a6 6 0 1 0 12 0 4 4 0 1 0-8 0 2 2 0 0 0 4 0", key: "hneq2s" }],
        ["circle", { cx: "10", cy: "13", r: "8", key: "194lz3" }],
        ["path", { d: "M2 21h12c4.4 0 8-3.6 8-8V7a2 2 0 1 0-4 0v6", key: "ixqyt7" }],
        ["path", { d: "M18 3 19.1 5.2", key: "9tjm43" }],
        ["path", { d: "M22 3 20.9 5.2", key: "j3odrs" }]
      ];
      var Snail = createLucideIcon("snail", __iconNode$4H);
      var __iconNode$4G = [
        ["path", { d: "m10 20-1.25-2.5L6 18", key: "18frcb" }],
        ["path", { d: "M10 4 8.75 6.5 6 6", key: "7mghy3" }],
        ["path", { d: "m14 20 1.25-2.5L18 18", key: "1chtki" }],
        ["path", { d: "m14 4 1.25 2.5L18 6", key: "1b4wsy" }],
        ["path", { d: "m17 21-3-6h-4", key: "15hhxa" }],
        ["path", { d: "m17 3-3 6 1.5 3", key: "11697g" }],
        ["path", { d: "M2 12h6.5L10 9", key: "kv9z4n" }],
        ["path", { d: "m20 10-1.5 2 1.5 2", key: "1swlpi" }],
        ["path", { d: "M22 12h-6.5L14 15", key: "1mxi28" }],
        ["path", { d: "m4 10 1.5 2L4 14", key: "k9enpj" }],
        ["path", { d: "m7 21 3-6-1.5-3", key: "j8hb9u" }],
        ["path", { d: "m7 3 3 6h4", key: "1otusx" }]
      ];
      var Snowflake = createLucideIcon("snowflake", __iconNode$4G);
      var __iconNode$4F = [
        ["path", { d: "M20 9V6a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v3", key: "1dgpiv" }],
        [
          "path",
          {
            d: "M2 16a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v1.5a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5V11a2 2 0 0 0-4 0z",
            key: "xacw8m"
          }
        ],
        ["path", { d: "M4 18v2", key: "jwo5n2" }],
        ["path", { d: "M20 18v2", key: "1ar1qi" }],
        ["path", { d: "M12 4v9", key: "oqhhn3" }]
      ];
      var Sofa = createLucideIcon("sofa", __iconNode$4F);
      var __iconNode$4E = [
        ["path", { d: "M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z", key: "4rw317" }],
        ["path", { d: "M7 21h10", key: "1b0cd5" }],
        ["path", { d: "M19.5 12 22 6", key: "shfsr5" }],
        [
          "path",
          {
            d: "M16.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.73 1.62",
            key: "rpc6vp"
          }
        ],
        [
          "path",
          {
            d: "M11.25 3c.27.1.8.53.74 1.36-.05.83-.93 1.2-.98 2.02-.06.78.33 1.24.72 1.62",
            key: "1lf63m"
          }
        ],
        [
          "path",
          { d: "M6.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.74 1.62", key: "97tijn" }
        ]
      ];
      var Soup = createLucideIcon("soup", __iconNode$4E);
      var __iconNode$4D = [
        ["path", { d: "M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1", key: "lt2kga" }]
      ];
      var Space = createLucideIcon("space", __iconNode$4D);
      var __iconNode$4C = [
        [
          "path",
          {
            d: "M5 9c-1.5 1.5-3 3.2-3 5.5A5.5 5.5 0 0 0 7.5 20c1.8 0 3-.5 4.5-2 1.5 1.5 2.7 2 4.5 2a5.5 5.5 0 0 0 5.5-5.5c0-2.3-1.5-4-3-5.5l-7-7-7 7Z",
            key: "40bo9n"
          }
        ],
        ["path", { d: "M12 18v4", key: "jadmvz" }]
      ];
      var Spade = createLucideIcon("spade", __iconNode$4C);
      var __iconNode$4B = [
        [
          "path",
          {
            d: "M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z",
            key: "4pj2yx"
          }
        ]
      ];
      var Sparkle = createLucideIcon("sparkle", __iconNode$4B);
      var __iconNode$4A = [
        [
          "path",
          {
            d: "M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z",
            key: "4pj2yx"
          }
        ],
        ["path", { d: "M20 3v4", key: "1olli1" }],
        ["path", { d: "M22 5h-4", key: "1gvqau" }],
        ["path", { d: "M4 17v2", key: "vumght" }],
        ["path", { d: "M5 18H3", key: "zchphs" }]
      ];
      var Sparkles = createLucideIcon("sparkles", __iconNode$4A);
      var __iconNode$4z = [
        ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
        ["path", { d: "M12 6h.01", key: "1vi96p" }],
        ["circle", { cx: "12", cy: "14", r: "4", key: "1jruaj" }],
        ["path", { d: "M12 14h.01", key: "1etili" }]
      ];
      var Speaker = createLucideIcon("speaker", __iconNode$4z);
      var __iconNode$4y = [
        [
          "path",
          {
            d: "M8.8 20v-4.1l1.9.2a2.3 2.3 0 0 0 2.164-2.1V8.3A5.37 5.37 0 0 0 2 8.25c0 2.8.656 3.054 1 4.55a5.77 5.77 0 0 1 .029 2.758L2 20",
            key: "11atix"
          }
        ],
        ["path", { d: "M19.8 17.8a7.5 7.5 0 0 0 .003-10.603", key: "yol142" }],
        ["path", { d: "M17 15a3.5 3.5 0 0 0-.025-4.975", key: "ssbmkc" }]
      ];
      var Speech = createLucideIcon("speech", __iconNode$4y);
      var __iconNode$4x = [
        ["path", { d: "m6 16 6-12 6 12", key: "1b4byz" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        [
          "path",
          {
            d: "M4 21c1.1 0 1.1-1 2.3-1s1.1 1 2.3 1c1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1",
            key: "8mdmtu"
          }
        ]
      ];
      var SpellCheck2 = createLucideIcon("spell-check-2", __iconNode$4x);
      var __iconNode$4w = [
        [
          "path",
          {
            d: "M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z",
            key: "xwnzip"
          }
        ],
        ["path", { d: "M5 17A12 12 0 0 1 17 5", key: "1okkup" }],
        ["circle", { cx: "19", cy: "5", r: "2", key: "mhkx31" }],
        ["circle", { cx: "5", cy: "19", r: "2", key: "v8kfzx" }]
      ];
      var SplinePointer = createLucideIcon("spline-pointer", __iconNode$4w);
      var __iconNode$4v = [
        ["path", { d: "m6 16 6-12 6 12", key: "1b4byz" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "m16 20 2 2 4-4", key: "13tcca" }]
      ];
      var SpellCheck = createLucideIcon("spell-check", __iconNode$4v);
      var __iconNode$4u = [
        ["circle", { cx: "19", cy: "5", r: "2", key: "mhkx31" }],
        ["circle", { cx: "5", cy: "19", r: "2", key: "v8kfzx" }],
        ["path", { d: "M5 17A12 12 0 0 1 17 5", key: "1okkup" }]
      ];
      var Spline = createLucideIcon("spline", __iconNode$4u);
      var __iconNode$4t = [
        ["path", { d: "M16 3h5v5", key: "1806ms" }],
        ["path", { d: "M8 3H3v5", key: "15dfkv" }],
        ["path", { d: "M12 22v-8.3a4 4 0 0 0-1.172-2.872L3 3", key: "1qrqzj" }],
        ["path", { d: "m15 9 6-6", key: "ko1vev" }]
      ];
      var Split = createLucideIcon("split", __iconNode$4t);
      var __iconNode$4s = [
        ["path", { d: "M3 3h.01", key: "159qn6" }],
        ["path", { d: "M7 5h.01", key: "1hq22a" }],
        ["path", { d: "M11 7h.01", key: "1osv80" }],
        ["path", { d: "M3 7h.01", key: "1xzrh3" }],
        ["path", { d: "M7 9h.01", key: "19b3jx" }],
        ["path", { d: "M3 11h.01", key: "1eifu7" }],
        ["rect", { width: "4", height: "4", x: "15", y: "5", key: "mri9e4" }],
        ["path", { d: "m19 9 2 2v10c0 .6-.4 1-1 1h-6c-.6 0-1-.4-1-1V11l2-2", key: "aib6hk" }],
        ["path", { d: "m13 14 8-2", key: "1d7bmk" }],
        ["path", { d: "m13 19 8-2", key: "1y2vml" }]
      ];
      var SprayCan = createLucideIcon("spray-can", __iconNode$4s);
      var __iconNode$4r = [
        ["path", { d: "M7 20h10", key: "e6iznv" }],
        ["path", { d: "M10 20c5.5-2.5.8-6.4 3-10", key: "161w41" }],
        [
          "path",
          {
            d: "M9.5 9.4c1.1.8 1.8 2.2 2.3 3.7-2 .4-3.5.4-4.8-.3-1.2-.6-2.3-1.9-3-4.2 2.8-.5 4.4 0 5.5.8z",
            key: "9gtqwd"
          }
        ],
        [
          "path",
          {
            d: "M14.1 6a7 7 0 0 0-1.1 4c1.9-.1 3.3-.6 4.3-1.4 1-1 1.6-2.3 1.7-4.6-2.7.1-4 1-4.9 2z",
            key: "bkxnd2"
          }
        ]
      ];
      var Sprout = createLucideIcon("sprout", __iconNode$4r);
      var __iconNode$4q = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M17 12h-2l-2 5-2-10-2 5H7", key: "15hlnc" }]
      ];
      var SquareActivity = createLucideIcon("square-activity", __iconNode$4q);
      var __iconNode$4p = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m16 8-8 8", key: "166keh" }],
        ["path", { d: "M16 16H8V8", key: "1w2ppm" }]
      ];
      var SquareArrowDownLeft = createLucideIcon("square-arrow-down-left", __iconNode$4p);
      var __iconNode$4o = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m8 8 8 8", key: "1imecy" }],
        ["path", { d: "M16 8v8H8", key: "1lbpgo" }]
      ];
      var SquareArrowDownRight = createLucideIcon("square-arrow-down-right", __iconNode$4o);
      var __iconNode$4n = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M12 8v8", key: "napkw2" }],
        ["path", { d: "m8 12 4 4 4-4", key: "k98ssh" }]
      ];
      var SquareArrowDown = createLucideIcon("square-arrow-down", __iconNode$4n);
      var __iconNode$4m = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m12 8-4 4 4 4", key: "15vm53" }],
        ["path", { d: "M16 12H8", key: "1fr5h0" }]
      ];
      var SquareArrowLeft = createLucideIcon("square-arrow-left", __iconNode$4m);
      var __iconNode$4l = [
        ["path", { d: "M13 21h6a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v6", key: "14qz4y" }],
        ["path", { d: "m3 21 9-9", key: "1jfql5" }],
        ["path", { d: "M9 21H3v-6", key: "wtvkvv" }]
      ];
      var SquareArrowOutDownLeft = createLucideIcon("square-arrow-out-down-left", __iconNode$4l);
      var __iconNode$4k = [
        ["path", { d: "M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6", key: "14rsvq" }],
        ["path", { d: "m21 21-9-9", key: "1et2py" }],
        ["path", { d: "M21 15v6h-6", key: "1jko0i" }]
      ];
      var SquareArrowOutDownRight = createLucideIcon("square-arrow-out-down-right", __iconNode$4k);
      var __iconNode$4j = [
        ["path", { d: "M13 3h6a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-6", key: "14mv1t" }],
        ["path", { d: "m3 3 9 9", key: "rks13r" }],
        ["path", { d: "M3 9V3h6", key: "ira0h2" }]
      ];
      var SquareArrowOutUpLeft = createLucideIcon("square-arrow-out-up-left", __iconNode$4j);
      var __iconNode$4i = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "m12 16 4-4-4-4", key: "1i9zcv" }]
      ];
      var SquareArrowRight = createLucideIcon("square-arrow-right", __iconNode$4i);
      var __iconNode$4h = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M8 16V8h8", key: "19xb1h" }],
        ["path", { d: "M16 16 8 8", key: "1qdy8n" }]
      ];
      var SquareArrowUpLeft = createLucideIcon("square-arrow-up-left", __iconNode$4h);
      var __iconNode$4g = [
        ["path", { d: "M21 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h6", key: "y09zxi" }],
        ["path", { d: "m21 3-9 9", key: "mpx6sq" }],
        ["path", { d: "M15 3h6v6", key: "1q9fwt" }]
      ];
      var SquareArrowOutUpRight = createLucideIcon("square-arrow-out-up-right", __iconNode$4g);
      var __iconNode$4f = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M8 8h8v8", key: "b65dnt" }],
        ["path", { d: "m8 16 8-8", key: "13b9ih" }]
      ];
      var SquareArrowUpRight = createLucideIcon("square-arrow-up-right", __iconNode$4f);
      var __iconNode$4e = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m16 12-4-4-4 4", key: "177agl" }],
        ["path", { d: "M12 16V8", key: "1sbj14" }]
      ];
      var SquareArrowUp = createLucideIcon("square-arrow-up", __iconNode$4e);
      var __iconNode$4d = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M12 8v8", key: "napkw2" }],
        ["path", { d: "m8.5 14 7-4", key: "12hpby" }],
        ["path", { d: "m8.5 10 7 4", key: "wwy2dy" }]
      ];
      var SquareAsterisk = createLucideIcon("square-asterisk", __iconNode$4d);
      var __iconNode$4c = [
        [
          "path",
          { d: "M4 22a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2", key: "1vzg26" }
        ],
        ["path", { d: "M10 22H8", key: "euku7a" }],
        ["path", { d: "M16 22h-2", key: "18d249" }],
        ["circle", { cx: "8", cy: "8", r: "2", key: "14cg06" }],
        ["path", { d: "M9.414 9.414 12 12", key: "qz4lzr" }],
        ["path", { d: "M14.8 14.8 18 18", key: "11flf1" }],
        ["circle", { cx: "8", cy: "16", r: "2", key: "1acxsx" }],
        ["path", { d: "m18 6-8.586 8.586", key: "11kzk1" }]
      ];
      var SquareBottomDashedScissors = createLucideIcon("square-bottom-dashed-scissors", __iconNode$4c);
      var __iconNode$4b = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 8h7", key: "kbo1nt" }],
        ["path", { d: "M8 12h6", key: "ikassy" }],
        ["path", { d: "M11 16h5", key: "oq65wt" }]
      ];
      var SquareChartGantt = createLucideIcon("square-chart-gantt", __iconNode$4b);
      var __iconNode$4a = [
        ["path", { d: "M21 10.5V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h12.5", key: "1uzm8b" }],
        ["path", { d: "m9 11 3 3L22 4", key: "1pflzl" }]
      ];
      var SquareCheckBig = createLucideIcon("square-check-big", __iconNode$4a);
      var __iconNode$49 = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
      ];
      var SquareCheck = createLucideIcon("square-check", __iconNode$49);
      var __iconNode$48 = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m16 10-4 4-4-4", key: "894hmk" }]
      ];
      var SquareChevronDown = createLucideIcon("square-chevron-down", __iconNode$48);
      var __iconNode$47 = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m14 16-4-4 4-4", key: "ojs7w8" }]
      ];
      var SquareChevronLeft = createLucideIcon("square-chevron-left", __iconNode$47);
      var __iconNode$46 = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m10 8 4 4-4 4", key: "1wy4r4" }]
      ];
      var SquareChevronRight = createLucideIcon("square-chevron-right", __iconNode$46);
      var __iconNode$45 = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m8 14 4-4 4 4", key: "fy2ptz" }]
      ];
      var SquareChevronUp = createLucideIcon("square-chevron-up", __iconNode$45);
      var __iconNode$44 = [
        ["path", { d: "M10 9.5 8 12l2 2.5", key: "3mjy60" }],
        ["path", { d: "m14 9.5 2 2.5-2 2.5", key: "1bir2l" }],
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }]
      ];
      var SquareCode = createLucideIcon("square-code", __iconNode$44);
      var __iconNode$43 = [
        ["path", { d: "M10 9.5 8 12l2 2.5", key: "3mjy60" }],
        ["path", { d: "M14 21h1", key: "v9vybs" }],
        ["path", { d: "m14 9.5 2 2.5-2 2.5", key: "1bir2l" }],
        [
          "path",
          { d: "M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2", key: "as5y1o" }
        ],
        ["path", { d: "M9 21h1", key: "15o7lz" }]
      ];
      var SquareDashedBottomCode = createLucideIcon("square-dashed-bottom-code", __iconNode$43);
      var __iconNode$42 = [
        [
          "path",
          { d: "M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2", key: "as5y1o" }
        ],
        ["path", { d: "M9 21h1", key: "15o7lz" }],
        ["path", { d: "M14 21h1", key: "v9vybs" }]
      ];
      var SquareDashedBottom = createLucideIcon("square-dashed-bottom", __iconNode$42);
      var __iconNode$41 = [
        ["path", { d: "M8 7v7", key: "1x2jlm" }],
        ["path", { d: "M12 7v4", key: "xawao1" }],
        ["path", { d: "M16 7v9", key: "1hp2iy" }],
        ["path", { d: "M5 3a2 2 0 0 0-2 2", key: "y57alp" }],
        ["path", { d: "M9 3h1", key: "1yesri" }],
        ["path", { d: "M14 3h1", key: "1ec4yj" }],
        ["path", { d: "M19 3a2 2 0 0 1 2 2", key: "18rm91" }],
        ["path", { d: "M21 9v1", key: "mxsmne" }],
        ["path", { d: "M21 14v1", key: "169vum" }],
        ["path", { d: "M21 19a2 2 0 0 1-2 2", key: "1j7049" }],
        ["path", { d: "M14 21h1", key: "v9vybs" }],
        ["path", { d: "M9 21h1", key: "15o7lz" }],
        ["path", { d: "M5 21a2 2 0 0 1-2-2", key: "sbafld" }],
        ["path", { d: "M3 14v1", key: "vnatye" }],
        ["path", { d: "M3 9v1", key: "1r0deq" }]
      ];
      var SquareDashedKanban = createLucideIcon("square-dashed-kanban", __iconNode$41);
      var __iconNode$40 = [
        [
          "path",
          {
            d: "M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z",
            key: "xwnzip"
          }
        ],
        ["path", { d: "M5 3a2 2 0 0 0-2 2", key: "y57alp" }],
        ["path", { d: "M19 3a2 2 0 0 1 2 2", key: "18rm91" }],
        ["path", { d: "M5 21a2 2 0 0 1-2-2", key: "sbafld" }],
        ["path", { d: "M9 3h1", key: "1yesri" }],
        ["path", { d: "M9 21h2", key: "1qve2z" }],
        ["path", { d: "M14 3h1", key: "1ec4yj" }],
        ["path", { d: "M3 9v1", key: "1r0deq" }],
        ["path", { d: "M21 9v2", key: "p14lih" }],
        ["path", { d: "M3 14v1", key: "vnatye" }]
      ];
      var SquareDashedMousePointer = createLucideIcon("square-dashed-mouse-pointer", __iconNode$40);
      var __iconNode$3$ = [
        ["path", { d: "M5 3a2 2 0 0 0-2 2", key: "y57alp" }],
        ["path", { d: "M19 3a2 2 0 0 1 2 2", key: "18rm91" }],
        ["path", { d: "M21 19a2 2 0 0 1-2 2", key: "1j7049" }],
        ["path", { d: "M5 21a2 2 0 0 1-2-2", key: "sbafld" }],
        ["path", { d: "M9 3h1", key: "1yesri" }],
        ["path", { d: "M9 21h1", key: "15o7lz" }],
        ["path", { d: "M14 3h1", key: "1ec4yj" }],
        ["path", { d: "M14 21h1", key: "v9vybs" }],
        ["path", { d: "M3 9v1", key: "1r0deq" }],
        ["path", { d: "M21 9v1", key: "mxsmne" }],
        ["path", { d: "M3 14v1", key: "vnatye" }],
        ["path", { d: "M21 14v1", key: "169vum" }]
      ];
      var SquareDashed = createLucideIcon("square-dashed", __iconNode$3$);
      var __iconNode$3_ = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }],
        ["line", { x1: "12", x2: "12", y1: "16", y2: "16", key: "aqc6ln" }],
        ["line", { x1: "12", x2: "12", y1: "8", y2: "8", key: "1mkcni" }]
      ];
      var SquareDivide = createLucideIcon("square-divide", __iconNode$3_);
      var __iconNode$3Z = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
      ];
      var SquareDot = createLucideIcon("square-dot", __iconNode$3Z);
      var __iconNode$3Y = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M7 10h10", key: "1101jm" }],
        ["path", { d: "M7 14h10", key: "1mhdw3" }]
      ];
      var SquareEqual = createLucideIcon("square-equal", __iconNode$3Y);
      var __iconNode$3X = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "M9 17c2 0 2.8-1 2.8-2.8V10c0-2 1-3.3 3.2-3", key: "m1af9g" }],
        ["path", { d: "M9 11.2h5.7", key: "3zgcl2" }]
      ];
      var SquareFunction = createLucideIcon("square-function", __iconNode$3X);
      var __iconNode$3W = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M8 7v7", key: "1x2jlm" }],
        ["path", { d: "M12 7v4", key: "xawao1" }],
        ["path", { d: "M16 7v9", key: "1hp2iy" }]
      ];
      var SquareKanban = createLucideIcon("square-kanban", __iconNode$3W);
      var __iconNode$3V = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M7 7v10", key: "d5nglc" }],
        ["path", { d: "M11 7v10", key: "pptsnr" }],
        ["path", { d: "m15 7 2 10", key: "1m7qm5" }]
      ];
      var SquareLibrary = createLucideIcon("square-library", __iconNode$3V);
      var __iconNode$3U = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M8 16V8l4 4 4-4v8", key: "141u4e" }]
      ];
      var SquareM = createLucideIcon("square-m", __iconNode$3U);
      var __iconNode$3T = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M7 8h10", key: "1jw688" }],
        ["path", { d: "M7 12h10", key: "b7w52i" }],
        ["path", { d: "M7 16h10", key: "wp8him" }]
      ];
      var SquareMenu = createLucideIcon("square-menu", __iconNode$3T);
      var __iconNode$3S = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }]
      ];
      var SquareMinus = createLucideIcon("square-minus", __iconNode$3S);
      var __iconNode$3R = [
        [
          "path",
          {
            d: "M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z",
            key: "xwnzip"
          }
        ],
        ["path", { d: "M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6", key: "14rsvq" }]
      ];
      var SquareMousePointer = createLucideIcon("square-mouse-pointer", __iconNode$3R);
      var __iconNode$3Q = [
        ["path", { d: "M3.6 3.6A2 2 0 0 1 5 3h14a2 2 0 0 1 2 2v14a2 2 0 0 1-.59 1.41", key: "9l1ft6" }],
        ["path", { d: "M3 8.7V19a2 2 0 0 0 2 2h10.3", key: "17knke" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M13 13a3 3 0 1 0 0-6H9v2", key: "uoagbd" }],
        ["path", { d: "M9 17v-2.3", key: "1jxgo2" }]
      ];
      var SquareParkingOff = createLucideIcon("square-parking-off", __iconNode$3Q);
      var __iconNode$3P = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M9 17V7h4a3 3 0 0 1 0 6H9", key: "1dfk2c" }]
      ];
      var SquareParking = createLucideIcon("square-parking", __iconNode$3P);
      var __iconNode$3O = [
        ["path", { d: "M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7", key: "1m0v6g" }],
        [
          "path",
          {
            d: "M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z",
            key: "ohrbg2"
          }
        ]
      ];
      var SquarePen = createLucideIcon("square-pen", __iconNode$3O);
      var __iconNode$3N = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        ["path", { d: "M9 9h.01", key: "1q5me6" }],
        ["path", { d: "M15 15h.01", key: "lqbp3k" }]
      ];
      var SquarePercent = createLucideIcon("square-percent", __iconNode$3N);
      var __iconNode$3M = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M7 7h10", key: "udp07y" }],
        ["path", { d: "M10 7v10", key: "i1d9ee" }],
        ["path", { d: "M16 17a2 2 0 0 1-2-2V7", key: "ftwdc7" }]
      ];
      var SquarePi = createLucideIcon("square-pi", __iconNode$3M);
      var __iconNode$3L = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M12 12H9.5a2.5 2.5 0 0 1 0-5H17", key: "1l9586" }],
        ["path", { d: "M12 7v10", key: "jspqdw" }],
        ["path", { d: "M16 7v10", key: "lavkr4" }]
      ];
      var SquarePilcrow = createLucideIcon("square-pilcrow", __iconNode$3L);
      var __iconNode$3K = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "m9 8 6 4-6 4Z", key: "f1r3lt" }]
      ];
      var SquarePlay = createLucideIcon("square-play", __iconNode$3K);
      var __iconNode$3J = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["path", { d: "M12 8v8", key: "napkw2" }]
      ];
      var SquarePlus = createLucideIcon("square-plus", __iconNode$3J);
      var __iconNode$3I = [
        ["path", { d: "M7 12h2l2 5 2-10h4", key: "1fxv6h" }],
        ["rect", { x: "3", y: "3", width: "18", height: "18", rx: "2", key: "h1oib" }]
      ];
      var SquareRadical = createLucideIcon("square-radical", __iconNode$3I);
      var __iconNode$3H = [
        ["path", { d: "M12 7v4", key: "xawao1" }],
        ["path", { d: "M7.998 9.003a5 5 0 1 0 8-.005", key: "1pek45" }],
        ["rect", { x: "3", y: "3", width: "18", height: "18", rx: "2", key: "h1oib" }]
      ];
      var SquarePower = createLucideIcon("square-power", __iconNode$3H);
      var __iconNode$3G = [
        ["rect", { width: "20", height: "20", x: "2", y: "2", rx: "2", key: "1btzen" }],
        ["circle", { cx: "8", cy: "8", r: "2", key: "14cg06" }],
        ["path", { d: "M9.414 9.414 12 12", key: "qz4lzr" }],
        ["path", { d: "M14.8 14.8 18 18", key: "11flf1" }],
        ["circle", { cx: "8", cy: "16", r: "2", key: "1acxsx" }],
        ["path", { d: "m18 6-8.586 8.586", key: "11kzk1" }]
      ];
      var SquareScissors = createLucideIcon("square-scissors", __iconNode$3G);
      var __iconNode$3F = [
        ["path", { d: "M21 11a8 8 0 0 0-8-8", key: "1lxwo5" }],
        ["path", { d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4", key: "1dv2y5" }]
      ];
      var SquareRoundCorner = createLucideIcon("square-round-corner", __iconNode$3F);
      var __iconNode$3E = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M16 8.9V7H8l4 5-4 5h8v-1.9", key: "9nih0i" }]
      ];
      var SquareSigma = createLucideIcon("square-sigma", __iconNode$3E);
      var __iconNode$3D = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["line", { x1: "9", x2: "15", y1: "15", y2: "9", key: "1dfufj" }]
      ];
      var SquareSlash = createLucideIcon("square-slash", __iconNode$3D);
      var __iconNode$3C = [
        ["path", { d: "M8 19H5c-1 0-2-1-2-2V7c0-1 1-2 2-2h3", key: "lubmu8" }],
        ["path", { d: "M16 5h3c1 0 2 1 2 2v10c0 1-1 2-2 2h-3", key: "1ag34g" }],
        ["line", { x1: "12", x2: "12", y1: "4", y2: "20", key: "1tx1rr" }]
      ];
      var SquareSplitHorizontal = createLucideIcon("square-split-horizontal", __iconNode$3C);
      var __iconNode$3B = [
        ["path", { d: "M5 8V5c0-1 1-2 2-2h10c1 0 2 1 2 2v3", key: "1pi83i" }],
        ["path", { d: "M19 16v3c0 1-1 2-2 2H7c-1 0-2-1-2-2v-3", key: "ido5k7" }],
        ["line", { x1: "4", x2: "20", y1: "12", y2: "12", key: "1e0a9i" }]
      ];
      var SquareSplitVertical = createLucideIcon("square-split-vertical", __iconNode$3B);
      var __iconNode$3A = [
        ["rect", { x: "3", y: "3", width: "18", height: "18", rx: "2", key: "h1oib" }],
        ["rect", { x: "8", y: "8", width: "8", height: "8", rx: "1", key: "z9xiuo" }]
      ];
      var SquareSquare = createLucideIcon("square-square", __iconNode$3A);
      var __iconNode$3z = [
        ["path", { d: "M4 10c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2", key: "4i38lg" }],
        ["path", { d: "M10 16c-1.1 0-2-.9-2-2v-4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2", key: "mlte4a" }],
        ["rect", { width: "8", height: "8", x: "14", y: "14", rx: "2", key: "1fa9i4" }]
      ];
      var SquareStack = createLucideIcon("square-stack", __iconNode$3z);
      var __iconNode$3y = [
        ["path", { d: "m7 11 2-2-2-2", key: "1lz0vl" }],
        ["path", { d: "M11 13h4", key: "1p7l4v" }],
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }]
      ];
      var SquareTerminal = createLucideIcon("square-terminal", __iconNode$3y);
      var __iconNode$3x = [
        ["path", { d: "M18 21a6 6 0 0 0-12 0", key: "kaz2du" }],
        ["circle", { cx: "12", cy: "11", r: "4", key: "1gt34v" }],
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }]
      ];
      var SquareUserRound = createLucideIcon("square-user-round", __iconNode$3x);
      var __iconNode$3w = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
        ["path", { d: "M7 21v-2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2", key: "1m6ac2" }]
      ];
      var SquareUser = createLucideIcon("square-user", __iconNode$3w);
      var __iconNode$3v = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        ["path", { d: "m9 9 6 6", key: "z0biqf" }]
      ];
      var SquareX = createLucideIcon("square-x", __iconNode$3v);
      var __iconNode$3u = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }]
      ];
      var Square = createLucideIcon("square", __iconNode$3u);
      var __iconNode$3t = [
        [
          "path",
          {
            d: "M16 12v2a2 2 0 0 1-2 2H9a1 1 0 0 0-1 1v3a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2h0",
            key: "1mcohs"
          }
        ],
        [
          "path",
          {
            d: "M4 16a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v3a1 1 0 0 1-1 1h-5a2 2 0 0 0-2 2v2",
            key: "1r1efp"
          }
        ]
      ];
      var SquaresExclude = createLucideIcon("squares-exclude", __iconNode$3t);
      var __iconNode$3s = [
        ["path", { d: "M10 22a2 2 0 0 1-2-2", key: "i7yj1i" }],
        ["path", { d: "M14 2a2 2 0 0 1 2 2", key: "170a0m" }],
        ["path", { d: "M16 22h-2", key: "18d249" }],
        ["path", { d: "M2 10V8", key: "7yj4fe" }],
        ["path", { d: "M2 4a2 2 0 0 1 2-2", key: "ddgnws" }],
        ["path", { d: "M20 8a2 2 0 0 1 2 2", key: "1770vt" }],
        ["path", { d: "M22 14v2", key: "iot8ja" }],
        ["path", { d: "M22 20a2 2 0 0 1-2 2", key: "qj8q6g" }],
        ["path", { d: "M4 16a2 2 0 0 1-2-2", key: "1dnafg" }],
        [
          "path",
          { d: "M8 10a2 2 0 0 1 2-2h5a1 1 0 0 1 1 1v5a2 2 0 0 1-2 2H9a1 1 0 0 1-1-1z", key: "ci6f0b" }
        ],
        ["path", { d: "M8 2h2", key: "1gmkwm" }]
      ];
      var SquaresIntersect = createLucideIcon("squares-intersect", __iconNode$3s);
      var __iconNode$3r = [
        ["path", { d: "M10 22a2 2 0 0 1-2-2", key: "i7yj1i" }],
        ["path", { d: "M16 22h-2", key: "18d249" }],
        [
          "path",
          {
            d: "M16 4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-5a2 2 0 0 1 2-2h5a1 1 0 0 0 1-1z",
            key: "1njgbb"
          }
        ],
        ["path", { d: "M20 8a2 2 0 0 1 2 2", key: "1770vt" }],
        ["path", { d: "M22 14v2", key: "iot8ja" }],
        ["path", { d: "M22 20a2 2 0 0 1-2 2", key: "qj8q6g" }]
      ];
      var SquaresSubtract = createLucideIcon("squares-subtract", __iconNode$3r);
      var __iconNode$3q = [
        [
          "path",
          {
            d: "M4 16a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v3a1 1 0 0 0 1 1h3a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H10a2 2 0 0 1-2-2v-3a1 1 0 0 0-1-1z",
            key: "17jnth"
          }
        ]
      ];
      var SquaresUnite = createLucideIcon("squares-unite", __iconNode$3q);
      var __iconNode$3p = [
        ["path", { d: "M12 3c7.2 0 9 1.8 9 9s-1.8 9-9 9-9-1.8-9-9 1.8-9 9-9", key: "garfkc" }]
      ];
      var Squircle = createLucideIcon("squircle", __iconNode$3p);
      var __iconNode$3o = [
        ["path", { d: "M15.236 22a3 3 0 0 0-2.2-5", key: "21bitc" }],
        ["path", { d: "M16 20a3 3 0 0 1 3-3h1a2 2 0 0 0 2-2v-2a4 4 0 0 0-4-4V4", key: "oh0fg0" }],
        ["path", { d: "M18 13h.01", key: "9veqaj" }],
        [
          "path",
          {
            d: "M18 6a4 4 0 0 0-4 4 7 7 0 0 0-7 7c0-5 4-5 4-10.5a4.5 4.5 0 1 0-9 0 2.5 2.5 0 0 0 5 0C7 10 3 11 3 17c0 2.8 2.2 5 5 5h10",
            key: "980v8a"
          }
        ]
      ];
      var Squirrel = createLucideIcon("squirrel", __iconNode$3o);
      var __iconNode$3n = [
        ["path", { d: "M5 22h14", key: "ehvnwv" }],
        [
          "path",
          {
            d: "M19.27 13.73A2.5 2.5 0 0 0 17.5 13h-11A2.5 2.5 0 0 0 4 15.5V17a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-1.5c0-.66-.26-1.3-.73-1.77Z",
            key: "1sy9ra"
          }
        ],
        [
          "path",
          { d: "M14 13V8.5C14 7 15 7 15 5a3 3 0 0 0-3-3c-1.66 0-3 1-3 3s1 2 1 3.5V13", key: "cnxgux" }
        ]
      ];
      var Stamp = createLucideIcon("stamp", __iconNode$3n);
      var __iconNode$3m = [
        [
          "path",
          {
            d: "M12 18.338a2.1 2.1 0 0 0-.987.244L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.12 2.12 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.12 2.12 0 0 0 1.597-1.16l2.309-4.679A.53.53 0 0 1 12 2",
            key: "2ksp49"
          }
        ]
      ];
      var StarHalf = createLucideIcon("star-half", __iconNode$3m);
      var __iconNode$3l = [
        ["path", { d: "M8.34 8.34 2 9.27l5 4.87L5.82 21 12 17.77 18.18 21l-.59-3.43", key: "16m0ql" }],
        ["path", { d: "M18.42 12.76 22 9.27l-6.91-1L12 2l-1.44 2.91", key: "1vt8nq" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var StarOff = createLucideIcon("star-off", __iconNode$3l);
      var __iconNode$3k = [
        [
          "path",
          {
            d: "M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z",
            key: "r04s7s"
          }
        ]
      ];
      var Star = createLucideIcon("star", __iconNode$3k);
      var __iconNode$3j = [
        ["line", { x1: "18", x2: "18", y1: "20", y2: "4", key: "cun8e5" }],
        ["polygon", { points: "14,20 4,12 14,4", key: "ypakod" }]
      ];
      var StepBack = createLucideIcon("step-back", __iconNode$3j);
      var __iconNode$3i = [
        ["line", { x1: "6", x2: "6", y1: "4", y2: "20", key: "fy8qot" }],
        ["polygon", { points: "10,4 20,12 10,20", key: "1mc1pf" }]
      ];
      var StepForward = createLucideIcon("step-forward", __iconNode$3i);
      var __iconNode$3h = [
        ["path", { d: "M11 2v2", key: "1539x4" }],
        ["path", { d: "M5 2v2", key: "1yf1q8" }],
        ["path", { d: "M5 3H4a2 2 0 0 0-2 2v4a6 6 0 0 0 12 0V5a2 2 0 0 0-2-2h-1", key: "rb5t3r" }],
        ["path", { d: "M8 15a6 6 0 0 0 12 0v-3", key: "x18d4x" }],
        ["circle", { cx: "20", cy: "10", r: "2", key: "ts1r5v" }]
      ];
      var Stethoscope3 = createLucideIcon("stethoscope", __iconNode$3h);
      var __iconNode$3g = [
        [
          "path",
          { d: "M15.5 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V8.5L15.5 3Z", key: "1wis1t" }
        ],
        ["path", { d: "M14 3v4a2 2 0 0 0 2 2h4", key: "36rjfy" }],
        ["path", { d: "M8 13h.01", key: "1sbv64" }],
        ["path", { d: "M16 13h.01", key: "wip0gl" }],
        ["path", { d: "M10 16s.8 1 2 1c1.3 0 2-1 2-1", key: "1vvgv3" }]
      ];
      var Sticker = createLucideIcon("sticker", __iconNode$3g);
      var __iconNode$3f = [
        ["path", { d: "M16 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V8Z", key: "qazsjp" }],
        ["path", { d: "M15 3v4a2 2 0 0 0 2 2h4", key: "40519r" }]
      ];
      var StickyNote = createLucideIcon("sticky-note", __iconNode$3f);
      var __iconNode$3e = [
        ["path", { d: "m2 7 4.41-4.41A2 2 0 0 1 7.83 2h8.34a2 2 0 0 1 1.42.59L22 7", key: "ztvudi" }],
        ["path", { d: "M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8", key: "1b2hhj" }],
        ["path", { d: "M15 22v-4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4", key: "2ebpfo" }],
        ["path", { d: "M2 7h20", key: "1fcdvo" }],
        [
          "path",
          {
            d: "M22 7v3a2 2 0 0 1-2 2a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 16 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 12 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 8 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 4 12a2 2 0 0 1-2-2V7",
            key: "6c3vgh"
          }
        ]
      ];
      var Store = createLucideIcon("store", __iconNode$3e);
      var __iconNode$3d = [
        ["rect", { width: "20", height: "6", x: "2", y: "4", rx: "2", key: "qdearl" }],
        ["rect", { width: "20", height: "6", x: "2", y: "14", rx: "2", key: "1xrn6j" }]
      ];
      var StretchHorizontal = createLucideIcon("stretch-horizontal", __iconNode$3d);
      var __iconNode$3c = [
        ["rect", { width: "6", height: "20", x: "4", y: "2", rx: "2", key: "19qu7m" }],
        ["rect", { width: "6", height: "20", x: "14", y: "2", rx: "2", key: "24v0nk" }]
      ];
      var StretchVertical = createLucideIcon("stretch-vertical", __iconNode$3c);
      var __iconNode$3b = [
        ["path", { d: "M16 4H9a3 3 0 0 0-2.83 4", key: "43sutm" }],
        ["path", { d: "M14 12a4 4 0 0 1 0 8H6", key: "nlfj13" }],
        ["line", { x1: "4", x2: "20", y1: "12", y2: "12", key: "1e0a9i" }]
      ];
      var Strikethrough = createLucideIcon("strikethrough", __iconNode$3b);
      var __iconNode$3a = [
        ["path", { d: "m4 5 8 8", key: "1eunvl" }],
        ["path", { d: "m12 5-8 8", key: "1ah0jp" }],
        [
          "path",
          {
            d: "M20 19h-4c0-1.5.44-2 1.5-2.5S20 15.33 20 14c0-.47-.17-.93-.48-1.29a2.11 2.11 0 0 0-2.62-.44c-.42.24-.74.62-.9 1.07",
            key: "e8ta8j"
          }
        ]
      ];
      var Subscript = createLucideIcon("subscript", __iconNode$3a);
      var __iconNode$39 = [
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
        ["path", { d: "M12 4h.01", key: "1ujb9j" }],
        ["path", { d: "M20 12h.01", key: "1ykeid" }],
        ["path", { d: "M12 20h.01", key: "zekei9" }],
        ["path", { d: "M4 12h.01", key: "158zrr" }],
        ["path", { d: "M17.657 6.343h.01", key: "31pqzk" }],
        ["path", { d: "M17.657 17.657h.01", key: "jehnf4" }],
        ["path", { d: "M6.343 17.657h.01", key: "gdk6ow" }],
        ["path", { d: "M6.343 6.343h.01", key: "1uurf0" }]
      ];
      var SunDim = createLucideIcon("sun-dim", __iconNode$39);
      var __iconNode$38 = [
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
        ["path", { d: "M12 3v1", key: "1asbbs" }],
        ["path", { d: "M12 20v1", key: "1wcdkc" }],
        ["path", { d: "M3 12h1", key: "lp3yf2" }],
        ["path", { d: "M20 12h1", key: "1vloll" }],
        ["path", { d: "m18.364 5.636-.707.707", key: "1hakh0" }],
        ["path", { d: "m6.343 17.657-.707.707", key: "18m9nf" }],
        ["path", { d: "m5.636 5.636.707.707", key: "1xv1c5" }],
        ["path", { d: "m17.657 17.657.707.707", key: "vl76zb" }]
      ];
      var SunMedium = createLucideIcon("sun-medium", __iconNode$38);
      var __iconNode$37 = [
        ["path", { d: "M12 8a2.83 2.83 0 0 0 4 4 4 4 0 1 1-4-4", key: "1fu5g2" }],
        ["path", { d: "M12 2v2", key: "tus03m" }],
        ["path", { d: "M12 20v2", key: "1lh1kg" }],
        ["path", { d: "m4.9 4.9 1.4 1.4", key: "b9915j" }],
        ["path", { d: "m17.7 17.7 1.4 1.4", key: "qc3ed3" }],
        ["path", { d: "M2 12h2", key: "1t8f8n" }],
        ["path", { d: "M20 12h2", key: "1q8mjw" }],
        ["path", { d: "m6.3 17.7-1.4 1.4", key: "5gca6" }],
        ["path", { d: "m19.1 4.9-1.4 1.4", key: "wpu9u6" }]
      ];
      var SunMoon = createLucideIcon("sun-moon", __iconNode$37);
      var __iconNode$36 = [
        ["path", { d: "M10 21v-1", key: "1u8rkd" }],
        ["path", { d: "M10 4V3", key: "pkzwkn" }],
        ["path", { d: "M10 9a3 3 0 0 0 0 6", key: "gv75dk" }],
        ["path", { d: "m14 20 1.25-2.5L18 18", key: "1chtki" }],
        ["path", { d: "m14 4 1.25 2.5L18 6", key: "1b4wsy" }],
        ["path", { d: "m17 21-3-6 1.5-3H22", key: "o5qa3v" }],
        ["path", { d: "m17 3-3 6 1.5 3", key: "11697g" }],
        ["path", { d: "M2 12h1", key: "1uaihz" }],
        ["path", { d: "m20 10-1.5 2 1.5 2", key: "1swlpi" }],
        ["path", { d: "m3.64 18.36.7-.7", key: "105rm9" }],
        ["path", { d: "m4.34 6.34-.7-.7", key: "d3unjp" }]
      ];
      var SunSnow = createLucideIcon("sun-snow", __iconNode$36);
      var __iconNode$35 = [
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
        ["path", { d: "M12 2v2", key: "tus03m" }],
        ["path", { d: "M12 20v2", key: "1lh1kg" }],
        ["path", { d: "m4.93 4.93 1.41 1.41", key: "149t6j" }],
        ["path", { d: "m17.66 17.66 1.41 1.41", key: "ptbguv" }],
        ["path", { d: "M2 12h2", key: "1t8f8n" }],
        ["path", { d: "M20 12h2", key: "1q8mjw" }],
        ["path", { d: "m6.34 17.66-1.41 1.41", key: "1m8zz5" }],
        ["path", { d: "m19.07 4.93-1.41 1.41", key: "1shlcs" }]
      ];
      var Sun = createLucideIcon("sun", __iconNode$35);
      var __iconNode$34 = [
        ["path", { d: "M12 2v8", key: "1q4o3n" }],
        ["path", { d: "m4.93 10.93 1.41 1.41", key: "2a7f42" }],
        ["path", { d: "M2 18h2", key: "j10viu" }],
        ["path", { d: "M20 18h2", key: "wocana" }],
        ["path", { d: "m19.07 10.93-1.41 1.41", key: "15zs5n" }],
        ["path", { d: "M22 22H2", key: "19qnx5" }],
        ["path", { d: "m8 6 4-4 4 4", key: "ybng9g" }],
        ["path", { d: "M16 18a4 4 0 0 0-8 0", key: "1lzouq" }]
      ];
      var Sunrise = createLucideIcon("sunrise", __iconNode$34);
      var __iconNode$33 = [
        ["path", { d: "M12 10V2", key: "16sf7g" }],
        ["path", { d: "m4.93 10.93 1.41 1.41", key: "2a7f42" }],
        ["path", { d: "M2 18h2", key: "j10viu" }],
        ["path", { d: "M20 18h2", key: "wocana" }],
        ["path", { d: "m19.07 10.93-1.41 1.41", key: "15zs5n" }],
        ["path", { d: "M22 22H2", key: "19qnx5" }],
        ["path", { d: "m16 6-4 4-4-4", key: "6wukr" }],
        ["path", { d: "M16 18a4 4 0 0 0-8 0", key: "1lzouq" }]
      ];
      var Sunset = createLucideIcon("sunset", __iconNode$33);
      var __iconNode$32 = [
        ["path", { d: "m4 19 8-8", key: "hr47gm" }],
        ["path", { d: "m12 19-8-8", key: "1dhhmo" }],
        [
          "path",
          {
            d: "M20 12h-4c0-1.5.442-2 1.5-2.5S20 8.334 20 7.002c0-.472-.17-.93-.484-1.29a2.105 2.105 0 0 0-2.617-.436c-.42.239-.738.614-.899 1.06",
            key: "1dfcux"
          }
        ]
      ];
      var Superscript = createLucideIcon("superscript", __iconNode$32);
      var __iconNode$31 = [
        ["path", { d: "M11 17a4 4 0 0 1-8 0V5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2Z", key: "1ldrpk" }],
        ["path", { d: "M16.7 13H19a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H7", key: "11i5po" }],
        ["path", { d: "M 7 17h.01", key: "1euzgo" }],
        [
          "path",
          {
            d: "m11 8 2.3-2.3a2.4 2.4 0 0 1 3.404.004L18.6 7.6a2.4 2.4 0 0 1 .026 3.434L9.9 19.8",
            key: "o2gii7"
          }
        ]
      ];
      var SwatchBook = createLucideIcon("swatch-book", __iconNode$31);
      var __iconNode$30 = [
        ["path", { d: "M10 21V3h8", key: "br2l0g" }],
        ["path", { d: "M6 16h9", key: "2py0wn" }],
        ["path", { d: "M10 9.5h7", key: "13dmhz" }]
      ];
      var SwissFranc = createLucideIcon("swiss-franc", __iconNode$30);
      var __iconNode$2$ = [
        ["path", { d: "M11 19H4a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h5", key: "mtk2lu" }],
        ["path", { d: "M13 5h7a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-5", key: "120jsl" }],
        ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
        ["path", { d: "m18 22-3-3 3-3", key: "kgdoj7" }],
        ["path", { d: "m6 2 3 3-3 3", key: "1fnbkv" }]
      ];
      var SwitchCamera = createLucideIcon("switch-camera", __iconNode$2$);
      var __iconNode$2_ = [
        ["polyline", { points: "14.5 17.5 3 6 3 3 6 3 17.5 14.5", key: "1hfsw2" }],
        ["line", { x1: "13", x2: "19", y1: "19", y2: "13", key: "1vrmhu" }],
        ["line", { x1: "16", x2: "20", y1: "16", y2: "20", key: "1bron3" }],
        ["line", { x1: "19", x2: "21", y1: "21", y2: "19", key: "13pww6" }]
      ];
      var Sword = createLucideIcon("sword", __iconNode$2_);
      var __iconNode$2Z = [
        ["polyline", { points: "14.5 17.5 3 6 3 3 6 3 17.5 14.5", key: "1hfsw2" }],
        ["line", { x1: "13", x2: "19", y1: "19", y2: "13", key: "1vrmhu" }],
        ["line", { x1: "16", x2: "20", y1: "16", y2: "20", key: "1bron3" }],
        ["line", { x1: "19", x2: "21", y1: "21", y2: "19", key: "13pww6" }],
        ["polyline", { points: "14.5 6.5 18 3 21 3 21 6 17.5 9.5", key: "hbey2j" }],
        ["line", { x1: "5", x2: "9", y1: "14", y2: "18", key: "1hf58s" }],
        ["line", { x1: "7", x2: "4", y1: "17", y2: "20", key: "pidxm4" }],
        ["line", { x1: "3", x2: "5", y1: "19", y2: "21", key: "1pehsh" }]
      ];
      var Swords = createLucideIcon("swords", __iconNode$2Z);
      var __iconNode$2Y = [
        ["path", { d: "m18 2 4 4", key: "22kx64" }],
        ["path", { d: "m17 7 3-3", key: "1w1zoj" }],
        ["path", { d: "M19 9 8.7 19.3c-1 1-2.5 1-3.4 0l-.6-.6c-1-1-1-2.5 0-3.4L15 5", key: "1exhtz" }],
        ["path", { d: "m9 11 4 4", key: "rovt3i" }],
        ["path", { d: "m5 19-3 3", key: "59f2uf" }],
        ["path", { d: "m14 4 6 6", key: "yqp9t2" }]
      ];
      var Syringe = createLucideIcon("syringe", __iconNode$2Y);
      var __iconNode$2X = [
        [
          "path",
          {
            d: "M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18",
            key: "gugj83"
          }
        ]
      ];
      var Table2 = createLucideIcon("table-2", __iconNode$2X);
      var __iconNode$2W = [
        ["path", { d: "M12 21v-6", key: "lihzve" }],
        ["path", { d: "M12 9V3", key: "da5inc" }],
        ["path", { d: "M3 15h18", key: "5xshup" }],
        ["path", { d: "M3 9h18", key: "1pudct" }],
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }]
      ];
      var TableCellsMerge = createLucideIcon("table-cells-merge", __iconNode$2W);
      var __iconNode$2V = [
        ["path", { d: "M12 15V9", key: "8c7uyn" }],
        ["path", { d: "M3 15h18", key: "5xshup" }],
        ["path", { d: "M3 9h18", key: "1pudct" }],
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }]
      ];
      var TableCellsSplit = createLucideIcon("table-cells-split", __iconNode$2V);
      var __iconNode$2U = [
        ["path", { d: "M14 14v2", key: "w2a1xv" }],
        ["path", { d: "M14 20v2", key: "1lq872" }],
        ["path", { d: "M14 2v2", key: "6buw04" }],
        ["path", { d: "M14 8v2", key: "i67w9a" }],
        ["path", { d: "M2 15h8", key: "82wtch" }],
        ["path", { d: "M2 3h6a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H2", key: "up0l64" }],
        ["path", { d: "M2 9h8", key: "yelfik" }],
        ["path", { d: "M22 15h-4", key: "1es58f" }],
        ["path", { d: "M22 3h-2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h2", key: "pdjoqf" }],
        ["path", { d: "M22 9h-4", key: "1luja7" }],
        ["path", { d: "M5 3v18", key: "14hmio" }]
      ];
      var TableColumnsSplit = createLucideIcon("table-columns-split", __iconNode$2U);
      var __iconNode$2T = [
        ["path", { d: "M16 12H3", key: "1a2rj7" }],
        ["path", { d: "M16 18H3", key: "12xzn7" }],
        ["path", { d: "M16 6H3", key: "1wxfjs" }],
        ["path", { d: "M21 12h.01", key: "msek7k" }],
        ["path", { d: "M21 18h.01", key: "1e8rq1" }],
        ["path", { d: "M21 6h.01", key: "1koanj" }]
      ];
      var TableOfContents = createLucideIcon("table-of-contents", __iconNode$2T);
      var __iconNode$2S = [
        ["path", { d: "M15 3v18", key: "14nvp0" }],
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M21 9H3", key: "1338ky" }],
        ["path", { d: "M21 15H3", key: "9uk58r" }]
      ];
      var TableProperties = createLucideIcon("table-properties", __iconNode$2S);
      var __iconNode$2R = [
        ["path", { d: "M14 10h2", key: "1lstlu" }],
        ["path", { d: "M15 22v-8", key: "1fwwgm" }],
        ["path", { d: "M15 2v4", key: "1044rn" }],
        ["path", { d: "M2 10h2", key: "1r8dkt" }],
        ["path", { d: "M20 10h2", key: "1ug425" }],
        ["path", { d: "M3 19h18", key: "awlh7x" }],
        ["path", { d: "M3 22v-6a2 2 135 0 1 2-2h14a2 2 45 0 1 2 2v6", key: "ibqhof" }],
        ["path", { d: "M3 2v2a2 2 45 0 0 2 2h14a2 2 135 0 0 2-2V2", key: "1uenja" }],
        ["path", { d: "M8 10h2", key: "66od0" }],
        ["path", { d: "M9 22v-8", key: "fmnu31" }],
        ["path", { d: "M9 2v4", key: "j1yeou" }]
      ];
      var TableRowsSplit = createLucideIcon("table-rows-split", __iconNode$2R);
      var __iconNode$2Q = [
        ["path", { d: "M12 3v18", key: "108xh3" }],
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 9h18", key: "1pudct" }],
        ["path", { d: "M3 15h18", key: "5xshup" }]
      ];
      var Table = createLucideIcon("table", __iconNode$2Q);
      var __iconNode$2P = [
        ["rect", { width: "10", height: "14", x: "3", y: "8", rx: "2", key: "1vrsiq" }],
        ["path", { d: "M5 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2h-2.4", key: "1j4zmg" }],
        ["path", { d: "M8 18h.01", key: "lrp35t" }]
      ];
      var TabletSmartphone = createLucideIcon("tablet-smartphone", __iconNode$2P);
      var __iconNode$2O = [
        ["circle", { cx: "7", cy: "7", r: "5", key: "x29byf" }],
        ["circle", { cx: "17", cy: "17", r: "5", key: "1op1d2" }],
        ["path", { d: "M12 17h10", key: "ls21zv" }],
        ["path", { d: "m3.46 10.54 7.08-7.08", key: "1rehiu" }]
      ];
      var Tablets = createLucideIcon("tablets", __iconNode$2O);
      var __iconNode$2N = [
        ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", ry: "2", key: "76otgf" }],
        ["line", { x1: "12", x2: "12.01", y1: "18", y2: "18", key: "1dp563" }]
      ];
      var Tablet = createLucideIcon("tablet", __iconNode$2N);
      var __iconNode$2M = [
        [
          "path",
          {
            d: "M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z",
            key: "vktsd0"
          }
        ],
        ["circle", { cx: "7.5", cy: "7.5", r: ".5", fill: "currentColor", key: "kqv944" }]
      ];
      var Tag = createLucideIcon("tag", __iconNode$2M);
      var __iconNode$2L = [
        ["path", { d: "m15 5 6.3 6.3a2.4 2.4 0 0 1 0 3.4L17 19", key: "1cbfv1" }],
        [
          "path",
          {
            d: "M9.586 5.586A2 2 0 0 0 8.172 5H3a1 1 0 0 0-1 1v5.172a2 2 0 0 0 .586 1.414L8.29 18.29a2.426 2.426 0 0 0 3.42 0l3.58-3.58a2.426 2.426 0 0 0 0-3.42z",
            key: "135mg7"
          }
        ],
        ["circle", { cx: "6.5", cy: "9.5", r: ".5", fill: "currentColor", key: "5pm5xn" }]
      ];
      var Tags = createLucideIcon("tags", __iconNode$2L);
      var __iconNode$2K = [["path", { d: "M4 4v16", key: "6qkkli" }]];
      var Tally1 = createLucideIcon("tally-1", __iconNode$2K);
      var __iconNode$2J = [
        ["path", { d: "M4 4v16", key: "6qkkli" }],
        ["path", { d: "M9 4v16", key: "81ygyz" }]
      ];
      var Tally2 = createLucideIcon("tally-2", __iconNode$2J);
      var __iconNode$2I = [
        ["path", { d: "M4 4v16", key: "6qkkli" }],
        ["path", { d: "M9 4v16", key: "81ygyz" }],
        ["path", { d: "M14 4v16", key: "12vmem" }]
      ];
      var Tally3 = createLucideIcon("tally-3", __iconNode$2I);
      var __iconNode$2H = [
        ["path", { d: "M4 4v16", key: "6qkkli" }],
        ["path", { d: "M9 4v16", key: "81ygyz" }],
        ["path", { d: "M14 4v16", key: "12vmem" }],
        ["path", { d: "M19 4v16", key: "8ij5ei" }]
      ];
      var Tally4 = createLucideIcon("tally-4", __iconNode$2H);
      var __iconNode$2G = [
        ["path", { d: "M4 4v16", key: "6qkkli" }],
        ["path", { d: "M9 4v16", key: "81ygyz" }],
        ["path", { d: "M14 4v16", key: "12vmem" }],
        ["path", { d: "M19 4v16", key: "8ij5ei" }],
        ["path", { d: "M22 6 2 18", key: "h9moai" }]
      ];
      var Tally5 = createLucideIcon("tally-5", __iconNode$2G);
      var __iconNode$2F = [
        ["circle", { cx: "17", cy: "4", r: "2", key: "y5j2s2" }],
        ["path", { d: "M15.59 5.41 5.41 15.59", key: "l0vprr" }],
        ["circle", { cx: "4", cy: "17", r: "2", key: "9p4efm" }],
        ["path", { d: "M12 22s-4-9-1.5-11.5S22 12 22 12", key: "1twk4o" }]
      ];
      var Tangent = createLucideIcon("tangent", __iconNode$2F);
      var __iconNode$2E = [
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
        ["circle", { cx: "12", cy: "12", r: "6", key: "1vlfrh" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
      ];
      var Target2 = createLucideIcon("target", __iconNode$2E);
      var __iconNode$2D = [
        [
          "path",
          {
            d: "m10.065 12.493-6.18 1.318a.934.934 0 0 1-1.108-.702l-.537-2.15a1.07 1.07 0 0 1 .691-1.265l13.504-4.44",
            key: "k4qptu"
          }
        ],
        ["path", { d: "m13.56 11.747 4.332-.924", key: "19l80z" }],
        ["path", { d: "m16 21-3.105-6.21", key: "7oh9d" }],
        [
          "path",
          {
            d: "M16.485 5.94a2 2 0 0 1 1.455-2.425l1.09-.272a1 1 0 0 1 1.212.727l1.515 6.06a1 1 0 0 1-.727 1.213l-1.09.272a2 2 0 0 1-2.425-1.455z",
            key: "m7xp4m"
          }
        ],
        ["path", { d: "m6.158 8.633 1.114 4.456", key: "74o979" }],
        ["path", { d: "m8 21 3.105-6.21", key: "1fvxut" }],
        ["circle", { cx: "12", cy: "13", r: "2", key: "1c1ljs" }]
      ];
      var Telescope = createLucideIcon("telescope", __iconNode$2D);
      var __iconNode$2C = [
        ["circle", { cx: "4", cy: "4", r: "2", key: "bt5ra8" }],
        ["path", { d: "m14 5 3-3 3 3", key: "1sorif" }],
        ["path", { d: "m14 10 3-3 3 3", key: "1jyi9h" }],
        ["path", { d: "M17 14V2", key: "8ymqnk" }],
        ["path", { d: "M17 14H7l-5 8h20Z", key: "13ar7p" }],
        ["path", { d: "M8 14v8", key: "1ghmqk" }],
        ["path", { d: "m9 14 5 8", key: "13pgi6" }]
      ];
      var TentTree = createLucideIcon("tent-tree", __iconNode$2C);
      var __iconNode$2B = [
        ["path", { d: "M3.5 21 14 3", key: "1szst5" }],
        ["path", { d: "M20.5 21 10 3", key: "1310c3" }],
        ["path", { d: "M15.5 21 12 15l-3.5 6", key: "1ddtfw" }],
        ["path", { d: "M2 21h20", key: "1nyx9w" }]
      ];
      var Tent = createLucideIcon("tent", __iconNode$2B);
      var __iconNode$2A = [
        ["polyline", { points: "4 17 10 11 4 5", key: "akl6gq" }],
        ["line", { x1: "12", x2: "20", y1: "19", y2: "19", key: "q2wloq" }]
      ];
      var Terminal = createLucideIcon("terminal", __iconNode$2A);
      var __iconNode$2z = [
        [
          "path",
          { d: "M21 7 6.82 21.18a2.83 2.83 0 0 1-3.99-.01a2.83 2.83 0 0 1 0-4L17 3", key: "1ub6xw" }
        ],
        ["path", { d: "m16 2 6 6", key: "1gw87d" }],
        ["path", { d: "M12 16H4", key: "1cjfip" }]
      ];
      var TestTubeDiagonal = createLucideIcon("test-tube-diagonal", __iconNode$2z);
      var __iconNode$2y = [
        ["path", { d: "M14.5 2v17.5c0 1.4-1.1 2.5-2.5 2.5c-1.4 0-2.5-1.1-2.5-2.5V2", key: "125lnx" }],
        ["path", { d: "M8.5 2h7", key: "csnxdl" }],
        ["path", { d: "M14.5 16h-5", key: "1ox875" }]
      ];
      var TestTube = createLucideIcon("test-tube", __iconNode$2y);
      var __iconNode$2x = [
        ["path", { d: "M9 2v17.5A2.5 2.5 0 0 1 6.5 22A2.5 2.5 0 0 1 4 19.5V2", key: "1hjrqt" }],
        ["path", { d: "M20 2v17.5a2.5 2.5 0 0 1-2.5 2.5a2.5 2.5 0 0 1-2.5-2.5V2", key: "16lc8n" }],
        ["path", { d: "M3 2h7", key: "7s29d5" }],
        ["path", { d: "M14 2h7", key: "7sicin" }],
        ["path", { d: "M9 16H4", key: "1bfye3" }],
        ["path", { d: "M20 16h-5", key: "ddnjpe" }]
      ];
      var TestTubes2 = createLucideIcon("test-tubes", __iconNode$2x);
      var __iconNode$2w = [
        ["path", { d: "M12 20h-1a2 2 0 0 1-2-2 2 2 0 0 1-2 2H6", key: "1528k5" }],
        ["path", { d: "M13 8h7a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-7", key: "13ksps" }],
        ["path", { d: "M5 16H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h1", key: "1n9rhb" }],
        ["path", { d: "M6 4h1a2 2 0 0 1 2 2 2 2 0 0 1 2-2h1", key: "1mj8rg" }],
        ["path", { d: "M9 6v12", key: "velyjx" }]
      ];
      var TextCursorInput = createLucideIcon("text-cursor-input", __iconNode$2w);
      var __iconNode$2v = [
        ["path", { d: "M17 22h-1a4 4 0 0 1-4-4V6a4 4 0 0 1 4-4h1", key: "uvaxm9" }],
        ["path", { d: "M7 22h1a4 4 0 0 0 4-4v-1", key: "11xy8d" }],
        ["path", { d: "M7 2h1a4 4 0 0 1 4 4v1", key: "1uw06m" }]
      ];
      var TextCursor = createLucideIcon("text-cursor", __iconNode$2v);
      var __iconNode$2u = [
        ["path", { d: "M17 6H3", key: "16j9eg" }],
        ["path", { d: "M21 12H8", key: "scolzb" }],
        ["path", { d: "M21 18H8", key: "1wfozv" }],
        ["path", { d: "M3 12v6", key: "fv4c87" }]
      ];
      var TextQuote = createLucideIcon("text-quote", __iconNode$2u);
      var __iconNode$2t = [
        ["path", { d: "M21 6H3", key: "1jwq7v" }],
        ["path", { d: "M10 12H3", key: "1ulcyk" }],
        ["path", { d: "M10 18H3", key: "13769t" }],
        ["circle", { cx: "17", cy: "15", r: "3", key: "1upz2a" }],
        ["path", { d: "m21 19-1.9-1.9", key: "dwi7p8" }]
      ];
      var TextSearch = createLucideIcon("text-search", __iconNode$2t);
      var __iconNode$2s = [
        ["path", { d: "M14 21h1", key: "v9vybs" }],
        ["path", { d: "M14 3h1", key: "1ec4yj" }],
        ["path", { d: "M19 3a2 2 0 0 1 2 2", key: "18rm91" }],
        ["path", { d: "M21 14v1", key: "169vum" }],
        ["path", { d: "M21 19a2 2 0 0 1-2 2", key: "1j7049" }],
        ["path", { d: "M21 9v1", key: "mxsmne" }],
        ["path", { d: "M3 14v1", key: "vnatye" }],
        ["path", { d: "M3 9v1", key: "1r0deq" }],
        ["path", { d: "M5 21a2 2 0 0 1-2-2", key: "sbafld" }],
        ["path", { d: "M5 3a2 2 0 0 0-2 2", key: "y57alp" }],
        ["path", { d: "M7 12h10", key: "b7w52i" }],
        ["path", { d: "M7 16h6", key: "1vyc9m" }],
        ["path", { d: "M7 8h8", key: "1jbsf9" }],
        ["path", { d: "M9 21h1", key: "15o7lz" }],
        ["path", { d: "M9 3h1", key: "1yesri" }]
      ];
      var TextSelect = createLucideIcon("text-select", __iconNode$2s);
      var __iconNode$2r = [
        ["path", { d: "M15 18H3", key: "olowqp" }],
        ["path", { d: "M17 6H3", key: "16j9eg" }],
        ["path", { d: "M21 12H3", key: "2avoz0" }]
      ];
      var Text = createLucideIcon("text", __iconNode$2r);
      var __iconNode$2q = [
        ["path", { d: "M2 10s3-3 3-8", key: "3xiif0" }],
        ["path", { d: "M22 10s-3-3-3-8", key: "ioaa5q" }],
        ["path", { d: "M10 2c0 4.4-3.6 8-8 8", key: "16fkpi" }],
        ["path", { d: "M14 2c0 4.4 3.6 8 8 8", key: "b9eulq" }],
        ["path", { d: "M2 10s2 2 2 5", key: "1au1lb" }],
        ["path", { d: "M22 10s-2 2-2 5", key: "qi2y5e" }],
        ["path", { d: "M8 15h8", key: "45n4r" }],
        ["path", { d: "M2 22v-1a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1", key: "1vsc2m" }],
        ["path", { d: "M14 22v-1a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1", key: "hrha4u" }]
      ];
      var Theater = createLucideIcon("theater", __iconNode$2q);
      var __iconNode$2p = [
        ["path", { d: "m10 20-1.25-2.5L6 18", key: "18frcb" }],
        ["path", { d: "M10 4 8.75 6.5 6 6", key: "7mghy3" }],
        ["path", { d: "M10.585 15H10", key: "4nqulp" }],
        ["path", { d: "M2 12h6.5L10 9", key: "kv9z4n" }],
        ["path", { d: "M20 14.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0z", key: "yu0u2z" }],
        ["path", { d: "m4 10 1.5 2L4 14", key: "k9enpj" }],
        ["path", { d: "m7 21 3-6-1.5-3", key: "j8hb9u" }],
        ["path", { d: "m7 3 3 6h2", key: "1bbqgq" }]
      ];
      var ThermometerSnowflake = createLucideIcon("thermometer-snowflake", __iconNode$2p);
      var __iconNode$2o = [
        ["path", { d: "M12 9a4 4 0 0 0-2 7.5", key: "1jvsq6" }],
        ["path", { d: "M12 3v2", key: "1w22ol" }],
        ["path", { d: "m6.6 18.4-1.4 1.4", key: "w2yidj" }],
        ["path", { d: "M20 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z", key: "iof6y5" }],
        ["path", { d: "M4 13H2", key: "118le4" }],
        ["path", { d: "M6.34 7.34 4.93 5.93", key: "1brd51" }]
      ];
      var ThermometerSun = createLucideIcon("thermometer-sun", __iconNode$2o);
      var __iconNode$2n = [
        ["path", { d: "M14 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z", key: "17jzev" }]
      ];
      var Thermometer = createLucideIcon("thermometer", __iconNode$2n);
      var __iconNode$2m = [
        ["path", { d: "M17 14V2", key: "8ymqnk" }],
        [
          "path",
          {
            d: "M9 18.12 10 14H4.17a2 2 0 0 1-1.92-2.56l2.33-8A2 2 0 0 1 6.5 2H20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.76a2 2 0 0 0-1.79 1.11L12 22a3.13 3.13 0 0 1-3-3.88Z",
            key: "m61m77"
          }
        ]
      ];
      var ThumbsDown = createLucideIcon("thumbs-down", __iconNode$2m);
      var __iconNode$2l = [
        ["path", { d: "M7 10v12", key: "1qc93n" }],
        [
          "path",
          {
            d: "M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2a3.13 3.13 0 0 1 3 3.88Z",
            key: "emmmcr"
          }
        ]
      ];
      var ThumbsUp = createLucideIcon("thumbs-up", __iconNode$2l);
      var __iconNode$2k = [
        [
          "path",
          {
            d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "qn84l0"
          }
        ],
        ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
      ];
      var TicketCheck = createLucideIcon("ticket-check", __iconNode$2k);
      var __iconNode$2j = [
        [
          "path",
          {
            d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "qn84l0"
          }
        ],
        ["path", { d: "M9 12h6", key: "1c52cq" }]
      ];
      var TicketMinus = createLucideIcon("ticket-minus", __iconNode$2j);
      var __iconNode$2i = [
        [
          "path",
          {
            d: "M2 9a3 3 0 1 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 1 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "1l48ns"
          }
        ],
        ["path", { d: "M9 9h.01", key: "1q5me6" }],
        ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
        ["path", { d: "M15 15h.01", key: "lqbp3k" }]
      ];
      var TicketPercent = createLucideIcon("ticket-percent", __iconNode$2i);
      var __iconNode$2h = [
        [
          "path",
          {
            d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "qn84l0"
          }
        ],
        ["path", { d: "M9 12h6", key: "1c52cq" }],
        ["path", { d: "M12 9v6", key: "199k2o" }]
      ];
      var TicketPlus = createLucideIcon("ticket-plus", __iconNode$2h);
      var __iconNode$2g = [
        [
          "path",
          {
            d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "qn84l0"
          }
        ],
        ["path", { d: "m9.5 14.5 5-5", key: "qviqfa" }]
      ];
      var TicketSlash = createLucideIcon("ticket-slash", __iconNode$2g);
      var __iconNode$2f = [
        [
          "path",
          {
            d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "qn84l0"
          }
        ],
        ["path", { d: "m9.5 14.5 5-5", key: "qviqfa" }],
        ["path", { d: "m9.5 9.5 5 5", key: "18nt4w" }]
      ];
      var TicketX = createLucideIcon("ticket-x", __iconNode$2f);
      var __iconNode$2e = [
        [
          "path",
          {
            d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
            key: "qn84l0"
          }
        ],
        ["path", { d: "M13 5v2", key: "dyzc3o" }],
        ["path", { d: "M13 17v2", key: "1ont0d" }],
        ["path", { d: "M13 11v2", key: "1wjjxi" }]
      ];
      var Ticket = createLucideIcon("ticket", __iconNode$2e);
      var __iconNode$2d = [
        ["path", { d: "M10.5 17h1.227a2 2 0 0 0 1.345-.52L18 12", key: "16muxl" }],
        ["path", { d: "m12 13.5 3.75.5", key: "1i9qhk" }],
        ["path", { d: "m4.5 8 10.58-5.06a1 1 0 0 1 1.342.488L18.5 8", key: "12lg5p" }],
        ["path", { d: "M6 10V8", key: "1y41hn" }],
        ["path", { d: "M6 14v1", key: "cao2tf" }],
        ["path", { d: "M6 19v2", key: "1loha6" }],
        ["rect", { x: "2", y: "8", width: "20", height: "13", rx: "2", key: "p3bz5l" }]
      ];
      var TicketsPlane = createLucideIcon("tickets-plane", __iconNode$2d);
      var __iconNode$2c = [
        ["path", { d: "m4.5 8 10.58-5.06a1 1 0 0 1 1.342.488L18.5 8", key: "12lg5p" }],
        ["path", { d: "M6 10V8", key: "1y41hn" }],
        ["path", { d: "M6 14v1", key: "cao2tf" }],
        ["path", { d: "M6 19v2", key: "1loha6" }],
        ["rect", { x: "2", y: "8", width: "20", height: "13", rx: "2", key: "p3bz5l" }]
      ];
      var Tickets = createLucideIcon("tickets", __iconNode$2c);
      var __iconNode$2b = [
        ["path", { d: "M10 2h4", key: "n1abiw" }],
        ["path", { d: "M4.6 11a8 8 0 0 0 1.7 8.7 8 8 0 0 0 8.7 1.7", key: "10he05" }],
        ["path", { d: "M7.4 7.4a8 8 0 0 1 10.3 1 8 8 0 0 1 .9 10.2", key: "15f7sh" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M12 12v-2", key: "fwoke6" }]
      ];
      var TimerOff = createLucideIcon("timer-off", __iconNode$2b);
      var __iconNode$2a = [
        ["path", { d: "M10 2h4", key: "n1abiw" }],
        ["path", { d: "M12 14v-4", key: "1evpnu" }],
        ["path", { d: "M4 13a8 8 0 0 1 8-7 8 8 0 1 1-5.3 14L4 17.6", key: "1ts96g" }],
        ["path", { d: "M9 17H4v5", key: "8t5av" }]
      ];
      var TimerReset = createLucideIcon("timer-reset", __iconNode$2a);
      var __iconNode$29 = [
        ["line", { x1: "10", x2: "14", y1: "2", y2: "2", key: "14vaq8" }],
        ["line", { x1: "12", x2: "15", y1: "14", y2: "11", key: "17fdiu" }],
        ["circle", { cx: "12", cy: "14", r: "8", key: "1e1u0o" }]
      ];
      var Timer2 = createLucideIcon("timer", __iconNode$29);
      var __iconNode$28 = [
        ["circle", { cx: "9", cy: "12", r: "3", key: "u3jwor" }],
        ["rect", { width: "20", height: "14", x: "2", y: "5", rx: "7", key: "g7kal2" }]
      ];
      var ToggleLeft = createLucideIcon("toggle-left", __iconNode$28);
      var __iconNode$27 = [
        ["circle", { cx: "15", cy: "12", r: "3", key: "1afu0r" }],
        ["rect", { width: "20", height: "14", x: "2", y: "5", rx: "7", key: "g7kal2" }]
      ];
      var ToggleRight = createLucideIcon("toggle-right", __iconNode$27);
      var __iconNode$26 = [
        [
          "path",
          {
            d: "M7 12h13a1 1 0 0 1 1 1 5 5 0 0 1-5 5h-.598a.5.5 0 0 0-.424.765l1.544 2.47a.5.5 0 0 1-.424.765H5.402a.5.5 0 0 1-.424-.765L7 18",
            key: "kc4kqr"
          }
        ],
        ["path", { d: "M8 18a5 5 0 0 1-5-5V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8", key: "1tqs57" }]
      ];
      var Toilet = createLucideIcon("toilet", __iconNode$26);
      var __iconNode$25 = [
        ["path", { d: "M21 4H3", key: "1hwok0" }],
        ["path", { d: "M18 8H6", key: "41n648" }],
        ["path", { d: "M19 12H9", key: "1g4lpz" }],
        ["path", { d: "M16 16h-6", key: "1j5d54" }],
        ["path", { d: "M11 20H9", key: "39obr8" }]
      ];
      var Tornado = createLucideIcon("tornado", __iconNode$25);
      var __iconNode$24 = [
        ["ellipse", { cx: "12", cy: "11", rx: "3", ry: "2", key: "1b2qxu" }],
        ["ellipse", { cx: "12", cy: "12.5", rx: "10", ry: "8.5", key: "h8emeu" }]
      ];
      var Torus = createLucideIcon("torus", __iconNode$24);
      var __iconNode$23 = [
        ["path", { d: "M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16", key: "lnt0bk" }],
        ["path", { d: "M2 14h12", key: "d8icqz" }],
        ["path", { d: "M22 14h-2", key: "jrx26d" }],
        ["path", { d: "M12 20v-6", key: "1rm09r" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        ["path", { d: "M22 16V6a2 2 0 0 0-2-2H10", key: "11y8e4" }]
      ];
      var TouchpadOff = createLucideIcon("touchpad-off", __iconNode$23);
      var __iconNode$22 = [
        ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
        ["path", { d: "M2 14h20", key: "myj16y" }],
        ["path", { d: "M12 20v-6", key: "1rm09r" }]
      ];
      var Touchpad = createLucideIcon("touchpad", __iconNode$22);
      var __iconNode$21 = [
        [
          "path",
          { d: "M18.2 12.27 20 6H4l1.8 6.27a1 1 0 0 0 .95.73h10.5a1 1 0 0 0 .96-.73Z", key: "1pledb" }
        ],
        ["path", { d: "M8 13v9", key: "hmv0ci" }],
        ["path", { d: "M16 22v-9", key: "ylnf1u" }],
        ["path", { d: "m9 6 1 7", key: "dpdgam" }],
        ["path", { d: "m15 6-1 7", key: "ls7zgu" }],
        ["path", { d: "M12 6V2", key: "1pj48d" }],
        ["path", { d: "M13 2h-2", key: "mj6ths" }]
      ];
      var TowerControl = createLucideIcon("tower-control", __iconNode$21);
      var __iconNode$20 = [
        ["rect", { width: "18", height: "12", x: "3", y: "8", rx: "1", key: "158fvp" }],
        ["path", { d: "M10 8V5c0-.6-.4-1-1-1H6a1 1 0 0 0-1 1v3", key: "s0042v" }],
        ["path", { d: "M19 8V5c0-.6-.4-1-1-1h-3a1 1 0 0 0-1 1v3", key: "9wmeh2" }]
      ];
      var ToyBrick = createLucideIcon("toy-brick", __iconNode$20);
      var __iconNode$1$ = [
        ["path", { d: "m10 11 11 .9a1 1 0 0 1 .8 1.1l-.665 4.158a1 1 0 0 1-.988.842H20", key: "she1j9" }],
        ["path", { d: "M16 18h-5", key: "bq60fd" }],
        ["path", { d: "M18 5a1 1 0 0 0-1 1v5.573", key: "1kv8ia" }],
        ["path", { d: "M3 4h8.129a1 1 0 0 1 .99.863L13 11.246", key: "1q1ert" }],
        ["path", { d: "M4 11V4", key: "9ft8pt" }],
        ["path", { d: "M7 15h.01", key: "k5ht0j" }],
        ["path", { d: "M8 10.1V4", key: "1jgyzo" }],
        ["circle", { cx: "18", cy: "18", r: "2", key: "1emm8v" }],
        ["circle", { cx: "7", cy: "15", r: "5", key: "ddtuc" }]
      ];
      var Tractor = createLucideIcon("tractor", __iconNode$1$);
      var __iconNode$1_ = [
        ["path", { d: "M16.05 10.966a5 2.5 0 0 1-8.1 0", key: "m5jpwb" }],
        [
          "path",
          {
            d: "m16.923 14.049 4.48 2.04a1 1 0 0 1 .001 1.831l-8.574 3.9a2 2 0 0 1-1.66 0l-8.574-3.91a1 1 0 0 1 0-1.83l4.484-2.04",
            key: "rbg3g8"
          }
        ],
        ["path", { d: "M16.949 14.14a5 2.5 0 1 1-9.9 0L10.063 3.5a2 2 0 0 1 3.874 0z", key: "vap8c8" }],
        ["path", { d: "M9.194 6.57a5 2.5 0 0 0 5.61 0", key: "15hn5c" }]
      ];
      var TrafficCone = createLucideIcon("traffic-cone", __iconNode$1_);
      var __iconNode$1Z = [
        ["path", { d: "M2 22V12a10 10 0 1 1 20 0v10", key: "o0fyp0" }],
        ["path", { d: "M15 6.8v1.4a3 2.8 0 1 1-6 0V6.8", key: "m8q3n9" }],
        ["path", { d: "M10 15h.01", key: "44in9x" }],
        ["path", { d: "M14 15h.01", key: "5mohn5" }],
        ["path", { d: "M10 19a4 4 0 0 1-4-4v-3a6 6 0 1 1 12 0v3a4 4 0 0 1-4 4Z", key: "hckbmu" }],
        ["path", { d: "m9 19-2 3", key: "iij7hm" }],
        ["path", { d: "m15 19 2 3", key: "npx8sa" }]
      ];
      var TrainFrontTunnel = createLucideIcon("train-front-tunnel", __iconNode$1Z);
      var __iconNode$1Y = [
        ["path", { d: "M8 3.1V7a4 4 0 0 0 8 0V3.1", key: "1v71zp" }],
        ["path", { d: "m9 15-1-1", key: "1yrq24" }],
        ["path", { d: "m15 15 1-1", key: "1t0d6s" }],
        ["path", { d: "M9 19c-2.8 0-5-2.2-5-5v-4a8 8 0 0 1 16 0v4c0 2.8-2.2 5-5 5Z", key: "1p0hjs" }],
        ["path", { d: "m8 19-2 3", key: "13i0xs" }],
        ["path", { d: "m16 19 2 3", key: "xo31yx" }]
      ];
      var TrainFront = createLucideIcon("train-front", __iconNode$1Y);
      var __iconNode$1X = [
        ["rect", { width: "16", height: "16", x: "4", y: "3", rx: "2", key: "1wxw4b" }],
        ["path", { d: "M4 11h16", key: "mpoxn0" }],
        ["path", { d: "M12 3v8", key: "1h2ygw" }],
        ["path", { d: "m8 19-2 3", key: "13i0xs" }],
        ["path", { d: "m18 22-2-3", key: "1p0ohu" }],
        ["path", { d: "M8 15h.01", key: "a7atzg" }],
        ["path", { d: "M16 15h.01", key: "rnfrdf" }]
      ];
      var TramFront = createLucideIcon("tram-front", __iconNode$1X);
      var __iconNode$1W = [
        ["path", { d: "M12 16v6", key: "c8a4gj" }],
        ["path", { d: "M14 20h-4", key: "m8m19d" }],
        ["path", { d: "M18 2h4v4", key: "1341mj" }],
        ["path", { d: "m2 2 7.17 7.17", key: "13q8l2" }],
        ["path", { d: "M2 5.355V2h3.357", key: "18136r" }],
        ["path", { d: "m22 2-7.17 7.17", key: "1epvy4" }],
        ["path", { d: "M8 5 5 8", key: "mgbjhz" }],
        ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }]
      ];
      var Transgender = createLucideIcon("transgender", __iconNode$1W);
      var __iconNode$1V = [
        ["path", { d: "M3 6h18", key: "d0wm0j" }],
        ["path", { d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6", key: "4alrt4" }],
        ["path", { d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2", key: "v07s0e" }],
        ["line", { x1: "10", x2: "10", y1: "11", y2: "17", key: "1uufr5" }],
        ["line", { x1: "14", x2: "14", y1: "11", y2: "17", key: "xtxkd" }]
      ];
      var Trash2 = createLucideIcon("trash-2", __iconNode$1V);
      var __iconNode$1U = [
        ["path", { d: "M2 17 17 2", key: "18b09t" }],
        ["path", { d: "m2 14 8 8", key: "1gv9hu" }],
        ["path", { d: "m5 11 8 8", key: "189pqp" }],
        ["path", { d: "m8 8 8 8", key: "1imecy" }],
        ["path", { d: "m11 5 8 8", key: "ummqn6" }],
        ["path", { d: "m14 2 8 8", key: "1vk7dn" }],
        ["path", { d: "M7 22 22 7", key: "15mb1i" }]
      ];
      var TrainTrack = createLucideIcon("train-track", __iconNode$1U);
      var __iconNode$1T = [
        ["path", { d: "M3 6h18", key: "d0wm0j" }],
        ["path", { d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6", key: "4alrt4" }],
        ["path", { d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2", key: "v07s0e" }]
      ];
      var Trash = createLucideIcon("trash", __iconNode$1T);
      var __iconNode$1S = [
        [
          "path",
          {
            d: "M8 19a4 4 0 0 1-2.24-7.32A3.5 3.5 0 0 1 9 6.03V6a3 3 0 1 1 6 0v.04a3.5 3.5 0 0 1 3.24 5.65A4 4 0 0 1 16 19Z",
            key: "oadzkq"
          }
        ],
        ["path", { d: "M12 19v3", key: "npa21l" }]
      ];
      var TreeDeciduous = createLucideIcon("tree-deciduous", __iconNode$1S);
      var __iconNode$1R = [
        ["path", { d: "M13 8c0-2.76-2.46-5-5.5-5S2 5.24 2 8h2l1-1 1 1h4", key: "foxbe7" }],
        [
          "path",
          { d: "M13 7.14A5.82 5.82 0 0 1 16.5 6c3.04 0 5.5 2.24 5.5 5h-3l-1-1-1 1h-3", key: "18arnh" }
        ],
        [
          "path",
          {
            d: "M5.89 9.71c-2.15 2.15-2.3 5.47-.35 7.43l4.24-4.25.7-.7.71-.71 2.12-2.12c-1.95-1.96-5.27-1.8-7.42.35",
            key: "ywahnh"
          }
        ],
        ["path", { d: "M11 15.5c.5 2.5-.17 4.5-1 6.5h4c2-5.5-.5-12-1-14", key: "ft0feo" }]
      ];
      var TreePalm = createLucideIcon("tree-palm", __iconNode$1R);
      var __iconNode$1Q = [
        [
          "path",
          {
            d: "m17 14 3 3.3a1 1 0 0 1-.7 1.7H4.7a1 1 0 0 1-.7-1.7L7 14h-.3a1 1 0 0 1-.7-1.7L9 9h-.2A1 1 0 0 1 8 7.3L12 3l4 4.3a1 1 0 0 1-.8 1.7H15l3 3.3a1 1 0 0 1-.7 1.7H17Z",
            key: "cpyugq"
          }
        ],
        ["path", { d: "M12 22v-3", key: "kmzjlo" }]
      ];
      var TreePine = createLucideIcon("tree-pine", __iconNode$1Q);
      var __iconNode$1P = [
        ["path", { d: "M10 10v.2A3 3 0 0 1 8.9 16H5a3 3 0 0 1-1-5.8V10a3 3 0 0 1 6 0Z", key: "1l6gj6" }],
        ["path", { d: "M7 16v6", key: "1a82de" }],
        ["path", { d: "M13 19v3", key: "13sx9i" }],
        [
          "path",
          {
            d: "M12 19h8.3a1 1 0 0 0 .7-1.7L18 14h.3a1 1 0 0 0 .7-1.7L16 9h.2a1 1 0 0 0 .8-1.7L13 3l-1.4 1.5",
            key: "1sj9kv"
          }
        ]
      ];
      var Trees = createLucideIcon("trees", __iconNode$1P);
      var __iconNode$1O = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
        ["rect", { width: "3", height: "9", x: "7", y: "7", key: "14n3xi" }],
        ["rect", { width: "3", height: "5", x: "14", y: "7", key: "s4azjd" }]
      ];
      var Trello = createLucideIcon("trello", __iconNode$1O);
      var __iconNode$1N = [
        ["polyline", { points: "22 17 13.5 8.5 8.5 13.5 2 7", key: "1r2t7k" }],
        ["polyline", { points: "16 17 22 17 22 11", key: "11uiuu" }]
      ];
      var TrendingDown = createLucideIcon("trending-down", __iconNode$1N);
      var __iconNode$1M = [
        ["path", { d: "M14.828 14.828 21 21", key: "ar5fw7" }],
        ["path", { d: "M21 16v5h-5", key: "1ck2sf" }],
        ["path", { d: "m21 3-9 9-4-4-6 6", key: "1h02xo" }],
        ["path", { d: "M21 8V3h-5", key: "1qoq8a" }]
      ];
      var TrendingUpDown = createLucideIcon("trending-up-down", __iconNode$1M);
      var __iconNode$1L = [
        ["polyline", { points: "22 7 13.5 15.5 8.5 10.5 2 17", key: "126l90" }],
        ["polyline", { points: "16 7 22 7 22 13", key: "kwv8wd" }]
      ];
      var TrendingUp2 = createLucideIcon("trending-up", __iconNode$1L);
      var __iconNode$1K = [
        [
          "path",
          {
            d: "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3",
            key: "wmoenq"
          }
        ],
        ["path", { d: "M12 9v4", key: "juzpu7" }],
        ["path", { d: "M12 17h.01", key: "p32p05" }]
      ];
      var TriangleAlert = createLucideIcon("triangle-alert", __iconNode$1K);
      var __iconNode$1J = [
        ["path", { d: "M10.17 4.193a2 2 0 0 1 3.666.013", key: "pltmmw" }],
        ["path", { d: "M14 21h2", key: "v4qezv" }],
        ["path", { d: "m15.874 7.743 1 1.732", key: "10m0iw" }],
        ["path", { d: "m18.849 12.952 1 1.732", key: "zadnam" }],
        ["path", { d: "M21.824 18.18a2 2 0 0 1-1.835 2.824", key: "fvwuk4" }],
        ["path", { d: "M4.024 21a2 2 0 0 1-1.839-2.839", key: "1e1kah" }],
        ["path", { d: "m5.136 12.952-1 1.732", key: "1u4ldi" }],
        ["path", { d: "M8 21h2", key: "i9zjee" }],
        ["path", { d: "m8.102 7.743-1 1.732", key: "1zzo4u" }]
      ];
      var TriangleDashed = createLucideIcon("triangle-dashed", __iconNode$1J);
      var __iconNode$1I = [
        [
          "path",
          {
            d: "M22 18a2 2 0 0 1-2 2H3c-1.1 0-1.3-.6-.4-1.3L20.4 4.3c.9-.7 1.6-.4 1.6.7Z",
            key: "183wce"
          }
        ]
      ];
      var TriangleRight = createLucideIcon("triangle-right", __iconNode$1I);
      var __iconNode$1H = [
        [
          "path",
          { d: "M13.73 4a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z", key: "14u9p9" }
        ]
      ];
      var Triangle = createLucideIcon("triangle", __iconNode$1H);
      var __iconNode$1G = [
        ["path", { d: "M6 9H4.5a2.5 2.5 0 0 1 0-5H6", key: "17hqa7" }],
        ["path", { d: "M18 9h1.5a2.5 2.5 0 0 0 0-5H18", key: "lmptdp" }],
        ["path", { d: "M4 22h16", key: "57wxv0" }],
        ["path", { d: "M10 14.66V17c0 .55-.47.98-.97 1.21C7.85 18.75 7 20.24 7 22", key: "1nw9bq" }],
        ["path", { d: "M14 14.66V17c0 .55.47.98.97 1.21C16.15 18.75 17 20.24 17 22", key: "1np0yb" }],
        ["path", { d: "M18 2H6v7a6 6 0 0 0 12 0V2Z", key: "u46fv3" }]
      ];
      var Trophy = createLucideIcon("trophy", __iconNode$1G);
      var __iconNode$1F = [
        ["path", { d: "M14 19V7a2 2 0 0 0-2-2H9", key: "15peso" }],
        ["path", { d: "M15 19H9", key: "18q6dt" }],
        [
          "path",
          {
            d: "M19 19h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.62L18.3 9.38a1 1 0 0 0-.78-.38H14",
            key: "1dkp3j"
          }
        ],
        ["path", { d: "M2 13v5a1 1 0 0 0 1 1h2", key: "pkmmzz" }],
        [
          "path",
          { d: "M4 3 2.15 5.15a.495.495 0 0 0 .35.86h2.15a.47.47 0 0 1 .35.86L3 9.02", key: "1n26pd" }
        ],
        ["circle", { cx: "17", cy: "19", r: "2", key: "1nxcgd" }],
        ["circle", { cx: "7", cy: "19", r: "2", key: "gzo7y7" }]
      ];
      var TruckElectric = createLucideIcon("truck-electric", __iconNode$1F);
      var __iconNode$1E = [
        ["path", { d: "M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2", key: "wrbu53" }],
        ["path", { d: "M15 18H9", key: "1lyqi6" }],
        [
          "path",
          {
            d: "M19 18h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14",
            key: "lysw3i"
          }
        ],
        ["circle", { cx: "17", cy: "18", r: "2", key: "332jqn" }],
        ["circle", { cx: "7", cy: "18", r: "2", key: "19iecd" }]
      ];
      var Truck = createLucideIcon("truck", __iconNode$1E);
      var __iconNode$1D = [
        [
          "path",
          {
            d: "m12 10 2 4v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3a8 8 0 1 0-16 0v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3l2-4h4Z",
            key: "1lbbv7"
          }
        ],
        ["path", { d: "M4.82 7.9 8 10", key: "m9wose" }],
        ["path", { d: "M15.18 7.9 12 10", key: "p8dp2u" }],
        ["path", { d: "M16.93 10H20a2 2 0 0 1 0 4H2", key: "12nsm7" }]
      ];
      var Turtle = createLucideIcon("turtle", __iconNode$1D);
      var __iconNode$1C = [
        [
          "path",
          {
            d: "M10 7.75a.75.75 0 0 1 1.142-.638l3.664 2.249a.75.75 0 0 1 0 1.278l-3.664 2.25a.75.75 0 0 1-1.142-.64z",
            key: "1pctta"
          }
        ],
        ["path", { d: "M7 21h10", key: "1b0cd5" }],
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }]
      ];
      var TvMinimalPlay = createLucideIcon("tv-minimal-play", __iconNode$1C);
      var __iconNode$1B = [
        ["path", { d: "M7 21h10", key: "1b0cd5" }],
        ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }]
      ];
      var TvMinimal = createLucideIcon("tv-minimal", __iconNode$1B);
      var __iconNode$1A = [
        ["rect", { width: "20", height: "15", x: "2", y: "7", rx: "2", ry: "2", key: "10ag99" }],
        ["polyline", { points: "17 2 12 7 7 2", key: "11pgbg" }]
      ];
      var Tv = createLucideIcon("tv", __iconNode$1A);
      var __iconNode$1z = [
        ["path", { d: "M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7", key: "c0yzno" }]
      ];
      var Twitch = createLucideIcon("twitch", __iconNode$1z);
      var __iconNode$1y = [
        [
          "path",
          {
            d: "M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z",
            key: "pff0z6"
          }
        ]
      ];
      var Twitter2 = createLucideIcon("twitter", __iconNode$1y);
      var __iconNode$1x = [
        ["polyline", { points: "4 7 4 4 20 4 20 7", key: "1nosan" }],
        ["line", { x1: "9", x2: "15", y1: "20", y2: "20", key: "swin9y" }],
        ["line", { x1: "12", x2: "12", y1: "4", y2: "20", key: "1tx1rr" }]
      ];
      var Type = createLucideIcon("type", __iconNode$1x);
      var __iconNode$1w = [
        [
          "path",
          {
            d: "M14 16.5a.5.5 0 0 0 .5.5h.5a2 2 0 0 1 0 4H9a2 2 0 0 1 0-4h.5a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5V8a2 2 0 0 1-4 0V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v3a2 2 0 0 1-4 0v-.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5Z",
            key: "1reda3"
          }
        ]
      ];
      var TypeOutline = createLucideIcon("type-outline", __iconNode$1w);
      var __iconNode$1v = [
        ["path", { d: "M12 2v1", key: "11qlp1" }],
        ["path", { d: "M15.5 21a1.85 1.85 0 0 1-3.5-1v-8H2a10 10 0 0 1 3.428-6.575", key: "eki10q" }],
        ["path", { d: "M17.5 12H22A10 10 0 0 0 9.004 3.455", key: "n2ayka" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ];
      var UmbrellaOff = createLucideIcon("umbrella-off", __iconNode$1v);
      var __iconNode$1u = [
        ["path", { d: "M22 12a10.06 10.06 1 0 0-20 0Z", key: "1teyop" }],
        ["path", { d: "M12 12v8a2 2 0 0 0 4 0", key: "ulpmoc" }],
        ["path", { d: "M12 2v1", key: "11qlp1" }]
      ];
      var Umbrella = createLucideIcon("umbrella", __iconNode$1u);
      var __iconNode$1t = [
        ["path", { d: "M6 4v6a6 6 0 0 0 12 0V4", key: "9kb039" }],
        ["line", { x1: "4", x2: "20", y1: "20", y2: "20", key: "nun2al" }]
      ];
      var Underline = createLucideIcon("underline", __iconNode$1t);
      var __iconNode$1s = [
        ["path", { d: "M9 14 4 9l5-5", key: "102s5s" }],
        ["path", { d: "M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5a5.5 5.5 0 0 1-5.5 5.5H11", key: "f3b9sd" }]
      ];
      var Undo2 = createLucideIcon("undo-2", __iconNode$1s);
      var __iconNode$1r = [
        ["path", { d: "M3 7v6h6", key: "1v2h90" }],
        ["path", { d: "M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13", key: "1r6uu6" }]
      ];
      var Undo = createLucideIcon("undo", __iconNode$1r);
      var __iconNode$1q = [
        ["path", { d: "M21 17a9 9 0 0 0-15-6.7L3 13", key: "8mp6z9" }],
        ["path", { d: "M3 7v6h6", key: "1v2h90" }],
        ["circle", { cx: "12", cy: "17", r: "1", key: "1ixnty" }]
      ];
      var UndoDot = createLucideIcon("undo-dot", __iconNode$1q);
      var __iconNode$1p = [
        ["path", { d: "M16 12h6", key: "15xry1" }],
        ["path", { d: "M8 12H2", key: "1jqql6" }],
        ["path", { d: "M12 2v2", key: "tus03m" }],
        ["path", { d: "M12 8v2", key: "1woqiv" }],
        ["path", { d: "M12 14v2", key: "8jcxud" }],
        ["path", { d: "M12 20v2", key: "1lh1kg" }],
        ["path", { d: "m19 15 3-3-3-3", key: "wjy7rq" }],
        ["path", { d: "m5 9-3 3 3 3", key: "j64kie" }]
      ];
      var UnfoldHorizontal = createLucideIcon("unfold-horizontal", __iconNode$1p);
      var __iconNode$1o = [
        ["path", { d: "M12 22v-6", key: "6o8u61" }],
        ["path", { d: "M12 8V2", key: "1wkif3" }],
        ["path", { d: "M4 12H2", key: "rhcxmi" }],
        ["path", { d: "M10 12H8", key: "s88cx1" }],
        ["path", { d: "M16 12h-2", key: "10asgb" }],
        ["path", { d: "M22 12h-2", key: "14jgyd" }],
        ["path", { d: "m15 19-3 3-3-3", key: "11eu04" }],
        ["path", { d: "m15 5-3-3-3 3", key: "itvq4r" }]
      ];
      var UnfoldVertical = createLucideIcon("unfold-vertical", __iconNode$1o);
      var __iconNode$1n = [
        ["rect", { width: "8", height: "6", x: "5", y: "4", rx: "1", key: "nzclkv" }],
        ["rect", { width: "8", height: "6", x: "11", y: "14", rx: "1", key: "4tytwb" }]
      ];
      var Ungroup = createLucideIcon("ungroup", __iconNode$1n);
      var __iconNode$1m = [
        ["circle", { cx: "12", cy: "10", r: "1", key: "1gnqs8" }],
        ["path", { d: "M22 20V8h-4l-6-4-6 4H2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2", key: "1qj5sn" }],
        ["path", { d: "M6 17v.01", key: "roodi6" }],
        ["path", { d: "M6 13v.01", key: "67c122" }],
        ["path", { d: "M18 17v.01", key: "12ktxm" }],
        ["path", { d: "M18 13v.01", key: "tn1rt1" }],
        ["path", { d: "M14 22v-5a2 2 0 0 0-2-2a2 2 0 0 0-2 2v5", key: "11g7fi" }]
      ];
      var University = createLucideIcon("university", __iconNode$1m);
      var __iconNode$1l = [
        ["path", { d: "M15 7h2a5 5 0 0 1 0 10h-2m-6 0H7A5 5 0 0 1 7 7h2", key: "1re2ne" }]
      ];
      var Unlink2 = createLucideIcon("unlink-2", __iconNode$1l);
      var __iconNode$1k = [
        [
          "path",
          {
            d: "m18.84 12.25 1.72-1.71h-.02a5.004 5.004 0 0 0-.12-7.07 5.006 5.006 0 0 0-6.95 0l-1.72 1.71",
            key: "yqzxt4"
          }
        ],
        [
          "path",
          {
            d: "m5.17 11.75-1.71 1.71a5.004 5.004 0 0 0 .12 7.07 5.006 5.006 0 0 0 6.95 0l1.71-1.71",
            key: "4qinb0"
          }
        ],
        ["line", { x1: "8", x2: "8", y1: "2", y2: "5", key: "1041cp" }],
        ["line", { x1: "2", x2: "5", y1: "8", y2: "8", key: "14m1p5" }],
        ["line", { x1: "16", x2: "16", y1: "19", y2: "22", key: "rzdirn" }],
        ["line", { x1: "19", x2: "22", y1: "16", y2: "16", key: "ox905f" }]
      ];
      var Unlink = createLucideIcon("unlink", __iconNode$1k);
      var __iconNode$1j = [
        ["path", { d: "m19 5 3-3", key: "yk6iyv" }],
        ["path", { d: "m2 22 3-3", key: "19mgm9" }],
        [
          "path",
          { d: "M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z", key: "goz73y" }
        ],
        ["path", { d: "M7.5 13.5 10 11", key: "7xgeeb" }],
        ["path", { d: "M10.5 16.5 13 14", key: "10btkg" }],
        [
          "path",
          { d: "m12 6 6 6 2.3-2.3a2.4 2.4 0 0 0 0-3.4l-2.6-2.6a2.4 2.4 0 0 0-3.4 0Z", key: "1snsnr" }
        ]
      ];
      var Unplug = createLucideIcon("unplug", __iconNode$1j);
      var __iconNode$1i = [
        ["path", { d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4", key: "ih7n3h" }],
        ["polyline", { points: "17 8 12 3 7 8", key: "t8dd8p" }],
        ["line", { x1: "12", x2: "12", y1: "3", y2: "15", key: "widbto" }]
      ];
      var Upload = createLucideIcon("upload", __iconNode$1i);
      var __iconNode$1h = [
        ["circle", { cx: "10", cy: "7", r: "1", key: "dypaad" }],
        ["circle", { cx: "4", cy: "20", r: "1", key: "22iqad" }],
        ["path", { d: "M4.7 19.3 19 5", key: "1enqfc" }],
        ["path", { d: "m21 3-3 1 2 2Z", key: "d3ov82" }],
        ["path", { d: "M9.26 7.68 5 12l2 5", key: "1esawj" }],
        ["path", { d: "m10 14 5 2 3.5-3.5", key: "v8oal5" }],
        ["path", { d: "m18 12 1-1 1 1-1 1Z", key: "1bh22v" }]
      ];
      var Usb = createLucideIcon("usb", __iconNode$1h);
      var __iconNode$1g = [
        ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
        ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
        ["polyline", { points: "16 11 18 13 22 9", key: "1pwet4" }]
      ];
      var UserCheck = createLucideIcon("user-check", __iconNode$1g);
      var __iconNode$1f = [
        ["path", { d: "M10 15H6a4 4 0 0 0-4 4v2", key: "1nfge6" }],
        ["path", { d: "m14.305 16.53.923-.382", key: "1itpsq" }],
        ["path", { d: "m15.228 13.852-.923-.383", key: "eplpkm" }],
        ["path", { d: "m16.852 12.228-.383-.923", key: "13v3q0" }],
        ["path", { d: "m16.852 17.772-.383.924", key: "1i8mnm" }],
        ["path", { d: "m19.148 12.228.383-.923", key: "1q8j1v" }],
        ["path", { d: "m19.53 18.696-.382-.924", key: "vk1qj3" }],
        ["path", { d: "m20.772 13.852.924-.383", key: "n880s0" }],
        ["path", { d: "m20.772 16.148.924.383", key: "1g6xey" }],
        ["circle", { cx: "18", cy: "15", r: "3", key: "gjjjvw" }],
        ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }]
      ];
      var UserCog = createLucideIcon("user-cog", __iconNode$1f);
      var __iconNode$1e = [
        ["circle", { cx: "10", cy: "7", r: "4", key: "e45bow" }],
        ["path", { d: "M10.3 15H7a4 4 0 0 0-4 4v2", key: "3bnktk" }],
        ["path", { d: "M15 15.5V14a2 2 0 0 1 4 0v1.5", key: "12ym5i" }],
        ["rect", { width: "8", height: "5", x: "13", y: "16", rx: ".899", key: "4p176n" }]
      ];
      var UserLock = createLucideIcon("user-lock", __iconNode$1e);
      var __iconNode$1d = [
        ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
        ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
        ["line", { x1: "22", x2: "16", y1: "11", y2: "11", key: "1shjgl" }]
      ];
      var UserMinus = createLucideIcon("user-minus", __iconNode$1d);
      var __iconNode$1c = [
        ["path", { d: "M11.5 15H7a4 4 0 0 0-4 4v2", key: "15lzij" }],
        [
          "path",
          {
            d: "M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
            key: "1817ys"
          }
        ],
        ["circle", { cx: "10", cy: "7", r: "4", key: "e45bow" }]
      ];
      var UserPen = createLucideIcon("user-pen", __iconNode$1c);
      var __iconNode$1b = [
        ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
        ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
        ["line", { x1: "19", x2: "19", y1: "8", y2: "14", key: "1bvyxn" }],
        ["line", { x1: "22", x2: "16", y1: "11", y2: "11", key: "1shjgl" }]
      ];
      var UserPlus = createLucideIcon("user-plus", __iconNode$1b);
      var __iconNode$1a = [
        ["path", { d: "M2 21a8 8 0 0 1 13.292-6", key: "bjp14o" }],
        ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
        ["path", { d: "m16 19 2 2 4-4", key: "1b14m6" }]
      ];
      var UserRoundCheck = createLucideIcon("user-round-check", __iconNode$1a);
      var __iconNode$19 = [
        ["path", { d: "m14.305 19.53.923-.382", key: "3m78fa" }],
        ["path", { d: "m15.228 16.852-.923-.383", key: "npixar" }],
        ["path", { d: "m16.852 15.228-.383-.923", key: "5xggr7" }],
        ["path", { d: "m16.852 20.772-.383.924", key: "dpfhf9" }],
        ["path", { d: "m19.148 15.228.383-.923", key: "1reyyz" }],
        ["path", { d: "m19.53 21.696-.382-.924", key: "1goivc" }],
        ["path", { d: "M2 21a8 8 0 0 1 10.434-7.62", key: "1yezr2" }],
        ["path", { d: "m20.772 16.852.924-.383", key: "htqkph" }],
        ["path", { d: "m20.772 19.148.924.383", key: "9w9pjp" }],
        ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }]
      ];
      var UserRoundCog = createLucideIcon("user-round-cog", __iconNode$19);
      var __iconNode$18 = [
        ["path", { d: "M2 21a8 8 0 0 1 13.292-6", key: "bjp14o" }],
        ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
        ["path", { d: "M22 19h-6", key: "vcuq98" }]
      ];
      var UserRoundMinus = createLucideIcon("user-round-minus", __iconNode$18);
      var __iconNode$17 = [
        ["path", { d: "M2 21a8 8 0 0 1 10.821-7.487", key: "1c8h7z" }],
        [
          "path",
          {
            d: "M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
            key: "1817ys"
          }
        ],
        ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }]
      ];
      var UserRoundPen = createLucideIcon("user-round-pen", __iconNode$17);
      var __iconNode$16 = [
        ["path", { d: "M2 21a8 8 0 0 1 13.292-6", key: "bjp14o" }],
        ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
        ["path", { d: "M19 16v6", key: "tddt3s" }],
        ["path", { d: "M22 19h-6", key: "vcuq98" }]
      ];
      var UserRoundPlus = createLucideIcon("user-round-plus", __iconNode$16);
      var __iconNode$15 = [
        ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
        ["path", { d: "M2 21a8 8 0 0 1 10.434-7.62", key: "1yezr2" }],
        ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
        ["path", { d: "m22 22-1.9-1.9", key: "1e5ubv" }]
      ];
      var UserRoundSearch = createLucideIcon("user-round-search", __iconNode$15);
      var __iconNode$14 = [
        ["path", { d: "M2 21a8 8 0 0 1 11.873-7", key: "74fkxq" }],
        ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
        ["path", { d: "m17 17 5 5", key: "p7ous7" }],
        ["path", { d: "m22 17-5 5", key: "gqnmv0" }]
      ];
      var UserRoundX = createLucideIcon("user-round-x", __iconNode$14);
      var __iconNode$13 = [
        ["circle", { cx: "12", cy: "8", r: "5", key: "1hypcn" }],
        ["path", { d: "M20 21a8 8 0 0 0-16 0", key: "rfgkzh" }]
      ];
      var UserRound = createLucideIcon("user-round", __iconNode$13);
      var __iconNode$12 = [
        ["circle", { cx: "10", cy: "7", r: "4", key: "e45bow" }],
        ["path", { d: "M10.3 15H7a4 4 0 0 0-4 4v2", key: "3bnktk" }],
        ["circle", { cx: "17", cy: "17", r: "3", key: "18b49y" }],
        ["path", { d: "m21 21-1.9-1.9", key: "1g2n9r" }]
      ];
      var UserSearch = createLucideIcon("user-search", __iconNode$12);
      var __iconNode$11 = [
        ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
        ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
        ["line", { x1: "17", x2: "22", y1: "8", y2: "13", key: "3nzzx3" }],
        ["line", { x1: "22", x2: "17", y1: "8", y2: "13", key: "1swrse" }]
      ];
      var UserX = createLucideIcon("user-x", __iconNode$11);
      var __iconNode$10 = [
        ["path", { d: "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2", key: "975kel" }],
        ["circle", { cx: "12", cy: "7", r: "4", key: "17ys0d" }]
      ];
      var User = createLucideIcon("user", __iconNode$10);
      var __iconNode$$ = [
        ["path", { d: "M18 21a8 8 0 0 0-16 0", key: "3ypg7q" }],
        ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
        ["path", { d: "M22 20c0-3.37-2-6.5-4-8a5 5 0 0 0-.45-8.3", key: "10s06x" }]
      ];
      var UsersRound = createLucideIcon("users-round", __iconNode$$);
      var __iconNode$_ = [
        ["path", { d: "m16 2-2.3 2.3a3 3 0 0 0 0 4.2l1.8 1.8a3 3 0 0 0 4.2 0L22 8", key: "n7qcjb" }],
        [
          "path",
          { d: "M15 15 3.3 3.3a4.2 4.2 0 0 0 0 6l7.3 7.3c.7.7 2 .7 2.8 0L15 15Zm0 0 7 7", key: "d0u48b" }
        ],
        ["path", { d: "m2.1 21.8 6.4-6.3", key: "yn04lh" }],
        ["path", { d: "m19 5-7 7", key: "194lzd" }]
      ];
      var UtensilsCrossed = createLucideIcon("utensils-crossed", __iconNode$_);
      var __iconNode$Z = [
        ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
        ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
        ["path", { d: "M22 21v-2a4 4 0 0 0-3-3.87", key: "kshegd" }],
        ["path", { d: "M16 3.13a4 4 0 0 1 0 7.75", key: "1da9ce" }]
      ];
      var Users3 = createLucideIcon("users", __iconNode$Z);
      var __iconNode$Y = [
        ["path", { d: "M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2", key: "cjf0a3" }],
        ["path", { d: "M7 2v20", key: "1473qp" }],
        ["path", { d: "M21 15V2a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3Zm0 0v7", key: "j28e5" }]
      ];
      var Utensils = createLucideIcon("utensils", __iconNode$Y);
      var __iconNode$X = [
        ["path", { d: "M12 2v20", key: "t6zp3m" }],
        ["path", { d: "M2 5h20", key: "1fs1ex" }],
        ["path", { d: "M3 3v2", key: "9imdir" }],
        ["path", { d: "M7 3v2", key: "n0os7" }],
        ["path", { d: "M17 3v2", key: "1l2re6" }],
        ["path", { d: "M21 3v2", key: "1duuac" }],
        ["path", { d: "m19 5-7 7-7-7", key: "133zxf" }]
      ];
      var UtilityPole = createLucideIcon("utility-pole", __iconNode$X);
      var __iconNode$W = [
        ["path", { d: "M8 21s-4-3-4-9 4-9 4-9", key: "uto9ud" }],
        ["path", { d: "M16 3s4 3 4 9-4 9-4 9", key: "4w2vsq" }],
        ["line", { x1: "15", x2: "9", y1: "9", y2: "15", key: "f7djnv" }],
        ["line", { x1: "9", x2: "15", y1: "9", y2: "15", key: "1shsy8" }]
      ];
      var Variable = createLucideIcon("variable", __iconNode$W);
      var __iconNode$V = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["circle", { cx: "7.5", cy: "7.5", r: ".5", fill: "currentColor", key: "kqv944" }],
        ["path", { d: "m7.9 7.9 2.7 2.7", key: "hpeyl3" }],
        ["circle", { cx: "16.5", cy: "7.5", r: ".5", fill: "currentColor", key: "w0ekpg" }],
        ["path", { d: "m13.4 10.6 2.7-2.7", key: "264c1n" }],
        ["circle", { cx: "7.5", cy: "16.5", r: ".5", fill: "currentColor", key: "nkw3mc" }],
        ["path", { d: "m7.9 16.1 2.7-2.7", key: "p81g5e" }],
        ["circle", { cx: "16.5", cy: "16.5", r: ".5", fill: "currentColor", key: "fubopw" }],
        ["path", { d: "m13.4 13.4 2.7 2.7", key: "abhel3" }],
        ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
      ];
      var Vault = createLucideIcon("vault", __iconNode$V);
      var __iconNode$U = [
        ["path", { d: "M16 8q6 0 6-6-6 0-6 6", key: "qsyyc4" }],
        ["path", { d: "M17.41 3.59a10 10 0 1 0 3 3", key: "41m9h7" }],
        ["path", { d: "M2 2a26.6 26.6 0 0 1 10 20c.9-6.82 1.5-9.5 4-14", key: "qiv7li" }]
      ];
      var Vegan = createLucideIcon("vegan", __iconNode$U);
      var __iconNode$T = [
        ["path", { d: "M18 11c-1.5 0-2.5.5-3 2", key: "1fod00" }],
        [
          "path",
          {
            d: "M4 6a2 2 0 0 0-2 2v4a5 5 0 0 0 5 5 8 8 0 0 1 5 2 8 8 0 0 1 5-2 5 5 0 0 0 5-5V8a2 2 0 0 0-2-2h-3a8 8 0 0 0-5 2 8 8 0 0 0-5-2z",
            key: "d70hit"
          }
        ],
        ["path", { d: "M6 11c1.5 0 2.5.5 3 2", key: "136fht" }]
      ];
      var VenetianMask = createLucideIcon("venetian-mask", __iconNode$T);
      var __iconNode$S = [
        ["path", { d: "M10 20h4", key: "ni2waw" }],
        ["path", { d: "M12 16v6", key: "c8a4gj" }],
        ["path", { d: "M17 2h4v4", key: "vhe59" }],
        ["path", { d: "m21 2-5.46 5.46", key: "19kypf" }],
        ["circle", { cx: "12", cy: "11", r: "5", key: "16gxyc" }]
      ];
      var VenusAndMars = createLucideIcon("venus-and-mars", __iconNode$S);
      var __iconNode$R = [
        ["path", { d: "M12 15v7", key: "t2xh3l" }],
        ["path", { d: "M9 19h6", key: "456am0" }],
        ["circle", { cx: "12", cy: "9", r: "6", key: "1nw4tq" }]
      ];
      var Venus = createLucideIcon("venus", __iconNode$R);
      var __iconNode$Q = [
        ["path", { d: "m2 8 2 2-2 2 2 2-2 2", key: "sv1b1" }],
        ["path", { d: "m22 8-2 2 2 2-2 2 2 2", key: "101i4y" }],
        ["path", { d: "M8 8v10c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2", key: "1hbad5" }],
        ["path", { d: "M16 10.34V6c0-.55-.45-1-1-1h-4.34", key: "1x5tf0" }],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var VibrateOff = createLucideIcon("vibrate-off", __iconNode$Q);
      var __iconNode$P = [
        ["path", { d: "m2 8 2 2-2 2 2 2-2 2", key: "sv1b1" }],
        ["path", { d: "m22 8-2 2 2 2-2 2 2 2", key: "101i4y" }],
        ["rect", { width: "8", height: "14", x: "8", y: "5", rx: "1", key: "1oyrl4" }]
      ];
      var Vibrate = createLucideIcon("vibrate", __iconNode$P);
      var __iconNode$O = [
        [
          "path",
          { d: "M10.66 6H14a2 2 0 0 1 2 2v2.5l5.248-3.062A.5.5 0 0 1 22 7.87v8.196", key: "w8jjjt" }
        ],
        ["path", { d: "M16 16a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2", key: "1xawa7" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ];
      var VideoOff = createLucideIcon("video-off", __iconNode$O);
      var __iconNode$N = [
        [
          "path",
          {
            d: "m16 13 5.223 3.482a.5.5 0 0 0 .777-.416V7.87a.5.5 0 0 0-.752-.432L16 10.5",
            key: "ftymec"
          }
        ],
        ["rect", { x: "2", y: "6", width: "14", height: "12", rx: "2", key: "158x01" }]
      ];
      var Video2 = createLucideIcon("video", __iconNode$N);
      var __iconNode$M = [
        ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
        ["path", { d: "M2 8h20", key: "d11cs7" }],
        ["circle", { cx: "8", cy: "14", r: "2", key: "1k2qr5" }],
        ["path", { d: "M8 12h8", key: "1wcyev" }],
        ["circle", { cx: "16", cy: "14", r: "2", key: "14k7lr" }]
      ];
      var Videotape = createLucideIcon("videotape", __iconNode$M);
      var __iconNode$L = [
        ["path", { d: "M21 17v2a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-2", key: "mrq65r" }],
        ["path", { d: "M21 7V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2", key: "be3xqs" }],
        ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
        [
          "path",
          {
            d: "M18.944 12.33a1 1 0 0 0 0-.66 7.5 7.5 0 0 0-13.888 0 1 1 0 0 0 0 .66 7.5 7.5 0 0 0 13.888 0",
            key: "11ak4c"
          }
        ]
      ];
      var View = createLucideIcon("view", __iconNode$L);
      var __iconNode$K = [
        ["circle", { cx: "6", cy: "12", r: "4", key: "1ehtga" }],
        ["circle", { cx: "18", cy: "12", r: "4", key: "4vafl8" }],
        ["line", { x1: "6", x2: "18", y1: "16", y2: "16", key: "pmt8us" }]
      ];
      var Voicemail = createLucideIcon("voicemail", __iconNode$K);
      var __iconNode$J = [
        ["path", { d: "M11.1 7.1a16.55 16.55 0 0 1 10.9 4", key: "2880wi" }],
        ["path", { d: "M12 12a12.6 12.6 0 0 1-8.7 5", key: "113sja" }],
        ["path", { d: "M16.8 13.6a16.55 16.55 0 0 1-9 7.5", key: "1qmsgl" }],
        ["path", { d: "M20.7 17a12.8 12.8 0 0 0-8.7-5 13.3 13.3 0 0 1 0-10", key: "1bmeqp" }],
        ["path", { d: "M6.3 3.8a16.55 16.55 0 0 0 1.9 11.5", key: "iekzv9" }],
        ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
      ];
      var Volleyball = createLucideIcon("volleyball", __iconNode$J);
      var __iconNode$I = [
        [
          "path",
          {
            d: "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z",
            key: "uqj9uw"
          }
        ],
        ["path", { d: "M16 9a5 5 0 0 1 0 6", key: "1q6k2b" }]
      ];
      var Volume1 = createLucideIcon("volume-1", __iconNode$I);
      var __iconNode$H = [
        [
          "path",
          {
            d: "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z",
            key: "uqj9uw"
          }
        ],
        ["path", { d: "M16 9a5 5 0 0 1 0 6", key: "1q6k2b" }],
        ["path", { d: "M19.364 18.364a9 9 0 0 0 0-12.728", key: "ijwkga" }]
      ];
      var Volume2 = createLucideIcon("volume-2", __iconNode$H);
      var __iconNode$G = [
        ["path", { d: "M16 9a5 5 0 0 1 .95 2.293", key: "1fgyg8" }],
        ["path", { d: "M19.364 5.636a9 9 0 0 1 1.889 9.96", key: "l3zxae" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }],
        [
          "path",
          {
            d: "m7 7-.587.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298V11",
            key: "1gbwow"
          }
        ],
        ["path", { d: "M9.828 4.172A.686.686 0 0 1 11 4.657v.686", key: "s2je0y" }]
      ];
      var VolumeOff = createLucideIcon("volume-off", __iconNode$G);
      var __iconNode$F = [
        [
          "path",
          {
            d: "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z",
            key: "uqj9uw"
          }
        ],
        ["line", { x1: "22", x2: "16", y1: "9", y2: "15", key: "1ewh16" }],
        ["line", { x1: "16", x2: "22", y1: "9", y2: "15", key: "5ykzw1" }]
      ];
      var VolumeX = createLucideIcon("volume-x", __iconNode$F);
      var __iconNode$E = [
        [
          "path",
          {
            d: "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z",
            key: "uqj9uw"
          }
        ]
      ];
      var Volume = createLucideIcon("volume", __iconNode$E);
      var __iconNode$D = [
        ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }],
        ["path", { d: "M5 7c0-1.1.9-2 2-2h10a2 2 0 0 1 2 2v12H5V7Z", key: "1ezoue" }],
        ["path", { d: "M22 19H2", key: "nuriw5" }]
      ];
      var Vote = createLucideIcon("vote", __iconNode$D);
      var __iconNode$C = [
        ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
        ["path", { d: "M3 9a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2", key: "4125el" }],
        [
          "path",
          {
            d: "M3 11h3c.8 0 1.6.3 2.1.9l1.1.9c1.6 1.6 4.1 1.6 5.7 0l1.1-.9c.5-.5 1.3-.9 2.1-.9H21",
            key: "1dpki6"
          }
        ]
      ];
      var WalletCards = createLucideIcon("wallet-cards", __iconNode$C);
      var __iconNode$B = [
        ["path", { d: "M17 14h.01", key: "7oqj8z" }],
        [
          "path",
          {
            d: "M7 7h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14",
            key: "u1rqew"
          }
        ]
      ];
      var WalletMinimal = createLucideIcon("wallet-minimal", __iconNode$B);
      var __iconNode$A = [
        [
          "path",
          {
            d: "M19 7V4a1 1 0 0 0-1-1H5a2 2 0 0 0 0 4h15a1 1 0 0 1 1 1v4h-3a2 2 0 0 0 0 4h3a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1",
            key: "18etb6"
          }
        ],
        ["path", { d: "M3 5v14a2 2 0 0 0 2 2h15a1 1 0 0 0 1-1v-4", key: "xoc0q4" }]
      ];
      var Wallet = createLucideIcon("wallet", __iconNode$A);
      var __iconNode$z = [
        ["circle", { cx: "8", cy: "9", r: "2", key: "gjzl9d" }],
        [
          "path",
          {
            d: "m9 17 6.1-6.1a2 2 0 0 1 2.81.01L22 15V5a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2",
            key: "69xh40"
          }
        ],
        ["path", { d: "M8 21h8", key: "1ev6f3" }],
        ["path", { d: "M12 17v4", key: "1riwvh" }]
      ];
      var Wallpaper = createLucideIcon("wallpaper", __iconNode$z);
      var __iconNode$y = [
        [
          "path",
          {
            d: "m21.64 3.64-1.28-1.28a1.21 1.21 0 0 0-1.72 0L2.36 18.64a1.21 1.21 0 0 0 0 1.72l1.28 1.28a1.2 1.2 0 0 0 1.72 0L21.64 5.36a1.2 1.2 0 0 0 0-1.72",
            key: "ul74o6"
          }
        ],
        ["path", { d: "m14 7 3 3", key: "1r5n42" }],
        ["path", { d: "M5 6v4", key: "ilb8ba" }],
        ["path", { d: "M19 14v4", key: "blhpug" }],
        ["path", { d: "M10 2v2", key: "7u0qdc" }],
        ["path", { d: "M7 8H3", key: "zfb6yr" }],
        ["path", { d: "M21 16h-4", key: "1cnmox" }],
        ["path", { d: "M11 3H9", key: "1obp7u" }]
      ];
      var WandSparkles = createLucideIcon("wand-sparkles", __iconNode$y);
      var __iconNode$x = [
        ["path", { d: "M15 4V2", key: "z1p9b7" }],
        ["path", { d: "M15 16v-2", key: "px0unx" }],
        ["path", { d: "M8 9h2", key: "1g203m" }],
        ["path", { d: "M20 9h2", key: "19tzq7" }],
        ["path", { d: "M17.8 11.8 19 13", key: "yihg8r" }],
        ["path", { d: "M15 9h.01", key: "x1ddxp" }],
        ["path", { d: "M17.8 6.2 19 5", key: "fd4us0" }],
        ["path", { d: "m3 21 9-9", key: "1jfql5" }],
        ["path", { d: "M12.2 6.2 11 5", key: "i3da3b" }]
      ];
      var Wand = createLucideIcon("wand", __iconNode$x);
      var __iconNode$w = [
        [
          "path",
          {
            d: "M22 8.35V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8.35A2 2 0 0 1 3.26 6.5l8-3.2a2 2 0 0 1 1.48 0l8 3.2A2 2 0 0 1 22 8.35Z",
            key: "gksnxg"
          }
        ],
        ["path", { d: "M6 18h12", key: "9pbo8z" }],
        ["path", { d: "M6 14h12", key: "4cwo0f" }],
        ["rect", { width: "12", height: "12", x: "6", y: "10", key: "apd30q" }]
      ];
      var Warehouse = createLucideIcon("warehouse", __iconNode$w);
      var __iconNode$v = [
        ["path", { d: "M3 6h3", key: "155dbl" }],
        ["path", { d: "M17 6h.01", key: "e2y6kg" }],
        ["rect", { width: "18", height: "20", x: "3", y: "2", rx: "2", key: "od3kk9" }],
        ["circle", { cx: "12", cy: "13", r: "5", key: "nlbqau" }],
        ["path", { d: "M12 18a2.5 2.5 0 0 0 0-5 2.5 2.5 0 0 1 0-5", key: "17lach" }]
      ];
      var WashingMachine = createLucideIcon("washing-machine", __iconNode$v);
      var __iconNode$u = [
        ["circle", { cx: "12", cy: "12", r: "6", key: "1vlfrh" }],
        ["polyline", { points: "12 10 12 12 13 13", key: "19dquz" }],
        [
          "path",
          { d: "m16.13 7.66-.81-4.05a2 2 0 0 0-2-1.61h-2.68a2 2 0 0 0-2 1.61l-.78 4.05", key: "18k57s" }
        ],
        ["path", { d: "m7.88 16.36.8 4a2 2 0 0 0 2 1.61h2.72a2 2 0 0 0 2-1.61l.81-4.05", key: "16ny36" }]
      ];
      var Watch = createLucideIcon("watch", __iconNode$u);
      var __iconNode$t = [
        ["path", { d: "M19 5a2 2 0 0 0-2 2v11", key: "s41o68" }],
        [
          "path",
          {
            d: "M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
            key: "rd2r6e"
          }
        ],
        ["path", { d: "M7 13h10", key: "1rwob1" }],
        ["path", { d: "M7 9h10", key: "12czzb" }],
        ["path", { d: "M9 5a2 2 0 0 0-2 2v11", key: "x0q4gh" }]
      ];
      var WavesLadder = createLucideIcon("waves-ladder", __iconNode$t);
      var __iconNode$s = [
        [
          "path",
          {
            d: "M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
            key: "knzxuh"
          }
        ],
        [
          "path",
          {
            d: "M2 12c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
            key: "2jd2cc"
          }
        ],
        [
          "path",
          {
            d: "M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
            key: "rd2r6e"
          }
        ]
      ];
      var Waves = createLucideIcon("waves", __iconNode$s);
      var __iconNode$r = [
        ["circle", { cx: "12", cy: "4.5", r: "2.5", key: "r5ysbb" }],
        ["path", { d: "m10.2 6.3-3.9 3.9", key: "1nzqf6" }],
        ["circle", { cx: "4.5", cy: "12", r: "2.5", key: "jydg6v" }],
        ["path", { d: "M7 12h10", key: "b7w52i" }],
        ["circle", { cx: "19.5", cy: "12", r: "2.5", key: "1piiel" }],
        ["path", { d: "m13.8 17.7 3.9-3.9", key: "1wyg1y" }],
        ["circle", { cx: "12", cy: "19.5", r: "2.5", key: "13o1pw" }]
      ];
      var Waypoints = createLucideIcon("waypoints", __iconNode$r);
      var __iconNode$q = [
        ["circle", { cx: "12", cy: "10", r: "8", key: "1gshiw" }],
        ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
        ["path", { d: "M7 22h10", key: "10w4w3" }],
        ["path", { d: "M12 22v-4", key: "1utk9m" }]
      ];
      var Webcam = createLucideIcon("webcam", __iconNode$q);
      var __iconNode$p = [
        ["path", { d: "M17 17h-5c-1.09-.02-1.94.92-2.5 1.9A3 3 0 1 1 2.57 15", key: "1tvl6x" }],
        ["path", { d: "M9 3.4a4 4 0 0 1 6.52.66", key: "q04jfq" }],
        ["path", { d: "m6 17 3.1-5.8a2.5 2.5 0 0 0 .057-2.05", key: "azowf0" }],
        ["path", { d: "M20.3 20.3a4 4 0 0 1-2.3.7", key: "5joiws" }],
        ["path", { d: "M18.6 13a4 4 0 0 1 3.357 3.414", key: "cangb8" }],
        ["path", { d: "m12 6 .6 1", key: "tpjl1n" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ];
      var WebhookOff = createLucideIcon("webhook-off", __iconNode$p);
      var __iconNode$o = [
        ["circle", { cx: "12", cy: "5", r: "3", key: "rqqgnr" }],
        [
          "path",
          {
            d: "M6.5 8a2 2 0 0 0-1.905 1.46L2.1 18.5A2 2 0 0 0 4 21h16a2 2 0 0 0 1.925-2.54L19.4 9.5A2 2 0 0 0 17.48 8Z",
            key: "56o5sh"
          }
        ]
      ];
      var Weight = createLucideIcon("weight", __iconNode$o);
      var __iconNode$n = [
        [
          "path",
          {
            d: "M18 16.98h-5.99c-1.1 0-1.95.94-2.48 1.9A4 4 0 0 1 2 17c.01-.7.2-1.4.57-2",
            key: "q3hayz"
          }
        ],
        ["path", { d: "m6 17 3.13-5.78c.53-.97.1-2.18-.5-3.1a4 4 0 1 1 6.89-4.06", key: "1go1hn" }],
        ["path", { d: "m12 6 3.13 5.73C15.66 12.7 16.9 13 18 13a4 4 0 0 1 0 8", key: "qlwsc0" }]
      ];
      var Webhook = createLucideIcon("webhook", __iconNode$n);
      var __iconNode$m = [
        ["path", { d: "m2 22 10-10", key: "28ilpk" }],
        ["path", { d: "m16 8-1.17 1.17", key: "1qqm82" }],
        [
          "path",
          {
            d: "M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
            key: "1rdhi6"
          }
        ],
        [
          "path",
          { d: "m8 8-.53.53a3.5 3.5 0 0 0 0 4.94L9 15l1.53-1.53c.55-.55.88-1.25.98-1.97", key: "4wz8re" }
        ],
        [
          "path",
          { d: "M10.91 5.26c.15-.26.34-.51.56-.73L13 3l1.53 1.53a3.5 3.5 0 0 1 .28 4.62", key: "rves66" }
        ],
        ["path", { d: "M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z", key: "19rau1" }],
        [
          "path",
          {
            d: "M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
            key: "tc8ph9"
          }
        ],
        [
          "path",
          {
            d: "m16 16-.53.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.49 3.49 0 0 1 1.97-.98",
            key: "ak46r"
          }
        ],
        [
          "path",
          {
            d: "M18.74 13.09c.26-.15.51-.34.73-.56L21 11l-1.53-1.53a3.5 3.5 0 0 0-4.62-.28",
            key: "1tw520"
          }
        ],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var WheatOff = createLucideIcon("wheat-off", __iconNode$m);
      var __iconNode$l = [
        ["path", { d: "M2 22 16 8", key: "60hf96" }],
        [
          "path",
          {
            d: "M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
            key: "1rdhi6"
          }
        ],
        [
          "path",
          {
            d: "M7.47 8.53 9 7l1.53 1.53a3.5 3.5 0 0 1 0 4.94L9 15l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
            key: "1sdzmb"
          }
        ],
        [
          "path",
          {
            d: "M11.47 4.53 13 3l1.53 1.53a3.5 3.5 0 0 1 0 4.94L13 11l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
            key: "eoatbi"
          }
        ],
        ["path", { d: "M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z", key: "19rau1" }],
        [
          "path",
          {
            d: "M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
            key: "tc8ph9"
          }
        ],
        [
          "path",
          {
            d: "M15.47 13.47 17 15l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
            key: "2m8kc5"
          }
        ],
        [
          "path",
          {
            d: "M19.47 9.47 21 11l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L13 11l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
            key: "vex3ng"
          }
        ]
      ];
      var Wheat = createLucideIcon("wheat", __iconNode$l);
      var __iconNode$k = [
        ["circle", { cx: "7", cy: "12", r: "3", key: "12clwm" }],
        ["path", { d: "M10 9v6", key: "17i7lo" }],
        ["circle", { cx: "17", cy: "12", r: "3", key: "gl7c2s" }],
        ["path", { d: "M14 7v8", key: "dl84cr" }],
        ["path", { d: "M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1", key: "lt2kga" }]
      ];
      var WholeWord = createLucideIcon("whole-word", __iconNode$k);
      var __iconNode$j = [
        ["path", { d: "M12 20h.01", key: "zekei9" }],
        ["path", { d: "M5 12.859a10 10 0 0 1 14 0", key: "1x1e6c" }],
        ["path", { d: "M8.5 16.429a5 5 0 0 1 7 0", key: "1bycff" }]
      ];
      var WifiHigh = createLucideIcon("wifi-high", __iconNode$j);
      var __iconNode$i = [
        ["path", { d: "M12 20h.01", key: "zekei9" }],
        ["path", { d: "M8.5 16.429a5 5 0 0 1 7 0", key: "1bycff" }]
      ];
      var WifiLow = createLucideIcon("wifi-low", __iconNode$i);
      var __iconNode$h = [
        ["path", { d: "M12 20h.01", key: "zekei9" }],
        ["path", { d: "M8.5 16.429a5 5 0 0 1 7 0", key: "1bycff" }],
        ["path", { d: "M5 12.859a10 10 0 0 1 5.17-2.69", key: "1dl1wf" }],
        ["path", { d: "M19 12.859a10 10 0 0 0-2.007-1.523", key: "4k23kn" }],
        ["path", { d: "M2 8.82a15 15 0 0 1 4.177-2.643", key: "1grhjp" }],
        ["path", { d: "M22 8.82a15 15 0 0 0-11.288-3.764", key: "z3jwby" }],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ];
      var WifiOff = createLucideIcon("wifi-off", __iconNode$h);
      var __iconNode$g = [
        ["path", { d: "M2 8.82a15 15 0 0 1 20 0", key: "dnpr2z" }],
        [
          "path",
          {
            d: "M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
            key: "1817ys"
          }
        ],
        ["path", { d: "M5 12.859a10 10 0 0 1 10.5-2.222", key: "rpb7oy" }],
        ["path", { d: "M8.5 16.429a5 5 0 0 1 3-1.406", key: "r8bmzl" }]
      ];
      var WifiPen = createLucideIcon("wifi-pen", __iconNode$g);
      var __iconNode$f = [["path", { d: "M12 20h.01", key: "zekei9" }]];
      var WifiZero = createLucideIcon("wifi-zero", __iconNode$f);
      var __iconNode$e = [
        ["path", { d: "M12 20h.01", key: "zekei9" }],
        ["path", { d: "M2 8.82a15 15 0 0 1 20 0", key: "dnpr2z" }],
        ["path", { d: "M5 12.859a10 10 0 0 1 14 0", key: "1x1e6c" }],
        ["path", { d: "M8.5 16.429a5 5 0 0 1 7 0", key: "1bycff" }]
      ];
      var Wifi = createLucideIcon("wifi", __iconNode$e);
      var __iconNode$d = [
        ["path", { d: "M10 2v8", key: "d4bbey" }],
        ["path", { d: "M12.8 21.6A2 2 0 1 0 14 18H2", key: "19kp1d" }],
        ["path", { d: "M17.5 10a2.5 2.5 0 1 1 2 4H2", key: "19kpjc" }],
        ["path", { d: "m6 6 4 4 4-4", key: "k13n16" }]
      ];
      var WindArrowDown = createLucideIcon("wind-arrow-down", __iconNode$d);
      var __iconNode$c = [
        ["path", { d: "M12.8 19.6A2 2 0 1 0 14 16H2", key: "148xed" }],
        ["path", { d: "M17.5 8a2.5 2.5 0 1 1 2 4H2", key: "1u4tom" }],
        ["path", { d: "M9.8 4.4A2 2 0 1 1 11 8H2", key: "75valh" }]
      ];
      var Wind = createLucideIcon("wind", __iconNode$c);
      var __iconNode$b = [
        ["path", { d: "M8 22h8", key: "rmew8v" }],
        ["path", { d: "M7 10h10", key: "1101jm" }],
        ["path", { d: "M12 15v7", key: "t2xh3l" }],
        [
          "path",
          { d: "M12 15a5 5 0 0 0 5-5c0-2-.5-4-2-8H9c-1.5 4-2 6-2 8a5 5 0 0 0 5 5Z", key: "10ffi3" }
        ]
      ];
      var Wine = createLucideIcon("wine", __iconNode$b);
      var __iconNode$a = [
        ["path", { d: "M8 22h8", key: "rmew8v" }],
        ["path", { d: "M7 10h3m7 0h-1.343", key: "v48bem" }],
        ["path", { d: "M12 15v7", key: "t2xh3l" }],
        [
          "path",
          {
            d: "M7.307 7.307A12.33 12.33 0 0 0 7 10a5 5 0 0 0 7.391 4.391M8.638 2.981C8.75 2.668 8.872 2.34 9 2h6c1.5 4 2 6 2 8 0 .407-.05.809-.145 1.198",
            key: "1ymjlu"
          }
        ],
        ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
      ];
      var WineOff = createLucideIcon("wine-off", __iconNode$a);
      var __iconNode$9 = [
        ["rect", { width: "8", height: "8", x: "3", y: "3", rx: "2", key: "by2w9f" }],
        ["path", { d: "M7 11v4a2 2 0 0 0 2 2h4", key: "xkn7yn" }],
        ["rect", { width: "8", height: "8", x: "13", y: "13", rx: "2", key: "1cgmvn" }]
      ];
      var Workflow = createLucideIcon("workflow", __iconNode$9);
      var __iconNode$8 = [
        ["path", { d: "m19 12-1.5 3", key: "9bcu4o" }],
        ["path", { d: "M19.63 18.81 22 20", key: "121v98" }],
        [
          "path",
          {
            d: "M6.47 8.23a1.68 1.68 0 0 1 2.44 1.93l-.64 2.08a6.76 6.76 0 0 0 10.16 7.67l.42-.27a1 1 0 1 0-2.73-4.21l-.42.27a1.76 1.76 0 0 1-2.63-1.99l.64-2.08A6.66 6.66 0 0 0 3.94 3.9l-.7.4a1 1 0 1 0 2.55 4.34z",
            key: "1tij6q"
          }
        ]
      ];
      var Worm = createLucideIcon("worm", __iconNode$8);
      var __iconNode$7 = [
        ["line", { x1: "3", x2: "21", y1: "6", y2: "6", key: "4m8b97" }],
        ["path", { d: "M3 12h15a3 3 0 1 1 0 6h-4", key: "1cl7v7" }],
        ["polyline", { points: "16 16 14 18 16 20", key: "1jznyi" }],
        ["line", { x1: "3", x2: "10", y1: "18", y2: "18", key: "1h33wv" }]
      ];
      var WrapText = createLucideIcon("wrap-text", __iconNode$7);
      var __iconNode$6 = [
        [
          "path",
          {
            d: "M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z",
            key: "cbrjhi"
          }
        ]
      ];
      var Wrench = createLucideIcon("wrench", __iconNode$6);
      var __iconNode$5 = [
        ["path", { d: "M18 6 6 18", key: "1bl5f8" }],
        ["path", { d: "m6 6 12 12", key: "d8bk6v" }]
      ];
      var X3 = createLucideIcon("x", __iconNode$5);
      var __iconNode$4 = [
        [
          "path",
          {
            d: "M2.5 17a24.12 24.12 0 0 1 0-10 2 2 0 0 1 1.4-1.4 49.56 49.56 0 0 1 16.2 0A2 2 0 0 1 21.5 7a24.12 24.12 0 0 1 0 10 2 2 0 0 1-1.4 1.4 49.55 49.55 0 0 1-16.2 0A2 2 0 0 1 2.5 17",
            key: "1q2vi4"
          }
        ],
        ["path", { d: "m10 15 5-3-5-3z", key: "1jp15x" }]
      ];
      var Youtube = createLucideIcon("youtube", __iconNode$4);
      var __iconNode$3 = [
        ["path", { d: "M10.513 4.856 13.12 2.17a.5.5 0 0 1 .86.46l-1.377 4.317", key: "193nxd" }],
        ["path", { d: "M15.656 10H20a1 1 0 0 1 .78 1.63l-1.72 1.773", key: "27a7lr" }],
        [
          "path",
          {
            d: "M16.273 16.273 10.88 21.83a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14H4a1 1 0 0 1-.78-1.63l4.507-4.643",
            key: "1e0qe9"
          }
        ],
        ["path", { d: "m2 2 20 20", key: "1ooewy" }]
      ];
      var ZapOff = createLucideIcon("zap-off", __iconNode$3);
      var __iconNode$2 = [
        [
          "path",
          {
            d: "M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z",
            key: "1xq2db"
          }
        ]
      ];
      var Zap3 = createLucideIcon("zap", __iconNode$2);
      var __iconNode$1 = [
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
        ["line", { x1: "21", x2: "16.65", y1: "21", y2: "16.65", key: "13gj7c" }],
        ["line", { x1: "11", x2: "11", y1: "8", y2: "14", key: "1vmskp" }],
        ["line", { x1: "8", x2: "14", y1: "11", y2: "11", key: "durymu" }]
      ];
      var ZoomIn = createLucideIcon("zoom-in", __iconNode$1);
      var __iconNode = [
        ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
        ["line", { x1: "21", x2: "16.65", y1: "21", y2: "16.65", key: "13gj7c" }],
        ["line", { x1: "8", x2: "14", y1: "11", y2: "11", key: "durymu" }]
      ];
      var ZoomOut = createLucideIcon("zoom-out", __iconNode);
      var index2 = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        AArrowDown,
        AArrowUp,
        ALargeSmall,
        Accessibility,
        Activity: Activity2,
        AirVent,
        Airplay,
        AlarmClock,
        AlarmClockCheck,
        AlarmClockMinus,
        AlarmClockOff,
        AlarmClockPlus,
        AlarmSmoke,
        Album,
        AlignCenter,
        AlignCenterHorizontal,
        AlignCenterVertical,
        AlignEndHorizontal,
        AlignEndVertical,
        AlignHorizontalDistributeCenter,
        AlignHorizontalDistributeEnd,
        AlignHorizontalDistributeStart,
        AlignHorizontalJustifyCenter,
        AlignHorizontalJustifyEnd,
        AlignHorizontalJustifyStart,
        AlignHorizontalSpaceAround,
        AlignHorizontalSpaceBetween,
        AlignJustify,
        AlignLeft,
        AlignRight,
        AlignStartHorizontal,
        AlignStartVertical,
        AlignVerticalDistributeCenter,
        AlignVerticalDistributeEnd,
        AlignVerticalDistributeStart,
        AlignVerticalJustifyCenter,
        AlignVerticalJustifyEnd,
        AlignVerticalJustifyStart,
        AlignVerticalSpaceAround,
        AlignVerticalSpaceBetween,
        Ambulance,
        Ampersand,
        Ampersands,
        Amphora,
        Anchor,
        Angry,
        Annoyed,
        Antenna,
        Anvil,
        Aperture,
        AppWindow,
        AppWindowMac,
        Apple,
        Archive,
        ArchiveRestore,
        ArchiveX,
        Armchair,
        ArrowBigDown,
        ArrowBigDownDash,
        ArrowBigLeft,
        ArrowBigLeftDash,
        ArrowBigRight,
        ArrowBigRightDash,
        ArrowBigUp,
        ArrowBigUpDash,
        ArrowDown,
        ArrowDown01,
        ArrowDown10,
        ArrowDownAZ,
        ArrowDownFromLine,
        ArrowDownLeft,
        ArrowDownNarrowWide,
        ArrowDownRight,
        ArrowDownToDot,
        ArrowDownToLine,
        ArrowDownUp,
        ArrowDownWideNarrow,
        ArrowDownZA,
        ArrowLeft,
        ArrowLeftFromLine,
        ArrowLeftRight,
        ArrowLeftToLine,
        ArrowRight: ArrowRight4,
        ArrowRightFromLine,
        ArrowRightLeft,
        ArrowRightToLine,
        ArrowUp: ArrowUp2,
        ArrowUp01,
        ArrowUp10,
        ArrowUpAZ,
        ArrowUpDown,
        ArrowUpFromDot,
        ArrowUpFromLine,
        ArrowUpLeft,
        ArrowUpNarrowWide,
        ArrowUpRight,
        ArrowUpToLine,
        ArrowUpWideNarrow,
        ArrowUpZA,
        ArrowsUpFromLine,
        Asterisk,
        AtSign,
        Atom,
        AudioLines,
        AudioWaveform,
        Award: Award4,
        Axe,
        Axis3d,
        Baby,
        Backpack,
        Badge: Badge2,
        BadgeAlert,
        BadgeCent,
        BadgeCheck,
        BadgeDollarSign,
        BadgeEuro,
        BadgeHelp,
        BadgeIndianRupee,
        BadgeInfo,
        BadgeJapaneseYen,
        BadgeMinus,
        BadgePercent,
        BadgePlus,
        BadgePoundSterling,
        BadgeRussianRuble,
        BadgeSwissFranc,
        BadgeX,
        BaggageClaim,
        Ban,
        Banana,
        Bandage,
        Banknote,
        BanknoteArrowDown,
        BanknoteArrowUp,
        BanknoteX,
        Barcode,
        Baseline,
        Bath,
        Battery,
        BatteryCharging,
        BatteryFull,
        BatteryLow,
        BatteryMedium,
        BatteryPlus,
        BatteryWarning,
        Beaker,
        Bean,
        BeanOff,
        Bed,
        BedDouble,
        BedSingle,
        Beef,
        Beer,
        BeerOff,
        Bell,
        BellDot,
        BellElectric,
        BellMinus,
        BellOff,
        BellPlus,
        BellRing,
        BetweenHorizontalEnd,
        BetweenHorizontalStart,
        BetweenVerticalEnd,
        BetweenVerticalStart,
        BicepsFlexed,
        Bike,
        Binary,
        Binoculars,
        Biohazard,
        Bird,
        Bitcoin,
        Blend,
        Blinds,
        Blocks,
        Bluetooth,
        BluetoothConnected,
        BluetoothOff,
        BluetoothSearching,
        Bold,
        Bolt,
        Bomb,
        Bone,
        Book,
        BookA,
        BookAudio,
        BookCheck,
        BookCopy,
        BookDashed,
        BookDown,
        BookHeadphones,
        BookHeart,
        BookImage,
        BookKey,
        BookLock,
        BookMarked,
        BookMinus,
        BookOpen: BookOpen4,
        BookOpenCheck,
        BookOpenText,
        BookPlus,
        BookText: BookText3,
        BookType,
        BookUp,
        BookUp2,
        BookUser,
        BookX,
        Bookmark: Bookmark2,
        BookmarkCheck,
        BookmarkMinus,
        BookmarkPlus,
        BookmarkX,
        BoomBox,
        Bot,
        BotMessageSquare,
        BotOff,
        BowArrow,
        Box,
        Boxes,
        Braces,
        Brackets,
        Brain,
        BrainCircuit,
        BrainCog,
        BrickWall,
        BrickWallFire,
        Briefcase,
        BriefcaseBusiness,
        BriefcaseConveyorBelt,
        BriefcaseMedical,
        BringToFront,
        Brush,
        Bubbles,
        Bug,
        BugOff,
        BugPlay,
        Building: Building3,
        Building2,
        Bus,
        BusFront,
        Cable,
        CableCar,
        Cake,
        CakeSlice,
        Calculator,
        Calendar,
        Calendar1,
        CalendarArrowDown,
        CalendarArrowUp,
        CalendarCheck: CalendarCheck3,
        CalendarCheck2,
        CalendarClock,
        CalendarCog,
        CalendarDays,
        CalendarFold,
        CalendarHeart,
        CalendarMinus,
        CalendarMinus2,
        CalendarOff,
        CalendarPlus,
        CalendarPlus2,
        CalendarRange,
        CalendarSearch,
        CalendarSync,
        CalendarX,
        CalendarX2,
        Camera,
        CameraOff,
        Candy,
        CandyCane,
        CandyOff,
        Cannabis,
        Captions,
        CaptionsOff,
        Car,
        CarFront,
        CarTaxiFront,
        Caravan,
        Carrot,
        CaseLower,
        CaseSensitive,
        CaseUpper,
        CassetteTape,
        Cast,
        Castle,
        Cat,
        Cctv,
        ChartArea,
        ChartBar,
        ChartBarBig,
        ChartBarDecreasing,
        ChartBarIncreasing,
        ChartBarStacked,
        ChartCandlestick,
        ChartColumn,
        ChartColumnBig,
        ChartColumnDecreasing,
        ChartColumnIncreasing,
        ChartColumnStacked,
        ChartGantt,
        ChartLine,
        ChartNetwork,
        ChartNoAxesColumn,
        ChartNoAxesColumnDecreasing,
        ChartNoAxesColumnIncreasing,
        ChartNoAxesCombined,
        ChartNoAxesGantt,
        ChartPie,
        ChartScatter,
        ChartSpline,
        Check,
        CheckCheck,
        ChefHat,
        Cherry,
        ChevronDown: ChevronDown3,
        ChevronFirst,
        ChevronLast,
        ChevronLeft: ChevronLeft2,
        ChevronRight: ChevronRight5,
        ChevronUp,
        ChevronsDown,
        ChevronsDownUp,
        ChevronsLeft,
        ChevronsLeftRight,
        ChevronsLeftRightEllipsis,
        ChevronsRight,
        ChevronsRightLeft,
        ChevronsUp,
        ChevronsUpDown,
        Chrome,
        Church,
        Cigarette,
        CigaretteOff,
        Circle,
        CircleAlert,
        CircleArrowDown,
        CircleArrowLeft,
        CircleArrowOutDownLeft,
        CircleArrowOutDownRight,
        CircleArrowOutUpLeft,
        CircleArrowOutUpRight,
        CircleArrowRight,
        CircleArrowUp,
        CircleCheck,
        CircleCheckBig,
        CircleChevronDown,
        CircleChevronLeft,
        CircleChevronRight,
        CircleChevronUp,
        CircleDashed,
        CircleDivide,
        CircleDollarSign,
        CircleDot,
        CircleDotDashed,
        CircleEllipsis,
        CircleEqual,
        CircleFadingArrowUp,
        CircleFadingPlus,
        CircleGauge,
        CircleHelp,
        CircleMinus,
        CircleOff,
        CircleParking,
        CircleParkingOff,
        CirclePause,
        CirclePercent,
        CirclePlay,
        CirclePlus,
        CirclePower,
        CircleSlash,
        CircleSlash2,
        CircleSmall,
        CircleStop,
        CircleUser,
        CircleUserRound,
        CircleX,
        CircuitBoard,
        Citrus,
        Clapperboard,
        Clipboard,
        ClipboardCheck: ClipboardCheck2,
        ClipboardCopy,
        ClipboardList,
        ClipboardMinus,
        ClipboardPaste,
        ClipboardPen,
        ClipboardPenLine,
        ClipboardPlus,
        ClipboardType,
        ClipboardX,
        Clock: Clock13,
        Clock1,
        Clock10,
        Clock11,
        Clock12,
        Clock2: Clock22,
        Clock3,
        Clock4,
        Clock5,
        Clock6,
        Clock7,
        Clock8,
        Clock9,
        ClockAlert,
        ClockArrowDown,
        ClockArrowUp,
        ClockFading,
        Cloud,
        CloudAlert,
        CloudCog,
        CloudDownload,
        CloudDrizzle,
        CloudFog,
        CloudHail,
        CloudLightning,
        CloudMoon,
        CloudMoonRain,
        CloudOff,
        CloudRain,
        CloudRainWind,
        CloudSnow,
        CloudSun,
        CloudSunRain,
        CloudUpload,
        Cloudy,
        Clover,
        Club,
        Code,
        CodeXml,
        Codepen,
        Codesandbox,
        Coffee,
        Cog,
        Coins,
        Columns2,
        Columns3,
        Columns3Cog,
        Columns4,
        Combine,
        Command,
        Compass,
        Component: Component4,
        Computer,
        ConciergeBell,
        Cone,
        Construction,
        Contact: Contact2,
        ContactRound,
        Container,
        Contrast,
        Cookie,
        CookingPot,
        Copy,
        CopyCheck,
        CopyMinus,
        CopyPlus,
        CopySlash,
        CopyX,
        Copyleft,
        Copyright,
        CornerDownLeft,
        CornerDownRight,
        CornerLeftDown,
        CornerLeftUp,
        CornerRightDown,
        CornerRightUp,
        CornerUpLeft,
        CornerUpRight,
        Cpu,
        CreativeCommons,
        CreditCard,
        Croissant,
        Crop,
        Cross,
        Crosshair,
        Crown,
        Cuboid,
        CupSoda,
        Currency,
        Cylinder,
        Dam,
        Database,
        DatabaseBackup,
        DatabaseZap,
        DecimalsArrowLeft,
        DecimalsArrowRight,
        Delete,
        Dessert,
        Diameter,
        Diamond,
        DiamondMinus,
        DiamondPercent,
        DiamondPlus,
        Dice1,
        Dice2,
        Dice3,
        Dice4,
        Dice5,
        Dice6,
        Dices,
        Diff,
        Disc,
        Disc2,
        Disc3,
        DiscAlbum,
        Divide,
        Dna,
        DnaOff,
        Dock,
        Dog,
        DollarSign,
        Donut,
        DoorClosed,
        DoorOpen,
        Dot,
        Download: Download5,
        DraftingCompass,
        Drama,
        Dribbble,
        Drill,
        Droplet,
        DropletOff,
        Droplets,
        Drum,
        Drumstick,
        Dumbbell,
        Ear,
        EarOff,
        Earth,
        EarthLock,
        Eclipse,
        Egg,
        EggFried,
        EggOff,
        Ellipsis,
        EllipsisVertical,
        Equal,
        EqualApproximately,
        EqualNot,
        Eraser,
        EthernetPort,
        Euro,
        Expand,
        ExternalLink,
        Eye,
        EyeClosed,
        EyeOff,
        Facebook: Facebook2,
        Factory,
        Fan,
        FastForward,
        Feather,
        Fence,
        FerrisWheel,
        Figma,
        File: File3,
        FileArchive,
        FileAudio,
        FileAudio2,
        FileAxis3d,
        FileBadge,
        FileBadge2,
        FileBox,
        FileChartColumn,
        FileChartColumnIncreasing,
        FileChartLine,
        FileChartPie,
        FileCheck,
        FileCheck2,
        FileClock,
        FileCode,
        FileCode2,
        FileCog,
        FileDiff,
        FileDigit,
        FileDown,
        FileHeart,
        FileImage,
        FileInput,
        FileJson,
        FileJson2,
        FileKey,
        FileKey2,
        FileLock,
        FileLock2,
        FileMinus,
        FileMinus2,
        FileMusic,
        FileOutput,
        FilePen,
        FilePenLine,
        FilePlus,
        FilePlus2,
        FileQuestion,
        FileScan,
        FileSearch,
        FileSearch2,
        FileSliders,
        FileSpreadsheet: FileSpreadsheet4,
        FileStack,
        FileSymlink,
        FileTerminal,
        FileText: FileText8,
        FileType,
        FileType2,
        FileUp,
        FileUser,
        FileVideo,
        FileVideo2,
        FileVolume,
        FileVolume2,
        FileWarning,
        FileX,
        FileX2,
        Files,
        Film: Film2,
        Fingerprint,
        FireExtinguisher,
        Fish,
        FishOff,
        FishSymbol,
        Flag,
        FlagOff,
        FlagTriangleLeft,
        FlagTriangleRight,
        Flame,
        FlameKindling,
        Flashlight,
        FlashlightOff,
        FlaskConical,
        FlaskConicalOff,
        FlaskRound,
        FlipHorizontal,
        FlipHorizontal2,
        FlipVertical,
        FlipVertical2,
        Flower,
        Flower2,
        Focus,
        FoldHorizontal,
        FoldVertical,
        Folder,
        FolderArchive,
        FolderCheck,
        FolderClock,
        FolderClosed,
        FolderCode,
        FolderCog,
        FolderDot,
        FolderDown,
        FolderGit,
        FolderGit2,
        FolderHeart,
        FolderInput,
        FolderKanban,
        FolderKey,
        FolderLock,
        FolderMinus,
        FolderOpen,
        FolderOpenDot,
        FolderOutput,
        FolderPen,
        FolderPlus,
        FolderRoot,
        FolderSearch,
        FolderSearch2,
        FolderSymlink,
        FolderSync,
        FolderTree,
        FolderUp,
        FolderX,
        Folders,
        Footprints,
        Forklift,
        Forward,
        Frame,
        Framer,
        Frown,
        Fuel,
        Fullscreen,
        Funnel,
        FunnelPlus,
        FunnelX,
        GalleryHorizontal,
        GalleryHorizontalEnd,
        GalleryThumbnails,
        GalleryVertical,
        GalleryVerticalEnd,
        Gamepad,
        Gamepad2,
        Gauge,
        Gavel,
        Gem,
        Ghost,
        Gift,
        GitBranch,
        GitBranchPlus,
        GitCommitHorizontal,
        GitCommitVertical,
        GitCompare,
        GitCompareArrows,
        GitFork,
        GitGraph,
        GitMerge,
        GitPullRequest,
        GitPullRequestArrow,
        GitPullRequestClosed,
        GitPullRequestCreate,
        GitPullRequestCreateArrow,
        GitPullRequestDraft,
        Github,
        Gitlab,
        GlassWater,
        Glasses,
        Globe,
        GlobeLock,
        Goal,
        Grab,
        GraduationCap,
        Grape,
        Grid2x2: Grid2x22,
        Grid2x2Check,
        Grid2x2Plus,
        Grid2x2X,
        Grid3x3,
        Grip,
        GripHorizontal,
        GripVertical,
        Group,
        Guitar,
        Ham,
        Hammer,
        Hand,
        HandCoins,
        HandHeart,
        HandHelping,
        HandMetal,
        HandPlatter,
        Handshake,
        HardDrive,
        HardDriveDownload,
        HardDriveUpload,
        HardHat,
        Hash,
        Haze,
        HdmiPort,
        Heading,
        Heading1,
        Heading2,
        Heading3,
        Heading4,
        Heading5,
        Heading6,
        HeadphoneOff,
        Headphones: Headphones2,
        Headset,
        Heart: Heart3,
        HeartCrack,
        HeartHandshake,
        HeartMinus,
        HeartOff,
        HeartPlus,
        HeartPulse,
        Heater,
        Hexagon,
        Highlighter,
        History,
        Hop,
        HopOff,
        Hospital,
        Hotel,
        Hourglass,
        House,
        HousePlug,
        HousePlus,
        HouseWifi,
        IceCreamBowl,
        IceCreamCone,
        IdCard,
        Image,
        ImageDown,
        ImageMinus,
        ImageOff,
        ImagePlay,
        ImagePlus,
        ImageUp,
        ImageUpscale,
        Images,
        Import,
        Inbox,
        IndentDecrease,
        IndentIncrease,
        IndianRupee,
        Infinity: Infinity2,
        Info,
        InspectionPanel,
        Instagram,
        Italic,
        IterationCcw,
        IterationCw,
        JapaneseYen,
        Joystick,
        Kanban,
        Key,
        KeyRound,
        KeySquare,
        Keyboard,
        KeyboardMusic,
        KeyboardOff,
        Lamp,
        LampCeiling,
        LampDesk,
        LampFloor,
        LampWallDown,
        LampWallUp,
        LandPlot,
        Landmark,
        Languages,
        Laptop,
        LaptopMinimal,
        LaptopMinimalCheck,
        Lasso,
        LassoSelect,
        Laugh,
        Layers,
        Layers2,
        LayoutDashboard: LayoutDashboard2,
        LayoutGrid,
        LayoutList,
        LayoutPanelLeft,
        LayoutPanelTop,
        LayoutTemplate,
        Leaf,
        LeafyGreen,
        Lectern,
        LetterText,
        Library,
        LibraryBig: LibraryBig4,
        LifeBuoy,
        Ligature,
        Lightbulb: Lightbulb3,
        LightbulbOff,
        Link: Link3,
        Link2: Link22,
        Link2Off,
        Linkedin: Linkedin2,
        List: List2,
        ListCheck,
        ListChecks,
        ListCollapse,
        ListEnd,
        ListFilter,
        ListFilterPlus,
        ListMinus,
        ListMusic,
        ListOrdered,
        ListPlus,
        ListRestart,
        ListStart,
        ListTodo,
        ListTree,
        ListVideo,
        ListX,
        Loader: Loader3,
        LoaderCircle,
        LoaderPinwheel,
        Locate,
        LocateFixed,
        LocateOff,
        LocationEdit,
        Lock,
        LockKeyhole,
        LockKeyholeOpen,
        LockOpen,
        LogIn,
        LogOut: LogOut3,
        Logs,
        Lollipop,
        Luggage,
        Magnet,
        Mail: Mail4,
        MailCheck,
        MailMinus,
        MailOpen,
        MailPlus,
        MailQuestion,
        MailSearch,
        MailWarning,
        MailX,
        Mailbox,
        Mails,
        Map: Map2,
        MapPin: MapPin2,
        MapPinCheck,
        MapPinCheckInside,
        MapPinHouse,
        MapPinMinus,
        MapPinMinusInside,
        MapPinOff,
        MapPinPlus,
        MapPinPlusInside,
        MapPinX,
        MapPinXInside,
        MapPinned,
        MapPlus,
        Mars,
        MarsStroke,
        Martini,
        Maximize,
        Maximize2,
        Medal,
        Megaphone,
        MegaphoneOff,
        Meh,
        MemoryStick,
        Menu: Menu2,
        Merge,
        MessageCircle: MessageCircle2,
        MessageCircleCode,
        MessageCircleDashed,
        MessageCircleHeart,
        MessageCircleMore,
        MessageCircleOff,
        MessageCirclePlus,
        MessageCircleQuestion,
        MessageCircleReply,
        MessageCircleWarning,
        MessageCircleX,
        MessageSquare,
        MessageSquareCode,
        MessageSquareDashed,
        MessageSquareDiff,
        MessageSquareDot,
        MessageSquareHeart,
        MessageSquareLock,
        MessageSquareMore,
        MessageSquareOff,
        MessageSquarePlus,
        MessageSquareQuote,
        MessageSquareReply,
        MessageSquareShare,
        MessageSquareText,
        MessageSquareWarning,
        MessageSquareX,
        MessagesSquare,
        Mic,
        MicOff,
        MicVocal,
        Microchip,
        Microscope,
        Microwave,
        Milestone,
        Milk,
        MilkOff,
        Minimize,
        Minimize2,
        Minus,
        Monitor,
        MonitorCheck,
        MonitorCog,
        MonitorDot,
        MonitorDown,
        MonitorOff,
        MonitorPause,
        MonitorPlay,
        MonitorSmartphone,
        MonitorSpeaker,
        MonitorStop,
        MonitorUp,
        MonitorX,
        Moon,
        MoonStar,
        Mountain,
        MountainSnow,
        Mouse,
        MouseOff,
        MousePointer,
        MousePointer2,
        MousePointerBan,
        MousePointerClick,
        Move,
        Move3d,
        MoveDiagonal,
        MoveDiagonal2,
        MoveDown,
        MoveDownLeft,
        MoveDownRight,
        MoveHorizontal,
        MoveLeft,
        MoveRight,
        MoveUp,
        MoveUpLeft,
        MoveUpRight,
        MoveVertical,
        Music,
        Music2,
        Music3,
        Music4,
        Navigation,
        Navigation2,
        Navigation2Off,
        NavigationOff,
        Network,
        Newspaper,
        Nfc,
        NonBinary,
        Notebook,
        NotebookPen,
        NotebookTabs,
        NotebookText,
        NotepadText,
        NotepadTextDashed,
        Nut,
        NutOff,
        Octagon,
        OctagonAlert,
        OctagonMinus,
        OctagonPause,
        OctagonX,
        Omega,
        Option,
        Orbit,
        Origami,
        Package,
        Package2,
        PackageCheck,
        PackageMinus,
        PackageOpen,
        PackagePlus,
        PackageSearch,
        PackageX,
        PaintBucket,
        PaintRoller,
        Paintbrush,
        PaintbrushVertical,
        Palette,
        PanelBottom,
        PanelBottomClose,
        PanelBottomDashed,
        PanelBottomOpen,
        PanelLeft,
        PanelLeftClose: PanelLeftClose2,
        PanelLeftDashed,
        PanelLeftOpen,
        PanelRight,
        PanelRightClose,
        PanelRightDashed,
        PanelRightOpen: PanelRightOpen2,
        PanelTop,
        PanelTopClose,
        PanelTopDashed,
        PanelTopOpen,
        PanelsLeftBottom,
        PanelsRightBottom,
        PanelsTopLeft,
        Paperclip,
        Parentheses,
        ParkingMeter,
        PartyPopper,
        Pause,
        PawPrint,
        PcCase,
        Pen,
        PenLine,
        PenOff,
        PenTool,
        Pencil,
        PencilLine,
        PencilOff,
        PencilRuler,
        Pentagon,
        Percent,
        PersonStanding,
        PhilippinePeso,
        Phone: Phone4,
        PhoneCall,
        PhoneForwarded,
        PhoneIncoming,
        PhoneMissed,
        PhoneOff,
        PhoneOutgoing,
        Pi,
        Piano,
        Pickaxe,
        PictureInPicture,
        PictureInPicture2,
        PiggyBank,
        Pilcrow,
        PilcrowLeft,
        PilcrowRight,
        Pill,
        PillBottle,
        Pin,
        PinOff,
        Pipette,
        Pizza,
        Plane,
        PlaneLanding,
        PlaneTakeoff,
        Play: Play5,
        Plug,
        Plug2,
        PlugZap,
        Plus: Plus2,
        Pocket,
        PocketKnife,
        Podcast,
        Pointer,
        PointerOff,
        Popcorn,
        Popsicle,
        PoundSterling,
        Power,
        PowerOff,
        Presentation,
        Printer,
        PrinterCheck,
        Projector,
        Proportions,
        Puzzle,
        Pyramid,
        QrCode,
        Quote: Quote2,
        Rabbit,
        Radar,
        Radiation,
        Radical,
        Radio,
        RadioReceiver,
        RadioTower,
        Radius,
        RailSymbol,
        Rainbow,
        Rat,
        Ratio,
        Receipt,
        ReceiptCent,
        ReceiptEuro,
        ReceiptIndianRupee,
        ReceiptJapaneseYen,
        ReceiptPoundSterling,
        ReceiptRussianRuble,
        ReceiptSwissFranc,
        ReceiptText,
        RectangleEllipsis,
        RectangleGoggles,
        RectangleHorizontal,
        RectangleVertical,
        Recycle,
        Redo,
        Redo2,
        RedoDot,
        RefreshCcw,
        RefreshCcwDot,
        RefreshCw,
        RefreshCwOff,
        Refrigerator,
        Regex,
        RemoveFormatting,
        Repeat,
        Repeat1,
        Repeat2,
        Replace,
        ReplaceAll,
        Reply,
        ReplyAll,
        Rewind,
        Ribbon,
        Rocket,
        RockingChair,
        RollerCoaster,
        Rotate3d,
        RotateCcw,
        RotateCcwKey,
        RotateCcwSquare,
        RotateCw,
        RotateCwSquare,
        Route: Route2,
        RouteOff,
        Router: Router2,
        Rows2,
        Rows3,
        Rows4,
        Rss,
        Ruler,
        RulerDimensionLine,
        RussianRuble,
        Sailboat,
        Salad,
        Sandwich,
        Satellite,
        SatelliteDish,
        SaudiRiyal,
        Save,
        SaveAll,
        SaveOff,
        Scale,
        Scale3d,
        Scaling,
        Scan,
        ScanBarcode,
        ScanEye,
        ScanFace,
        ScanHeart,
        ScanLine,
        ScanQrCode,
        ScanSearch,
        ScanText,
        School,
        Scissors,
        ScissorsLineDashed,
        ScreenShare,
        ScreenShareOff,
        Scroll,
        ScrollText,
        Search: Search2,
        SearchCheck,
        SearchCode,
        SearchSlash,
        SearchX,
        Section,
        Send,
        SendHorizontal,
        SendToBack,
        SeparatorHorizontal,
        SeparatorVertical,
        Server,
        ServerCog,
        ServerCrash,
        ServerOff,
        Settings: Settings3,
        Settings2,
        Shapes,
        Share,
        Share2,
        Sheet,
        Shell,
        Shield: Shield2,
        ShieldAlert,
        ShieldBan,
        ShieldCheck,
        ShieldEllipsis,
        ShieldHalf,
        ShieldMinus,
        ShieldOff,
        ShieldPlus,
        ShieldQuestion,
        ShieldUser,
        ShieldX,
        Ship,
        ShipWheel,
        Shirt,
        ShoppingBag,
        ShoppingBasket,
        ShoppingCart,
        Shovel,
        ShowerHead,
        Shredder,
        Shrimp,
        Shrink,
        Shrub,
        Shuffle,
        Sigma,
        Signal,
        SignalHigh,
        SignalLow,
        SignalMedium,
        SignalZero,
        Signature,
        Signpost,
        SignpostBig,
        Siren,
        SkipBack,
        SkipForward,
        Skull,
        Slack,
        Slash,
        Slice,
        SlidersHorizontal,
        SlidersVertical,
        Smartphone,
        SmartphoneCharging,
        SmartphoneNfc,
        Smile,
        SmilePlus,
        Snail,
        Snowflake,
        Sofa,
        Soup,
        Space,
        Spade,
        Sparkle,
        Sparkles,
        Speaker,
        Speech,
        SpellCheck,
        SpellCheck2,
        Spline,
        SplinePointer,
        Split,
        SprayCan,
        Sprout,
        Square,
        SquareActivity,
        SquareArrowDown,
        SquareArrowDownLeft,
        SquareArrowDownRight,
        SquareArrowLeft,
        SquareArrowOutDownLeft,
        SquareArrowOutDownRight,
        SquareArrowOutUpLeft,
        SquareArrowOutUpRight,
        SquareArrowRight,
        SquareArrowUp,
        SquareArrowUpLeft,
        SquareArrowUpRight,
        SquareAsterisk,
        SquareBottomDashedScissors,
        SquareChartGantt,
        SquareCheck,
        SquareCheckBig,
        SquareChevronDown,
        SquareChevronLeft,
        SquareChevronRight,
        SquareChevronUp,
        SquareCode,
        SquareDashed,
        SquareDashedBottom,
        SquareDashedBottomCode,
        SquareDashedKanban,
        SquareDashedMousePointer,
        SquareDivide,
        SquareDot,
        SquareEqual,
        SquareFunction,
        SquareKanban,
        SquareLibrary,
        SquareM,
        SquareMenu,
        SquareMinus,
        SquareMousePointer,
        SquareParking,
        SquareParkingOff,
        SquarePen,
        SquarePercent,
        SquarePi,
        SquarePilcrow,
        SquarePlay,
        SquarePlus,
        SquarePower,
        SquareRadical,
        SquareRoundCorner,
        SquareScissors,
        SquareSigma,
        SquareSlash,
        SquareSplitHorizontal,
        SquareSplitVertical,
        SquareSquare,
        SquareStack,
        SquareTerminal,
        SquareUser,
        SquareUserRound,
        SquareX,
        SquaresExclude,
        SquaresIntersect,
        SquaresSubtract,
        SquaresUnite,
        Squircle,
        Squirrel,
        Stamp,
        Star,
        StarHalf,
        StarOff,
        StepBack,
        StepForward,
        Stethoscope: Stethoscope3,
        Sticker,
        StickyNote,
        Store,
        StretchHorizontal,
        StretchVertical,
        Strikethrough,
        Subscript,
        Sun,
        SunDim,
        SunMedium,
        SunMoon,
        SunSnow,
        Sunrise,
        Sunset,
        Superscript,
        SwatchBook,
        SwissFranc,
        SwitchCamera,
        Sword,
        Swords,
        Syringe,
        Table,
        Table2,
        TableCellsMerge,
        TableCellsSplit,
        TableColumnsSplit,
        TableOfContents,
        TableProperties,
        TableRowsSplit,
        Tablet,
        TabletSmartphone,
        Tablets,
        Tag,
        Tags,
        Tally1,
        Tally2,
        Tally3,
        Tally4,
        Tally5,
        Tangent,
        Target: Target2,
        Telescope,
        Tent,
        TentTree,
        Terminal,
        TestTube,
        TestTubeDiagonal,
        TestTubes: TestTubes2,
        Text,
        TextCursor,
        TextCursorInput,
        TextQuote,
        TextSearch,
        TextSelect,
        Theater,
        Thermometer,
        ThermometerSnowflake,
        ThermometerSun,
        ThumbsDown,
        ThumbsUp,
        Ticket,
        TicketCheck,
        TicketMinus,
        TicketPercent,
        TicketPlus,
        TicketSlash,
        TicketX,
        Tickets,
        TicketsPlane,
        Timer: Timer2,
        TimerOff,
        TimerReset,
        ToggleLeft,
        ToggleRight,
        Toilet,
        Tornado,
        Torus,
        Touchpad,
        TouchpadOff,
        TowerControl,
        ToyBrick,
        Tractor,
        TrafficCone,
        TrainFront,
        TrainFrontTunnel,
        TrainTrack,
        TramFront,
        Transgender,
        Trash,
        Trash2,
        TreeDeciduous,
        TreePalm,
        TreePine,
        Trees,
        Trello,
        TrendingDown,
        TrendingUp: TrendingUp2,
        TrendingUpDown,
        Triangle,
        TriangleAlert,
        TriangleDashed,
        TriangleRight,
        Trophy,
        Truck,
        TruckElectric,
        Turtle,
        Tv,
        TvMinimal,
        TvMinimalPlay,
        Twitch,
        Twitter: Twitter2,
        Type,
        TypeOutline,
        Umbrella,
        UmbrellaOff,
        Underline,
        Undo,
        Undo2,
        UndoDot,
        UnfoldHorizontal,
        UnfoldVertical,
        Ungroup,
        University,
        Unlink,
        Unlink2,
        Unplug,
        Upload,
        Usb,
        User,
        UserCheck,
        UserCog,
        UserLock,
        UserMinus,
        UserPen,
        UserPlus,
        UserRound,
        UserRoundCheck,
        UserRoundCog,
        UserRoundMinus,
        UserRoundPen,
        UserRoundPlus,
        UserRoundSearch,
        UserRoundX,
        UserSearch,
        UserX,
        Users: Users3,
        UsersRound,
        Utensils,
        UtensilsCrossed,
        UtilityPole,
        Variable,
        Vault,
        Vegan,
        VenetianMask,
        Venus,
        VenusAndMars,
        Vibrate,
        VibrateOff,
        Video: Video2,
        VideoOff,
        Videotape,
        View,
        Voicemail,
        Volleyball,
        Volume,
        Volume1,
        Volume2,
        VolumeOff,
        VolumeX,
        Vote,
        Wallet,
        WalletCards,
        WalletMinimal,
        Wallpaper,
        Wand,
        WandSparkles,
        Warehouse,
        WashingMachine,
        Watch,
        Waves,
        WavesLadder,
        Waypoints,
        Webcam,
        Webhook,
        WebhookOff,
        Weight,
        Wheat,
        WheatOff,
        WholeWord,
        Wifi,
        WifiHigh,
        WifiLow,
        WifiOff,
        WifiPen,
        WifiZero,
        Wind,
        WindArrowDown,
        Wine,
        WineOff,
        Workflow,
        Worm,
        WrapText,
        Wrench,
        X: X3,
        Youtube,
        Zap: Zap3,
        ZapOff,
        ZoomIn,
        ZoomOut
      });
      exports.AArrowDown = AArrowDown;
      exports.AArrowDownIcon = AArrowDown;
      exports.AArrowUp = AArrowUp;
      exports.AArrowUpIcon = AArrowUp;
      exports.ALargeSmall = ALargeSmall;
      exports.ALargeSmallIcon = ALargeSmall;
      exports.Accessibility = Accessibility;
      exports.AccessibilityIcon = Accessibility;
      exports.Activity = Activity2;
      exports.ActivityIcon = Activity2;
      exports.ActivitySquare = SquareActivity;
      exports.ActivitySquareIcon = SquareActivity;
      exports.AirVent = AirVent;
      exports.AirVentIcon = AirVent;
      exports.Airplay = Airplay;
      exports.AirplayIcon = Airplay;
      exports.AlarmCheck = AlarmClockCheck;
      exports.AlarmCheckIcon = AlarmClockCheck;
      exports.AlarmClock = AlarmClock;
      exports.AlarmClockCheck = AlarmClockCheck;
      exports.AlarmClockCheckIcon = AlarmClockCheck;
      exports.AlarmClockIcon = AlarmClock;
      exports.AlarmClockMinus = AlarmClockMinus;
      exports.AlarmClockMinusIcon = AlarmClockMinus;
      exports.AlarmClockOff = AlarmClockOff;
      exports.AlarmClockOffIcon = AlarmClockOff;
      exports.AlarmClockPlus = AlarmClockPlus;
      exports.AlarmClockPlusIcon = AlarmClockPlus;
      exports.AlarmMinus = AlarmClockMinus;
      exports.AlarmMinusIcon = AlarmClockMinus;
      exports.AlarmPlus = AlarmClockPlus;
      exports.AlarmPlusIcon = AlarmClockPlus;
      exports.AlarmSmoke = AlarmSmoke;
      exports.AlarmSmokeIcon = AlarmSmoke;
      exports.Album = Album;
      exports.AlbumIcon = Album;
      exports.AlertCircle = CircleAlert;
      exports.AlertCircleIcon = CircleAlert;
      exports.AlertOctagon = OctagonAlert;
      exports.AlertOctagonIcon = OctagonAlert;
      exports.AlertTriangle = TriangleAlert;
      exports.AlertTriangleIcon = TriangleAlert;
      exports.AlignCenter = AlignCenter;
      exports.AlignCenterHorizontal = AlignCenterHorizontal;
      exports.AlignCenterHorizontalIcon = AlignCenterHorizontal;
      exports.AlignCenterIcon = AlignCenter;
      exports.AlignCenterVertical = AlignCenterVertical;
      exports.AlignCenterVerticalIcon = AlignCenterVertical;
      exports.AlignEndHorizontal = AlignEndHorizontal;
      exports.AlignEndHorizontalIcon = AlignEndHorizontal;
      exports.AlignEndVertical = AlignEndVertical;
      exports.AlignEndVerticalIcon = AlignEndVertical;
      exports.AlignHorizontalDistributeCenter = AlignHorizontalDistributeCenter;
      exports.AlignHorizontalDistributeCenterIcon = AlignHorizontalDistributeCenter;
      exports.AlignHorizontalDistributeEnd = AlignHorizontalDistributeEnd;
      exports.AlignHorizontalDistributeEndIcon = AlignHorizontalDistributeEnd;
      exports.AlignHorizontalDistributeStart = AlignHorizontalDistributeStart;
      exports.AlignHorizontalDistributeStartIcon = AlignHorizontalDistributeStart;
      exports.AlignHorizontalJustifyCenter = AlignHorizontalJustifyCenter;
      exports.AlignHorizontalJustifyCenterIcon = AlignHorizontalJustifyCenter;
      exports.AlignHorizontalJustifyEnd = AlignHorizontalJustifyEnd;
      exports.AlignHorizontalJustifyEndIcon = AlignHorizontalJustifyEnd;
      exports.AlignHorizontalJustifyStart = AlignHorizontalJustifyStart;
      exports.AlignHorizontalJustifyStartIcon = AlignHorizontalJustifyStart;
      exports.AlignHorizontalSpaceAround = AlignHorizontalSpaceAround;
      exports.AlignHorizontalSpaceAroundIcon = AlignHorizontalSpaceAround;
      exports.AlignHorizontalSpaceBetween = AlignHorizontalSpaceBetween;
      exports.AlignHorizontalSpaceBetweenIcon = AlignHorizontalSpaceBetween;
      exports.AlignJustify = AlignJustify;
      exports.AlignJustifyIcon = AlignJustify;
      exports.AlignLeft = AlignLeft;
      exports.AlignLeftIcon = AlignLeft;
      exports.AlignRight = AlignRight;
      exports.AlignRightIcon = AlignRight;
      exports.AlignStartHorizontal = AlignStartHorizontal;
      exports.AlignStartHorizontalIcon = AlignStartHorizontal;
      exports.AlignStartVertical = AlignStartVertical;
      exports.AlignStartVerticalIcon = AlignStartVertical;
      exports.AlignVerticalDistributeCenter = AlignVerticalDistributeCenter;
      exports.AlignVerticalDistributeCenterIcon = AlignVerticalDistributeCenter;
      exports.AlignVerticalDistributeEnd = AlignVerticalDistributeEnd;
      exports.AlignVerticalDistributeEndIcon = AlignVerticalDistributeEnd;
      exports.AlignVerticalDistributeStart = AlignVerticalDistributeStart;
      exports.AlignVerticalDistributeStartIcon = AlignVerticalDistributeStart;
      exports.AlignVerticalJustifyCenter = AlignVerticalJustifyCenter;
      exports.AlignVerticalJustifyCenterIcon = AlignVerticalJustifyCenter;
      exports.AlignVerticalJustifyEnd = AlignVerticalJustifyEnd;
      exports.AlignVerticalJustifyEndIcon = AlignVerticalJustifyEnd;
      exports.AlignVerticalJustifyStart = AlignVerticalJustifyStart;
      exports.AlignVerticalJustifyStartIcon = AlignVerticalJustifyStart;
      exports.AlignVerticalSpaceAround = AlignVerticalSpaceAround;
      exports.AlignVerticalSpaceAroundIcon = AlignVerticalSpaceAround;
      exports.AlignVerticalSpaceBetween = AlignVerticalSpaceBetween;
      exports.AlignVerticalSpaceBetweenIcon = AlignVerticalSpaceBetween;
      exports.Ambulance = Ambulance;
      exports.AmbulanceIcon = Ambulance;
      exports.Ampersand = Ampersand;
      exports.AmpersandIcon = Ampersand;
      exports.Ampersands = Ampersands;
      exports.AmpersandsIcon = Ampersands;
      exports.Amphora = Amphora;
      exports.AmphoraIcon = Amphora;
      exports.Anchor = Anchor;
      exports.AnchorIcon = Anchor;
      exports.Angry = Angry;
      exports.AngryIcon = Angry;
      exports.Annoyed = Annoyed;
      exports.AnnoyedIcon = Annoyed;
      exports.Antenna = Antenna;
      exports.AntennaIcon = Antenna;
      exports.Anvil = Anvil;
      exports.AnvilIcon = Anvil;
      exports.Aperture = Aperture;
      exports.ApertureIcon = Aperture;
      exports.AppWindow = AppWindow;
      exports.AppWindowIcon = AppWindow;
      exports.AppWindowMac = AppWindowMac;
      exports.AppWindowMacIcon = AppWindowMac;
      exports.Apple = Apple;
      exports.AppleIcon = Apple;
      exports.Archive = Archive;
      exports.ArchiveIcon = Archive;
      exports.ArchiveRestore = ArchiveRestore;
      exports.ArchiveRestoreIcon = ArchiveRestore;
      exports.ArchiveX = ArchiveX;
      exports.ArchiveXIcon = ArchiveX;
      exports.AreaChart = ChartArea;
      exports.AreaChartIcon = ChartArea;
      exports.Armchair = Armchair;
      exports.ArmchairIcon = Armchair;
      exports.ArrowBigDown = ArrowBigDown;
      exports.ArrowBigDownDash = ArrowBigDownDash;
      exports.ArrowBigDownDashIcon = ArrowBigDownDash;
      exports.ArrowBigDownIcon = ArrowBigDown;
      exports.ArrowBigLeft = ArrowBigLeft;
      exports.ArrowBigLeftDash = ArrowBigLeftDash;
      exports.ArrowBigLeftDashIcon = ArrowBigLeftDash;
      exports.ArrowBigLeftIcon = ArrowBigLeft;
      exports.ArrowBigRight = ArrowBigRight;
      exports.ArrowBigRightDash = ArrowBigRightDash;
      exports.ArrowBigRightDashIcon = ArrowBigRightDash;
      exports.ArrowBigRightIcon = ArrowBigRight;
      exports.ArrowBigUp = ArrowBigUp;
      exports.ArrowBigUpDash = ArrowBigUpDash;
      exports.ArrowBigUpDashIcon = ArrowBigUpDash;
      exports.ArrowBigUpIcon = ArrowBigUp;
      exports.ArrowDown = ArrowDown;
      exports.ArrowDown01 = ArrowDown01;
      exports.ArrowDown01Icon = ArrowDown01;
      exports.ArrowDown10 = ArrowDown10;
      exports.ArrowDown10Icon = ArrowDown10;
      exports.ArrowDownAZ = ArrowDownAZ;
      exports.ArrowDownAZIcon = ArrowDownAZ;
      exports.ArrowDownAz = ArrowDownAZ;
      exports.ArrowDownAzIcon = ArrowDownAZ;
      exports.ArrowDownCircle = CircleArrowDown;
      exports.ArrowDownCircleIcon = CircleArrowDown;
      exports.ArrowDownFromLine = ArrowDownFromLine;
      exports.ArrowDownFromLineIcon = ArrowDownFromLine;
      exports.ArrowDownIcon = ArrowDown;
      exports.ArrowDownLeft = ArrowDownLeft;
      exports.ArrowDownLeftFromCircle = CircleArrowOutDownLeft;
      exports.ArrowDownLeftFromCircleIcon = CircleArrowOutDownLeft;
      exports.ArrowDownLeftFromSquare = SquareArrowOutDownLeft;
      exports.ArrowDownLeftFromSquareIcon = SquareArrowOutDownLeft;
      exports.ArrowDownLeftIcon = ArrowDownLeft;
      exports.ArrowDownLeftSquare = SquareArrowDownLeft;
      exports.ArrowDownLeftSquareIcon = SquareArrowDownLeft;
      exports.ArrowDownNarrowWide = ArrowDownNarrowWide;
      exports.ArrowDownNarrowWideIcon = ArrowDownNarrowWide;
      exports.ArrowDownRight = ArrowDownRight;
      exports.ArrowDownRightFromCircle = CircleArrowOutDownRight;
      exports.ArrowDownRightFromCircleIcon = CircleArrowOutDownRight;
      exports.ArrowDownRightFromSquare = SquareArrowOutDownRight;
      exports.ArrowDownRightFromSquareIcon = SquareArrowOutDownRight;
      exports.ArrowDownRightIcon = ArrowDownRight;
      exports.ArrowDownRightSquare = SquareArrowDownRight;
      exports.ArrowDownRightSquareIcon = SquareArrowDownRight;
      exports.ArrowDownSquare = SquareArrowDown;
      exports.ArrowDownSquareIcon = SquareArrowDown;
      exports.ArrowDownToDot = ArrowDownToDot;
      exports.ArrowDownToDotIcon = ArrowDownToDot;
      exports.ArrowDownToLine = ArrowDownToLine;
      exports.ArrowDownToLineIcon = ArrowDownToLine;
      exports.ArrowDownUp = ArrowDownUp;
      exports.ArrowDownUpIcon = ArrowDownUp;
      exports.ArrowDownWideNarrow = ArrowDownWideNarrow;
      exports.ArrowDownWideNarrowIcon = ArrowDownWideNarrow;
      exports.ArrowDownZA = ArrowDownZA;
      exports.ArrowDownZAIcon = ArrowDownZA;
      exports.ArrowDownZa = ArrowDownZA;
      exports.ArrowDownZaIcon = ArrowDownZA;
      exports.ArrowLeft = ArrowLeft;
      exports.ArrowLeftCircle = CircleArrowLeft;
      exports.ArrowLeftCircleIcon = CircleArrowLeft;
      exports.ArrowLeftFromLine = ArrowLeftFromLine;
      exports.ArrowLeftFromLineIcon = ArrowLeftFromLine;
      exports.ArrowLeftIcon = ArrowLeft;
      exports.ArrowLeftRight = ArrowLeftRight;
      exports.ArrowLeftRightIcon = ArrowLeftRight;
      exports.ArrowLeftSquare = SquareArrowLeft;
      exports.ArrowLeftSquareIcon = SquareArrowLeft;
      exports.ArrowLeftToLine = ArrowLeftToLine;
      exports.ArrowLeftToLineIcon = ArrowLeftToLine;
      exports.ArrowRight = ArrowRight4;
      exports.ArrowRightCircle = CircleArrowRight;
      exports.ArrowRightCircleIcon = CircleArrowRight;
      exports.ArrowRightFromLine = ArrowRightFromLine;
      exports.ArrowRightFromLineIcon = ArrowRightFromLine;
      exports.ArrowRightIcon = ArrowRight4;
      exports.ArrowRightLeft = ArrowRightLeft;
      exports.ArrowRightLeftIcon = ArrowRightLeft;
      exports.ArrowRightSquare = SquareArrowRight;
      exports.ArrowRightSquareIcon = SquareArrowRight;
      exports.ArrowRightToLine = ArrowRightToLine;
      exports.ArrowRightToLineIcon = ArrowRightToLine;
      exports.ArrowUp = ArrowUp2;
      exports.ArrowUp01 = ArrowUp01;
      exports.ArrowUp01Icon = ArrowUp01;
      exports.ArrowUp10 = ArrowUp10;
      exports.ArrowUp10Icon = ArrowUp10;
      exports.ArrowUpAZ = ArrowUpAZ;
      exports.ArrowUpAZIcon = ArrowUpAZ;
      exports.ArrowUpAz = ArrowUpAZ;
      exports.ArrowUpAzIcon = ArrowUpAZ;
      exports.ArrowUpCircle = CircleArrowUp;
      exports.ArrowUpCircleIcon = CircleArrowUp;
      exports.ArrowUpDown = ArrowUpDown;
      exports.ArrowUpDownIcon = ArrowUpDown;
      exports.ArrowUpFromDot = ArrowUpFromDot;
      exports.ArrowUpFromDotIcon = ArrowUpFromDot;
      exports.ArrowUpFromLine = ArrowUpFromLine;
      exports.ArrowUpFromLineIcon = ArrowUpFromLine;
      exports.ArrowUpIcon = ArrowUp2;
      exports.ArrowUpLeft = ArrowUpLeft;
      exports.ArrowUpLeftFromCircle = CircleArrowOutUpLeft;
      exports.ArrowUpLeftFromCircleIcon = CircleArrowOutUpLeft;
      exports.ArrowUpLeftFromSquare = SquareArrowOutUpLeft;
      exports.ArrowUpLeftFromSquareIcon = SquareArrowOutUpLeft;
      exports.ArrowUpLeftIcon = ArrowUpLeft;
      exports.ArrowUpLeftSquare = SquareArrowUpLeft;
      exports.ArrowUpLeftSquareIcon = SquareArrowUpLeft;
      exports.ArrowUpNarrowWide = ArrowUpNarrowWide;
      exports.ArrowUpNarrowWideIcon = ArrowUpNarrowWide;
      exports.ArrowUpRight = ArrowUpRight;
      exports.ArrowUpRightFromCircle = CircleArrowOutUpRight;
      exports.ArrowUpRightFromCircleIcon = CircleArrowOutUpRight;
      exports.ArrowUpRightFromSquare = SquareArrowOutUpRight;
      exports.ArrowUpRightFromSquareIcon = SquareArrowOutUpRight;
      exports.ArrowUpRightIcon = ArrowUpRight;
      exports.ArrowUpRightSquare = SquareArrowUpRight;
      exports.ArrowUpRightSquareIcon = SquareArrowUpRight;
      exports.ArrowUpSquare = SquareArrowUp;
      exports.ArrowUpSquareIcon = SquareArrowUp;
      exports.ArrowUpToLine = ArrowUpToLine;
      exports.ArrowUpToLineIcon = ArrowUpToLine;
      exports.ArrowUpWideNarrow = ArrowUpWideNarrow;
      exports.ArrowUpWideNarrowIcon = ArrowUpWideNarrow;
      exports.ArrowUpZA = ArrowUpZA;
      exports.ArrowUpZAIcon = ArrowUpZA;
      exports.ArrowUpZa = ArrowUpZA;
      exports.ArrowUpZaIcon = ArrowUpZA;
      exports.ArrowsUpFromLine = ArrowsUpFromLine;
      exports.ArrowsUpFromLineIcon = ArrowsUpFromLine;
      exports.Asterisk = Asterisk;
      exports.AsteriskIcon = Asterisk;
      exports.AsteriskSquare = SquareAsterisk;
      exports.AsteriskSquareIcon = SquareAsterisk;
      exports.AtSign = AtSign;
      exports.AtSignIcon = AtSign;
      exports.Atom = Atom;
      exports.AtomIcon = Atom;
      exports.AudioLines = AudioLines;
      exports.AudioLinesIcon = AudioLines;
      exports.AudioWaveform = AudioWaveform;
      exports.AudioWaveformIcon = AudioWaveform;
      exports.Award = Award4;
      exports.AwardIcon = Award4;
      exports.Axe = Axe;
      exports.AxeIcon = Axe;
      exports.Axis3D = Axis3d;
      exports.Axis3DIcon = Axis3d;
      exports.Axis3d = Axis3d;
      exports.Axis3dIcon = Axis3d;
      exports.Baby = Baby;
      exports.BabyIcon = Baby;
      exports.Backpack = Backpack;
      exports.BackpackIcon = Backpack;
      exports.Badge = Badge2;
      exports.BadgeAlert = BadgeAlert;
      exports.BadgeAlertIcon = BadgeAlert;
      exports.BadgeCent = BadgeCent;
      exports.BadgeCentIcon = BadgeCent;
      exports.BadgeCheck = BadgeCheck;
      exports.BadgeCheckIcon = BadgeCheck;
      exports.BadgeDollarSign = BadgeDollarSign;
      exports.BadgeDollarSignIcon = BadgeDollarSign;
      exports.BadgeEuro = BadgeEuro;
      exports.BadgeEuroIcon = BadgeEuro;
      exports.BadgeHelp = BadgeHelp;
      exports.BadgeHelpIcon = BadgeHelp;
      exports.BadgeIcon = Badge2;
      exports.BadgeIndianRupee = BadgeIndianRupee;
      exports.BadgeIndianRupeeIcon = BadgeIndianRupee;
      exports.BadgeInfo = BadgeInfo;
      exports.BadgeInfoIcon = BadgeInfo;
      exports.BadgeJapaneseYen = BadgeJapaneseYen;
      exports.BadgeJapaneseYenIcon = BadgeJapaneseYen;
      exports.BadgeMinus = BadgeMinus;
      exports.BadgeMinusIcon = BadgeMinus;
      exports.BadgePercent = BadgePercent;
      exports.BadgePercentIcon = BadgePercent;
      exports.BadgePlus = BadgePlus;
      exports.BadgePlusIcon = BadgePlus;
      exports.BadgePoundSterling = BadgePoundSterling;
      exports.BadgePoundSterlingIcon = BadgePoundSterling;
      exports.BadgeRussianRuble = BadgeRussianRuble;
      exports.BadgeRussianRubleIcon = BadgeRussianRuble;
      exports.BadgeSwissFranc = BadgeSwissFranc;
      exports.BadgeSwissFrancIcon = BadgeSwissFranc;
      exports.BadgeX = BadgeX;
      exports.BadgeXIcon = BadgeX;
      exports.BaggageClaim = BaggageClaim;
      exports.BaggageClaimIcon = BaggageClaim;
      exports.Ban = Ban;
      exports.BanIcon = Ban;
      exports.Banana = Banana;
      exports.BananaIcon = Banana;
      exports.Bandage = Bandage;
      exports.BandageIcon = Bandage;
      exports.Banknote = Banknote;
      exports.BanknoteArrowDown = BanknoteArrowDown;
      exports.BanknoteArrowDownIcon = BanknoteArrowDown;
      exports.BanknoteArrowUp = BanknoteArrowUp;
      exports.BanknoteArrowUpIcon = BanknoteArrowUp;
      exports.BanknoteIcon = Banknote;
      exports.BanknoteX = BanknoteX;
      exports.BanknoteXIcon = BanknoteX;
      exports.BarChart = ChartNoAxesColumnIncreasing;
      exports.BarChart2 = ChartNoAxesColumn;
      exports.BarChart2Icon = ChartNoAxesColumn;
      exports.BarChart3 = ChartColumn;
      exports.BarChart3Icon = ChartColumn;
      exports.BarChart4 = ChartColumnIncreasing;
      exports.BarChart4Icon = ChartColumnIncreasing;
      exports.BarChartBig = ChartColumnBig;
      exports.BarChartBigIcon = ChartColumnBig;
      exports.BarChartHorizontal = ChartBar;
      exports.BarChartHorizontalBig = ChartBarBig;
      exports.BarChartHorizontalBigIcon = ChartBarBig;
      exports.BarChartHorizontalIcon = ChartBar;
      exports.BarChartIcon = ChartNoAxesColumnIncreasing;
      exports.Barcode = Barcode;
      exports.BarcodeIcon = Barcode;
      exports.Baseline = Baseline;
      exports.BaselineIcon = Baseline;
      exports.Bath = Bath;
      exports.BathIcon = Bath;
      exports.Battery = Battery;
      exports.BatteryCharging = BatteryCharging;
      exports.BatteryChargingIcon = BatteryCharging;
      exports.BatteryFull = BatteryFull;
      exports.BatteryFullIcon = BatteryFull;
      exports.BatteryIcon = Battery;
      exports.BatteryLow = BatteryLow;
      exports.BatteryLowIcon = BatteryLow;
      exports.BatteryMedium = BatteryMedium;
      exports.BatteryMediumIcon = BatteryMedium;
      exports.BatteryPlus = BatteryPlus;
      exports.BatteryPlusIcon = BatteryPlus;
      exports.BatteryWarning = BatteryWarning;
      exports.BatteryWarningIcon = BatteryWarning;
      exports.Beaker = Beaker;
      exports.BeakerIcon = Beaker;
      exports.Bean = Bean;
      exports.BeanIcon = Bean;
      exports.BeanOff = BeanOff;
      exports.BeanOffIcon = BeanOff;
      exports.Bed = Bed;
      exports.BedDouble = BedDouble;
      exports.BedDoubleIcon = BedDouble;
      exports.BedIcon = Bed;
      exports.BedSingle = BedSingle;
      exports.BedSingleIcon = BedSingle;
      exports.Beef = Beef;
      exports.BeefIcon = Beef;
      exports.Beer = Beer;
      exports.BeerIcon = Beer;
      exports.BeerOff = BeerOff;
      exports.BeerOffIcon = BeerOff;
      exports.Bell = Bell;
      exports.BellDot = BellDot;
      exports.BellDotIcon = BellDot;
      exports.BellElectric = BellElectric;
      exports.BellElectricIcon = BellElectric;
      exports.BellIcon = Bell;
      exports.BellMinus = BellMinus;
      exports.BellMinusIcon = BellMinus;
      exports.BellOff = BellOff;
      exports.BellOffIcon = BellOff;
      exports.BellPlus = BellPlus;
      exports.BellPlusIcon = BellPlus;
      exports.BellRing = BellRing;
      exports.BellRingIcon = BellRing;
      exports.BetweenHorizonalEnd = BetweenHorizontalEnd;
      exports.BetweenHorizonalEndIcon = BetweenHorizontalEnd;
      exports.BetweenHorizonalStart = BetweenHorizontalStart;
      exports.BetweenHorizonalStartIcon = BetweenHorizontalStart;
      exports.BetweenHorizontalEnd = BetweenHorizontalEnd;
      exports.BetweenHorizontalEndIcon = BetweenHorizontalEnd;
      exports.BetweenHorizontalStart = BetweenHorizontalStart;
      exports.BetweenHorizontalStartIcon = BetweenHorizontalStart;
      exports.BetweenVerticalEnd = BetweenVerticalEnd;
      exports.BetweenVerticalEndIcon = BetweenVerticalEnd;
      exports.BetweenVerticalStart = BetweenVerticalStart;
      exports.BetweenVerticalStartIcon = BetweenVerticalStart;
      exports.BicepsFlexed = BicepsFlexed;
      exports.BicepsFlexedIcon = BicepsFlexed;
      exports.Bike = Bike;
      exports.BikeIcon = Bike;
      exports.Binary = Binary;
      exports.BinaryIcon = Binary;
      exports.Binoculars = Binoculars;
      exports.BinocularsIcon = Binoculars;
      exports.Biohazard = Biohazard;
      exports.BiohazardIcon = Biohazard;
      exports.Bird = Bird;
      exports.BirdIcon = Bird;
      exports.Bitcoin = Bitcoin;
      exports.BitcoinIcon = Bitcoin;
      exports.Blend = Blend;
      exports.BlendIcon = Blend;
      exports.Blinds = Blinds;
      exports.BlindsIcon = Blinds;
      exports.Blocks = Blocks;
      exports.BlocksIcon = Blocks;
      exports.Bluetooth = Bluetooth;
      exports.BluetoothConnected = BluetoothConnected;
      exports.BluetoothConnectedIcon = BluetoothConnected;
      exports.BluetoothIcon = Bluetooth;
      exports.BluetoothOff = BluetoothOff;
      exports.BluetoothOffIcon = BluetoothOff;
      exports.BluetoothSearching = BluetoothSearching;
      exports.BluetoothSearchingIcon = BluetoothSearching;
      exports.Bold = Bold;
      exports.BoldIcon = Bold;
      exports.Bolt = Bolt;
      exports.BoltIcon = Bolt;
      exports.Bomb = Bomb;
      exports.BombIcon = Bomb;
      exports.Bone = Bone;
      exports.BoneIcon = Bone;
      exports.Book = Book;
      exports.BookA = BookA;
      exports.BookAIcon = BookA;
      exports.BookAudio = BookAudio;
      exports.BookAudioIcon = BookAudio;
      exports.BookCheck = BookCheck;
      exports.BookCheckIcon = BookCheck;
      exports.BookCopy = BookCopy;
      exports.BookCopyIcon = BookCopy;
      exports.BookDashed = BookDashed;
      exports.BookDashedIcon = BookDashed;
      exports.BookDown = BookDown;
      exports.BookDownIcon = BookDown;
      exports.BookHeadphones = BookHeadphones;
      exports.BookHeadphonesIcon = BookHeadphones;
      exports.BookHeart = BookHeart;
      exports.BookHeartIcon = BookHeart;
      exports.BookIcon = Book;
      exports.BookImage = BookImage;
      exports.BookImageIcon = BookImage;
      exports.BookKey = BookKey;
      exports.BookKeyIcon = BookKey;
      exports.BookLock = BookLock;
      exports.BookLockIcon = BookLock;
      exports.BookMarked = BookMarked;
      exports.BookMarkedIcon = BookMarked;
      exports.BookMinus = BookMinus;
      exports.BookMinusIcon = BookMinus;
      exports.BookOpen = BookOpen4;
      exports.BookOpenCheck = BookOpenCheck;
      exports.BookOpenCheckIcon = BookOpenCheck;
      exports.BookOpenIcon = BookOpen4;
      exports.BookOpenText = BookOpenText;
      exports.BookOpenTextIcon = BookOpenText;
      exports.BookPlus = BookPlus;
      exports.BookPlusIcon = BookPlus;
      exports.BookTemplate = BookDashed;
      exports.BookTemplateIcon = BookDashed;
      exports.BookText = BookText3;
      exports.BookTextIcon = BookText3;
      exports.BookType = BookType;
      exports.BookTypeIcon = BookType;
      exports.BookUp = BookUp;
      exports.BookUp2 = BookUp2;
      exports.BookUp2Icon = BookUp2;
      exports.BookUpIcon = BookUp;
      exports.BookUser = BookUser;
      exports.BookUserIcon = BookUser;
      exports.BookX = BookX;
      exports.BookXIcon = BookX;
      exports.Bookmark = Bookmark2;
      exports.BookmarkCheck = BookmarkCheck;
      exports.BookmarkCheckIcon = BookmarkCheck;
      exports.BookmarkIcon = Bookmark2;
      exports.BookmarkMinus = BookmarkMinus;
      exports.BookmarkMinusIcon = BookmarkMinus;
      exports.BookmarkPlus = BookmarkPlus;
      exports.BookmarkPlusIcon = BookmarkPlus;
      exports.BookmarkX = BookmarkX;
      exports.BookmarkXIcon = BookmarkX;
      exports.BoomBox = BoomBox;
      exports.BoomBoxIcon = BoomBox;
      exports.Bot = Bot;
      exports.BotIcon = Bot;
      exports.BotMessageSquare = BotMessageSquare;
      exports.BotMessageSquareIcon = BotMessageSquare;
      exports.BotOff = BotOff;
      exports.BotOffIcon = BotOff;
      exports.BowArrow = BowArrow;
      exports.BowArrowIcon = BowArrow;
      exports.Box = Box;
      exports.BoxIcon = Box;
      exports.BoxSelect = SquareDashed;
      exports.BoxSelectIcon = SquareDashed;
      exports.Boxes = Boxes;
      exports.BoxesIcon = Boxes;
      exports.Braces = Braces;
      exports.BracesIcon = Braces;
      exports.Brackets = Brackets;
      exports.BracketsIcon = Brackets;
      exports.Brain = Brain;
      exports.BrainCircuit = BrainCircuit;
      exports.BrainCircuitIcon = BrainCircuit;
      exports.BrainCog = BrainCog;
      exports.BrainCogIcon = BrainCog;
      exports.BrainIcon = Brain;
      exports.BrickWall = BrickWall;
      exports.BrickWallFire = BrickWallFire;
      exports.BrickWallFireIcon = BrickWallFire;
      exports.BrickWallIcon = BrickWall;
      exports.Briefcase = Briefcase;
      exports.BriefcaseBusiness = BriefcaseBusiness;
      exports.BriefcaseBusinessIcon = BriefcaseBusiness;
      exports.BriefcaseConveyorBelt = BriefcaseConveyorBelt;
      exports.BriefcaseConveyorBeltIcon = BriefcaseConveyorBelt;
      exports.BriefcaseIcon = Briefcase;
      exports.BriefcaseMedical = BriefcaseMedical;
      exports.BriefcaseMedicalIcon = BriefcaseMedical;
      exports.BringToFront = BringToFront;
      exports.BringToFrontIcon = BringToFront;
      exports.Brush = Brush;
      exports.BrushIcon = Brush;
      exports.Bubbles = Bubbles;
      exports.BubblesIcon = Bubbles;
      exports.Bug = Bug;
      exports.BugIcon = Bug;
      exports.BugOff = BugOff;
      exports.BugOffIcon = BugOff;
      exports.BugPlay = BugPlay;
      exports.BugPlayIcon = BugPlay;
      exports.Building = Building3;
      exports.Building2 = Building2;
      exports.Building2Icon = Building2;
      exports.BuildingIcon = Building3;
      exports.Bus = Bus;
      exports.BusFront = BusFront;
      exports.BusFrontIcon = BusFront;
      exports.BusIcon = Bus;
      exports.Cable = Cable;
      exports.CableCar = CableCar;
      exports.CableCarIcon = CableCar;
      exports.CableIcon = Cable;
      exports.Cake = Cake;
      exports.CakeIcon = Cake;
      exports.CakeSlice = CakeSlice;
      exports.CakeSliceIcon = CakeSlice;
      exports.Calculator = Calculator;
      exports.CalculatorIcon = Calculator;
      exports.Calendar = Calendar;
      exports.Calendar1 = Calendar1;
      exports.Calendar1Icon = Calendar1;
      exports.CalendarArrowDown = CalendarArrowDown;
      exports.CalendarArrowDownIcon = CalendarArrowDown;
      exports.CalendarArrowUp = CalendarArrowUp;
      exports.CalendarArrowUpIcon = CalendarArrowUp;
      exports.CalendarCheck = CalendarCheck3;
      exports.CalendarCheck2 = CalendarCheck2;
      exports.CalendarCheck2Icon = CalendarCheck2;
      exports.CalendarCheckIcon = CalendarCheck3;
      exports.CalendarClock = CalendarClock;
      exports.CalendarClockIcon = CalendarClock;
      exports.CalendarCog = CalendarCog;
      exports.CalendarCogIcon = CalendarCog;
      exports.CalendarDays = CalendarDays;
      exports.CalendarDaysIcon = CalendarDays;
      exports.CalendarFold = CalendarFold;
      exports.CalendarFoldIcon = CalendarFold;
      exports.CalendarHeart = CalendarHeart;
      exports.CalendarHeartIcon = CalendarHeart;
      exports.CalendarIcon = Calendar;
      exports.CalendarMinus = CalendarMinus;
      exports.CalendarMinus2 = CalendarMinus2;
      exports.CalendarMinus2Icon = CalendarMinus2;
      exports.CalendarMinusIcon = CalendarMinus;
      exports.CalendarOff = CalendarOff;
      exports.CalendarOffIcon = CalendarOff;
      exports.CalendarPlus = CalendarPlus;
      exports.CalendarPlus2 = CalendarPlus2;
      exports.CalendarPlus2Icon = CalendarPlus2;
      exports.CalendarPlusIcon = CalendarPlus;
      exports.CalendarRange = CalendarRange;
      exports.CalendarRangeIcon = CalendarRange;
      exports.CalendarSearch = CalendarSearch;
      exports.CalendarSearchIcon = CalendarSearch;
      exports.CalendarSync = CalendarSync;
      exports.CalendarSyncIcon = CalendarSync;
      exports.CalendarX = CalendarX;
      exports.CalendarX2 = CalendarX2;
      exports.CalendarX2Icon = CalendarX2;
      exports.CalendarXIcon = CalendarX;
      exports.Camera = Camera;
      exports.CameraIcon = Camera;
      exports.CameraOff = CameraOff;
      exports.CameraOffIcon = CameraOff;
      exports.CandlestickChart = ChartCandlestick;
      exports.CandlestickChartIcon = ChartCandlestick;
      exports.Candy = Candy;
      exports.CandyCane = CandyCane;
      exports.CandyCaneIcon = CandyCane;
      exports.CandyIcon = Candy;
      exports.CandyOff = CandyOff;
      exports.CandyOffIcon = CandyOff;
      exports.Cannabis = Cannabis;
      exports.CannabisIcon = Cannabis;
      exports.Captions = Captions;
      exports.CaptionsIcon = Captions;
      exports.CaptionsOff = CaptionsOff;
      exports.CaptionsOffIcon = CaptionsOff;
      exports.Car = Car;
      exports.CarFront = CarFront;
      exports.CarFrontIcon = CarFront;
      exports.CarIcon = Car;
      exports.CarTaxiFront = CarTaxiFront;
      exports.CarTaxiFrontIcon = CarTaxiFront;
      exports.Caravan = Caravan;
      exports.CaravanIcon = Caravan;
      exports.Carrot = Carrot;
      exports.CarrotIcon = Carrot;
      exports.CaseLower = CaseLower;
      exports.CaseLowerIcon = CaseLower;
      exports.CaseSensitive = CaseSensitive;
      exports.CaseSensitiveIcon = CaseSensitive;
      exports.CaseUpper = CaseUpper;
      exports.CaseUpperIcon = CaseUpper;
      exports.CassetteTape = CassetteTape;
      exports.CassetteTapeIcon = CassetteTape;
      exports.Cast = Cast;
      exports.CastIcon = Cast;
      exports.Castle = Castle;
      exports.CastleIcon = Castle;
      exports.Cat = Cat;
      exports.CatIcon = Cat;
      exports.Cctv = Cctv;
      exports.CctvIcon = Cctv;
      exports.ChartArea = ChartArea;
      exports.ChartAreaIcon = ChartArea;
      exports.ChartBar = ChartBar;
      exports.ChartBarBig = ChartBarBig;
      exports.ChartBarBigIcon = ChartBarBig;
      exports.ChartBarDecreasing = ChartBarDecreasing;
      exports.ChartBarDecreasingIcon = ChartBarDecreasing;
      exports.ChartBarIcon = ChartBar;
      exports.ChartBarIncreasing = ChartBarIncreasing;
      exports.ChartBarIncreasingIcon = ChartBarIncreasing;
      exports.ChartBarStacked = ChartBarStacked;
      exports.ChartBarStackedIcon = ChartBarStacked;
      exports.ChartCandlestick = ChartCandlestick;
      exports.ChartCandlestickIcon = ChartCandlestick;
      exports.ChartColumn = ChartColumn;
      exports.ChartColumnBig = ChartColumnBig;
      exports.ChartColumnBigIcon = ChartColumnBig;
      exports.ChartColumnDecreasing = ChartColumnDecreasing;
      exports.ChartColumnDecreasingIcon = ChartColumnDecreasing;
      exports.ChartColumnIcon = ChartColumn;
      exports.ChartColumnIncreasing = ChartColumnIncreasing;
      exports.ChartColumnIncreasingIcon = ChartColumnIncreasing;
      exports.ChartColumnStacked = ChartColumnStacked;
      exports.ChartColumnStackedIcon = ChartColumnStacked;
      exports.ChartGantt = ChartGantt;
      exports.ChartGanttIcon = ChartGantt;
      exports.ChartLine = ChartLine;
      exports.ChartLineIcon = ChartLine;
      exports.ChartNetwork = ChartNetwork;
      exports.ChartNetworkIcon = ChartNetwork;
      exports.ChartNoAxesColumn = ChartNoAxesColumn;
      exports.ChartNoAxesColumnDecreasing = ChartNoAxesColumnDecreasing;
      exports.ChartNoAxesColumnDecreasingIcon = ChartNoAxesColumnDecreasing;
      exports.ChartNoAxesColumnIcon = ChartNoAxesColumn;
      exports.ChartNoAxesColumnIncreasing = ChartNoAxesColumnIncreasing;
      exports.ChartNoAxesColumnIncreasingIcon = ChartNoAxesColumnIncreasing;
      exports.ChartNoAxesCombined = ChartNoAxesCombined;
      exports.ChartNoAxesCombinedIcon = ChartNoAxesCombined;
      exports.ChartNoAxesGantt = ChartNoAxesGantt;
      exports.ChartNoAxesGanttIcon = ChartNoAxesGantt;
      exports.ChartPie = ChartPie;
      exports.ChartPieIcon = ChartPie;
      exports.ChartScatter = ChartScatter;
      exports.ChartScatterIcon = ChartScatter;
      exports.ChartSpline = ChartSpline;
      exports.ChartSplineIcon = ChartSpline;
      exports.Check = Check;
      exports.CheckCheck = CheckCheck;
      exports.CheckCheckIcon = CheckCheck;
      exports.CheckCircle = CircleCheckBig;
      exports.CheckCircle2 = CircleCheck;
      exports.CheckCircle2Icon = CircleCheck;
      exports.CheckCircleIcon = CircleCheckBig;
      exports.CheckIcon = Check;
      exports.CheckSquare = SquareCheckBig;
      exports.CheckSquare2 = SquareCheck;
      exports.CheckSquare2Icon = SquareCheck;
      exports.CheckSquareIcon = SquareCheckBig;
      exports.ChefHat = ChefHat;
      exports.ChefHatIcon = ChefHat;
      exports.Cherry = Cherry;
      exports.CherryIcon = Cherry;
      exports.ChevronDown = ChevronDown3;
      exports.ChevronDownCircle = CircleChevronDown;
      exports.ChevronDownCircleIcon = CircleChevronDown;
      exports.ChevronDownIcon = ChevronDown3;
      exports.ChevronDownSquare = SquareChevronDown;
      exports.ChevronDownSquareIcon = SquareChevronDown;
      exports.ChevronFirst = ChevronFirst;
      exports.ChevronFirstIcon = ChevronFirst;
      exports.ChevronLast = ChevronLast;
      exports.ChevronLastIcon = ChevronLast;
      exports.ChevronLeft = ChevronLeft2;
      exports.ChevronLeftCircle = CircleChevronLeft;
      exports.ChevronLeftCircleIcon = CircleChevronLeft;
      exports.ChevronLeftIcon = ChevronLeft2;
      exports.ChevronLeftSquare = SquareChevronLeft;
      exports.ChevronLeftSquareIcon = SquareChevronLeft;
      exports.ChevronRight = ChevronRight5;
      exports.ChevronRightCircle = CircleChevronRight;
      exports.ChevronRightCircleIcon = CircleChevronRight;
      exports.ChevronRightIcon = ChevronRight5;
      exports.ChevronRightSquare = SquareChevronRight;
      exports.ChevronRightSquareIcon = SquareChevronRight;
      exports.ChevronUp = ChevronUp;
      exports.ChevronUpCircle = CircleChevronUp;
      exports.ChevronUpCircleIcon = CircleChevronUp;
      exports.ChevronUpIcon = ChevronUp;
      exports.ChevronUpSquare = SquareChevronUp;
      exports.ChevronUpSquareIcon = SquareChevronUp;
      exports.ChevronsDown = ChevronsDown;
      exports.ChevronsDownIcon = ChevronsDown;
      exports.ChevronsDownUp = ChevronsDownUp;
      exports.ChevronsDownUpIcon = ChevronsDownUp;
      exports.ChevronsLeft = ChevronsLeft;
      exports.ChevronsLeftIcon = ChevronsLeft;
      exports.ChevronsLeftRight = ChevronsLeftRight;
      exports.ChevronsLeftRightEllipsis = ChevronsLeftRightEllipsis;
      exports.ChevronsLeftRightEllipsisIcon = ChevronsLeftRightEllipsis;
      exports.ChevronsLeftRightIcon = ChevronsLeftRight;
      exports.ChevronsRight = ChevronsRight;
      exports.ChevronsRightIcon = ChevronsRight;
      exports.ChevronsRightLeft = ChevronsRightLeft;
      exports.ChevronsRightLeftIcon = ChevronsRightLeft;
      exports.ChevronsUp = ChevronsUp;
      exports.ChevronsUpDown = ChevronsUpDown;
      exports.ChevronsUpDownIcon = ChevronsUpDown;
      exports.ChevronsUpIcon = ChevronsUp;
      exports.Chrome = Chrome;
      exports.ChromeIcon = Chrome;
      exports.Church = Church;
      exports.ChurchIcon = Church;
      exports.Cigarette = Cigarette;
      exports.CigaretteIcon = Cigarette;
      exports.CigaretteOff = CigaretteOff;
      exports.CigaretteOffIcon = CigaretteOff;
      exports.Circle = Circle;
      exports.CircleAlert = CircleAlert;
      exports.CircleAlertIcon = CircleAlert;
      exports.CircleArrowDown = CircleArrowDown;
      exports.CircleArrowDownIcon = CircleArrowDown;
      exports.CircleArrowLeft = CircleArrowLeft;
      exports.CircleArrowLeftIcon = CircleArrowLeft;
      exports.CircleArrowOutDownLeft = CircleArrowOutDownLeft;
      exports.CircleArrowOutDownLeftIcon = CircleArrowOutDownLeft;
      exports.CircleArrowOutDownRight = CircleArrowOutDownRight;
      exports.CircleArrowOutDownRightIcon = CircleArrowOutDownRight;
      exports.CircleArrowOutUpLeft = CircleArrowOutUpLeft;
      exports.CircleArrowOutUpLeftIcon = CircleArrowOutUpLeft;
      exports.CircleArrowOutUpRight = CircleArrowOutUpRight;
      exports.CircleArrowOutUpRightIcon = CircleArrowOutUpRight;
      exports.CircleArrowRight = CircleArrowRight;
      exports.CircleArrowRightIcon = CircleArrowRight;
      exports.CircleArrowUp = CircleArrowUp;
      exports.CircleArrowUpIcon = CircleArrowUp;
      exports.CircleCheck = CircleCheck;
      exports.CircleCheckBig = CircleCheckBig;
      exports.CircleCheckBigIcon = CircleCheckBig;
      exports.CircleCheckIcon = CircleCheck;
      exports.CircleChevronDown = CircleChevronDown;
      exports.CircleChevronDownIcon = CircleChevronDown;
      exports.CircleChevronLeft = CircleChevronLeft;
      exports.CircleChevronLeftIcon = CircleChevronLeft;
      exports.CircleChevronRight = CircleChevronRight;
      exports.CircleChevronRightIcon = CircleChevronRight;
      exports.CircleChevronUp = CircleChevronUp;
      exports.CircleChevronUpIcon = CircleChevronUp;
      exports.CircleDashed = CircleDashed;
      exports.CircleDashedIcon = CircleDashed;
      exports.CircleDivide = CircleDivide;
      exports.CircleDivideIcon = CircleDivide;
      exports.CircleDollarSign = CircleDollarSign;
      exports.CircleDollarSignIcon = CircleDollarSign;
      exports.CircleDot = CircleDot;
      exports.CircleDotDashed = CircleDotDashed;
      exports.CircleDotDashedIcon = CircleDotDashed;
      exports.CircleDotIcon = CircleDot;
      exports.CircleEllipsis = CircleEllipsis;
      exports.CircleEllipsisIcon = CircleEllipsis;
      exports.CircleEqual = CircleEqual;
      exports.CircleEqualIcon = CircleEqual;
      exports.CircleFadingArrowUp = CircleFadingArrowUp;
      exports.CircleFadingArrowUpIcon = CircleFadingArrowUp;
      exports.CircleFadingPlus = CircleFadingPlus;
      exports.CircleFadingPlusIcon = CircleFadingPlus;
      exports.CircleGauge = CircleGauge;
      exports.CircleGaugeIcon = CircleGauge;
      exports.CircleHelp = CircleHelp;
      exports.CircleHelpIcon = CircleHelp;
      exports.CircleIcon = Circle;
      exports.CircleMinus = CircleMinus;
      exports.CircleMinusIcon = CircleMinus;
      exports.CircleOff = CircleOff;
      exports.CircleOffIcon = CircleOff;
      exports.CircleParking = CircleParking;
      exports.CircleParkingIcon = CircleParking;
      exports.CircleParkingOff = CircleParkingOff;
      exports.CircleParkingOffIcon = CircleParkingOff;
      exports.CirclePause = CirclePause;
      exports.CirclePauseIcon = CirclePause;
      exports.CirclePercent = CirclePercent;
      exports.CirclePercentIcon = CirclePercent;
      exports.CirclePlay = CirclePlay;
      exports.CirclePlayIcon = CirclePlay;
      exports.CirclePlus = CirclePlus;
      exports.CirclePlusIcon = CirclePlus;
      exports.CirclePower = CirclePower;
      exports.CirclePowerIcon = CirclePower;
      exports.CircleSlash = CircleSlash;
      exports.CircleSlash2 = CircleSlash2;
      exports.CircleSlash2Icon = CircleSlash2;
      exports.CircleSlashIcon = CircleSlash;
      exports.CircleSlashed = CircleSlash2;
      exports.CircleSlashedIcon = CircleSlash2;
      exports.CircleSmall = CircleSmall;
      exports.CircleSmallIcon = CircleSmall;
      exports.CircleStop = CircleStop;
      exports.CircleStopIcon = CircleStop;
      exports.CircleUser = CircleUser;
      exports.CircleUserIcon = CircleUser;
      exports.CircleUserRound = CircleUserRound;
      exports.CircleUserRoundIcon = CircleUserRound;
      exports.CircleX = CircleX;
      exports.CircleXIcon = CircleX;
      exports.CircuitBoard = CircuitBoard;
      exports.CircuitBoardIcon = CircuitBoard;
      exports.Citrus = Citrus;
      exports.CitrusIcon = Citrus;
      exports.Clapperboard = Clapperboard;
      exports.ClapperboardIcon = Clapperboard;
      exports.Clipboard = Clipboard;
      exports.ClipboardCheck = ClipboardCheck2;
      exports.ClipboardCheckIcon = ClipboardCheck2;
      exports.ClipboardCopy = ClipboardCopy;
      exports.ClipboardCopyIcon = ClipboardCopy;
      exports.ClipboardEdit = ClipboardPen;
      exports.ClipboardEditIcon = ClipboardPen;
      exports.ClipboardIcon = Clipboard;
      exports.ClipboardList = ClipboardList;
      exports.ClipboardListIcon = ClipboardList;
      exports.ClipboardMinus = ClipboardMinus;
      exports.ClipboardMinusIcon = ClipboardMinus;
      exports.ClipboardPaste = ClipboardPaste;
      exports.ClipboardPasteIcon = ClipboardPaste;
      exports.ClipboardPen = ClipboardPen;
      exports.ClipboardPenIcon = ClipboardPen;
      exports.ClipboardPenLine = ClipboardPenLine;
      exports.ClipboardPenLineIcon = ClipboardPenLine;
      exports.ClipboardPlus = ClipboardPlus;
      exports.ClipboardPlusIcon = ClipboardPlus;
      exports.ClipboardSignature = ClipboardPenLine;
      exports.ClipboardSignatureIcon = ClipboardPenLine;
      exports.ClipboardType = ClipboardType;
      exports.ClipboardTypeIcon = ClipboardType;
      exports.ClipboardX = ClipboardX;
      exports.ClipboardXIcon = ClipboardX;
      exports.Clock = Clock13;
      exports.Clock1 = Clock1;
      exports.Clock10 = Clock10;
      exports.Clock10Icon = Clock10;
      exports.Clock11 = Clock11;
      exports.Clock11Icon = Clock11;
      exports.Clock12 = Clock12;
      exports.Clock12Icon = Clock12;
      exports.Clock1Icon = Clock1;
      exports.Clock2 = Clock22;
      exports.Clock2Icon = Clock22;
      exports.Clock3 = Clock3;
      exports.Clock3Icon = Clock3;
      exports.Clock4 = Clock4;
      exports.Clock4Icon = Clock4;
      exports.Clock5 = Clock5;
      exports.Clock5Icon = Clock5;
      exports.Clock6 = Clock6;
      exports.Clock6Icon = Clock6;
      exports.Clock7 = Clock7;
      exports.Clock7Icon = Clock7;
      exports.Clock8 = Clock8;
      exports.Clock8Icon = Clock8;
      exports.Clock9 = Clock9;
      exports.Clock9Icon = Clock9;
      exports.ClockAlert = ClockAlert;
      exports.ClockAlertIcon = ClockAlert;
      exports.ClockArrowDown = ClockArrowDown;
      exports.ClockArrowDownIcon = ClockArrowDown;
      exports.ClockArrowUp = ClockArrowUp;
      exports.ClockArrowUpIcon = ClockArrowUp;
      exports.ClockFading = ClockFading;
      exports.ClockFadingIcon = ClockFading;
      exports.ClockIcon = Clock13;
      exports.Cloud = Cloud;
      exports.CloudAlert = CloudAlert;
      exports.CloudAlertIcon = CloudAlert;
      exports.CloudCog = CloudCog;
      exports.CloudCogIcon = CloudCog;
      exports.CloudDownload = CloudDownload;
      exports.CloudDownloadIcon = CloudDownload;
      exports.CloudDrizzle = CloudDrizzle;
      exports.CloudDrizzleIcon = CloudDrizzle;
      exports.CloudFog = CloudFog;
      exports.CloudFogIcon = CloudFog;
      exports.CloudHail = CloudHail;
      exports.CloudHailIcon = CloudHail;
      exports.CloudIcon = Cloud;
      exports.CloudLightning = CloudLightning;
      exports.CloudLightningIcon = CloudLightning;
      exports.CloudMoon = CloudMoon;
      exports.CloudMoonIcon = CloudMoon;
      exports.CloudMoonRain = CloudMoonRain;
      exports.CloudMoonRainIcon = CloudMoonRain;
      exports.CloudOff = CloudOff;
      exports.CloudOffIcon = CloudOff;
      exports.CloudRain = CloudRain;
      exports.CloudRainIcon = CloudRain;
      exports.CloudRainWind = CloudRainWind;
      exports.CloudRainWindIcon = CloudRainWind;
      exports.CloudSnow = CloudSnow;
      exports.CloudSnowIcon = CloudSnow;
      exports.CloudSun = CloudSun;
      exports.CloudSunIcon = CloudSun;
      exports.CloudSunRain = CloudSunRain;
      exports.CloudSunRainIcon = CloudSunRain;
      exports.CloudUpload = CloudUpload;
      exports.CloudUploadIcon = CloudUpload;
      exports.Cloudy = Cloudy;
      exports.CloudyIcon = Cloudy;
      exports.Clover = Clover;
      exports.CloverIcon = Clover;
      exports.Club = Club;
      exports.ClubIcon = Club;
      exports.Code = Code;
      exports.Code2 = CodeXml;
      exports.Code2Icon = CodeXml;
      exports.CodeIcon = Code;
      exports.CodeSquare = SquareCode;
      exports.CodeSquareIcon = SquareCode;
      exports.CodeXml = CodeXml;
      exports.CodeXmlIcon = CodeXml;
      exports.Codepen = Codepen;
      exports.CodepenIcon = Codepen;
      exports.Codesandbox = Codesandbox;
      exports.CodesandboxIcon = Codesandbox;
      exports.Coffee = Coffee;
      exports.CoffeeIcon = Coffee;
      exports.Cog = Cog;
      exports.CogIcon = Cog;
      exports.Coins = Coins;
      exports.CoinsIcon = Coins;
      exports.Columns = Columns2;
      exports.Columns2 = Columns2;
      exports.Columns2Icon = Columns2;
      exports.Columns3 = Columns3;
      exports.Columns3Cog = Columns3Cog;
      exports.Columns3CogIcon = Columns3Cog;
      exports.Columns3Icon = Columns3;
      exports.Columns4 = Columns4;
      exports.Columns4Icon = Columns4;
      exports.ColumnsIcon = Columns2;
      exports.ColumnsSettings = Columns3Cog;
      exports.ColumnsSettingsIcon = Columns3Cog;
      exports.Combine = Combine;
      exports.CombineIcon = Combine;
      exports.Command = Command;
      exports.CommandIcon = Command;
      exports.Compass = Compass;
      exports.CompassIcon = Compass;
      exports.Component = Component4;
      exports.ComponentIcon = Component4;
      exports.Computer = Computer;
      exports.ComputerIcon = Computer;
      exports.ConciergeBell = ConciergeBell;
      exports.ConciergeBellIcon = ConciergeBell;
      exports.Cone = Cone;
      exports.ConeIcon = Cone;
      exports.Construction = Construction;
      exports.ConstructionIcon = Construction;
      exports.Contact = Contact2;
      exports.Contact2 = ContactRound;
      exports.Contact2Icon = ContactRound;
      exports.ContactIcon = Contact2;
      exports.ContactRound = ContactRound;
      exports.ContactRoundIcon = ContactRound;
      exports.Container = Container;
      exports.ContainerIcon = Container;
      exports.Contrast = Contrast;
      exports.ContrastIcon = Contrast;
      exports.Cookie = Cookie;
      exports.CookieIcon = Cookie;
      exports.CookingPot = CookingPot;
      exports.CookingPotIcon = CookingPot;
      exports.Copy = Copy;
      exports.CopyCheck = CopyCheck;
      exports.CopyCheckIcon = CopyCheck;
      exports.CopyIcon = Copy;
      exports.CopyMinus = CopyMinus;
      exports.CopyMinusIcon = CopyMinus;
      exports.CopyPlus = CopyPlus;
      exports.CopyPlusIcon = CopyPlus;
      exports.CopySlash = CopySlash;
      exports.CopySlashIcon = CopySlash;
      exports.CopyX = CopyX;
      exports.CopyXIcon = CopyX;
      exports.Copyleft = Copyleft;
      exports.CopyleftIcon = Copyleft;
      exports.Copyright = Copyright;
      exports.CopyrightIcon = Copyright;
      exports.CornerDownLeft = CornerDownLeft;
      exports.CornerDownLeftIcon = CornerDownLeft;
      exports.CornerDownRight = CornerDownRight;
      exports.CornerDownRightIcon = CornerDownRight;
      exports.CornerLeftDown = CornerLeftDown;
      exports.CornerLeftDownIcon = CornerLeftDown;
      exports.CornerLeftUp = CornerLeftUp;
      exports.CornerLeftUpIcon = CornerLeftUp;
      exports.CornerRightDown = CornerRightDown;
      exports.CornerRightDownIcon = CornerRightDown;
      exports.CornerRightUp = CornerRightUp;
      exports.CornerRightUpIcon = CornerRightUp;
      exports.CornerUpLeft = CornerUpLeft;
      exports.CornerUpLeftIcon = CornerUpLeft;
      exports.CornerUpRight = CornerUpRight;
      exports.CornerUpRightIcon = CornerUpRight;
      exports.Cpu = Cpu;
      exports.CpuIcon = Cpu;
      exports.CreativeCommons = CreativeCommons;
      exports.CreativeCommonsIcon = CreativeCommons;
      exports.CreditCard = CreditCard;
      exports.CreditCardIcon = CreditCard;
      exports.Croissant = Croissant;
      exports.CroissantIcon = Croissant;
      exports.Crop = Crop;
      exports.CropIcon = Crop;
      exports.Cross = Cross;
      exports.CrossIcon = Cross;
      exports.Crosshair = Crosshair;
      exports.CrosshairIcon = Crosshair;
      exports.Crown = Crown;
      exports.CrownIcon = Crown;
      exports.Cuboid = Cuboid;
      exports.CuboidIcon = Cuboid;
      exports.CupSoda = CupSoda;
      exports.CupSodaIcon = CupSoda;
      exports.CurlyBraces = Braces;
      exports.CurlyBracesIcon = Braces;
      exports.Currency = Currency;
      exports.CurrencyIcon = Currency;
      exports.Cylinder = Cylinder;
      exports.CylinderIcon = Cylinder;
      exports.Dam = Dam;
      exports.DamIcon = Dam;
      exports.Database = Database;
      exports.DatabaseBackup = DatabaseBackup;
      exports.DatabaseBackupIcon = DatabaseBackup;
      exports.DatabaseIcon = Database;
      exports.DatabaseZap = DatabaseZap;
      exports.DatabaseZapIcon = DatabaseZap;
      exports.DecimalsArrowLeft = DecimalsArrowLeft;
      exports.DecimalsArrowLeftIcon = DecimalsArrowLeft;
      exports.DecimalsArrowRight = DecimalsArrowRight;
      exports.DecimalsArrowRightIcon = DecimalsArrowRight;
      exports.Delete = Delete;
      exports.DeleteIcon = Delete;
      exports.Dessert = Dessert;
      exports.DessertIcon = Dessert;
      exports.Diameter = Diameter;
      exports.DiameterIcon = Diameter;
      exports.Diamond = Diamond;
      exports.DiamondIcon = Diamond;
      exports.DiamondMinus = DiamondMinus;
      exports.DiamondMinusIcon = DiamondMinus;
      exports.DiamondPercent = DiamondPercent;
      exports.DiamondPercentIcon = DiamondPercent;
      exports.DiamondPlus = DiamondPlus;
      exports.DiamondPlusIcon = DiamondPlus;
      exports.Dice1 = Dice1;
      exports.Dice1Icon = Dice1;
      exports.Dice2 = Dice2;
      exports.Dice2Icon = Dice2;
      exports.Dice3 = Dice3;
      exports.Dice3Icon = Dice3;
      exports.Dice4 = Dice4;
      exports.Dice4Icon = Dice4;
      exports.Dice5 = Dice5;
      exports.Dice5Icon = Dice5;
      exports.Dice6 = Dice6;
      exports.Dice6Icon = Dice6;
      exports.Dices = Dices;
      exports.DicesIcon = Dices;
      exports.Diff = Diff;
      exports.DiffIcon = Diff;
      exports.Disc = Disc;
      exports.Disc2 = Disc2;
      exports.Disc2Icon = Disc2;
      exports.Disc3 = Disc3;
      exports.Disc3Icon = Disc3;
      exports.DiscAlbum = DiscAlbum;
      exports.DiscAlbumIcon = DiscAlbum;
      exports.DiscIcon = Disc;
      exports.Divide = Divide;
      exports.DivideCircle = CircleDivide;
      exports.DivideCircleIcon = CircleDivide;
      exports.DivideIcon = Divide;
      exports.DivideSquare = SquareDivide;
      exports.DivideSquareIcon = SquareDivide;
      exports.Dna = Dna;
      exports.DnaIcon = Dna;
      exports.DnaOff = DnaOff;
      exports.DnaOffIcon = DnaOff;
      exports.Dock = Dock;
      exports.DockIcon = Dock;
      exports.Dog = Dog;
      exports.DogIcon = Dog;
      exports.DollarSign = DollarSign;
      exports.DollarSignIcon = DollarSign;
      exports.Donut = Donut;
      exports.DonutIcon = Donut;
      exports.DoorClosed = DoorClosed;
      exports.DoorClosedIcon = DoorClosed;
      exports.DoorOpen = DoorOpen;
      exports.DoorOpenIcon = DoorOpen;
      exports.Dot = Dot;
      exports.DotIcon = Dot;
      exports.DotSquare = SquareDot;
      exports.DotSquareIcon = SquareDot;
      exports.Download = Download5;
      exports.DownloadCloud = CloudDownload;
      exports.DownloadCloudIcon = CloudDownload;
      exports.DownloadIcon = Download5;
      exports.DraftingCompass = DraftingCompass;
      exports.DraftingCompassIcon = DraftingCompass;
      exports.Drama = Drama;
      exports.DramaIcon = Drama;
      exports.Dribbble = Dribbble;
      exports.DribbbleIcon = Dribbble;
      exports.Drill = Drill;
      exports.DrillIcon = Drill;
      exports.Droplet = Droplet;
      exports.DropletIcon = Droplet;
      exports.DropletOff = DropletOff;
      exports.DropletOffIcon = DropletOff;
      exports.Droplets = Droplets;
      exports.DropletsIcon = Droplets;
      exports.Drum = Drum;
      exports.DrumIcon = Drum;
      exports.Drumstick = Drumstick;
      exports.DrumstickIcon = Drumstick;
      exports.Dumbbell = Dumbbell;
      exports.DumbbellIcon = Dumbbell;
      exports.Ear = Ear;
      exports.EarIcon = Ear;
      exports.EarOff = EarOff;
      exports.EarOffIcon = EarOff;
      exports.Earth = Earth;
      exports.EarthIcon = Earth;
      exports.EarthLock = EarthLock;
      exports.EarthLockIcon = EarthLock;
      exports.Eclipse = Eclipse;
      exports.EclipseIcon = Eclipse;
      exports.Edit = SquarePen;
      exports.Edit2 = Pen;
      exports.Edit2Icon = Pen;
      exports.Edit3 = PenLine;
      exports.Edit3Icon = PenLine;
      exports.EditIcon = SquarePen;
      exports.Egg = Egg;
      exports.EggFried = EggFried;
      exports.EggFriedIcon = EggFried;
      exports.EggIcon = Egg;
      exports.EggOff = EggOff;
      exports.EggOffIcon = EggOff;
      exports.Ellipsis = Ellipsis;
      exports.EllipsisIcon = Ellipsis;
      exports.EllipsisVertical = EllipsisVertical;
      exports.EllipsisVerticalIcon = EllipsisVertical;
      exports.Equal = Equal;
      exports.EqualApproximately = EqualApproximately;
      exports.EqualApproximatelyIcon = EqualApproximately;
      exports.EqualIcon = Equal;
      exports.EqualNot = EqualNot;
      exports.EqualNotIcon = EqualNot;
      exports.EqualSquare = SquareEqual;
      exports.EqualSquareIcon = SquareEqual;
      exports.Eraser = Eraser;
      exports.EraserIcon = Eraser;
      exports.EthernetPort = EthernetPort;
      exports.EthernetPortIcon = EthernetPort;
      exports.Euro = Euro;
      exports.EuroIcon = Euro;
      exports.Expand = Expand;
      exports.ExpandIcon = Expand;
      exports.ExternalLink = ExternalLink;
      exports.ExternalLinkIcon = ExternalLink;
      exports.Eye = Eye;
      exports.EyeClosed = EyeClosed;
      exports.EyeClosedIcon = EyeClosed;
      exports.EyeIcon = Eye;
      exports.EyeOff = EyeOff;
      exports.EyeOffIcon = EyeOff;
      exports.Facebook = Facebook2;
      exports.FacebookIcon = Facebook2;
      exports.Factory = Factory;
      exports.FactoryIcon = Factory;
      exports.Fan = Fan;
      exports.FanIcon = Fan;
      exports.FastForward = FastForward;
      exports.FastForwardIcon = FastForward;
      exports.Feather = Feather;
      exports.FeatherIcon = Feather;
      exports.Fence = Fence;
      exports.FenceIcon = Fence;
      exports.FerrisWheel = FerrisWheel;
      exports.FerrisWheelIcon = FerrisWheel;
      exports.Figma = Figma;
      exports.FigmaIcon = Figma;
      exports.File = File3;
      exports.FileArchive = FileArchive;
      exports.FileArchiveIcon = FileArchive;
      exports.FileAudio = FileAudio;
      exports.FileAudio2 = FileAudio2;
      exports.FileAudio2Icon = FileAudio2;
      exports.FileAudioIcon = FileAudio;
      exports.FileAxis3D = FileAxis3d;
      exports.FileAxis3DIcon = FileAxis3d;
      exports.FileAxis3d = FileAxis3d;
      exports.FileAxis3dIcon = FileAxis3d;
      exports.FileBadge = FileBadge;
      exports.FileBadge2 = FileBadge2;
      exports.FileBadge2Icon = FileBadge2;
      exports.FileBadgeIcon = FileBadge;
      exports.FileBarChart = FileChartColumnIncreasing;
      exports.FileBarChart2 = FileChartColumn;
      exports.FileBarChart2Icon = FileChartColumn;
      exports.FileBarChartIcon = FileChartColumnIncreasing;
      exports.FileBox = FileBox;
      exports.FileBoxIcon = FileBox;
      exports.FileChartColumn = FileChartColumn;
      exports.FileChartColumnIcon = FileChartColumn;
      exports.FileChartColumnIncreasing = FileChartColumnIncreasing;
      exports.FileChartColumnIncreasingIcon = FileChartColumnIncreasing;
      exports.FileChartLine = FileChartLine;
      exports.FileChartLineIcon = FileChartLine;
      exports.FileChartPie = FileChartPie;
      exports.FileChartPieIcon = FileChartPie;
      exports.FileCheck = FileCheck;
      exports.FileCheck2 = FileCheck2;
      exports.FileCheck2Icon = FileCheck2;
      exports.FileCheckIcon = FileCheck;
      exports.FileClock = FileClock;
      exports.FileClockIcon = FileClock;
      exports.FileCode = FileCode;
      exports.FileCode2 = FileCode2;
      exports.FileCode2Icon = FileCode2;
      exports.FileCodeIcon = FileCode;
      exports.FileCog = FileCog;
      exports.FileCog2 = FileCog;
      exports.FileCog2Icon = FileCog;
      exports.FileCogIcon = FileCog;
      exports.FileDiff = FileDiff;
      exports.FileDiffIcon = FileDiff;
      exports.FileDigit = FileDigit;
      exports.FileDigitIcon = FileDigit;
      exports.FileDown = FileDown;
      exports.FileDownIcon = FileDown;
      exports.FileEdit = FilePen;
      exports.FileEditIcon = FilePen;
      exports.FileHeart = FileHeart;
      exports.FileHeartIcon = FileHeart;
      exports.FileIcon = File3;
      exports.FileImage = FileImage;
      exports.FileImageIcon = FileImage;
      exports.FileInput = FileInput;
      exports.FileInputIcon = FileInput;
      exports.FileJson = FileJson;
      exports.FileJson2 = FileJson2;
      exports.FileJson2Icon = FileJson2;
      exports.FileJsonIcon = FileJson;
      exports.FileKey = FileKey;
      exports.FileKey2 = FileKey2;
      exports.FileKey2Icon = FileKey2;
      exports.FileKeyIcon = FileKey;
      exports.FileLineChart = FileChartLine;
      exports.FileLineChartIcon = FileChartLine;
      exports.FileLock = FileLock;
      exports.FileLock2 = FileLock2;
      exports.FileLock2Icon = FileLock2;
      exports.FileLockIcon = FileLock;
      exports.FileMinus = FileMinus;
      exports.FileMinus2 = FileMinus2;
      exports.FileMinus2Icon = FileMinus2;
      exports.FileMinusIcon = FileMinus;
      exports.FileMusic = FileMusic;
      exports.FileMusicIcon = FileMusic;
      exports.FileOutput = FileOutput;
      exports.FileOutputIcon = FileOutput;
      exports.FilePen = FilePen;
      exports.FilePenIcon = FilePen;
      exports.FilePenLine = FilePenLine;
      exports.FilePenLineIcon = FilePenLine;
      exports.FilePieChart = FileChartPie;
      exports.FilePieChartIcon = FileChartPie;
      exports.FilePlus = FilePlus;
      exports.FilePlus2 = FilePlus2;
      exports.FilePlus2Icon = FilePlus2;
      exports.FilePlusIcon = FilePlus;
      exports.FileQuestion = FileQuestion;
      exports.FileQuestionIcon = FileQuestion;
      exports.FileScan = FileScan;
      exports.FileScanIcon = FileScan;
      exports.FileSearch = FileSearch;
      exports.FileSearch2 = FileSearch2;
      exports.FileSearch2Icon = FileSearch2;
      exports.FileSearchIcon = FileSearch;
      exports.FileSignature = FilePenLine;
      exports.FileSignatureIcon = FilePenLine;
      exports.FileSliders = FileSliders;
      exports.FileSlidersIcon = FileSliders;
      exports.FileSpreadsheet = FileSpreadsheet4;
      exports.FileSpreadsheetIcon = FileSpreadsheet4;
      exports.FileStack = FileStack;
      exports.FileStackIcon = FileStack;
      exports.FileSymlink = FileSymlink;
      exports.FileSymlinkIcon = FileSymlink;
      exports.FileTerminal = FileTerminal;
      exports.FileTerminalIcon = FileTerminal;
      exports.FileText = FileText8;
      exports.FileTextIcon = FileText8;
      exports.FileType = FileType;
      exports.FileType2 = FileType2;
      exports.FileType2Icon = FileType2;
      exports.FileTypeIcon = FileType;
      exports.FileUp = FileUp;
      exports.FileUpIcon = FileUp;
      exports.FileUser = FileUser;
      exports.FileUserIcon = FileUser;
      exports.FileVideo = FileVideo;
      exports.FileVideo2 = FileVideo2;
      exports.FileVideo2Icon = FileVideo2;
      exports.FileVideoIcon = FileVideo;
      exports.FileVolume = FileVolume;
      exports.FileVolume2 = FileVolume2;
      exports.FileVolume2Icon = FileVolume2;
      exports.FileVolumeIcon = FileVolume;
      exports.FileWarning = FileWarning;
      exports.FileWarningIcon = FileWarning;
      exports.FileX = FileX;
      exports.FileX2 = FileX2;
      exports.FileX2Icon = FileX2;
      exports.FileXIcon = FileX;
      exports.Files = Files;
      exports.FilesIcon = Files;
      exports.Film = Film2;
      exports.FilmIcon = Film2;
      exports.Filter = Funnel;
      exports.FilterIcon = Funnel;
      exports.FilterX = FunnelX;
      exports.FilterXIcon = FunnelX;
      exports.Fingerprint = Fingerprint;
      exports.FingerprintIcon = Fingerprint;
      exports.FireExtinguisher = FireExtinguisher;
      exports.FireExtinguisherIcon = FireExtinguisher;
      exports.Fish = Fish;
      exports.FishIcon = Fish;
      exports.FishOff = FishOff;
      exports.FishOffIcon = FishOff;
      exports.FishSymbol = FishSymbol;
      exports.FishSymbolIcon = FishSymbol;
      exports.Flag = Flag;
      exports.FlagIcon = Flag;
      exports.FlagOff = FlagOff;
      exports.FlagOffIcon = FlagOff;
      exports.FlagTriangleLeft = FlagTriangleLeft;
      exports.FlagTriangleLeftIcon = FlagTriangleLeft;
      exports.FlagTriangleRight = FlagTriangleRight;
      exports.FlagTriangleRightIcon = FlagTriangleRight;
      exports.Flame = Flame;
      exports.FlameIcon = Flame;
      exports.FlameKindling = FlameKindling;
      exports.FlameKindlingIcon = FlameKindling;
      exports.Flashlight = Flashlight;
      exports.FlashlightIcon = Flashlight;
      exports.FlashlightOff = FlashlightOff;
      exports.FlashlightOffIcon = FlashlightOff;
      exports.FlaskConical = FlaskConical;
      exports.FlaskConicalIcon = FlaskConical;
      exports.FlaskConicalOff = FlaskConicalOff;
      exports.FlaskConicalOffIcon = FlaskConicalOff;
      exports.FlaskRound = FlaskRound;
      exports.FlaskRoundIcon = FlaskRound;
      exports.FlipHorizontal = FlipHorizontal;
      exports.FlipHorizontal2 = FlipHorizontal2;
      exports.FlipHorizontal2Icon = FlipHorizontal2;
      exports.FlipHorizontalIcon = FlipHorizontal;
      exports.FlipVertical = FlipVertical;
      exports.FlipVertical2 = FlipVertical2;
      exports.FlipVertical2Icon = FlipVertical2;
      exports.FlipVerticalIcon = FlipVertical;
      exports.Flower = Flower;
      exports.Flower2 = Flower2;
      exports.Flower2Icon = Flower2;
      exports.FlowerIcon = Flower;
      exports.Focus = Focus;
      exports.FocusIcon = Focus;
      exports.FoldHorizontal = FoldHorizontal;
      exports.FoldHorizontalIcon = FoldHorizontal;
      exports.FoldVertical = FoldVertical;
      exports.FoldVerticalIcon = FoldVertical;
      exports.Folder = Folder;
      exports.FolderArchive = FolderArchive;
      exports.FolderArchiveIcon = FolderArchive;
      exports.FolderCheck = FolderCheck;
      exports.FolderCheckIcon = FolderCheck;
      exports.FolderClock = FolderClock;
      exports.FolderClockIcon = FolderClock;
      exports.FolderClosed = FolderClosed;
      exports.FolderClosedIcon = FolderClosed;
      exports.FolderCode = FolderCode;
      exports.FolderCodeIcon = FolderCode;
      exports.FolderCog = FolderCog;
      exports.FolderCog2 = FolderCog;
      exports.FolderCog2Icon = FolderCog;
      exports.FolderCogIcon = FolderCog;
      exports.FolderDot = FolderDot;
      exports.FolderDotIcon = FolderDot;
      exports.FolderDown = FolderDown;
      exports.FolderDownIcon = FolderDown;
      exports.FolderEdit = FolderPen;
      exports.FolderEditIcon = FolderPen;
      exports.FolderGit = FolderGit;
      exports.FolderGit2 = FolderGit2;
      exports.FolderGit2Icon = FolderGit2;
      exports.FolderGitIcon = FolderGit;
      exports.FolderHeart = FolderHeart;
      exports.FolderHeartIcon = FolderHeart;
      exports.FolderIcon = Folder;
      exports.FolderInput = FolderInput;
      exports.FolderInputIcon = FolderInput;
      exports.FolderKanban = FolderKanban;
      exports.FolderKanbanIcon = FolderKanban;
      exports.FolderKey = FolderKey;
      exports.FolderKeyIcon = FolderKey;
      exports.FolderLock = FolderLock;
      exports.FolderLockIcon = FolderLock;
      exports.FolderMinus = FolderMinus;
      exports.FolderMinusIcon = FolderMinus;
      exports.FolderOpen = FolderOpen;
      exports.FolderOpenDot = FolderOpenDot;
      exports.FolderOpenDotIcon = FolderOpenDot;
      exports.FolderOpenIcon = FolderOpen;
      exports.FolderOutput = FolderOutput;
      exports.FolderOutputIcon = FolderOutput;
      exports.FolderPen = FolderPen;
      exports.FolderPenIcon = FolderPen;
      exports.FolderPlus = FolderPlus;
      exports.FolderPlusIcon = FolderPlus;
      exports.FolderRoot = FolderRoot;
      exports.FolderRootIcon = FolderRoot;
      exports.FolderSearch = FolderSearch;
      exports.FolderSearch2 = FolderSearch2;
      exports.FolderSearch2Icon = FolderSearch2;
      exports.FolderSearchIcon = FolderSearch;
      exports.FolderSymlink = FolderSymlink;
      exports.FolderSymlinkIcon = FolderSymlink;
      exports.FolderSync = FolderSync;
      exports.FolderSyncIcon = FolderSync;
      exports.FolderTree = FolderTree;
      exports.FolderTreeIcon = FolderTree;
      exports.FolderUp = FolderUp;
      exports.FolderUpIcon = FolderUp;
      exports.FolderX = FolderX;
      exports.FolderXIcon = FolderX;
      exports.Folders = Folders;
      exports.FoldersIcon = Folders;
      exports.Footprints = Footprints;
      exports.FootprintsIcon = Footprints;
      exports.ForkKnife = Utensils;
      exports.ForkKnifeCrossed = UtensilsCrossed;
      exports.ForkKnifeCrossedIcon = UtensilsCrossed;
      exports.ForkKnifeIcon = Utensils;
      exports.Forklift = Forklift;
      exports.ForkliftIcon = Forklift;
      exports.FormInput = RectangleEllipsis;
      exports.FormInputIcon = RectangleEllipsis;
      exports.Forward = Forward;
      exports.ForwardIcon = Forward;
      exports.Frame = Frame;
      exports.FrameIcon = Frame;
      exports.Framer = Framer;
      exports.FramerIcon = Framer;
      exports.Frown = Frown;
      exports.FrownIcon = Frown;
      exports.Fuel = Fuel;
      exports.FuelIcon = Fuel;
      exports.Fullscreen = Fullscreen;
      exports.FullscreenIcon = Fullscreen;
      exports.FunctionSquare = SquareFunction;
      exports.FunctionSquareIcon = SquareFunction;
      exports.Funnel = Funnel;
      exports.FunnelIcon = Funnel;
      exports.FunnelPlus = FunnelPlus;
      exports.FunnelPlusIcon = FunnelPlus;
      exports.FunnelX = FunnelX;
      exports.FunnelXIcon = FunnelX;
      exports.GalleryHorizontal = GalleryHorizontal;
      exports.GalleryHorizontalEnd = GalleryHorizontalEnd;
      exports.GalleryHorizontalEndIcon = GalleryHorizontalEnd;
      exports.GalleryHorizontalIcon = GalleryHorizontal;
      exports.GalleryThumbnails = GalleryThumbnails;
      exports.GalleryThumbnailsIcon = GalleryThumbnails;
      exports.GalleryVertical = GalleryVertical;
      exports.GalleryVerticalEnd = GalleryVerticalEnd;
      exports.GalleryVerticalEndIcon = GalleryVerticalEnd;
      exports.GalleryVerticalIcon = GalleryVertical;
      exports.Gamepad = Gamepad;
      exports.Gamepad2 = Gamepad2;
      exports.Gamepad2Icon = Gamepad2;
      exports.GamepadIcon = Gamepad;
      exports.GanttChart = ChartNoAxesGantt;
      exports.GanttChartIcon = ChartNoAxesGantt;
      exports.GanttChartSquare = SquareChartGantt;
      exports.GanttChartSquareIcon = SquareChartGantt;
      exports.Gauge = Gauge;
      exports.GaugeCircle = CircleGauge;
      exports.GaugeCircleIcon = CircleGauge;
      exports.GaugeIcon = Gauge;
      exports.Gavel = Gavel;
      exports.GavelIcon = Gavel;
      exports.Gem = Gem;
      exports.GemIcon = Gem;
      exports.Ghost = Ghost;
      exports.GhostIcon = Ghost;
      exports.Gift = Gift;
      exports.GiftIcon = Gift;
      exports.GitBranch = GitBranch;
      exports.GitBranchIcon = GitBranch;
      exports.GitBranchPlus = GitBranchPlus;
      exports.GitBranchPlusIcon = GitBranchPlus;
      exports.GitCommit = GitCommitHorizontal;
      exports.GitCommitHorizontal = GitCommitHorizontal;
      exports.GitCommitHorizontalIcon = GitCommitHorizontal;
      exports.GitCommitIcon = GitCommitHorizontal;
      exports.GitCommitVertical = GitCommitVertical;
      exports.GitCommitVerticalIcon = GitCommitVertical;
      exports.GitCompare = GitCompare;
      exports.GitCompareArrows = GitCompareArrows;
      exports.GitCompareArrowsIcon = GitCompareArrows;
      exports.GitCompareIcon = GitCompare;
      exports.GitFork = GitFork;
      exports.GitForkIcon = GitFork;
      exports.GitGraph = GitGraph;
      exports.GitGraphIcon = GitGraph;
      exports.GitMerge = GitMerge;
      exports.GitMergeIcon = GitMerge;
      exports.GitPullRequest = GitPullRequest;
      exports.GitPullRequestArrow = GitPullRequestArrow;
      exports.GitPullRequestArrowIcon = GitPullRequestArrow;
      exports.GitPullRequestClosed = GitPullRequestClosed;
      exports.GitPullRequestClosedIcon = GitPullRequestClosed;
      exports.GitPullRequestCreate = GitPullRequestCreate;
      exports.GitPullRequestCreateArrow = GitPullRequestCreateArrow;
      exports.GitPullRequestCreateArrowIcon = GitPullRequestCreateArrow;
      exports.GitPullRequestCreateIcon = GitPullRequestCreate;
      exports.GitPullRequestDraft = GitPullRequestDraft;
      exports.GitPullRequestDraftIcon = GitPullRequestDraft;
      exports.GitPullRequestIcon = GitPullRequest;
      exports.Github = Github;
      exports.GithubIcon = Github;
      exports.Gitlab = Gitlab;
      exports.GitlabIcon = Gitlab;
      exports.GlassWater = GlassWater;
      exports.GlassWaterIcon = GlassWater;
      exports.Glasses = Glasses;
      exports.GlassesIcon = Glasses;
      exports.Globe = Globe;
      exports.Globe2 = Earth;
      exports.Globe2Icon = Earth;
      exports.GlobeIcon = Globe;
      exports.GlobeLock = GlobeLock;
      exports.GlobeLockIcon = GlobeLock;
      exports.Goal = Goal;
      exports.GoalIcon = Goal;
      exports.Grab = Grab;
      exports.GrabIcon = Grab;
      exports.GraduationCap = GraduationCap;
      exports.GraduationCapIcon = GraduationCap;
      exports.Grape = Grape;
      exports.GrapeIcon = Grape;
      exports.Grid = Grid3x3;
      exports.Grid2X2 = Grid2x22;
      exports.Grid2X2Check = Grid2x2Check;
      exports.Grid2X2CheckIcon = Grid2x2Check;
      exports.Grid2X2Icon = Grid2x22;
      exports.Grid2X2Plus = Grid2x2Plus;
      exports.Grid2X2PlusIcon = Grid2x2Plus;
      exports.Grid2X2X = Grid2x2X;
      exports.Grid2X2XIcon = Grid2x2X;
      exports.Grid2x2 = Grid2x22;
      exports.Grid2x2Check = Grid2x2Check;
      exports.Grid2x2CheckIcon = Grid2x2Check;
      exports.Grid2x2Icon = Grid2x22;
      exports.Grid2x2Plus = Grid2x2Plus;
      exports.Grid2x2PlusIcon = Grid2x2Plus;
      exports.Grid2x2X = Grid2x2X;
      exports.Grid2x2XIcon = Grid2x2X;
      exports.Grid3X3 = Grid3x3;
      exports.Grid3X3Icon = Grid3x3;
      exports.Grid3x3 = Grid3x3;
      exports.Grid3x3Icon = Grid3x3;
      exports.GridIcon = Grid3x3;
      exports.Grip = Grip;
      exports.GripHorizontal = GripHorizontal;
      exports.GripHorizontalIcon = GripHorizontal;
      exports.GripIcon = Grip;
      exports.GripVertical = GripVertical;
      exports.GripVerticalIcon = GripVertical;
      exports.Group = Group;
      exports.GroupIcon = Group;
      exports.Guitar = Guitar;
      exports.GuitarIcon = Guitar;
      exports.Ham = Ham;
      exports.HamIcon = Ham;
      exports.Hammer = Hammer;
      exports.HammerIcon = Hammer;
      exports.Hand = Hand;
      exports.HandCoins = HandCoins;
      exports.HandCoinsIcon = HandCoins;
      exports.HandHeart = HandHeart;
      exports.HandHeartIcon = HandHeart;
      exports.HandHelping = HandHelping;
      exports.HandHelpingIcon = HandHelping;
      exports.HandIcon = Hand;
      exports.HandMetal = HandMetal;
      exports.HandMetalIcon = HandMetal;
      exports.HandPlatter = HandPlatter;
      exports.HandPlatterIcon = HandPlatter;
      exports.Handshake = Handshake;
      exports.HandshakeIcon = Handshake;
      exports.HardDrive = HardDrive;
      exports.HardDriveDownload = HardDriveDownload;
      exports.HardDriveDownloadIcon = HardDriveDownload;
      exports.HardDriveIcon = HardDrive;
      exports.HardDriveUpload = HardDriveUpload;
      exports.HardDriveUploadIcon = HardDriveUpload;
      exports.HardHat = HardHat;
      exports.HardHatIcon = HardHat;
      exports.Hash = Hash;
      exports.HashIcon = Hash;
      exports.Haze = Haze;
      exports.HazeIcon = Haze;
      exports.HdmiPort = HdmiPort;
      exports.HdmiPortIcon = HdmiPort;
      exports.Heading = Heading;
      exports.Heading1 = Heading1;
      exports.Heading1Icon = Heading1;
      exports.Heading2 = Heading2;
      exports.Heading2Icon = Heading2;
      exports.Heading3 = Heading3;
      exports.Heading3Icon = Heading3;
      exports.Heading4 = Heading4;
      exports.Heading4Icon = Heading4;
      exports.Heading5 = Heading5;
      exports.Heading5Icon = Heading5;
      exports.Heading6 = Heading6;
      exports.Heading6Icon = Heading6;
      exports.HeadingIcon = Heading;
      exports.HeadphoneOff = HeadphoneOff;
      exports.HeadphoneOffIcon = HeadphoneOff;
      exports.Headphones = Headphones2;
      exports.HeadphonesIcon = Headphones2;
      exports.Headset = Headset;
      exports.HeadsetIcon = Headset;
      exports.Heart = Heart3;
      exports.HeartCrack = HeartCrack;
      exports.HeartCrackIcon = HeartCrack;
      exports.HeartHandshake = HeartHandshake;
      exports.HeartHandshakeIcon = HeartHandshake;
      exports.HeartIcon = Heart3;
      exports.HeartMinus = HeartMinus;
      exports.HeartMinusIcon = HeartMinus;
      exports.HeartOff = HeartOff;
      exports.HeartOffIcon = HeartOff;
      exports.HeartPlus = HeartPlus;
      exports.HeartPlusIcon = HeartPlus;
      exports.HeartPulse = HeartPulse;
      exports.HeartPulseIcon = HeartPulse;
      exports.Heater = Heater;
      exports.HeaterIcon = Heater;
      exports.HelpCircle = CircleHelp;
      exports.HelpCircleIcon = CircleHelp;
      exports.HelpingHand = HandHelping;
      exports.HelpingHandIcon = HandHelping;
      exports.Hexagon = Hexagon;
      exports.HexagonIcon = Hexagon;
      exports.Highlighter = Highlighter;
      exports.HighlighterIcon = Highlighter;
      exports.History = History;
      exports.HistoryIcon = History;
      exports.Home = House;
      exports.HomeIcon = House;
      exports.Hop = Hop;
      exports.HopIcon = Hop;
      exports.HopOff = HopOff;
      exports.HopOffIcon = HopOff;
      exports.Hospital = Hospital;
      exports.HospitalIcon = Hospital;
      exports.Hotel = Hotel;
      exports.HotelIcon = Hotel;
      exports.Hourglass = Hourglass;
      exports.HourglassIcon = Hourglass;
      exports.House = House;
      exports.HouseIcon = House;
      exports.HousePlug = HousePlug;
      exports.HousePlugIcon = HousePlug;
      exports.HousePlus = HousePlus;
      exports.HousePlusIcon = HousePlus;
      exports.HouseWifi = HouseWifi;
      exports.HouseWifiIcon = HouseWifi;
      exports.IceCream = IceCreamCone;
      exports.IceCream2 = IceCreamBowl;
      exports.IceCream2Icon = IceCreamBowl;
      exports.IceCreamBowl = IceCreamBowl;
      exports.IceCreamBowlIcon = IceCreamBowl;
      exports.IceCreamCone = IceCreamCone;
      exports.IceCreamConeIcon = IceCreamCone;
      exports.IceCreamIcon = IceCreamCone;
      exports.Icon = Icon;
      exports.IdCard = IdCard;
      exports.IdCardIcon = IdCard;
      exports.Image = Image;
      exports.ImageDown = ImageDown;
      exports.ImageDownIcon = ImageDown;
      exports.ImageIcon = Image;
      exports.ImageMinus = ImageMinus;
      exports.ImageMinusIcon = ImageMinus;
      exports.ImageOff = ImageOff;
      exports.ImageOffIcon = ImageOff;
      exports.ImagePlay = ImagePlay;
      exports.ImagePlayIcon = ImagePlay;
      exports.ImagePlus = ImagePlus;
      exports.ImagePlusIcon = ImagePlus;
      exports.ImageUp = ImageUp;
      exports.ImageUpIcon = ImageUp;
      exports.ImageUpscale = ImageUpscale;
      exports.ImageUpscaleIcon = ImageUpscale;
      exports.Images = Images;
      exports.ImagesIcon = Images;
      exports.Import = Import;
      exports.ImportIcon = Import;
      exports.Inbox = Inbox;
      exports.InboxIcon = Inbox;
      exports.Indent = IndentIncrease;
      exports.IndentDecrease = IndentDecrease;
      exports.IndentDecreaseIcon = IndentDecrease;
      exports.IndentIcon = IndentIncrease;
      exports.IndentIncrease = IndentIncrease;
      exports.IndentIncreaseIcon = IndentIncrease;
      exports.IndianRupee = IndianRupee;
      exports.IndianRupeeIcon = IndianRupee;
      exports.Infinity = Infinity2;
      exports.InfinityIcon = Infinity2;
      exports.Info = Info;
      exports.InfoIcon = Info;
      exports.Inspect = SquareMousePointer;
      exports.InspectIcon = SquareMousePointer;
      exports.InspectionPanel = InspectionPanel;
      exports.InspectionPanelIcon = InspectionPanel;
      exports.Instagram = Instagram;
      exports.InstagramIcon = Instagram;
      exports.Italic = Italic;
      exports.ItalicIcon = Italic;
      exports.IterationCcw = IterationCcw;
      exports.IterationCcwIcon = IterationCcw;
      exports.IterationCw = IterationCw;
      exports.IterationCwIcon = IterationCw;
      exports.JapaneseYen = JapaneseYen;
      exports.JapaneseYenIcon = JapaneseYen;
      exports.Joystick = Joystick;
      exports.JoystickIcon = Joystick;
      exports.Kanban = Kanban;
      exports.KanbanIcon = Kanban;
      exports.KanbanSquare = SquareKanban;
      exports.KanbanSquareDashed = SquareDashedKanban;
      exports.KanbanSquareDashedIcon = SquareDashedKanban;
      exports.KanbanSquareIcon = SquareKanban;
      exports.Key = Key;
      exports.KeyIcon = Key;
      exports.KeyRound = KeyRound;
      exports.KeyRoundIcon = KeyRound;
      exports.KeySquare = KeySquare;
      exports.KeySquareIcon = KeySquare;
      exports.Keyboard = Keyboard;
      exports.KeyboardIcon = Keyboard;
      exports.KeyboardMusic = KeyboardMusic;
      exports.KeyboardMusicIcon = KeyboardMusic;
      exports.KeyboardOff = KeyboardOff;
      exports.KeyboardOffIcon = KeyboardOff;
      exports.Lamp = Lamp;
      exports.LampCeiling = LampCeiling;
      exports.LampCeilingIcon = LampCeiling;
      exports.LampDesk = LampDesk;
      exports.LampDeskIcon = LampDesk;
      exports.LampFloor = LampFloor;
      exports.LampFloorIcon = LampFloor;
      exports.LampIcon = Lamp;
      exports.LampWallDown = LampWallDown;
      exports.LampWallDownIcon = LampWallDown;
      exports.LampWallUp = LampWallUp;
      exports.LampWallUpIcon = LampWallUp;
      exports.LandPlot = LandPlot;
      exports.LandPlotIcon = LandPlot;
      exports.Landmark = Landmark;
      exports.LandmarkIcon = Landmark;
      exports.Languages = Languages;
      exports.LanguagesIcon = Languages;
      exports.Laptop = Laptop;
      exports.Laptop2 = LaptopMinimal;
      exports.Laptop2Icon = LaptopMinimal;
      exports.LaptopIcon = Laptop;
      exports.LaptopMinimal = LaptopMinimal;
      exports.LaptopMinimalCheck = LaptopMinimalCheck;
      exports.LaptopMinimalCheckIcon = LaptopMinimalCheck;
      exports.LaptopMinimalIcon = LaptopMinimal;
      exports.Lasso = Lasso;
      exports.LassoIcon = Lasso;
      exports.LassoSelect = LassoSelect;
      exports.LassoSelectIcon = LassoSelect;
      exports.Laugh = Laugh;
      exports.LaughIcon = Laugh;
      exports.Layers = Layers;
      exports.Layers2 = Layers2;
      exports.Layers2Icon = Layers2;
      exports.Layers3 = Layers;
      exports.Layers3Icon = Layers;
      exports.LayersIcon = Layers;
      exports.Layout = PanelsTopLeft;
      exports.LayoutDashboard = LayoutDashboard2;
      exports.LayoutDashboardIcon = LayoutDashboard2;
      exports.LayoutGrid = LayoutGrid;
      exports.LayoutGridIcon = LayoutGrid;
      exports.LayoutIcon = PanelsTopLeft;
      exports.LayoutList = LayoutList;
      exports.LayoutListIcon = LayoutList;
      exports.LayoutPanelLeft = LayoutPanelLeft;
      exports.LayoutPanelLeftIcon = LayoutPanelLeft;
      exports.LayoutPanelTop = LayoutPanelTop;
      exports.LayoutPanelTopIcon = LayoutPanelTop;
      exports.LayoutTemplate = LayoutTemplate;
      exports.LayoutTemplateIcon = LayoutTemplate;
      exports.Leaf = Leaf;
      exports.LeafIcon = Leaf;
      exports.LeafyGreen = LeafyGreen;
      exports.LeafyGreenIcon = LeafyGreen;
      exports.Lectern = Lectern;
      exports.LecternIcon = Lectern;
      exports.LetterText = LetterText;
      exports.LetterTextIcon = LetterText;
      exports.Library = Library;
      exports.LibraryBig = LibraryBig4;
      exports.LibraryBigIcon = LibraryBig4;
      exports.LibraryIcon = Library;
      exports.LibrarySquare = SquareLibrary;
      exports.LibrarySquareIcon = SquareLibrary;
      exports.LifeBuoy = LifeBuoy;
      exports.LifeBuoyIcon = LifeBuoy;
      exports.Ligature = Ligature;
      exports.LigatureIcon = Ligature;
      exports.Lightbulb = Lightbulb3;
      exports.LightbulbIcon = Lightbulb3;
      exports.LightbulbOff = LightbulbOff;
      exports.LightbulbOffIcon = LightbulbOff;
      exports.LineChart = ChartLine;
      exports.LineChartIcon = ChartLine;
      exports.Link = Link3;
      exports.Link2 = Link22;
      exports.Link2Icon = Link22;
      exports.Link2Off = Link2Off;
      exports.Link2OffIcon = Link2Off;
      exports.LinkIcon = Link3;
      exports.Linkedin = Linkedin2;
      exports.LinkedinIcon = Linkedin2;
      exports.List = List2;
      exports.ListCheck = ListCheck;
      exports.ListCheckIcon = ListCheck;
      exports.ListChecks = ListChecks;
      exports.ListChecksIcon = ListChecks;
      exports.ListCollapse = ListCollapse;
      exports.ListCollapseIcon = ListCollapse;
      exports.ListEnd = ListEnd;
      exports.ListEndIcon = ListEnd;
      exports.ListFilter = ListFilter;
      exports.ListFilterIcon = ListFilter;
      exports.ListFilterPlus = ListFilterPlus;
      exports.ListFilterPlusIcon = ListFilterPlus;
      exports.ListIcon = List2;
      exports.ListMinus = ListMinus;
      exports.ListMinusIcon = ListMinus;
      exports.ListMusic = ListMusic;
      exports.ListMusicIcon = ListMusic;
      exports.ListOrdered = ListOrdered;
      exports.ListOrderedIcon = ListOrdered;
      exports.ListPlus = ListPlus;
      exports.ListPlusIcon = ListPlus;
      exports.ListRestart = ListRestart;
      exports.ListRestartIcon = ListRestart;
      exports.ListStart = ListStart;
      exports.ListStartIcon = ListStart;
      exports.ListTodo = ListTodo;
      exports.ListTodoIcon = ListTodo;
      exports.ListTree = ListTree;
      exports.ListTreeIcon = ListTree;
      exports.ListVideo = ListVideo;
      exports.ListVideoIcon = ListVideo;
      exports.ListX = ListX;
      exports.ListXIcon = ListX;
      exports.Loader = Loader3;
      exports.Loader2 = LoaderCircle;
      exports.Loader2Icon = LoaderCircle;
      exports.LoaderCircle = LoaderCircle;
      exports.LoaderCircleIcon = LoaderCircle;
      exports.LoaderIcon = Loader3;
      exports.LoaderPinwheel = LoaderPinwheel;
      exports.LoaderPinwheelIcon = LoaderPinwheel;
      exports.Locate = Locate;
      exports.LocateFixed = LocateFixed;
      exports.LocateFixedIcon = LocateFixed;
      exports.LocateIcon = Locate;
      exports.LocateOff = LocateOff;
      exports.LocateOffIcon = LocateOff;
      exports.LocationEdit = LocationEdit;
      exports.LocationEditIcon = LocationEdit;
      exports.Lock = Lock;
      exports.LockIcon = Lock;
      exports.LockKeyhole = LockKeyhole;
      exports.LockKeyholeIcon = LockKeyhole;
      exports.LockKeyholeOpen = LockKeyholeOpen;
      exports.LockKeyholeOpenIcon = LockKeyholeOpen;
      exports.LockOpen = LockOpen;
      exports.LockOpenIcon = LockOpen;
      exports.LogIn = LogIn;
      exports.LogInIcon = LogIn;
      exports.LogOut = LogOut3;
      exports.LogOutIcon = LogOut3;
      exports.Logs = Logs;
      exports.LogsIcon = Logs;
      exports.Lollipop = Lollipop;
      exports.LollipopIcon = Lollipop;
      exports.LucideAArrowDown = AArrowDown;
      exports.LucideAArrowUp = AArrowUp;
      exports.LucideALargeSmall = ALargeSmall;
      exports.LucideAccessibility = Accessibility;
      exports.LucideActivity = Activity2;
      exports.LucideActivitySquare = SquareActivity;
      exports.LucideAirVent = AirVent;
      exports.LucideAirplay = Airplay;
      exports.LucideAlarmCheck = AlarmClockCheck;
      exports.LucideAlarmClock = AlarmClock;
      exports.LucideAlarmClockCheck = AlarmClockCheck;
      exports.LucideAlarmClockMinus = AlarmClockMinus;
      exports.LucideAlarmClockOff = AlarmClockOff;
      exports.LucideAlarmClockPlus = AlarmClockPlus;
      exports.LucideAlarmMinus = AlarmClockMinus;
      exports.LucideAlarmPlus = AlarmClockPlus;
      exports.LucideAlarmSmoke = AlarmSmoke;
      exports.LucideAlbum = Album;
      exports.LucideAlertCircle = CircleAlert;
      exports.LucideAlertOctagon = OctagonAlert;
      exports.LucideAlertTriangle = TriangleAlert;
      exports.LucideAlignCenter = AlignCenter;
      exports.LucideAlignCenterHorizontal = AlignCenterHorizontal;
      exports.LucideAlignCenterVertical = AlignCenterVertical;
      exports.LucideAlignEndHorizontal = AlignEndHorizontal;
      exports.LucideAlignEndVertical = AlignEndVertical;
      exports.LucideAlignHorizontalDistributeCenter = AlignHorizontalDistributeCenter;
      exports.LucideAlignHorizontalDistributeEnd = AlignHorizontalDistributeEnd;
      exports.LucideAlignHorizontalDistributeStart = AlignHorizontalDistributeStart;
      exports.LucideAlignHorizontalJustifyCenter = AlignHorizontalJustifyCenter;
      exports.LucideAlignHorizontalJustifyEnd = AlignHorizontalJustifyEnd;
      exports.LucideAlignHorizontalJustifyStart = AlignHorizontalJustifyStart;
      exports.LucideAlignHorizontalSpaceAround = AlignHorizontalSpaceAround;
      exports.LucideAlignHorizontalSpaceBetween = AlignHorizontalSpaceBetween;
      exports.LucideAlignJustify = AlignJustify;
      exports.LucideAlignLeft = AlignLeft;
      exports.LucideAlignRight = AlignRight;
      exports.LucideAlignStartHorizontal = AlignStartHorizontal;
      exports.LucideAlignStartVertical = AlignStartVertical;
      exports.LucideAlignVerticalDistributeCenter = AlignVerticalDistributeCenter;
      exports.LucideAlignVerticalDistributeEnd = AlignVerticalDistributeEnd;
      exports.LucideAlignVerticalDistributeStart = AlignVerticalDistributeStart;
      exports.LucideAlignVerticalJustifyCenter = AlignVerticalJustifyCenter;
      exports.LucideAlignVerticalJustifyEnd = AlignVerticalJustifyEnd;
      exports.LucideAlignVerticalJustifyStart = AlignVerticalJustifyStart;
      exports.LucideAlignVerticalSpaceAround = AlignVerticalSpaceAround;
      exports.LucideAlignVerticalSpaceBetween = AlignVerticalSpaceBetween;
      exports.LucideAmbulance = Ambulance;
      exports.LucideAmpersand = Ampersand;
      exports.LucideAmpersands = Ampersands;
      exports.LucideAmphora = Amphora;
      exports.LucideAnchor = Anchor;
      exports.LucideAngry = Angry;
      exports.LucideAnnoyed = Annoyed;
      exports.LucideAntenna = Antenna;
      exports.LucideAnvil = Anvil;
      exports.LucideAperture = Aperture;
      exports.LucideAppWindow = AppWindow;
      exports.LucideAppWindowMac = AppWindowMac;
      exports.LucideApple = Apple;
      exports.LucideArchive = Archive;
      exports.LucideArchiveRestore = ArchiveRestore;
      exports.LucideArchiveX = ArchiveX;
      exports.LucideAreaChart = ChartArea;
      exports.LucideArmchair = Armchair;
      exports.LucideArrowBigDown = ArrowBigDown;
      exports.LucideArrowBigDownDash = ArrowBigDownDash;
      exports.LucideArrowBigLeft = ArrowBigLeft;
      exports.LucideArrowBigLeftDash = ArrowBigLeftDash;
      exports.LucideArrowBigRight = ArrowBigRight;
      exports.LucideArrowBigRightDash = ArrowBigRightDash;
      exports.LucideArrowBigUp = ArrowBigUp;
      exports.LucideArrowBigUpDash = ArrowBigUpDash;
      exports.LucideArrowDown = ArrowDown;
      exports.LucideArrowDown01 = ArrowDown01;
      exports.LucideArrowDown10 = ArrowDown10;
      exports.LucideArrowDownAZ = ArrowDownAZ;
      exports.LucideArrowDownAz = ArrowDownAZ;
      exports.LucideArrowDownCircle = CircleArrowDown;
      exports.LucideArrowDownFromLine = ArrowDownFromLine;
      exports.LucideArrowDownLeft = ArrowDownLeft;
      exports.LucideArrowDownLeftFromCircle = CircleArrowOutDownLeft;
      exports.LucideArrowDownLeftFromSquare = SquareArrowOutDownLeft;
      exports.LucideArrowDownLeftSquare = SquareArrowDownLeft;
      exports.LucideArrowDownNarrowWide = ArrowDownNarrowWide;
      exports.LucideArrowDownRight = ArrowDownRight;
      exports.LucideArrowDownRightFromCircle = CircleArrowOutDownRight;
      exports.LucideArrowDownRightFromSquare = SquareArrowOutDownRight;
      exports.LucideArrowDownRightSquare = SquareArrowDownRight;
      exports.LucideArrowDownSquare = SquareArrowDown;
      exports.LucideArrowDownToDot = ArrowDownToDot;
      exports.LucideArrowDownToLine = ArrowDownToLine;
      exports.LucideArrowDownUp = ArrowDownUp;
      exports.LucideArrowDownWideNarrow = ArrowDownWideNarrow;
      exports.LucideArrowDownZA = ArrowDownZA;
      exports.LucideArrowDownZa = ArrowDownZA;
      exports.LucideArrowLeft = ArrowLeft;
      exports.LucideArrowLeftCircle = CircleArrowLeft;
      exports.LucideArrowLeftFromLine = ArrowLeftFromLine;
      exports.LucideArrowLeftRight = ArrowLeftRight;
      exports.LucideArrowLeftSquare = SquareArrowLeft;
      exports.LucideArrowLeftToLine = ArrowLeftToLine;
      exports.LucideArrowRight = ArrowRight4;
      exports.LucideArrowRightCircle = CircleArrowRight;
      exports.LucideArrowRightFromLine = ArrowRightFromLine;
      exports.LucideArrowRightLeft = ArrowRightLeft;
      exports.LucideArrowRightSquare = SquareArrowRight;
      exports.LucideArrowRightToLine = ArrowRightToLine;
      exports.LucideArrowUp = ArrowUp2;
      exports.LucideArrowUp01 = ArrowUp01;
      exports.LucideArrowUp10 = ArrowUp10;
      exports.LucideArrowUpAZ = ArrowUpAZ;
      exports.LucideArrowUpAz = ArrowUpAZ;
      exports.LucideArrowUpCircle = CircleArrowUp;
      exports.LucideArrowUpDown = ArrowUpDown;
      exports.LucideArrowUpFromDot = ArrowUpFromDot;
      exports.LucideArrowUpFromLine = ArrowUpFromLine;
      exports.LucideArrowUpLeft = ArrowUpLeft;
      exports.LucideArrowUpLeftFromCircle = CircleArrowOutUpLeft;
      exports.LucideArrowUpLeftFromSquare = SquareArrowOutUpLeft;
      exports.LucideArrowUpLeftSquare = SquareArrowUpLeft;
      exports.LucideArrowUpNarrowWide = ArrowUpNarrowWide;
      exports.LucideArrowUpRight = ArrowUpRight;
      exports.LucideArrowUpRightFromCircle = CircleArrowOutUpRight;
      exports.LucideArrowUpRightFromSquare = SquareArrowOutUpRight;
      exports.LucideArrowUpRightSquare = SquareArrowUpRight;
      exports.LucideArrowUpSquare = SquareArrowUp;
      exports.LucideArrowUpToLine = ArrowUpToLine;
      exports.LucideArrowUpWideNarrow = ArrowUpWideNarrow;
      exports.LucideArrowUpZA = ArrowUpZA;
      exports.LucideArrowUpZa = ArrowUpZA;
      exports.LucideArrowsUpFromLine = ArrowsUpFromLine;
      exports.LucideAsterisk = Asterisk;
      exports.LucideAsteriskSquare = SquareAsterisk;
      exports.LucideAtSign = AtSign;
      exports.LucideAtom = Atom;
      exports.LucideAudioLines = AudioLines;
      exports.LucideAudioWaveform = AudioWaveform;
      exports.LucideAward = Award4;
      exports.LucideAxe = Axe;
      exports.LucideAxis3D = Axis3d;
      exports.LucideAxis3d = Axis3d;
      exports.LucideBaby = Baby;
      exports.LucideBackpack = Backpack;
      exports.LucideBadge = Badge2;
      exports.LucideBadgeAlert = BadgeAlert;
      exports.LucideBadgeCent = BadgeCent;
      exports.LucideBadgeCheck = BadgeCheck;
      exports.LucideBadgeDollarSign = BadgeDollarSign;
      exports.LucideBadgeEuro = BadgeEuro;
      exports.LucideBadgeHelp = BadgeHelp;
      exports.LucideBadgeIndianRupee = BadgeIndianRupee;
      exports.LucideBadgeInfo = BadgeInfo;
      exports.LucideBadgeJapaneseYen = BadgeJapaneseYen;
      exports.LucideBadgeMinus = BadgeMinus;
      exports.LucideBadgePercent = BadgePercent;
      exports.LucideBadgePlus = BadgePlus;
      exports.LucideBadgePoundSterling = BadgePoundSterling;
      exports.LucideBadgeRussianRuble = BadgeRussianRuble;
      exports.LucideBadgeSwissFranc = BadgeSwissFranc;
      exports.LucideBadgeX = BadgeX;
      exports.LucideBaggageClaim = BaggageClaim;
      exports.LucideBan = Ban;
      exports.LucideBanana = Banana;
      exports.LucideBandage = Bandage;
      exports.LucideBanknote = Banknote;
      exports.LucideBanknoteArrowDown = BanknoteArrowDown;
      exports.LucideBanknoteArrowUp = BanknoteArrowUp;
      exports.LucideBanknoteX = BanknoteX;
      exports.LucideBarChart = ChartNoAxesColumnIncreasing;
      exports.LucideBarChart2 = ChartNoAxesColumn;
      exports.LucideBarChart3 = ChartColumn;
      exports.LucideBarChart4 = ChartColumnIncreasing;
      exports.LucideBarChartBig = ChartColumnBig;
      exports.LucideBarChartHorizontal = ChartBar;
      exports.LucideBarChartHorizontalBig = ChartBarBig;
      exports.LucideBarcode = Barcode;
      exports.LucideBaseline = Baseline;
      exports.LucideBath = Bath;
      exports.LucideBattery = Battery;
      exports.LucideBatteryCharging = BatteryCharging;
      exports.LucideBatteryFull = BatteryFull;
      exports.LucideBatteryLow = BatteryLow;
      exports.LucideBatteryMedium = BatteryMedium;
      exports.LucideBatteryPlus = BatteryPlus;
      exports.LucideBatteryWarning = BatteryWarning;
      exports.LucideBeaker = Beaker;
      exports.LucideBean = Bean;
      exports.LucideBeanOff = BeanOff;
      exports.LucideBed = Bed;
      exports.LucideBedDouble = BedDouble;
      exports.LucideBedSingle = BedSingle;
      exports.LucideBeef = Beef;
      exports.LucideBeer = Beer;
      exports.LucideBeerOff = BeerOff;
      exports.LucideBell = Bell;
      exports.LucideBellDot = BellDot;
      exports.LucideBellElectric = BellElectric;
      exports.LucideBellMinus = BellMinus;
      exports.LucideBellOff = BellOff;
      exports.LucideBellPlus = BellPlus;
      exports.LucideBellRing = BellRing;
      exports.LucideBetweenHorizonalEnd = BetweenHorizontalEnd;
      exports.LucideBetweenHorizonalStart = BetweenHorizontalStart;
      exports.LucideBetweenHorizontalEnd = BetweenHorizontalEnd;
      exports.LucideBetweenHorizontalStart = BetweenHorizontalStart;
      exports.LucideBetweenVerticalEnd = BetweenVerticalEnd;
      exports.LucideBetweenVerticalStart = BetweenVerticalStart;
      exports.LucideBicepsFlexed = BicepsFlexed;
      exports.LucideBike = Bike;
      exports.LucideBinary = Binary;
      exports.LucideBinoculars = Binoculars;
      exports.LucideBiohazard = Biohazard;
      exports.LucideBird = Bird;
      exports.LucideBitcoin = Bitcoin;
      exports.LucideBlend = Blend;
      exports.LucideBlinds = Blinds;
      exports.LucideBlocks = Blocks;
      exports.LucideBluetooth = Bluetooth;
      exports.LucideBluetoothConnected = BluetoothConnected;
      exports.LucideBluetoothOff = BluetoothOff;
      exports.LucideBluetoothSearching = BluetoothSearching;
      exports.LucideBold = Bold;
      exports.LucideBolt = Bolt;
      exports.LucideBomb = Bomb;
      exports.LucideBone = Bone;
      exports.LucideBook = Book;
      exports.LucideBookA = BookA;
      exports.LucideBookAudio = BookAudio;
      exports.LucideBookCheck = BookCheck;
      exports.LucideBookCopy = BookCopy;
      exports.LucideBookDashed = BookDashed;
      exports.LucideBookDown = BookDown;
      exports.LucideBookHeadphones = BookHeadphones;
      exports.LucideBookHeart = BookHeart;
      exports.LucideBookImage = BookImage;
      exports.LucideBookKey = BookKey;
      exports.LucideBookLock = BookLock;
      exports.LucideBookMarked = BookMarked;
      exports.LucideBookMinus = BookMinus;
      exports.LucideBookOpen = BookOpen4;
      exports.LucideBookOpenCheck = BookOpenCheck;
      exports.LucideBookOpenText = BookOpenText;
      exports.LucideBookPlus = BookPlus;
      exports.LucideBookTemplate = BookDashed;
      exports.LucideBookText = BookText3;
      exports.LucideBookType = BookType;
      exports.LucideBookUp = BookUp;
      exports.LucideBookUp2 = BookUp2;
      exports.LucideBookUser = BookUser;
      exports.LucideBookX = BookX;
      exports.LucideBookmark = Bookmark2;
      exports.LucideBookmarkCheck = BookmarkCheck;
      exports.LucideBookmarkMinus = BookmarkMinus;
      exports.LucideBookmarkPlus = BookmarkPlus;
      exports.LucideBookmarkX = BookmarkX;
      exports.LucideBoomBox = BoomBox;
      exports.LucideBot = Bot;
      exports.LucideBotMessageSquare = BotMessageSquare;
      exports.LucideBotOff = BotOff;
      exports.LucideBowArrow = BowArrow;
      exports.LucideBox = Box;
      exports.LucideBoxSelect = SquareDashed;
      exports.LucideBoxes = Boxes;
      exports.LucideBraces = Braces;
      exports.LucideBrackets = Brackets;
      exports.LucideBrain = Brain;
      exports.LucideBrainCircuit = BrainCircuit;
      exports.LucideBrainCog = BrainCog;
      exports.LucideBrickWall = BrickWall;
      exports.LucideBrickWallFire = BrickWallFire;
      exports.LucideBriefcase = Briefcase;
      exports.LucideBriefcaseBusiness = BriefcaseBusiness;
      exports.LucideBriefcaseConveyorBelt = BriefcaseConveyorBelt;
      exports.LucideBriefcaseMedical = BriefcaseMedical;
      exports.LucideBringToFront = BringToFront;
      exports.LucideBrush = Brush;
      exports.LucideBubbles = Bubbles;
      exports.LucideBug = Bug;
      exports.LucideBugOff = BugOff;
      exports.LucideBugPlay = BugPlay;
      exports.LucideBuilding = Building3;
      exports.LucideBuilding2 = Building2;
      exports.LucideBus = Bus;
      exports.LucideBusFront = BusFront;
      exports.LucideCable = Cable;
      exports.LucideCableCar = CableCar;
      exports.LucideCake = Cake;
      exports.LucideCakeSlice = CakeSlice;
      exports.LucideCalculator = Calculator;
      exports.LucideCalendar = Calendar;
      exports.LucideCalendar1 = Calendar1;
      exports.LucideCalendarArrowDown = CalendarArrowDown;
      exports.LucideCalendarArrowUp = CalendarArrowUp;
      exports.LucideCalendarCheck = CalendarCheck3;
      exports.LucideCalendarCheck2 = CalendarCheck2;
      exports.LucideCalendarClock = CalendarClock;
      exports.LucideCalendarCog = CalendarCog;
      exports.LucideCalendarDays = CalendarDays;
      exports.LucideCalendarFold = CalendarFold;
      exports.LucideCalendarHeart = CalendarHeart;
      exports.LucideCalendarMinus = CalendarMinus;
      exports.LucideCalendarMinus2 = CalendarMinus2;
      exports.LucideCalendarOff = CalendarOff;
      exports.LucideCalendarPlus = CalendarPlus;
      exports.LucideCalendarPlus2 = CalendarPlus2;
      exports.LucideCalendarRange = CalendarRange;
      exports.LucideCalendarSearch = CalendarSearch;
      exports.LucideCalendarSync = CalendarSync;
      exports.LucideCalendarX = CalendarX;
      exports.LucideCalendarX2 = CalendarX2;
      exports.LucideCamera = Camera;
      exports.LucideCameraOff = CameraOff;
      exports.LucideCandlestickChart = ChartCandlestick;
      exports.LucideCandy = Candy;
      exports.LucideCandyCane = CandyCane;
      exports.LucideCandyOff = CandyOff;
      exports.LucideCannabis = Cannabis;
      exports.LucideCaptions = Captions;
      exports.LucideCaptionsOff = CaptionsOff;
      exports.LucideCar = Car;
      exports.LucideCarFront = CarFront;
      exports.LucideCarTaxiFront = CarTaxiFront;
      exports.LucideCaravan = Caravan;
      exports.LucideCarrot = Carrot;
      exports.LucideCaseLower = CaseLower;
      exports.LucideCaseSensitive = CaseSensitive;
      exports.LucideCaseUpper = CaseUpper;
      exports.LucideCassetteTape = CassetteTape;
      exports.LucideCast = Cast;
      exports.LucideCastle = Castle;
      exports.LucideCat = Cat;
      exports.LucideCctv = Cctv;
      exports.LucideChartArea = ChartArea;
      exports.LucideChartBar = ChartBar;
      exports.LucideChartBarBig = ChartBarBig;
      exports.LucideChartBarDecreasing = ChartBarDecreasing;
      exports.LucideChartBarIncreasing = ChartBarIncreasing;
      exports.LucideChartBarStacked = ChartBarStacked;
      exports.LucideChartCandlestick = ChartCandlestick;
      exports.LucideChartColumn = ChartColumn;
      exports.LucideChartColumnBig = ChartColumnBig;
      exports.LucideChartColumnDecreasing = ChartColumnDecreasing;
      exports.LucideChartColumnIncreasing = ChartColumnIncreasing;
      exports.LucideChartColumnStacked = ChartColumnStacked;
      exports.LucideChartGantt = ChartGantt;
      exports.LucideChartLine = ChartLine;
      exports.LucideChartNetwork = ChartNetwork;
      exports.LucideChartNoAxesColumn = ChartNoAxesColumn;
      exports.LucideChartNoAxesColumnDecreasing = ChartNoAxesColumnDecreasing;
      exports.LucideChartNoAxesColumnIncreasing = ChartNoAxesColumnIncreasing;
      exports.LucideChartNoAxesCombined = ChartNoAxesCombined;
      exports.LucideChartNoAxesGantt = ChartNoAxesGantt;
      exports.LucideChartPie = ChartPie;
      exports.LucideChartScatter = ChartScatter;
      exports.LucideChartSpline = ChartSpline;
      exports.LucideCheck = Check;
      exports.LucideCheckCheck = CheckCheck;
      exports.LucideCheckCircle = CircleCheckBig;
      exports.LucideCheckCircle2 = CircleCheck;
      exports.LucideCheckSquare = SquareCheckBig;
      exports.LucideCheckSquare2 = SquareCheck;
      exports.LucideChefHat = ChefHat;
      exports.LucideCherry = Cherry;
      exports.LucideChevronDown = ChevronDown3;
      exports.LucideChevronDownCircle = CircleChevronDown;
      exports.LucideChevronDownSquare = SquareChevronDown;
      exports.LucideChevronFirst = ChevronFirst;
      exports.LucideChevronLast = ChevronLast;
      exports.LucideChevronLeft = ChevronLeft2;
      exports.LucideChevronLeftCircle = CircleChevronLeft;
      exports.LucideChevronLeftSquare = SquareChevronLeft;
      exports.LucideChevronRight = ChevronRight5;
      exports.LucideChevronRightCircle = CircleChevronRight;
      exports.LucideChevronRightSquare = SquareChevronRight;
      exports.LucideChevronUp = ChevronUp;
      exports.LucideChevronUpCircle = CircleChevronUp;
      exports.LucideChevronUpSquare = SquareChevronUp;
      exports.LucideChevronsDown = ChevronsDown;
      exports.LucideChevronsDownUp = ChevronsDownUp;
      exports.LucideChevronsLeft = ChevronsLeft;
      exports.LucideChevronsLeftRight = ChevronsLeftRight;
      exports.LucideChevronsLeftRightEllipsis = ChevronsLeftRightEllipsis;
      exports.LucideChevronsRight = ChevronsRight;
      exports.LucideChevronsRightLeft = ChevronsRightLeft;
      exports.LucideChevronsUp = ChevronsUp;
      exports.LucideChevronsUpDown = ChevronsUpDown;
      exports.LucideChrome = Chrome;
      exports.LucideChurch = Church;
      exports.LucideCigarette = Cigarette;
      exports.LucideCigaretteOff = CigaretteOff;
      exports.LucideCircle = Circle;
      exports.LucideCircleAlert = CircleAlert;
      exports.LucideCircleArrowDown = CircleArrowDown;
      exports.LucideCircleArrowLeft = CircleArrowLeft;
      exports.LucideCircleArrowOutDownLeft = CircleArrowOutDownLeft;
      exports.LucideCircleArrowOutDownRight = CircleArrowOutDownRight;
      exports.LucideCircleArrowOutUpLeft = CircleArrowOutUpLeft;
      exports.LucideCircleArrowOutUpRight = CircleArrowOutUpRight;
      exports.LucideCircleArrowRight = CircleArrowRight;
      exports.LucideCircleArrowUp = CircleArrowUp;
      exports.LucideCircleCheck = CircleCheck;
      exports.LucideCircleCheckBig = CircleCheckBig;
      exports.LucideCircleChevronDown = CircleChevronDown;
      exports.LucideCircleChevronLeft = CircleChevronLeft;
      exports.LucideCircleChevronRight = CircleChevronRight;
      exports.LucideCircleChevronUp = CircleChevronUp;
      exports.LucideCircleDashed = CircleDashed;
      exports.LucideCircleDivide = CircleDivide;
      exports.LucideCircleDollarSign = CircleDollarSign;
      exports.LucideCircleDot = CircleDot;
      exports.LucideCircleDotDashed = CircleDotDashed;
      exports.LucideCircleEllipsis = CircleEllipsis;
      exports.LucideCircleEqual = CircleEqual;
      exports.LucideCircleFadingArrowUp = CircleFadingArrowUp;
      exports.LucideCircleFadingPlus = CircleFadingPlus;
      exports.LucideCircleGauge = CircleGauge;
      exports.LucideCircleHelp = CircleHelp;
      exports.LucideCircleMinus = CircleMinus;
      exports.LucideCircleOff = CircleOff;
      exports.LucideCircleParking = CircleParking;
      exports.LucideCircleParkingOff = CircleParkingOff;
      exports.LucideCirclePause = CirclePause;
      exports.LucideCirclePercent = CirclePercent;
      exports.LucideCirclePlay = CirclePlay;
      exports.LucideCirclePlus = CirclePlus;
      exports.LucideCirclePower = CirclePower;
      exports.LucideCircleSlash = CircleSlash;
      exports.LucideCircleSlash2 = CircleSlash2;
      exports.LucideCircleSlashed = CircleSlash2;
      exports.LucideCircleSmall = CircleSmall;
      exports.LucideCircleStop = CircleStop;
      exports.LucideCircleUser = CircleUser;
      exports.LucideCircleUserRound = CircleUserRound;
      exports.LucideCircleX = CircleX;
      exports.LucideCircuitBoard = CircuitBoard;
      exports.LucideCitrus = Citrus;
      exports.LucideClapperboard = Clapperboard;
      exports.LucideClipboard = Clipboard;
      exports.LucideClipboardCheck = ClipboardCheck2;
      exports.LucideClipboardCopy = ClipboardCopy;
      exports.LucideClipboardEdit = ClipboardPen;
      exports.LucideClipboardList = ClipboardList;
      exports.LucideClipboardMinus = ClipboardMinus;
      exports.LucideClipboardPaste = ClipboardPaste;
      exports.LucideClipboardPen = ClipboardPen;
      exports.LucideClipboardPenLine = ClipboardPenLine;
      exports.LucideClipboardPlus = ClipboardPlus;
      exports.LucideClipboardSignature = ClipboardPenLine;
      exports.LucideClipboardType = ClipboardType;
      exports.LucideClipboardX = ClipboardX;
      exports.LucideClock = Clock13;
      exports.LucideClock1 = Clock1;
      exports.LucideClock10 = Clock10;
      exports.LucideClock11 = Clock11;
      exports.LucideClock12 = Clock12;
      exports.LucideClock2 = Clock22;
      exports.LucideClock3 = Clock3;
      exports.LucideClock4 = Clock4;
      exports.LucideClock5 = Clock5;
      exports.LucideClock6 = Clock6;
      exports.LucideClock7 = Clock7;
      exports.LucideClock8 = Clock8;
      exports.LucideClock9 = Clock9;
      exports.LucideClockAlert = ClockAlert;
      exports.LucideClockArrowDown = ClockArrowDown;
      exports.LucideClockArrowUp = ClockArrowUp;
      exports.LucideClockFading = ClockFading;
      exports.LucideCloud = Cloud;
      exports.LucideCloudAlert = CloudAlert;
      exports.LucideCloudCog = CloudCog;
      exports.LucideCloudDownload = CloudDownload;
      exports.LucideCloudDrizzle = CloudDrizzle;
      exports.LucideCloudFog = CloudFog;
      exports.LucideCloudHail = CloudHail;
      exports.LucideCloudLightning = CloudLightning;
      exports.LucideCloudMoon = CloudMoon;
      exports.LucideCloudMoonRain = CloudMoonRain;
      exports.LucideCloudOff = CloudOff;
      exports.LucideCloudRain = CloudRain;
      exports.LucideCloudRainWind = CloudRainWind;
      exports.LucideCloudSnow = CloudSnow;
      exports.LucideCloudSun = CloudSun;
      exports.LucideCloudSunRain = CloudSunRain;
      exports.LucideCloudUpload = CloudUpload;
      exports.LucideCloudy = Cloudy;
      exports.LucideClover = Clover;
      exports.LucideClub = Club;
      exports.LucideCode = Code;
      exports.LucideCode2 = CodeXml;
      exports.LucideCodeSquare = SquareCode;
      exports.LucideCodeXml = CodeXml;
      exports.LucideCodepen = Codepen;
      exports.LucideCodesandbox = Codesandbox;
      exports.LucideCoffee = Coffee;
      exports.LucideCog = Cog;
      exports.LucideCoins = Coins;
      exports.LucideColumns = Columns2;
      exports.LucideColumns2 = Columns2;
      exports.LucideColumns3 = Columns3;
      exports.LucideColumns3Cog = Columns3Cog;
      exports.LucideColumns4 = Columns4;
      exports.LucideColumnsSettings = Columns3Cog;
      exports.LucideCombine = Combine;
      exports.LucideCommand = Command;
      exports.LucideCompass = Compass;
      exports.LucideComponent = Component4;
      exports.LucideComputer = Computer;
      exports.LucideConciergeBell = ConciergeBell;
      exports.LucideCone = Cone;
      exports.LucideConstruction = Construction;
      exports.LucideContact = Contact2;
      exports.LucideContact2 = ContactRound;
      exports.LucideContactRound = ContactRound;
      exports.LucideContainer = Container;
      exports.LucideContrast = Contrast;
      exports.LucideCookie = Cookie;
      exports.LucideCookingPot = CookingPot;
      exports.LucideCopy = Copy;
      exports.LucideCopyCheck = CopyCheck;
      exports.LucideCopyMinus = CopyMinus;
      exports.LucideCopyPlus = CopyPlus;
      exports.LucideCopySlash = CopySlash;
      exports.LucideCopyX = CopyX;
      exports.LucideCopyleft = Copyleft;
      exports.LucideCopyright = Copyright;
      exports.LucideCornerDownLeft = CornerDownLeft;
      exports.LucideCornerDownRight = CornerDownRight;
      exports.LucideCornerLeftDown = CornerLeftDown;
      exports.LucideCornerLeftUp = CornerLeftUp;
      exports.LucideCornerRightDown = CornerRightDown;
      exports.LucideCornerRightUp = CornerRightUp;
      exports.LucideCornerUpLeft = CornerUpLeft;
      exports.LucideCornerUpRight = CornerUpRight;
      exports.LucideCpu = Cpu;
      exports.LucideCreativeCommons = CreativeCommons;
      exports.LucideCreditCard = CreditCard;
      exports.LucideCroissant = Croissant;
      exports.LucideCrop = Crop;
      exports.LucideCross = Cross;
      exports.LucideCrosshair = Crosshair;
      exports.LucideCrown = Crown;
      exports.LucideCuboid = Cuboid;
      exports.LucideCupSoda = CupSoda;
      exports.LucideCurlyBraces = Braces;
      exports.LucideCurrency = Currency;
      exports.LucideCylinder = Cylinder;
      exports.LucideDam = Dam;
      exports.LucideDatabase = Database;
      exports.LucideDatabaseBackup = DatabaseBackup;
      exports.LucideDatabaseZap = DatabaseZap;
      exports.LucideDecimalsArrowLeft = DecimalsArrowLeft;
      exports.LucideDecimalsArrowRight = DecimalsArrowRight;
      exports.LucideDelete = Delete;
      exports.LucideDessert = Dessert;
      exports.LucideDiameter = Diameter;
      exports.LucideDiamond = Diamond;
      exports.LucideDiamondMinus = DiamondMinus;
      exports.LucideDiamondPercent = DiamondPercent;
      exports.LucideDiamondPlus = DiamondPlus;
      exports.LucideDice1 = Dice1;
      exports.LucideDice2 = Dice2;
      exports.LucideDice3 = Dice3;
      exports.LucideDice4 = Dice4;
      exports.LucideDice5 = Dice5;
      exports.LucideDice6 = Dice6;
      exports.LucideDices = Dices;
      exports.LucideDiff = Diff;
      exports.LucideDisc = Disc;
      exports.LucideDisc2 = Disc2;
      exports.LucideDisc3 = Disc3;
      exports.LucideDiscAlbum = DiscAlbum;
      exports.LucideDivide = Divide;
      exports.LucideDivideCircle = CircleDivide;
      exports.LucideDivideSquare = SquareDivide;
      exports.LucideDna = Dna;
      exports.LucideDnaOff = DnaOff;
      exports.LucideDock = Dock;
      exports.LucideDog = Dog;
      exports.LucideDollarSign = DollarSign;
      exports.LucideDonut = Donut;
      exports.LucideDoorClosed = DoorClosed;
      exports.LucideDoorOpen = DoorOpen;
      exports.LucideDot = Dot;
      exports.LucideDotSquare = SquareDot;
      exports.LucideDownload = Download5;
      exports.LucideDownloadCloud = CloudDownload;
      exports.LucideDraftingCompass = DraftingCompass;
      exports.LucideDrama = Drama;
      exports.LucideDribbble = Dribbble;
      exports.LucideDrill = Drill;
      exports.LucideDroplet = Droplet;
      exports.LucideDropletOff = DropletOff;
      exports.LucideDroplets = Droplets;
      exports.LucideDrum = Drum;
      exports.LucideDrumstick = Drumstick;
      exports.LucideDumbbell = Dumbbell;
      exports.LucideEar = Ear;
      exports.LucideEarOff = EarOff;
      exports.LucideEarth = Earth;
      exports.LucideEarthLock = EarthLock;
      exports.LucideEclipse = Eclipse;
      exports.LucideEdit = SquarePen;
      exports.LucideEdit2 = Pen;
      exports.LucideEdit3 = PenLine;
      exports.LucideEgg = Egg;
      exports.LucideEggFried = EggFried;
      exports.LucideEggOff = EggOff;
      exports.LucideEllipsis = Ellipsis;
      exports.LucideEllipsisVertical = EllipsisVertical;
      exports.LucideEqual = Equal;
      exports.LucideEqualApproximately = EqualApproximately;
      exports.LucideEqualNot = EqualNot;
      exports.LucideEqualSquare = SquareEqual;
      exports.LucideEraser = Eraser;
      exports.LucideEthernetPort = EthernetPort;
      exports.LucideEuro = Euro;
      exports.LucideExpand = Expand;
      exports.LucideExternalLink = ExternalLink;
      exports.LucideEye = Eye;
      exports.LucideEyeClosed = EyeClosed;
      exports.LucideEyeOff = EyeOff;
      exports.LucideFacebook = Facebook2;
      exports.LucideFactory = Factory;
      exports.LucideFan = Fan;
      exports.LucideFastForward = FastForward;
      exports.LucideFeather = Feather;
      exports.LucideFence = Fence;
      exports.LucideFerrisWheel = FerrisWheel;
      exports.LucideFigma = Figma;
      exports.LucideFile = File3;
      exports.LucideFileArchive = FileArchive;
      exports.LucideFileAudio = FileAudio;
      exports.LucideFileAudio2 = FileAudio2;
      exports.LucideFileAxis3D = FileAxis3d;
      exports.LucideFileAxis3d = FileAxis3d;
      exports.LucideFileBadge = FileBadge;
      exports.LucideFileBadge2 = FileBadge2;
      exports.LucideFileBarChart = FileChartColumnIncreasing;
      exports.LucideFileBarChart2 = FileChartColumn;
      exports.LucideFileBox = FileBox;
      exports.LucideFileChartColumn = FileChartColumn;
      exports.LucideFileChartColumnIncreasing = FileChartColumnIncreasing;
      exports.LucideFileChartLine = FileChartLine;
      exports.LucideFileChartPie = FileChartPie;
      exports.LucideFileCheck = FileCheck;
      exports.LucideFileCheck2 = FileCheck2;
      exports.LucideFileClock = FileClock;
      exports.LucideFileCode = FileCode;
      exports.LucideFileCode2 = FileCode2;
      exports.LucideFileCog = FileCog;
      exports.LucideFileCog2 = FileCog;
      exports.LucideFileDiff = FileDiff;
      exports.LucideFileDigit = FileDigit;
      exports.LucideFileDown = FileDown;
      exports.LucideFileEdit = FilePen;
      exports.LucideFileHeart = FileHeart;
      exports.LucideFileImage = FileImage;
      exports.LucideFileInput = FileInput;
      exports.LucideFileJson = FileJson;
      exports.LucideFileJson2 = FileJson2;
      exports.LucideFileKey = FileKey;
      exports.LucideFileKey2 = FileKey2;
      exports.LucideFileLineChart = FileChartLine;
      exports.LucideFileLock = FileLock;
      exports.LucideFileLock2 = FileLock2;
      exports.LucideFileMinus = FileMinus;
      exports.LucideFileMinus2 = FileMinus2;
      exports.LucideFileMusic = FileMusic;
      exports.LucideFileOutput = FileOutput;
      exports.LucideFilePen = FilePen;
      exports.LucideFilePenLine = FilePenLine;
      exports.LucideFilePieChart = FileChartPie;
      exports.LucideFilePlus = FilePlus;
      exports.LucideFilePlus2 = FilePlus2;
      exports.LucideFileQuestion = FileQuestion;
      exports.LucideFileScan = FileScan;
      exports.LucideFileSearch = FileSearch;
      exports.LucideFileSearch2 = FileSearch2;
      exports.LucideFileSignature = FilePenLine;
      exports.LucideFileSliders = FileSliders;
      exports.LucideFileSpreadsheet = FileSpreadsheet4;
      exports.LucideFileStack = FileStack;
      exports.LucideFileSymlink = FileSymlink;
      exports.LucideFileTerminal = FileTerminal;
      exports.LucideFileText = FileText8;
      exports.LucideFileType = FileType;
      exports.LucideFileType2 = FileType2;
      exports.LucideFileUp = FileUp;
      exports.LucideFileUser = FileUser;
      exports.LucideFileVideo = FileVideo;
      exports.LucideFileVideo2 = FileVideo2;
      exports.LucideFileVolume = FileVolume;
      exports.LucideFileVolume2 = FileVolume2;
      exports.LucideFileWarning = FileWarning;
      exports.LucideFileX = FileX;
      exports.LucideFileX2 = FileX2;
      exports.LucideFiles = Files;
      exports.LucideFilm = Film2;
      exports.LucideFilter = Funnel;
      exports.LucideFilterX = FunnelX;
      exports.LucideFingerprint = Fingerprint;
      exports.LucideFireExtinguisher = FireExtinguisher;
      exports.LucideFish = Fish;
      exports.LucideFishOff = FishOff;
      exports.LucideFishSymbol = FishSymbol;
      exports.LucideFlag = Flag;
      exports.LucideFlagOff = FlagOff;
      exports.LucideFlagTriangleLeft = FlagTriangleLeft;
      exports.LucideFlagTriangleRight = FlagTriangleRight;
      exports.LucideFlame = Flame;
      exports.LucideFlameKindling = FlameKindling;
      exports.LucideFlashlight = Flashlight;
      exports.LucideFlashlightOff = FlashlightOff;
      exports.LucideFlaskConical = FlaskConical;
      exports.LucideFlaskConicalOff = FlaskConicalOff;
      exports.LucideFlaskRound = FlaskRound;
      exports.LucideFlipHorizontal = FlipHorizontal;
      exports.LucideFlipHorizontal2 = FlipHorizontal2;
      exports.LucideFlipVertical = FlipVertical;
      exports.LucideFlipVertical2 = FlipVertical2;
      exports.LucideFlower = Flower;
      exports.LucideFlower2 = Flower2;
      exports.LucideFocus = Focus;
      exports.LucideFoldHorizontal = FoldHorizontal;
      exports.LucideFoldVertical = FoldVertical;
      exports.LucideFolder = Folder;
      exports.LucideFolderArchive = FolderArchive;
      exports.LucideFolderCheck = FolderCheck;
      exports.LucideFolderClock = FolderClock;
      exports.LucideFolderClosed = FolderClosed;
      exports.LucideFolderCode = FolderCode;
      exports.LucideFolderCog = FolderCog;
      exports.LucideFolderCog2 = FolderCog;
      exports.LucideFolderDot = FolderDot;
      exports.LucideFolderDown = FolderDown;
      exports.LucideFolderEdit = FolderPen;
      exports.LucideFolderGit = FolderGit;
      exports.LucideFolderGit2 = FolderGit2;
      exports.LucideFolderHeart = FolderHeart;
      exports.LucideFolderInput = FolderInput;
      exports.LucideFolderKanban = FolderKanban;
      exports.LucideFolderKey = FolderKey;
      exports.LucideFolderLock = FolderLock;
      exports.LucideFolderMinus = FolderMinus;
      exports.LucideFolderOpen = FolderOpen;
      exports.LucideFolderOpenDot = FolderOpenDot;
      exports.LucideFolderOutput = FolderOutput;
      exports.LucideFolderPen = FolderPen;
      exports.LucideFolderPlus = FolderPlus;
      exports.LucideFolderRoot = FolderRoot;
      exports.LucideFolderSearch = FolderSearch;
      exports.LucideFolderSearch2 = FolderSearch2;
      exports.LucideFolderSymlink = FolderSymlink;
      exports.LucideFolderSync = FolderSync;
      exports.LucideFolderTree = FolderTree;
      exports.LucideFolderUp = FolderUp;
      exports.LucideFolderX = FolderX;
      exports.LucideFolders = Folders;
      exports.LucideFootprints = Footprints;
      exports.LucideForkKnife = Utensils;
      exports.LucideForkKnifeCrossed = UtensilsCrossed;
      exports.LucideForklift = Forklift;
      exports.LucideFormInput = RectangleEllipsis;
      exports.LucideForward = Forward;
      exports.LucideFrame = Frame;
      exports.LucideFramer = Framer;
      exports.LucideFrown = Frown;
      exports.LucideFuel = Fuel;
      exports.LucideFullscreen = Fullscreen;
      exports.LucideFunctionSquare = SquareFunction;
      exports.LucideFunnel = Funnel;
      exports.LucideFunnelPlus = FunnelPlus;
      exports.LucideFunnelX = FunnelX;
      exports.LucideGalleryHorizontal = GalleryHorizontal;
      exports.LucideGalleryHorizontalEnd = GalleryHorizontalEnd;
      exports.LucideGalleryThumbnails = GalleryThumbnails;
      exports.LucideGalleryVertical = GalleryVertical;
      exports.LucideGalleryVerticalEnd = GalleryVerticalEnd;
      exports.LucideGamepad = Gamepad;
      exports.LucideGamepad2 = Gamepad2;
      exports.LucideGanttChart = ChartNoAxesGantt;
      exports.LucideGanttChartSquare = SquareChartGantt;
      exports.LucideGauge = Gauge;
      exports.LucideGaugeCircle = CircleGauge;
      exports.LucideGavel = Gavel;
      exports.LucideGem = Gem;
      exports.LucideGhost = Ghost;
      exports.LucideGift = Gift;
      exports.LucideGitBranch = GitBranch;
      exports.LucideGitBranchPlus = GitBranchPlus;
      exports.LucideGitCommit = GitCommitHorizontal;
      exports.LucideGitCommitHorizontal = GitCommitHorizontal;
      exports.LucideGitCommitVertical = GitCommitVertical;
      exports.LucideGitCompare = GitCompare;
      exports.LucideGitCompareArrows = GitCompareArrows;
      exports.LucideGitFork = GitFork;
      exports.LucideGitGraph = GitGraph;
      exports.LucideGitMerge = GitMerge;
      exports.LucideGitPullRequest = GitPullRequest;
      exports.LucideGitPullRequestArrow = GitPullRequestArrow;
      exports.LucideGitPullRequestClosed = GitPullRequestClosed;
      exports.LucideGitPullRequestCreate = GitPullRequestCreate;
      exports.LucideGitPullRequestCreateArrow = GitPullRequestCreateArrow;
      exports.LucideGitPullRequestDraft = GitPullRequestDraft;
      exports.LucideGithub = Github;
      exports.LucideGitlab = Gitlab;
      exports.LucideGlassWater = GlassWater;
      exports.LucideGlasses = Glasses;
      exports.LucideGlobe = Globe;
      exports.LucideGlobe2 = Earth;
      exports.LucideGlobeLock = GlobeLock;
      exports.LucideGoal = Goal;
      exports.LucideGrab = Grab;
      exports.LucideGraduationCap = GraduationCap;
      exports.LucideGrape = Grape;
      exports.LucideGrid = Grid3x3;
      exports.LucideGrid2X2 = Grid2x22;
      exports.LucideGrid2X2Check = Grid2x2Check;
      exports.LucideGrid2X2Plus = Grid2x2Plus;
      exports.LucideGrid2X2X = Grid2x2X;
      exports.LucideGrid2x2 = Grid2x22;
      exports.LucideGrid2x2Check = Grid2x2Check;
      exports.LucideGrid2x2Plus = Grid2x2Plus;
      exports.LucideGrid2x2X = Grid2x2X;
      exports.LucideGrid3X3 = Grid3x3;
      exports.LucideGrid3x3 = Grid3x3;
      exports.LucideGrip = Grip;
      exports.LucideGripHorizontal = GripHorizontal;
      exports.LucideGripVertical = GripVertical;
      exports.LucideGroup = Group;
      exports.LucideGuitar = Guitar;
      exports.LucideHam = Ham;
      exports.LucideHammer = Hammer;
      exports.LucideHand = Hand;
      exports.LucideHandCoins = HandCoins;
      exports.LucideHandHeart = HandHeart;
      exports.LucideHandHelping = HandHelping;
      exports.LucideHandMetal = HandMetal;
      exports.LucideHandPlatter = HandPlatter;
      exports.LucideHandshake = Handshake;
      exports.LucideHardDrive = HardDrive;
      exports.LucideHardDriveDownload = HardDriveDownload;
      exports.LucideHardDriveUpload = HardDriveUpload;
      exports.LucideHardHat = HardHat;
      exports.LucideHash = Hash;
      exports.LucideHaze = Haze;
      exports.LucideHdmiPort = HdmiPort;
      exports.LucideHeading = Heading;
      exports.LucideHeading1 = Heading1;
      exports.LucideHeading2 = Heading2;
      exports.LucideHeading3 = Heading3;
      exports.LucideHeading4 = Heading4;
      exports.LucideHeading5 = Heading5;
      exports.LucideHeading6 = Heading6;
      exports.LucideHeadphoneOff = HeadphoneOff;
      exports.LucideHeadphones = Headphones2;
      exports.LucideHeadset = Headset;
      exports.LucideHeart = Heart3;
      exports.LucideHeartCrack = HeartCrack;
      exports.LucideHeartHandshake = HeartHandshake;
      exports.LucideHeartMinus = HeartMinus;
      exports.LucideHeartOff = HeartOff;
      exports.LucideHeartPlus = HeartPlus;
      exports.LucideHeartPulse = HeartPulse;
      exports.LucideHeater = Heater;
      exports.LucideHelpCircle = CircleHelp;
      exports.LucideHelpingHand = HandHelping;
      exports.LucideHexagon = Hexagon;
      exports.LucideHighlighter = Highlighter;
      exports.LucideHistory = History;
      exports.LucideHome = House;
      exports.LucideHop = Hop;
      exports.LucideHopOff = HopOff;
      exports.LucideHospital = Hospital;
      exports.LucideHotel = Hotel;
      exports.LucideHourglass = Hourglass;
      exports.LucideHouse = House;
      exports.LucideHousePlug = HousePlug;
      exports.LucideHousePlus = HousePlus;
      exports.LucideHouseWifi = HouseWifi;
      exports.LucideIceCream = IceCreamCone;
      exports.LucideIceCream2 = IceCreamBowl;
      exports.LucideIceCreamBowl = IceCreamBowl;
      exports.LucideIceCreamCone = IceCreamCone;
      exports.LucideIdCard = IdCard;
      exports.LucideImage = Image;
      exports.LucideImageDown = ImageDown;
      exports.LucideImageMinus = ImageMinus;
      exports.LucideImageOff = ImageOff;
      exports.LucideImagePlay = ImagePlay;
      exports.LucideImagePlus = ImagePlus;
      exports.LucideImageUp = ImageUp;
      exports.LucideImageUpscale = ImageUpscale;
      exports.LucideImages = Images;
      exports.LucideImport = Import;
      exports.LucideInbox = Inbox;
      exports.LucideIndent = IndentIncrease;
      exports.LucideIndentDecrease = IndentDecrease;
      exports.LucideIndentIncrease = IndentIncrease;
      exports.LucideIndianRupee = IndianRupee;
      exports.LucideInfinity = Infinity2;
      exports.LucideInfo = Info;
      exports.LucideInspect = SquareMousePointer;
      exports.LucideInspectionPanel = InspectionPanel;
      exports.LucideInstagram = Instagram;
      exports.LucideItalic = Italic;
      exports.LucideIterationCcw = IterationCcw;
      exports.LucideIterationCw = IterationCw;
      exports.LucideJapaneseYen = JapaneseYen;
      exports.LucideJoystick = Joystick;
      exports.LucideKanban = Kanban;
      exports.LucideKanbanSquare = SquareKanban;
      exports.LucideKanbanSquareDashed = SquareDashedKanban;
      exports.LucideKey = Key;
      exports.LucideKeyRound = KeyRound;
      exports.LucideKeySquare = KeySquare;
      exports.LucideKeyboard = Keyboard;
      exports.LucideKeyboardMusic = KeyboardMusic;
      exports.LucideKeyboardOff = KeyboardOff;
      exports.LucideLamp = Lamp;
      exports.LucideLampCeiling = LampCeiling;
      exports.LucideLampDesk = LampDesk;
      exports.LucideLampFloor = LampFloor;
      exports.LucideLampWallDown = LampWallDown;
      exports.LucideLampWallUp = LampWallUp;
      exports.LucideLandPlot = LandPlot;
      exports.LucideLandmark = Landmark;
      exports.LucideLanguages = Languages;
      exports.LucideLaptop = Laptop;
      exports.LucideLaptop2 = LaptopMinimal;
      exports.LucideLaptopMinimal = LaptopMinimal;
      exports.LucideLaptopMinimalCheck = LaptopMinimalCheck;
      exports.LucideLasso = Lasso;
      exports.LucideLassoSelect = LassoSelect;
      exports.LucideLaugh = Laugh;
      exports.LucideLayers = Layers;
      exports.LucideLayers2 = Layers2;
      exports.LucideLayers3 = Layers;
      exports.LucideLayout = PanelsTopLeft;
      exports.LucideLayoutDashboard = LayoutDashboard2;
      exports.LucideLayoutGrid = LayoutGrid;
      exports.LucideLayoutList = LayoutList;
      exports.LucideLayoutPanelLeft = LayoutPanelLeft;
      exports.LucideLayoutPanelTop = LayoutPanelTop;
      exports.LucideLayoutTemplate = LayoutTemplate;
      exports.LucideLeaf = Leaf;
      exports.LucideLeafyGreen = LeafyGreen;
      exports.LucideLectern = Lectern;
      exports.LucideLetterText = LetterText;
      exports.LucideLibrary = Library;
      exports.LucideLibraryBig = LibraryBig4;
      exports.LucideLibrarySquare = SquareLibrary;
      exports.LucideLifeBuoy = LifeBuoy;
      exports.LucideLigature = Ligature;
      exports.LucideLightbulb = Lightbulb3;
      exports.LucideLightbulbOff = LightbulbOff;
      exports.LucideLineChart = ChartLine;
      exports.LucideLink = Link3;
      exports.LucideLink2 = Link22;
      exports.LucideLink2Off = Link2Off;
      exports.LucideLinkedin = Linkedin2;
      exports.LucideList = List2;
      exports.LucideListCheck = ListCheck;
      exports.LucideListChecks = ListChecks;
      exports.LucideListCollapse = ListCollapse;
      exports.LucideListEnd = ListEnd;
      exports.LucideListFilter = ListFilter;
      exports.LucideListFilterPlus = ListFilterPlus;
      exports.LucideListMinus = ListMinus;
      exports.LucideListMusic = ListMusic;
      exports.LucideListOrdered = ListOrdered;
      exports.LucideListPlus = ListPlus;
      exports.LucideListRestart = ListRestart;
      exports.LucideListStart = ListStart;
      exports.LucideListTodo = ListTodo;
      exports.LucideListTree = ListTree;
      exports.LucideListVideo = ListVideo;
      exports.LucideListX = ListX;
      exports.LucideLoader = Loader3;
      exports.LucideLoader2 = LoaderCircle;
      exports.LucideLoaderCircle = LoaderCircle;
      exports.LucideLoaderPinwheel = LoaderPinwheel;
      exports.LucideLocate = Locate;
      exports.LucideLocateFixed = LocateFixed;
      exports.LucideLocateOff = LocateOff;
      exports.LucideLocationEdit = LocationEdit;
      exports.LucideLock = Lock;
      exports.LucideLockKeyhole = LockKeyhole;
      exports.LucideLockKeyholeOpen = LockKeyholeOpen;
      exports.LucideLockOpen = LockOpen;
      exports.LucideLogIn = LogIn;
      exports.LucideLogOut = LogOut3;
      exports.LucideLogs = Logs;
      exports.LucideLollipop = Lollipop;
      exports.LucideLuggage = Luggage;
      exports.LucideMSquare = SquareM;
      exports.LucideMagnet = Magnet;
      exports.LucideMail = Mail4;
      exports.LucideMailCheck = MailCheck;
      exports.LucideMailMinus = MailMinus;
      exports.LucideMailOpen = MailOpen;
      exports.LucideMailPlus = MailPlus;
      exports.LucideMailQuestion = MailQuestion;
      exports.LucideMailSearch = MailSearch;
      exports.LucideMailWarning = MailWarning;
      exports.LucideMailX = MailX;
      exports.LucideMailbox = Mailbox;
      exports.LucideMails = Mails;
      exports.LucideMap = Map2;
      exports.LucideMapPin = MapPin2;
      exports.LucideMapPinCheck = MapPinCheck;
      exports.LucideMapPinCheckInside = MapPinCheckInside;
      exports.LucideMapPinHouse = MapPinHouse;
      exports.LucideMapPinMinus = MapPinMinus;
      exports.LucideMapPinMinusInside = MapPinMinusInside;
      exports.LucideMapPinOff = MapPinOff;
      exports.LucideMapPinPlus = MapPinPlus;
      exports.LucideMapPinPlusInside = MapPinPlusInside;
      exports.LucideMapPinX = MapPinX;
      exports.LucideMapPinXInside = MapPinXInside;
      exports.LucideMapPinned = MapPinned;
      exports.LucideMapPlus = MapPlus;
      exports.LucideMars = Mars;
      exports.LucideMarsStroke = MarsStroke;
      exports.LucideMartini = Martini;
      exports.LucideMaximize = Maximize;
      exports.LucideMaximize2 = Maximize2;
      exports.LucideMedal = Medal;
      exports.LucideMegaphone = Megaphone;
      exports.LucideMegaphoneOff = MegaphoneOff;
      exports.LucideMeh = Meh;
      exports.LucideMemoryStick = MemoryStick;
      exports.LucideMenu = Menu2;
      exports.LucideMenuSquare = SquareMenu;
      exports.LucideMerge = Merge;
      exports.LucideMessageCircle = MessageCircle2;
      exports.LucideMessageCircleCode = MessageCircleCode;
      exports.LucideMessageCircleDashed = MessageCircleDashed;
      exports.LucideMessageCircleHeart = MessageCircleHeart;
      exports.LucideMessageCircleMore = MessageCircleMore;
      exports.LucideMessageCircleOff = MessageCircleOff;
      exports.LucideMessageCirclePlus = MessageCirclePlus;
      exports.LucideMessageCircleQuestion = MessageCircleQuestion;
      exports.LucideMessageCircleReply = MessageCircleReply;
      exports.LucideMessageCircleWarning = MessageCircleWarning;
      exports.LucideMessageCircleX = MessageCircleX;
      exports.LucideMessageSquare = MessageSquare;
      exports.LucideMessageSquareCode = MessageSquareCode;
      exports.LucideMessageSquareDashed = MessageSquareDashed;
      exports.LucideMessageSquareDiff = MessageSquareDiff;
      exports.LucideMessageSquareDot = MessageSquareDot;
      exports.LucideMessageSquareHeart = MessageSquareHeart;
      exports.LucideMessageSquareLock = MessageSquareLock;
      exports.LucideMessageSquareMore = MessageSquareMore;
      exports.LucideMessageSquareOff = MessageSquareOff;
      exports.LucideMessageSquarePlus = MessageSquarePlus;
      exports.LucideMessageSquareQuote = MessageSquareQuote;
      exports.LucideMessageSquareReply = MessageSquareReply;
      exports.LucideMessageSquareShare = MessageSquareShare;
      exports.LucideMessageSquareText = MessageSquareText;
      exports.LucideMessageSquareWarning = MessageSquareWarning;
      exports.LucideMessageSquareX = MessageSquareX;
      exports.LucideMessagesSquare = MessagesSquare;
      exports.LucideMic = Mic;
      exports.LucideMic2 = MicVocal;
      exports.LucideMicOff = MicOff;
      exports.LucideMicVocal = MicVocal;
      exports.LucideMicrochip = Microchip;
      exports.LucideMicroscope = Microscope;
      exports.LucideMicrowave = Microwave;
      exports.LucideMilestone = Milestone;
      exports.LucideMilk = Milk;
      exports.LucideMilkOff = MilkOff;
      exports.LucideMinimize = Minimize;
      exports.LucideMinimize2 = Minimize2;
      exports.LucideMinus = Minus;
      exports.LucideMinusCircle = CircleMinus;
      exports.LucideMinusSquare = SquareMinus;
      exports.LucideMonitor = Monitor;
      exports.LucideMonitorCheck = MonitorCheck;
      exports.LucideMonitorCog = MonitorCog;
      exports.LucideMonitorDot = MonitorDot;
      exports.LucideMonitorDown = MonitorDown;
      exports.LucideMonitorOff = MonitorOff;
      exports.LucideMonitorPause = MonitorPause;
      exports.LucideMonitorPlay = MonitorPlay;
      exports.LucideMonitorSmartphone = MonitorSmartphone;
      exports.LucideMonitorSpeaker = MonitorSpeaker;
      exports.LucideMonitorStop = MonitorStop;
      exports.LucideMonitorUp = MonitorUp;
      exports.LucideMonitorX = MonitorX;
      exports.LucideMoon = Moon;
      exports.LucideMoonStar = MoonStar;
      exports.LucideMoreHorizontal = Ellipsis;
      exports.LucideMoreVertical = EllipsisVertical;
      exports.LucideMountain = Mountain;
      exports.LucideMountainSnow = MountainSnow;
      exports.LucideMouse = Mouse;
      exports.LucideMouseOff = MouseOff;
      exports.LucideMousePointer = MousePointer;
      exports.LucideMousePointer2 = MousePointer2;
      exports.LucideMousePointerBan = MousePointerBan;
      exports.LucideMousePointerClick = MousePointerClick;
      exports.LucideMousePointerSquareDashed = SquareDashedMousePointer;
      exports.LucideMove = Move;
      exports.LucideMove3D = Move3d;
      exports.LucideMove3d = Move3d;
      exports.LucideMoveDiagonal = MoveDiagonal;
      exports.LucideMoveDiagonal2 = MoveDiagonal2;
      exports.LucideMoveDown = MoveDown;
      exports.LucideMoveDownLeft = MoveDownLeft;
      exports.LucideMoveDownRight = MoveDownRight;
      exports.LucideMoveHorizontal = MoveHorizontal;
      exports.LucideMoveLeft = MoveLeft;
      exports.LucideMoveRight = MoveRight;
      exports.LucideMoveUp = MoveUp;
      exports.LucideMoveUpLeft = MoveUpLeft;
      exports.LucideMoveUpRight = MoveUpRight;
      exports.LucideMoveVertical = MoveVertical;
      exports.LucideMusic = Music;
      exports.LucideMusic2 = Music2;
      exports.LucideMusic3 = Music3;
      exports.LucideMusic4 = Music4;
      exports.LucideNavigation = Navigation;
      exports.LucideNavigation2 = Navigation2;
      exports.LucideNavigation2Off = Navigation2Off;
      exports.LucideNavigationOff = NavigationOff;
      exports.LucideNetwork = Network;
      exports.LucideNewspaper = Newspaper;
      exports.LucideNfc = Nfc;
      exports.LucideNonBinary = NonBinary;
      exports.LucideNotebook = Notebook;
      exports.LucideNotebookPen = NotebookPen;
      exports.LucideNotebookTabs = NotebookTabs;
      exports.LucideNotebookText = NotebookText;
      exports.LucideNotepadText = NotepadText;
      exports.LucideNotepadTextDashed = NotepadTextDashed;
      exports.LucideNut = Nut;
      exports.LucideNutOff = NutOff;
      exports.LucideOctagon = Octagon;
      exports.LucideOctagonAlert = OctagonAlert;
      exports.LucideOctagonMinus = OctagonMinus;
      exports.LucideOctagonPause = OctagonPause;
      exports.LucideOctagonX = OctagonX;
      exports.LucideOmega = Omega;
      exports.LucideOption = Option;
      exports.LucideOrbit = Orbit;
      exports.LucideOrigami = Origami;
      exports.LucideOutdent = IndentDecrease;
      exports.LucidePackage = Package;
      exports.LucidePackage2 = Package2;
      exports.LucidePackageCheck = PackageCheck;
      exports.LucidePackageMinus = PackageMinus;
      exports.LucidePackageOpen = PackageOpen;
      exports.LucidePackagePlus = PackagePlus;
      exports.LucidePackageSearch = PackageSearch;
      exports.LucidePackageX = PackageX;
      exports.LucidePaintBucket = PaintBucket;
      exports.LucidePaintRoller = PaintRoller;
      exports.LucidePaintbrush = Paintbrush;
      exports.LucidePaintbrush2 = PaintbrushVertical;
      exports.LucidePaintbrushVertical = PaintbrushVertical;
      exports.LucidePalette = Palette;
      exports.LucidePalmtree = TreePalm;
      exports.LucidePanelBottom = PanelBottom;
      exports.LucidePanelBottomClose = PanelBottomClose;
      exports.LucidePanelBottomDashed = PanelBottomDashed;
      exports.LucidePanelBottomInactive = PanelBottomDashed;
      exports.LucidePanelBottomOpen = PanelBottomOpen;
      exports.LucidePanelLeft = PanelLeft;
      exports.LucidePanelLeftClose = PanelLeftClose2;
      exports.LucidePanelLeftDashed = PanelLeftDashed;
      exports.LucidePanelLeftInactive = PanelLeftDashed;
      exports.LucidePanelLeftOpen = PanelLeftOpen;
      exports.LucidePanelRight = PanelRight;
      exports.LucidePanelRightClose = PanelRightClose;
      exports.LucidePanelRightDashed = PanelRightDashed;
      exports.LucidePanelRightInactive = PanelRightDashed;
      exports.LucidePanelRightOpen = PanelRightOpen2;
      exports.LucidePanelTop = PanelTop;
      exports.LucidePanelTopClose = PanelTopClose;
      exports.LucidePanelTopDashed = PanelTopDashed;
      exports.LucidePanelTopInactive = PanelTopDashed;
      exports.LucidePanelTopOpen = PanelTopOpen;
      exports.LucidePanelsLeftBottom = PanelsLeftBottom;
      exports.LucidePanelsLeftRight = Columns3;
      exports.LucidePanelsRightBottom = PanelsRightBottom;
      exports.LucidePanelsTopBottom = Rows3;
      exports.LucidePanelsTopLeft = PanelsTopLeft;
      exports.LucidePaperclip = Paperclip;
      exports.LucideParentheses = Parentheses;
      exports.LucideParkingCircle = CircleParking;
      exports.LucideParkingCircleOff = CircleParkingOff;
      exports.LucideParkingMeter = ParkingMeter;
      exports.LucideParkingSquare = SquareParking;
      exports.LucideParkingSquareOff = SquareParkingOff;
      exports.LucidePartyPopper = PartyPopper;
      exports.LucidePause = Pause;
      exports.LucidePauseCircle = CirclePause;
      exports.LucidePauseOctagon = OctagonPause;
      exports.LucidePawPrint = PawPrint;
      exports.LucidePcCase = PcCase;
      exports.LucidePen = Pen;
      exports.LucidePenBox = SquarePen;
      exports.LucidePenLine = PenLine;
      exports.LucidePenOff = PenOff;
      exports.LucidePenSquare = SquarePen;
      exports.LucidePenTool = PenTool;
      exports.LucidePencil = Pencil;
      exports.LucidePencilLine = PencilLine;
      exports.LucidePencilOff = PencilOff;
      exports.LucidePencilRuler = PencilRuler;
      exports.LucidePentagon = Pentagon;
      exports.LucidePercent = Percent;
      exports.LucidePercentCircle = CirclePercent;
      exports.LucidePercentDiamond = DiamondPercent;
      exports.LucidePercentSquare = SquarePercent;
      exports.LucidePersonStanding = PersonStanding;
      exports.LucidePhilippinePeso = PhilippinePeso;
      exports.LucidePhone = Phone4;
      exports.LucidePhoneCall = PhoneCall;
      exports.LucidePhoneForwarded = PhoneForwarded;
      exports.LucidePhoneIncoming = PhoneIncoming;
      exports.LucidePhoneMissed = PhoneMissed;
      exports.LucidePhoneOff = PhoneOff;
      exports.LucidePhoneOutgoing = PhoneOutgoing;
      exports.LucidePi = Pi;
      exports.LucidePiSquare = SquarePi;
      exports.LucidePiano = Piano;
      exports.LucidePickaxe = Pickaxe;
      exports.LucidePictureInPicture = PictureInPicture;
      exports.LucidePictureInPicture2 = PictureInPicture2;
      exports.LucidePieChart = ChartPie;
      exports.LucidePiggyBank = PiggyBank;
      exports.LucidePilcrow = Pilcrow;
      exports.LucidePilcrowLeft = PilcrowLeft;
      exports.LucidePilcrowRight = PilcrowRight;
      exports.LucidePilcrowSquare = SquarePilcrow;
      exports.LucidePill = Pill;
      exports.LucidePillBottle = PillBottle;
      exports.LucidePin = Pin;
      exports.LucidePinOff = PinOff;
      exports.LucidePipette = Pipette;
      exports.LucidePizza = Pizza;
      exports.LucidePlane = Plane;
      exports.LucidePlaneLanding = PlaneLanding;
      exports.LucidePlaneTakeoff = PlaneTakeoff;
      exports.LucidePlay = Play5;
      exports.LucidePlayCircle = CirclePlay;
      exports.LucidePlaySquare = SquarePlay;
      exports.LucidePlug = Plug;
      exports.LucidePlug2 = Plug2;
      exports.LucidePlugZap = PlugZap;
      exports.LucidePlugZap2 = PlugZap;
      exports.LucidePlus = Plus2;
      exports.LucidePlusCircle = CirclePlus;
      exports.LucidePlusSquare = SquarePlus;
      exports.LucidePocket = Pocket;
      exports.LucidePocketKnife = PocketKnife;
      exports.LucidePodcast = Podcast;
      exports.LucidePointer = Pointer;
      exports.LucidePointerOff = PointerOff;
      exports.LucidePopcorn = Popcorn;
      exports.LucidePopsicle = Popsicle;
      exports.LucidePoundSterling = PoundSterling;
      exports.LucidePower = Power;
      exports.LucidePowerCircle = CirclePower;
      exports.LucidePowerOff = PowerOff;
      exports.LucidePowerSquare = SquarePower;
      exports.LucidePresentation = Presentation;
      exports.LucidePrinter = Printer;
      exports.LucidePrinterCheck = PrinterCheck;
      exports.LucideProjector = Projector;
      exports.LucideProportions = Proportions;
      exports.LucidePuzzle = Puzzle;
      exports.LucidePyramid = Pyramid;
      exports.LucideQrCode = QrCode;
      exports.LucideQuote = Quote2;
      exports.LucideRabbit = Rabbit;
      exports.LucideRadar = Radar;
      exports.LucideRadiation = Radiation;
      exports.LucideRadical = Radical;
      exports.LucideRadio = Radio;
      exports.LucideRadioReceiver = RadioReceiver;
      exports.LucideRadioTower = RadioTower;
      exports.LucideRadius = Radius;
      exports.LucideRailSymbol = RailSymbol;
      exports.LucideRainbow = Rainbow;
      exports.LucideRat = Rat;
      exports.LucideRatio = Ratio;
      exports.LucideReceipt = Receipt;
      exports.LucideReceiptCent = ReceiptCent;
      exports.LucideReceiptEuro = ReceiptEuro;
      exports.LucideReceiptIndianRupee = ReceiptIndianRupee;
      exports.LucideReceiptJapaneseYen = ReceiptJapaneseYen;
      exports.LucideReceiptPoundSterling = ReceiptPoundSterling;
      exports.LucideReceiptRussianRuble = ReceiptRussianRuble;
      exports.LucideReceiptSwissFranc = ReceiptSwissFranc;
      exports.LucideReceiptText = ReceiptText;
      exports.LucideRectangleEllipsis = RectangleEllipsis;
      exports.LucideRectangleGoggles = RectangleGoggles;
      exports.LucideRectangleHorizontal = RectangleHorizontal;
      exports.LucideRectangleVertical = RectangleVertical;
      exports.LucideRecycle = Recycle;
      exports.LucideRedo = Redo;
      exports.LucideRedo2 = Redo2;
      exports.LucideRedoDot = RedoDot;
      exports.LucideRefreshCcw = RefreshCcw;
      exports.LucideRefreshCcwDot = RefreshCcwDot;
      exports.LucideRefreshCw = RefreshCw;
      exports.LucideRefreshCwOff = RefreshCwOff;
      exports.LucideRefrigerator = Refrigerator;
      exports.LucideRegex = Regex;
      exports.LucideRemoveFormatting = RemoveFormatting;
      exports.LucideRepeat = Repeat;
      exports.LucideRepeat1 = Repeat1;
      exports.LucideRepeat2 = Repeat2;
      exports.LucideReplace = Replace;
      exports.LucideReplaceAll = ReplaceAll;
      exports.LucideReply = Reply;
      exports.LucideReplyAll = ReplyAll;
      exports.LucideRewind = Rewind;
      exports.LucideRibbon = Ribbon;
      exports.LucideRocket = Rocket;
      exports.LucideRockingChair = RockingChair;
      exports.LucideRollerCoaster = RollerCoaster;
      exports.LucideRotate3D = Rotate3d;
      exports.LucideRotate3d = Rotate3d;
      exports.LucideRotateCcw = RotateCcw;
      exports.LucideRotateCcwKey = RotateCcwKey;
      exports.LucideRotateCcwSquare = RotateCcwSquare;
      exports.LucideRotateCw = RotateCw;
      exports.LucideRotateCwSquare = RotateCwSquare;
      exports.LucideRoute = Route2;
      exports.LucideRouteOff = RouteOff;
      exports.LucideRouter = Router2;
      exports.LucideRows = Rows2;
      exports.LucideRows2 = Rows2;
      exports.LucideRows3 = Rows3;
      exports.LucideRows4 = Rows4;
      exports.LucideRss = Rss;
      exports.LucideRuler = Ruler;
      exports.LucideRulerDimensionLine = RulerDimensionLine;
      exports.LucideRussianRuble = RussianRuble;
      exports.LucideSailboat = Sailboat;
      exports.LucideSalad = Salad;
      exports.LucideSandwich = Sandwich;
      exports.LucideSatellite = Satellite;
      exports.LucideSatelliteDish = SatelliteDish;
      exports.LucideSaudiRiyal = SaudiRiyal;
      exports.LucideSave = Save;
      exports.LucideSaveAll = SaveAll;
      exports.LucideSaveOff = SaveOff;
      exports.LucideScale = Scale;
      exports.LucideScale3D = Scale3d;
      exports.LucideScale3d = Scale3d;
      exports.LucideScaling = Scaling;
      exports.LucideScan = Scan;
      exports.LucideScanBarcode = ScanBarcode;
      exports.LucideScanEye = ScanEye;
      exports.LucideScanFace = ScanFace;
      exports.LucideScanHeart = ScanHeart;
      exports.LucideScanLine = ScanLine;
      exports.LucideScanQrCode = ScanQrCode;
      exports.LucideScanSearch = ScanSearch;
      exports.LucideScanText = ScanText;
      exports.LucideScatterChart = ChartScatter;
      exports.LucideSchool = School;
      exports.LucideSchool2 = University;
      exports.LucideScissors = Scissors;
      exports.LucideScissorsLineDashed = ScissorsLineDashed;
      exports.LucideScissorsSquare = SquareScissors;
      exports.LucideScissorsSquareDashedBottom = SquareBottomDashedScissors;
      exports.LucideScreenShare = ScreenShare;
      exports.LucideScreenShareOff = ScreenShareOff;
      exports.LucideScroll = Scroll;
      exports.LucideScrollText = ScrollText;
      exports.LucideSearch = Search2;
      exports.LucideSearchCheck = SearchCheck;
      exports.LucideSearchCode = SearchCode;
      exports.LucideSearchSlash = SearchSlash;
      exports.LucideSearchX = SearchX;
      exports.LucideSection = Section;
      exports.LucideSend = Send;
      exports.LucideSendHorizonal = SendHorizontal;
      exports.LucideSendHorizontal = SendHorizontal;
      exports.LucideSendToBack = SendToBack;
      exports.LucideSeparatorHorizontal = SeparatorHorizontal;
      exports.LucideSeparatorVertical = SeparatorVertical;
      exports.LucideServer = Server;
      exports.LucideServerCog = ServerCog;
      exports.LucideServerCrash = ServerCrash;
      exports.LucideServerOff = ServerOff;
      exports.LucideSettings = Settings3;
      exports.LucideSettings2 = Settings2;
      exports.LucideShapes = Shapes;
      exports.LucideShare = Share;
      exports.LucideShare2 = Share2;
      exports.LucideSheet = Sheet;
      exports.LucideShell = Shell;
      exports.LucideShield = Shield2;
      exports.LucideShieldAlert = ShieldAlert;
      exports.LucideShieldBan = ShieldBan;
      exports.LucideShieldCheck = ShieldCheck;
      exports.LucideShieldClose = ShieldX;
      exports.LucideShieldEllipsis = ShieldEllipsis;
      exports.LucideShieldHalf = ShieldHalf;
      exports.LucideShieldMinus = ShieldMinus;
      exports.LucideShieldOff = ShieldOff;
      exports.LucideShieldPlus = ShieldPlus;
      exports.LucideShieldQuestion = ShieldQuestion;
      exports.LucideShieldUser = ShieldUser;
      exports.LucideShieldX = ShieldX;
      exports.LucideShip = Ship;
      exports.LucideShipWheel = ShipWheel;
      exports.LucideShirt = Shirt;
      exports.LucideShoppingBag = ShoppingBag;
      exports.LucideShoppingBasket = ShoppingBasket;
      exports.LucideShoppingCart = ShoppingCart;
      exports.LucideShovel = Shovel;
      exports.LucideShowerHead = ShowerHead;
      exports.LucideShredder = Shredder;
      exports.LucideShrimp = Shrimp;
      exports.LucideShrink = Shrink;
      exports.LucideShrub = Shrub;
      exports.LucideShuffle = Shuffle;
      exports.LucideSidebar = PanelLeft;
      exports.LucideSidebarClose = PanelLeftClose2;
      exports.LucideSidebarOpen = PanelLeftOpen;
      exports.LucideSigma = Sigma;
      exports.LucideSigmaSquare = SquareSigma;
      exports.LucideSignal = Signal;
      exports.LucideSignalHigh = SignalHigh;
      exports.LucideSignalLow = SignalLow;
      exports.LucideSignalMedium = SignalMedium;
      exports.LucideSignalZero = SignalZero;
      exports.LucideSignature = Signature;
      exports.LucideSignpost = Signpost;
      exports.LucideSignpostBig = SignpostBig;
      exports.LucideSiren = Siren;
      exports.LucideSkipBack = SkipBack;
      exports.LucideSkipForward = SkipForward;
      exports.LucideSkull = Skull;
      exports.LucideSlack = Slack;
      exports.LucideSlash = Slash;
      exports.LucideSlashSquare = SquareSlash;
      exports.LucideSlice = Slice;
      exports.LucideSliders = SlidersVertical;
      exports.LucideSlidersHorizontal = SlidersHorizontal;
      exports.LucideSlidersVertical = SlidersVertical;
      exports.LucideSmartphone = Smartphone;
      exports.LucideSmartphoneCharging = SmartphoneCharging;
      exports.LucideSmartphoneNfc = SmartphoneNfc;
      exports.LucideSmile = Smile;
      exports.LucideSmilePlus = SmilePlus;
      exports.LucideSnail = Snail;
      exports.LucideSnowflake = Snowflake;
      exports.LucideSofa = Sofa;
      exports.LucideSortAsc = ArrowUpNarrowWide;
      exports.LucideSortDesc = ArrowDownWideNarrow;
      exports.LucideSoup = Soup;
      exports.LucideSpace = Space;
      exports.LucideSpade = Spade;
      exports.LucideSparkle = Sparkle;
      exports.LucideSparkles = Sparkles;
      exports.LucideSpeaker = Speaker;
      exports.LucideSpeech = Speech;
      exports.LucideSpellCheck = SpellCheck;
      exports.LucideSpellCheck2 = SpellCheck2;
      exports.LucideSpline = Spline;
      exports.LucideSplinePointer = SplinePointer;
      exports.LucideSplit = Split;
      exports.LucideSplitSquareHorizontal = SquareSplitHorizontal;
      exports.LucideSplitSquareVertical = SquareSplitVertical;
      exports.LucideSprayCan = SprayCan;
      exports.LucideSprout = Sprout;
      exports.LucideSquare = Square;
      exports.LucideSquareActivity = SquareActivity;
      exports.LucideSquareArrowDown = SquareArrowDown;
      exports.LucideSquareArrowDownLeft = SquareArrowDownLeft;
      exports.LucideSquareArrowDownRight = SquareArrowDownRight;
      exports.LucideSquareArrowLeft = SquareArrowLeft;
      exports.LucideSquareArrowOutDownLeft = SquareArrowOutDownLeft;
      exports.LucideSquareArrowOutDownRight = SquareArrowOutDownRight;
      exports.LucideSquareArrowOutUpLeft = SquareArrowOutUpLeft;
      exports.LucideSquareArrowOutUpRight = SquareArrowOutUpRight;
      exports.LucideSquareArrowRight = SquareArrowRight;
      exports.LucideSquareArrowUp = SquareArrowUp;
      exports.LucideSquareArrowUpLeft = SquareArrowUpLeft;
      exports.LucideSquareArrowUpRight = SquareArrowUpRight;
      exports.LucideSquareAsterisk = SquareAsterisk;
      exports.LucideSquareBottomDashedScissors = SquareBottomDashedScissors;
      exports.LucideSquareChartGantt = SquareChartGantt;
      exports.LucideSquareCheck = SquareCheck;
      exports.LucideSquareCheckBig = SquareCheckBig;
      exports.LucideSquareChevronDown = SquareChevronDown;
      exports.LucideSquareChevronLeft = SquareChevronLeft;
      exports.LucideSquareChevronRight = SquareChevronRight;
      exports.LucideSquareChevronUp = SquareChevronUp;
      exports.LucideSquareCode = SquareCode;
      exports.LucideSquareDashed = SquareDashed;
      exports.LucideSquareDashedBottom = SquareDashedBottom;
      exports.LucideSquareDashedBottomCode = SquareDashedBottomCode;
      exports.LucideSquareDashedKanban = SquareDashedKanban;
      exports.LucideSquareDashedMousePointer = SquareDashedMousePointer;
      exports.LucideSquareDivide = SquareDivide;
      exports.LucideSquareDot = SquareDot;
      exports.LucideSquareEqual = SquareEqual;
      exports.LucideSquareFunction = SquareFunction;
      exports.LucideSquareGanttChart = SquareChartGantt;
      exports.LucideSquareKanban = SquareKanban;
      exports.LucideSquareLibrary = SquareLibrary;
      exports.LucideSquareM = SquareM;
      exports.LucideSquareMenu = SquareMenu;
      exports.LucideSquareMinus = SquareMinus;
      exports.LucideSquareMousePointer = SquareMousePointer;
      exports.LucideSquareParking = SquareParking;
      exports.LucideSquareParkingOff = SquareParkingOff;
      exports.LucideSquarePen = SquarePen;
      exports.LucideSquarePercent = SquarePercent;
      exports.LucideSquarePi = SquarePi;
      exports.LucideSquarePilcrow = SquarePilcrow;
      exports.LucideSquarePlay = SquarePlay;
      exports.LucideSquarePlus = SquarePlus;
      exports.LucideSquarePower = SquarePower;
      exports.LucideSquareRadical = SquareRadical;
      exports.LucideSquareRoundCorner = SquareRoundCorner;
      exports.LucideSquareScissors = SquareScissors;
      exports.LucideSquareSigma = SquareSigma;
      exports.LucideSquareSlash = SquareSlash;
      exports.LucideSquareSplitHorizontal = SquareSplitHorizontal;
      exports.LucideSquareSplitVertical = SquareSplitVertical;
      exports.LucideSquareSquare = SquareSquare;
      exports.LucideSquareStack = SquareStack;
      exports.LucideSquareTerminal = SquareTerminal;
      exports.LucideSquareUser = SquareUser;
      exports.LucideSquareUserRound = SquareUserRound;
      exports.LucideSquareX = SquareX;
      exports.LucideSquaresExclude = SquaresExclude;
      exports.LucideSquaresIntersect = SquaresIntersect;
      exports.LucideSquaresSubtract = SquaresSubtract;
      exports.LucideSquaresUnite = SquaresUnite;
      exports.LucideSquircle = Squircle;
      exports.LucideSquirrel = Squirrel;
      exports.LucideStamp = Stamp;
      exports.LucideStar = Star;
      exports.LucideStarHalf = StarHalf;
      exports.LucideStarOff = StarOff;
      exports.LucideStars = Sparkles;
      exports.LucideStepBack = StepBack;
      exports.LucideStepForward = StepForward;
      exports.LucideStethoscope = Stethoscope3;
      exports.LucideSticker = Sticker;
      exports.LucideStickyNote = StickyNote;
      exports.LucideStopCircle = CircleStop;
      exports.LucideStore = Store;
      exports.LucideStretchHorizontal = StretchHorizontal;
      exports.LucideStretchVertical = StretchVertical;
      exports.LucideStrikethrough = Strikethrough;
      exports.LucideSubscript = Subscript;
      exports.LucideSubtitles = Captions;
      exports.LucideSun = Sun;
      exports.LucideSunDim = SunDim;
      exports.LucideSunMedium = SunMedium;
      exports.LucideSunMoon = SunMoon;
      exports.LucideSunSnow = SunSnow;
      exports.LucideSunrise = Sunrise;
      exports.LucideSunset = Sunset;
      exports.LucideSuperscript = Superscript;
      exports.LucideSwatchBook = SwatchBook;
      exports.LucideSwissFranc = SwissFranc;
      exports.LucideSwitchCamera = SwitchCamera;
      exports.LucideSword = Sword;
      exports.LucideSwords = Swords;
      exports.LucideSyringe = Syringe;
      exports.LucideTable = Table;
      exports.LucideTable2 = Table2;
      exports.LucideTableCellsMerge = TableCellsMerge;
      exports.LucideTableCellsSplit = TableCellsSplit;
      exports.LucideTableColumnsSplit = TableColumnsSplit;
      exports.LucideTableConfig = Columns3Cog;
      exports.LucideTableOfContents = TableOfContents;
      exports.LucideTableProperties = TableProperties;
      exports.LucideTableRowsSplit = TableRowsSplit;
      exports.LucideTablet = Tablet;
      exports.LucideTabletSmartphone = TabletSmartphone;
      exports.LucideTablets = Tablets;
      exports.LucideTag = Tag;
      exports.LucideTags = Tags;
      exports.LucideTally1 = Tally1;
      exports.LucideTally2 = Tally2;
      exports.LucideTally3 = Tally3;
      exports.LucideTally4 = Tally4;
      exports.LucideTally5 = Tally5;
      exports.LucideTangent = Tangent;
      exports.LucideTarget = Target2;
      exports.LucideTelescope = Telescope;
      exports.LucideTent = Tent;
      exports.LucideTentTree = TentTree;
      exports.LucideTerminal = Terminal;
      exports.LucideTerminalSquare = SquareTerminal;
      exports.LucideTestTube = TestTube;
      exports.LucideTestTube2 = TestTubeDiagonal;
      exports.LucideTestTubeDiagonal = TestTubeDiagonal;
      exports.LucideTestTubes = TestTubes2;
      exports.LucideText = Text;
      exports.LucideTextCursor = TextCursor;
      exports.LucideTextCursorInput = TextCursorInput;
      exports.LucideTextQuote = TextQuote;
      exports.LucideTextSearch = TextSearch;
      exports.LucideTextSelect = TextSelect;
      exports.LucideTextSelection = TextSelect;
      exports.LucideTheater = Theater;
      exports.LucideThermometer = Thermometer;
      exports.LucideThermometerSnowflake = ThermometerSnowflake;
      exports.LucideThermometerSun = ThermometerSun;
      exports.LucideThumbsDown = ThumbsDown;
      exports.LucideThumbsUp = ThumbsUp;
      exports.LucideTicket = Ticket;
      exports.LucideTicketCheck = TicketCheck;
      exports.LucideTicketMinus = TicketMinus;
      exports.LucideTicketPercent = TicketPercent;
      exports.LucideTicketPlus = TicketPlus;
      exports.LucideTicketSlash = TicketSlash;
      exports.LucideTicketX = TicketX;
      exports.LucideTickets = Tickets;
      exports.LucideTicketsPlane = TicketsPlane;
      exports.LucideTimer = Timer2;
      exports.LucideTimerOff = TimerOff;
      exports.LucideTimerReset = TimerReset;
      exports.LucideToggleLeft = ToggleLeft;
      exports.LucideToggleRight = ToggleRight;
      exports.LucideToilet = Toilet;
      exports.LucideTornado = Tornado;
      exports.LucideTorus = Torus;
      exports.LucideTouchpad = Touchpad;
      exports.LucideTouchpadOff = TouchpadOff;
      exports.LucideTowerControl = TowerControl;
      exports.LucideToyBrick = ToyBrick;
      exports.LucideTractor = Tractor;
      exports.LucideTrafficCone = TrafficCone;
      exports.LucideTrain = TramFront;
      exports.LucideTrainFront = TrainFront;
      exports.LucideTrainFrontTunnel = TrainFrontTunnel;
      exports.LucideTrainTrack = TrainTrack;
      exports.LucideTramFront = TramFront;
      exports.LucideTransgender = Transgender;
      exports.LucideTrash = Trash;
      exports.LucideTrash2 = Trash2;
      exports.LucideTreeDeciduous = TreeDeciduous;
      exports.LucideTreePalm = TreePalm;
      exports.LucideTreePine = TreePine;
      exports.LucideTrees = Trees;
      exports.LucideTrello = Trello;
      exports.LucideTrendingDown = TrendingDown;
      exports.LucideTrendingUp = TrendingUp2;
      exports.LucideTrendingUpDown = TrendingUpDown;
      exports.LucideTriangle = Triangle;
      exports.LucideTriangleAlert = TriangleAlert;
      exports.LucideTriangleDashed = TriangleDashed;
      exports.LucideTriangleRight = TriangleRight;
      exports.LucideTrophy = Trophy;
      exports.LucideTruck = Truck;
      exports.LucideTruckElectric = TruckElectric;
      exports.LucideTurtle = Turtle;
      exports.LucideTv = Tv;
      exports.LucideTv2 = TvMinimal;
      exports.LucideTvMinimal = TvMinimal;
      exports.LucideTvMinimalPlay = TvMinimalPlay;
      exports.LucideTwitch = Twitch;
      exports.LucideTwitter = Twitter2;
      exports.LucideType = Type;
      exports.LucideTypeOutline = TypeOutline;
      exports.LucideUmbrella = Umbrella;
      exports.LucideUmbrellaOff = UmbrellaOff;
      exports.LucideUnderline = Underline;
      exports.LucideUndo = Undo;
      exports.LucideUndo2 = Undo2;
      exports.LucideUndoDot = UndoDot;
      exports.LucideUnfoldHorizontal = UnfoldHorizontal;
      exports.LucideUnfoldVertical = UnfoldVertical;
      exports.LucideUngroup = Ungroup;
      exports.LucideUniversity = University;
      exports.LucideUnlink = Unlink;
      exports.LucideUnlink2 = Unlink2;
      exports.LucideUnlock = LockOpen;
      exports.LucideUnlockKeyhole = LockKeyholeOpen;
      exports.LucideUnplug = Unplug;
      exports.LucideUpload = Upload;
      exports.LucideUploadCloud = CloudUpload;
      exports.LucideUsb = Usb;
      exports.LucideUser = User;
      exports.LucideUser2 = UserRound;
      exports.LucideUserCheck = UserCheck;
      exports.LucideUserCheck2 = UserRoundCheck;
      exports.LucideUserCircle = CircleUser;
      exports.LucideUserCircle2 = CircleUserRound;
      exports.LucideUserCog = UserCog;
      exports.LucideUserCog2 = UserRoundCog;
      exports.LucideUserLock = UserLock;
      exports.LucideUserMinus = UserMinus;
      exports.LucideUserMinus2 = UserRoundMinus;
      exports.LucideUserPen = UserPen;
      exports.LucideUserPlus = UserPlus;
      exports.LucideUserPlus2 = UserRoundPlus;
      exports.LucideUserRound = UserRound;
      exports.LucideUserRoundCheck = UserRoundCheck;
      exports.LucideUserRoundCog = UserRoundCog;
      exports.LucideUserRoundMinus = UserRoundMinus;
      exports.LucideUserRoundPen = UserRoundPen;
      exports.LucideUserRoundPlus = UserRoundPlus;
      exports.LucideUserRoundSearch = UserRoundSearch;
      exports.LucideUserRoundX = UserRoundX;
      exports.LucideUserSearch = UserSearch;
      exports.LucideUserSquare = SquareUser;
      exports.LucideUserSquare2 = SquareUserRound;
      exports.LucideUserX = UserX;
      exports.LucideUserX2 = UserRoundX;
      exports.LucideUsers = Users3;
      exports.LucideUsers2 = UsersRound;
      exports.LucideUsersRound = UsersRound;
      exports.LucideUtensils = Utensils;
      exports.LucideUtensilsCrossed = UtensilsCrossed;
      exports.LucideUtilityPole = UtilityPole;
      exports.LucideVariable = Variable;
      exports.LucideVault = Vault;
      exports.LucideVegan = Vegan;
      exports.LucideVenetianMask = VenetianMask;
      exports.LucideVenus = Venus;
      exports.LucideVenusAndMars = VenusAndMars;
      exports.LucideVerified = BadgeCheck;
      exports.LucideVibrate = Vibrate;
      exports.LucideVibrateOff = VibrateOff;
      exports.LucideVideo = Video2;
      exports.LucideVideoOff = VideoOff;
      exports.LucideVideotape = Videotape;
      exports.LucideView = View;
      exports.LucideVoicemail = Voicemail;
      exports.LucideVolleyball = Volleyball;
      exports.LucideVolume = Volume;
      exports.LucideVolume1 = Volume1;
      exports.LucideVolume2 = Volume2;
      exports.LucideVolumeOff = VolumeOff;
      exports.LucideVolumeX = VolumeX;
      exports.LucideVote = Vote;
      exports.LucideWallet = Wallet;
      exports.LucideWallet2 = WalletMinimal;
      exports.LucideWalletCards = WalletCards;
      exports.LucideWalletMinimal = WalletMinimal;
      exports.LucideWallpaper = Wallpaper;
      exports.LucideWand = Wand;
      exports.LucideWand2 = WandSparkles;
      exports.LucideWandSparkles = WandSparkles;
      exports.LucideWarehouse = Warehouse;
      exports.LucideWashingMachine = WashingMachine;
      exports.LucideWatch = Watch;
      exports.LucideWaves = Waves;
      exports.LucideWavesLadder = WavesLadder;
      exports.LucideWaypoints = Waypoints;
      exports.LucideWebcam = Webcam;
      exports.LucideWebhook = Webhook;
      exports.LucideWebhookOff = WebhookOff;
      exports.LucideWeight = Weight;
      exports.LucideWheat = Wheat;
      exports.LucideWheatOff = WheatOff;
      exports.LucideWholeWord = WholeWord;
      exports.LucideWifi = Wifi;
      exports.LucideWifiHigh = WifiHigh;
      exports.LucideWifiLow = WifiLow;
      exports.LucideWifiOff = WifiOff;
      exports.LucideWifiPen = WifiPen;
      exports.LucideWifiZero = WifiZero;
      exports.LucideWind = Wind;
      exports.LucideWindArrowDown = WindArrowDown;
      exports.LucideWine = Wine;
      exports.LucideWineOff = WineOff;
      exports.LucideWorkflow = Workflow;
      exports.LucideWorm = Worm;
      exports.LucideWrapText = WrapText;
      exports.LucideWrench = Wrench;
      exports.LucideX = X3;
      exports.LucideXCircle = CircleX;
      exports.LucideXOctagon = OctagonX;
      exports.LucideXSquare = SquareX;
      exports.LucideYoutube = Youtube;
      exports.LucideZap = Zap3;
      exports.LucideZapOff = ZapOff;
      exports.LucideZoomIn = ZoomIn;
      exports.LucideZoomOut = ZoomOut;
      exports.Luggage = Luggage;
      exports.LuggageIcon = Luggage;
      exports.MSquare = SquareM;
      exports.MSquareIcon = SquareM;
      exports.Magnet = Magnet;
      exports.MagnetIcon = Magnet;
      exports.Mail = Mail4;
      exports.MailCheck = MailCheck;
      exports.MailCheckIcon = MailCheck;
      exports.MailIcon = Mail4;
      exports.MailMinus = MailMinus;
      exports.MailMinusIcon = MailMinus;
      exports.MailOpen = MailOpen;
      exports.MailOpenIcon = MailOpen;
      exports.MailPlus = MailPlus;
      exports.MailPlusIcon = MailPlus;
      exports.MailQuestion = MailQuestion;
      exports.MailQuestionIcon = MailQuestion;
      exports.MailSearch = MailSearch;
      exports.MailSearchIcon = MailSearch;
      exports.MailWarning = MailWarning;
      exports.MailWarningIcon = MailWarning;
      exports.MailX = MailX;
      exports.MailXIcon = MailX;
      exports.Mailbox = Mailbox;
      exports.MailboxIcon = Mailbox;
      exports.Mails = Mails;
      exports.MailsIcon = Mails;
      exports.Map = Map2;
      exports.MapIcon = Map2;
      exports.MapPin = MapPin2;
      exports.MapPinCheck = MapPinCheck;
      exports.MapPinCheckIcon = MapPinCheck;
      exports.MapPinCheckInside = MapPinCheckInside;
      exports.MapPinCheckInsideIcon = MapPinCheckInside;
      exports.MapPinHouse = MapPinHouse;
      exports.MapPinHouseIcon = MapPinHouse;
      exports.MapPinIcon = MapPin2;
      exports.MapPinMinus = MapPinMinus;
      exports.MapPinMinusIcon = MapPinMinus;
      exports.MapPinMinusInside = MapPinMinusInside;
      exports.MapPinMinusInsideIcon = MapPinMinusInside;
      exports.MapPinOff = MapPinOff;
      exports.MapPinOffIcon = MapPinOff;
      exports.MapPinPlus = MapPinPlus;
      exports.MapPinPlusIcon = MapPinPlus;
      exports.MapPinPlusInside = MapPinPlusInside;
      exports.MapPinPlusInsideIcon = MapPinPlusInside;
      exports.MapPinX = MapPinX;
      exports.MapPinXIcon = MapPinX;
      exports.MapPinXInside = MapPinXInside;
      exports.MapPinXInsideIcon = MapPinXInside;
      exports.MapPinned = MapPinned;
      exports.MapPinnedIcon = MapPinned;
      exports.MapPlus = MapPlus;
      exports.MapPlusIcon = MapPlus;
      exports.Mars = Mars;
      exports.MarsIcon = Mars;
      exports.MarsStroke = MarsStroke;
      exports.MarsStrokeIcon = MarsStroke;
      exports.Martini = Martini;
      exports.MartiniIcon = Martini;
      exports.Maximize = Maximize;
      exports.Maximize2 = Maximize2;
      exports.Maximize2Icon = Maximize2;
      exports.MaximizeIcon = Maximize;
      exports.Medal = Medal;
      exports.MedalIcon = Medal;
      exports.Megaphone = Megaphone;
      exports.MegaphoneIcon = Megaphone;
      exports.MegaphoneOff = MegaphoneOff;
      exports.MegaphoneOffIcon = MegaphoneOff;
      exports.Meh = Meh;
      exports.MehIcon = Meh;
      exports.MemoryStick = MemoryStick;
      exports.MemoryStickIcon = MemoryStick;
      exports.Menu = Menu2;
      exports.MenuIcon = Menu2;
      exports.MenuSquare = SquareMenu;
      exports.MenuSquareIcon = SquareMenu;
      exports.Merge = Merge;
      exports.MergeIcon = Merge;
      exports.MessageCircle = MessageCircle2;
      exports.MessageCircleCode = MessageCircleCode;
      exports.MessageCircleCodeIcon = MessageCircleCode;
      exports.MessageCircleDashed = MessageCircleDashed;
      exports.MessageCircleDashedIcon = MessageCircleDashed;
      exports.MessageCircleHeart = MessageCircleHeart;
      exports.MessageCircleHeartIcon = MessageCircleHeart;
      exports.MessageCircleIcon = MessageCircle2;
      exports.MessageCircleMore = MessageCircleMore;
      exports.MessageCircleMoreIcon = MessageCircleMore;
      exports.MessageCircleOff = MessageCircleOff;
      exports.MessageCircleOffIcon = MessageCircleOff;
      exports.MessageCirclePlus = MessageCirclePlus;
      exports.MessageCirclePlusIcon = MessageCirclePlus;
      exports.MessageCircleQuestion = MessageCircleQuestion;
      exports.MessageCircleQuestionIcon = MessageCircleQuestion;
      exports.MessageCircleReply = MessageCircleReply;
      exports.MessageCircleReplyIcon = MessageCircleReply;
      exports.MessageCircleWarning = MessageCircleWarning;
      exports.MessageCircleWarningIcon = MessageCircleWarning;
      exports.MessageCircleX = MessageCircleX;
      exports.MessageCircleXIcon = MessageCircleX;
      exports.MessageSquare = MessageSquare;
      exports.MessageSquareCode = MessageSquareCode;
      exports.MessageSquareCodeIcon = MessageSquareCode;
      exports.MessageSquareDashed = MessageSquareDashed;
      exports.MessageSquareDashedIcon = MessageSquareDashed;
      exports.MessageSquareDiff = MessageSquareDiff;
      exports.MessageSquareDiffIcon = MessageSquareDiff;
      exports.MessageSquareDot = MessageSquareDot;
      exports.MessageSquareDotIcon = MessageSquareDot;
      exports.MessageSquareHeart = MessageSquareHeart;
      exports.MessageSquareHeartIcon = MessageSquareHeart;
      exports.MessageSquareIcon = MessageSquare;
      exports.MessageSquareLock = MessageSquareLock;
      exports.MessageSquareLockIcon = MessageSquareLock;
      exports.MessageSquareMore = MessageSquareMore;
      exports.MessageSquareMoreIcon = MessageSquareMore;
      exports.MessageSquareOff = MessageSquareOff;
      exports.MessageSquareOffIcon = MessageSquareOff;
      exports.MessageSquarePlus = MessageSquarePlus;
      exports.MessageSquarePlusIcon = MessageSquarePlus;
      exports.MessageSquareQuote = MessageSquareQuote;
      exports.MessageSquareQuoteIcon = MessageSquareQuote;
      exports.MessageSquareReply = MessageSquareReply;
      exports.MessageSquareReplyIcon = MessageSquareReply;
      exports.MessageSquareShare = MessageSquareShare;
      exports.MessageSquareShareIcon = MessageSquareShare;
      exports.MessageSquareText = MessageSquareText;
      exports.MessageSquareTextIcon = MessageSquareText;
      exports.MessageSquareWarning = MessageSquareWarning;
      exports.MessageSquareWarningIcon = MessageSquareWarning;
      exports.MessageSquareX = MessageSquareX;
      exports.MessageSquareXIcon = MessageSquareX;
      exports.MessagesSquare = MessagesSquare;
      exports.MessagesSquareIcon = MessagesSquare;
      exports.Mic = Mic;
      exports.Mic2 = MicVocal;
      exports.Mic2Icon = MicVocal;
      exports.MicIcon = Mic;
      exports.MicOff = MicOff;
      exports.MicOffIcon = MicOff;
      exports.MicVocal = MicVocal;
      exports.MicVocalIcon = MicVocal;
      exports.Microchip = Microchip;
      exports.MicrochipIcon = Microchip;
      exports.Microscope = Microscope;
      exports.MicroscopeIcon = Microscope;
      exports.Microwave = Microwave;
      exports.MicrowaveIcon = Microwave;
      exports.Milestone = Milestone;
      exports.MilestoneIcon = Milestone;
      exports.Milk = Milk;
      exports.MilkIcon = Milk;
      exports.MilkOff = MilkOff;
      exports.MilkOffIcon = MilkOff;
      exports.Minimize = Minimize;
      exports.Minimize2 = Minimize2;
      exports.Minimize2Icon = Minimize2;
      exports.MinimizeIcon = Minimize;
      exports.Minus = Minus;
      exports.MinusCircle = CircleMinus;
      exports.MinusCircleIcon = CircleMinus;
      exports.MinusIcon = Minus;
      exports.MinusSquare = SquareMinus;
      exports.MinusSquareIcon = SquareMinus;
      exports.Monitor = Monitor;
      exports.MonitorCheck = MonitorCheck;
      exports.MonitorCheckIcon = MonitorCheck;
      exports.MonitorCog = MonitorCog;
      exports.MonitorCogIcon = MonitorCog;
      exports.MonitorDot = MonitorDot;
      exports.MonitorDotIcon = MonitorDot;
      exports.MonitorDown = MonitorDown;
      exports.MonitorDownIcon = MonitorDown;
      exports.MonitorIcon = Monitor;
      exports.MonitorOff = MonitorOff;
      exports.MonitorOffIcon = MonitorOff;
      exports.MonitorPause = MonitorPause;
      exports.MonitorPauseIcon = MonitorPause;
      exports.MonitorPlay = MonitorPlay;
      exports.MonitorPlayIcon = MonitorPlay;
      exports.MonitorSmartphone = MonitorSmartphone;
      exports.MonitorSmartphoneIcon = MonitorSmartphone;
      exports.MonitorSpeaker = MonitorSpeaker;
      exports.MonitorSpeakerIcon = MonitorSpeaker;
      exports.MonitorStop = MonitorStop;
      exports.MonitorStopIcon = MonitorStop;
      exports.MonitorUp = MonitorUp;
      exports.MonitorUpIcon = MonitorUp;
      exports.MonitorX = MonitorX;
      exports.MonitorXIcon = MonitorX;
      exports.Moon = Moon;
      exports.MoonIcon = Moon;
      exports.MoonStar = MoonStar;
      exports.MoonStarIcon = MoonStar;
      exports.MoreHorizontal = Ellipsis;
      exports.MoreHorizontalIcon = Ellipsis;
      exports.MoreVertical = EllipsisVertical;
      exports.MoreVerticalIcon = EllipsisVertical;
      exports.Mountain = Mountain;
      exports.MountainIcon = Mountain;
      exports.MountainSnow = MountainSnow;
      exports.MountainSnowIcon = MountainSnow;
      exports.Mouse = Mouse;
      exports.MouseIcon = Mouse;
      exports.MouseOff = MouseOff;
      exports.MouseOffIcon = MouseOff;
      exports.MousePointer = MousePointer;
      exports.MousePointer2 = MousePointer2;
      exports.MousePointer2Icon = MousePointer2;
      exports.MousePointerBan = MousePointerBan;
      exports.MousePointerBanIcon = MousePointerBan;
      exports.MousePointerClick = MousePointerClick;
      exports.MousePointerClickIcon = MousePointerClick;
      exports.MousePointerIcon = MousePointer;
      exports.MousePointerSquareDashed = SquareDashedMousePointer;
      exports.MousePointerSquareDashedIcon = SquareDashedMousePointer;
      exports.Move = Move;
      exports.Move3D = Move3d;
      exports.Move3DIcon = Move3d;
      exports.Move3d = Move3d;
      exports.Move3dIcon = Move3d;
      exports.MoveDiagonal = MoveDiagonal;
      exports.MoveDiagonal2 = MoveDiagonal2;
      exports.MoveDiagonal2Icon = MoveDiagonal2;
      exports.MoveDiagonalIcon = MoveDiagonal;
      exports.MoveDown = MoveDown;
      exports.MoveDownIcon = MoveDown;
      exports.MoveDownLeft = MoveDownLeft;
      exports.MoveDownLeftIcon = MoveDownLeft;
      exports.MoveDownRight = MoveDownRight;
      exports.MoveDownRightIcon = MoveDownRight;
      exports.MoveHorizontal = MoveHorizontal;
      exports.MoveHorizontalIcon = MoveHorizontal;
      exports.MoveIcon = Move;
      exports.MoveLeft = MoveLeft;
      exports.MoveLeftIcon = MoveLeft;
      exports.MoveRight = MoveRight;
      exports.MoveRightIcon = MoveRight;
      exports.MoveUp = MoveUp;
      exports.MoveUpIcon = MoveUp;
      exports.MoveUpLeft = MoveUpLeft;
      exports.MoveUpLeftIcon = MoveUpLeft;
      exports.MoveUpRight = MoveUpRight;
      exports.MoveUpRightIcon = MoveUpRight;
      exports.MoveVertical = MoveVertical;
      exports.MoveVerticalIcon = MoveVertical;
      exports.Music = Music;
      exports.Music2 = Music2;
      exports.Music2Icon = Music2;
      exports.Music3 = Music3;
      exports.Music3Icon = Music3;
      exports.Music4 = Music4;
      exports.Music4Icon = Music4;
      exports.MusicIcon = Music;
      exports.Navigation = Navigation;
      exports.Navigation2 = Navigation2;
      exports.Navigation2Icon = Navigation2;
      exports.Navigation2Off = Navigation2Off;
      exports.Navigation2OffIcon = Navigation2Off;
      exports.NavigationIcon = Navigation;
      exports.NavigationOff = NavigationOff;
      exports.NavigationOffIcon = NavigationOff;
      exports.Network = Network;
      exports.NetworkIcon = Network;
      exports.Newspaper = Newspaper;
      exports.NewspaperIcon = Newspaper;
      exports.Nfc = Nfc;
      exports.NfcIcon = Nfc;
      exports.NonBinary = NonBinary;
      exports.NonBinaryIcon = NonBinary;
      exports.Notebook = Notebook;
      exports.NotebookIcon = Notebook;
      exports.NotebookPen = NotebookPen;
      exports.NotebookPenIcon = NotebookPen;
      exports.NotebookTabs = NotebookTabs;
      exports.NotebookTabsIcon = NotebookTabs;
      exports.NotebookText = NotebookText;
      exports.NotebookTextIcon = NotebookText;
      exports.NotepadText = NotepadText;
      exports.NotepadTextDashed = NotepadTextDashed;
      exports.NotepadTextDashedIcon = NotepadTextDashed;
      exports.NotepadTextIcon = NotepadText;
      exports.Nut = Nut;
      exports.NutIcon = Nut;
      exports.NutOff = NutOff;
      exports.NutOffIcon = NutOff;
      exports.Octagon = Octagon;
      exports.OctagonAlert = OctagonAlert;
      exports.OctagonAlertIcon = OctagonAlert;
      exports.OctagonIcon = Octagon;
      exports.OctagonMinus = OctagonMinus;
      exports.OctagonMinusIcon = OctagonMinus;
      exports.OctagonPause = OctagonPause;
      exports.OctagonPauseIcon = OctagonPause;
      exports.OctagonX = OctagonX;
      exports.OctagonXIcon = OctagonX;
      exports.Omega = Omega;
      exports.OmegaIcon = Omega;
      exports.Option = Option;
      exports.OptionIcon = Option;
      exports.Orbit = Orbit;
      exports.OrbitIcon = Orbit;
      exports.Origami = Origami;
      exports.OrigamiIcon = Origami;
      exports.Outdent = IndentDecrease;
      exports.OutdentIcon = IndentDecrease;
      exports.Package = Package;
      exports.Package2 = Package2;
      exports.Package2Icon = Package2;
      exports.PackageCheck = PackageCheck;
      exports.PackageCheckIcon = PackageCheck;
      exports.PackageIcon = Package;
      exports.PackageMinus = PackageMinus;
      exports.PackageMinusIcon = PackageMinus;
      exports.PackageOpen = PackageOpen;
      exports.PackageOpenIcon = PackageOpen;
      exports.PackagePlus = PackagePlus;
      exports.PackagePlusIcon = PackagePlus;
      exports.PackageSearch = PackageSearch;
      exports.PackageSearchIcon = PackageSearch;
      exports.PackageX = PackageX;
      exports.PackageXIcon = PackageX;
      exports.PaintBucket = PaintBucket;
      exports.PaintBucketIcon = PaintBucket;
      exports.PaintRoller = PaintRoller;
      exports.PaintRollerIcon = PaintRoller;
      exports.Paintbrush = Paintbrush;
      exports.Paintbrush2 = PaintbrushVertical;
      exports.Paintbrush2Icon = PaintbrushVertical;
      exports.PaintbrushIcon = Paintbrush;
      exports.PaintbrushVertical = PaintbrushVertical;
      exports.PaintbrushVerticalIcon = PaintbrushVertical;
      exports.Palette = Palette;
      exports.PaletteIcon = Palette;
      exports.Palmtree = TreePalm;
      exports.PalmtreeIcon = TreePalm;
      exports.PanelBottom = PanelBottom;
      exports.PanelBottomClose = PanelBottomClose;
      exports.PanelBottomCloseIcon = PanelBottomClose;
      exports.PanelBottomDashed = PanelBottomDashed;
      exports.PanelBottomDashedIcon = PanelBottomDashed;
      exports.PanelBottomIcon = PanelBottom;
      exports.PanelBottomInactive = PanelBottomDashed;
      exports.PanelBottomInactiveIcon = PanelBottomDashed;
      exports.PanelBottomOpen = PanelBottomOpen;
      exports.PanelBottomOpenIcon = PanelBottomOpen;
      exports.PanelLeft = PanelLeft;
      exports.PanelLeftClose = PanelLeftClose2;
      exports.PanelLeftCloseIcon = PanelLeftClose2;
      exports.PanelLeftDashed = PanelLeftDashed;
      exports.PanelLeftDashedIcon = PanelLeftDashed;
      exports.PanelLeftIcon = PanelLeft;
      exports.PanelLeftInactive = PanelLeftDashed;
      exports.PanelLeftInactiveIcon = PanelLeftDashed;
      exports.PanelLeftOpen = PanelLeftOpen;
      exports.PanelLeftOpenIcon = PanelLeftOpen;
      exports.PanelRight = PanelRight;
      exports.PanelRightClose = PanelRightClose;
      exports.PanelRightCloseIcon = PanelRightClose;
      exports.PanelRightDashed = PanelRightDashed;
      exports.PanelRightDashedIcon = PanelRightDashed;
      exports.PanelRightIcon = PanelRight;
      exports.PanelRightInactive = PanelRightDashed;
      exports.PanelRightInactiveIcon = PanelRightDashed;
      exports.PanelRightOpen = PanelRightOpen2;
      exports.PanelRightOpenIcon = PanelRightOpen2;
      exports.PanelTop = PanelTop;
      exports.PanelTopClose = PanelTopClose;
      exports.PanelTopCloseIcon = PanelTopClose;
      exports.PanelTopDashed = PanelTopDashed;
      exports.PanelTopDashedIcon = PanelTopDashed;
      exports.PanelTopIcon = PanelTop;
      exports.PanelTopInactive = PanelTopDashed;
      exports.PanelTopInactiveIcon = PanelTopDashed;
      exports.PanelTopOpen = PanelTopOpen;
      exports.PanelTopOpenIcon = PanelTopOpen;
      exports.PanelsLeftBottom = PanelsLeftBottom;
      exports.PanelsLeftBottomIcon = PanelsLeftBottom;
      exports.PanelsLeftRight = Columns3;
      exports.PanelsLeftRightIcon = Columns3;
      exports.PanelsRightBottom = PanelsRightBottom;
      exports.PanelsRightBottomIcon = PanelsRightBottom;
      exports.PanelsTopBottom = Rows3;
      exports.PanelsTopBottomIcon = Rows3;
      exports.PanelsTopLeft = PanelsTopLeft;
      exports.PanelsTopLeftIcon = PanelsTopLeft;
      exports.Paperclip = Paperclip;
      exports.PaperclipIcon = Paperclip;
      exports.Parentheses = Parentheses;
      exports.ParenthesesIcon = Parentheses;
      exports.ParkingCircle = CircleParking;
      exports.ParkingCircleIcon = CircleParking;
      exports.ParkingCircleOff = CircleParkingOff;
      exports.ParkingCircleOffIcon = CircleParkingOff;
      exports.ParkingMeter = ParkingMeter;
      exports.ParkingMeterIcon = ParkingMeter;
      exports.ParkingSquare = SquareParking;
      exports.ParkingSquareIcon = SquareParking;
      exports.ParkingSquareOff = SquareParkingOff;
      exports.ParkingSquareOffIcon = SquareParkingOff;
      exports.PartyPopper = PartyPopper;
      exports.PartyPopperIcon = PartyPopper;
      exports.Pause = Pause;
      exports.PauseCircle = CirclePause;
      exports.PauseCircleIcon = CirclePause;
      exports.PauseIcon = Pause;
      exports.PauseOctagon = OctagonPause;
      exports.PauseOctagonIcon = OctagonPause;
      exports.PawPrint = PawPrint;
      exports.PawPrintIcon = PawPrint;
      exports.PcCase = PcCase;
      exports.PcCaseIcon = PcCase;
      exports.Pen = Pen;
      exports.PenBox = SquarePen;
      exports.PenBoxIcon = SquarePen;
      exports.PenIcon = Pen;
      exports.PenLine = PenLine;
      exports.PenLineIcon = PenLine;
      exports.PenOff = PenOff;
      exports.PenOffIcon = PenOff;
      exports.PenSquare = SquarePen;
      exports.PenSquareIcon = SquarePen;
      exports.PenTool = PenTool;
      exports.PenToolIcon = PenTool;
      exports.Pencil = Pencil;
      exports.PencilIcon = Pencil;
      exports.PencilLine = PencilLine;
      exports.PencilLineIcon = PencilLine;
      exports.PencilOff = PencilOff;
      exports.PencilOffIcon = PencilOff;
      exports.PencilRuler = PencilRuler;
      exports.PencilRulerIcon = PencilRuler;
      exports.Pentagon = Pentagon;
      exports.PentagonIcon = Pentagon;
      exports.Percent = Percent;
      exports.PercentCircle = CirclePercent;
      exports.PercentCircleIcon = CirclePercent;
      exports.PercentDiamond = DiamondPercent;
      exports.PercentDiamondIcon = DiamondPercent;
      exports.PercentIcon = Percent;
      exports.PercentSquare = SquarePercent;
      exports.PercentSquareIcon = SquarePercent;
      exports.PersonStanding = PersonStanding;
      exports.PersonStandingIcon = PersonStanding;
      exports.PhilippinePeso = PhilippinePeso;
      exports.PhilippinePesoIcon = PhilippinePeso;
      exports.Phone = Phone4;
      exports.PhoneCall = PhoneCall;
      exports.PhoneCallIcon = PhoneCall;
      exports.PhoneForwarded = PhoneForwarded;
      exports.PhoneForwardedIcon = PhoneForwarded;
      exports.PhoneIcon = Phone4;
      exports.PhoneIncoming = PhoneIncoming;
      exports.PhoneIncomingIcon = PhoneIncoming;
      exports.PhoneMissed = PhoneMissed;
      exports.PhoneMissedIcon = PhoneMissed;
      exports.PhoneOff = PhoneOff;
      exports.PhoneOffIcon = PhoneOff;
      exports.PhoneOutgoing = PhoneOutgoing;
      exports.PhoneOutgoingIcon = PhoneOutgoing;
      exports.Pi = Pi;
      exports.PiIcon = Pi;
      exports.PiSquare = SquarePi;
      exports.PiSquareIcon = SquarePi;
      exports.Piano = Piano;
      exports.PianoIcon = Piano;
      exports.Pickaxe = Pickaxe;
      exports.PickaxeIcon = Pickaxe;
      exports.PictureInPicture = PictureInPicture;
      exports.PictureInPicture2 = PictureInPicture2;
      exports.PictureInPicture2Icon = PictureInPicture2;
      exports.PictureInPictureIcon = PictureInPicture;
      exports.PieChart = ChartPie;
      exports.PieChartIcon = ChartPie;
      exports.PiggyBank = PiggyBank;
      exports.PiggyBankIcon = PiggyBank;
      exports.Pilcrow = Pilcrow;
      exports.PilcrowIcon = Pilcrow;
      exports.PilcrowLeft = PilcrowLeft;
      exports.PilcrowLeftIcon = PilcrowLeft;
      exports.PilcrowRight = PilcrowRight;
      exports.PilcrowRightIcon = PilcrowRight;
      exports.PilcrowSquare = SquarePilcrow;
      exports.PilcrowSquareIcon = SquarePilcrow;
      exports.Pill = Pill;
      exports.PillBottle = PillBottle;
      exports.PillBottleIcon = PillBottle;
      exports.PillIcon = Pill;
      exports.Pin = Pin;
      exports.PinIcon = Pin;
      exports.PinOff = PinOff;
      exports.PinOffIcon = PinOff;
      exports.Pipette = Pipette;
      exports.PipetteIcon = Pipette;
      exports.Pizza = Pizza;
      exports.PizzaIcon = Pizza;
      exports.Plane = Plane;
      exports.PlaneIcon = Plane;
      exports.PlaneLanding = PlaneLanding;
      exports.PlaneLandingIcon = PlaneLanding;
      exports.PlaneTakeoff = PlaneTakeoff;
      exports.PlaneTakeoffIcon = PlaneTakeoff;
      exports.Play = Play5;
      exports.PlayCircle = CirclePlay;
      exports.PlayCircleIcon = CirclePlay;
      exports.PlayIcon = Play5;
      exports.PlaySquare = SquarePlay;
      exports.PlaySquareIcon = SquarePlay;
      exports.Plug = Plug;
      exports.Plug2 = Plug2;
      exports.Plug2Icon = Plug2;
      exports.PlugIcon = Plug;
      exports.PlugZap = PlugZap;
      exports.PlugZap2 = PlugZap;
      exports.PlugZap2Icon = PlugZap;
      exports.PlugZapIcon = PlugZap;
      exports.Plus = Plus2;
      exports.PlusCircle = CirclePlus;
      exports.PlusCircleIcon = CirclePlus;
      exports.PlusIcon = Plus2;
      exports.PlusSquare = SquarePlus;
      exports.PlusSquareIcon = SquarePlus;
      exports.Pocket = Pocket;
      exports.PocketIcon = Pocket;
      exports.PocketKnife = PocketKnife;
      exports.PocketKnifeIcon = PocketKnife;
      exports.Podcast = Podcast;
      exports.PodcastIcon = Podcast;
      exports.Pointer = Pointer;
      exports.PointerIcon = Pointer;
      exports.PointerOff = PointerOff;
      exports.PointerOffIcon = PointerOff;
      exports.Popcorn = Popcorn;
      exports.PopcornIcon = Popcorn;
      exports.Popsicle = Popsicle;
      exports.PopsicleIcon = Popsicle;
      exports.PoundSterling = PoundSterling;
      exports.PoundSterlingIcon = PoundSterling;
      exports.Power = Power;
      exports.PowerCircle = CirclePower;
      exports.PowerCircleIcon = CirclePower;
      exports.PowerIcon = Power;
      exports.PowerOff = PowerOff;
      exports.PowerOffIcon = PowerOff;
      exports.PowerSquare = SquarePower;
      exports.PowerSquareIcon = SquarePower;
      exports.Presentation = Presentation;
      exports.PresentationIcon = Presentation;
      exports.Printer = Printer;
      exports.PrinterCheck = PrinterCheck;
      exports.PrinterCheckIcon = PrinterCheck;
      exports.PrinterIcon = Printer;
      exports.Projector = Projector;
      exports.ProjectorIcon = Projector;
      exports.Proportions = Proportions;
      exports.ProportionsIcon = Proportions;
      exports.Puzzle = Puzzle;
      exports.PuzzleIcon = Puzzle;
      exports.Pyramid = Pyramid;
      exports.PyramidIcon = Pyramid;
      exports.QrCode = QrCode;
      exports.QrCodeIcon = QrCode;
      exports.Quote = Quote2;
      exports.QuoteIcon = Quote2;
      exports.Rabbit = Rabbit;
      exports.RabbitIcon = Rabbit;
      exports.Radar = Radar;
      exports.RadarIcon = Radar;
      exports.Radiation = Radiation;
      exports.RadiationIcon = Radiation;
      exports.Radical = Radical;
      exports.RadicalIcon = Radical;
      exports.Radio = Radio;
      exports.RadioIcon = Radio;
      exports.RadioReceiver = RadioReceiver;
      exports.RadioReceiverIcon = RadioReceiver;
      exports.RadioTower = RadioTower;
      exports.RadioTowerIcon = RadioTower;
      exports.Radius = Radius;
      exports.RadiusIcon = Radius;
      exports.RailSymbol = RailSymbol;
      exports.RailSymbolIcon = RailSymbol;
      exports.Rainbow = Rainbow;
      exports.RainbowIcon = Rainbow;
      exports.Rat = Rat;
      exports.RatIcon = Rat;
      exports.Ratio = Ratio;
      exports.RatioIcon = Ratio;
      exports.Receipt = Receipt;
      exports.ReceiptCent = ReceiptCent;
      exports.ReceiptCentIcon = ReceiptCent;
      exports.ReceiptEuro = ReceiptEuro;
      exports.ReceiptEuroIcon = ReceiptEuro;
      exports.ReceiptIcon = Receipt;
      exports.ReceiptIndianRupee = ReceiptIndianRupee;
      exports.ReceiptIndianRupeeIcon = ReceiptIndianRupee;
      exports.ReceiptJapaneseYen = ReceiptJapaneseYen;
      exports.ReceiptJapaneseYenIcon = ReceiptJapaneseYen;
      exports.ReceiptPoundSterling = ReceiptPoundSterling;
      exports.ReceiptPoundSterlingIcon = ReceiptPoundSterling;
      exports.ReceiptRussianRuble = ReceiptRussianRuble;
      exports.ReceiptRussianRubleIcon = ReceiptRussianRuble;
      exports.ReceiptSwissFranc = ReceiptSwissFranc;
      exports.ReceiptSwissFrancIcon = ReceiptSwissFranc;
      exports.ReceiptText = ReceiptText;
      exports.ReceiptTextIcon = ReceiptText;
      exports.RectangleEllipsis = RectangleEllipsis;
      exports.RectangleEllipsisIcon = RectangleEllipsis;
      exports.RectangleGoggles = RectangleGoggles;
      exports.RectangleGogglesIcon = RectangleGoggles;
      exports.RectangleHorizontal = RectangleHorizontal;
      exports.RectangleHorizontalIcon = RectangleHorizontal;
      exports.RectangleVertical = RectangleVertical;
      exports.RectangleVerticalIcon = RectangleVertical;
      exports.Recycle = Recycle;
      exports.RecycleIcon = Recycle;
      exports.Redo = Redo;
      exports.Redo2 = Redo2;
      exports.Redo2Icon = Redo2;
      exports.RedoDot = RedoDot;
      exports.RedoDotIcon = RedoDot;
      exports.RedoIcon = Redo;
      exports.RefreshCcw = RefreshCcw;
      exports.RefreshCcwDot = RefreshCcwDot;
      exports.RefreshCcwDotIcon = RefreshCcwDot;
      exports.RefreshCcwIcon = RefreshCcw;
      exports.RefreshCw = RefreshCw;
      exports.RefreshCwIcon = RefreshCw;
      exports.RefreshCwOff = RefreshCwOff;
      exports.RefreshCwOffIcon = RefreshCwOff;
      exports.Refrigerator = Refrigerator;
      exports.RefrigeratorIcon = Refrigerator;
      exports.Regex = Regex;
      exports.RegexIcon = Regex;
      exports.RemoveFormatting = RemoveFormatting;
      exports.RemoveFormattingIcon = RemoveFormatting;
      exports.Repeat = Repeat;
      exports.Repeat1 = Repeat1;
      exports.Repeat1Icon = Repeat1;
      exports.Repeat2 = Repeat2;
      exports.Repeat2Icon = Repeat2;
      exports.RepeatIcon = Repeat;
      exports.Replace = Replace;
      exports.ReplaceAll = ReplaceAll;
      exports.ReplaceAllIcon = ReplaceAll;
      exports.ReplaceIcon = Replace;
      exports.Reply = Reply;
      exports.ReplyAll = ReplyAll;
      exports.ReplyAllIcon = ReplyAll;
      exports.ReplyIcon = Reply;
      exports.Rewind = Rewind;
      exports.RewindIcon = Rewind;
      exports.Ribbon = Ribbon;
      exports.RibbonIcon = Ribbon;
      exports.Rocket = Rocket;
      exports.RocketIcon = Rocket;
      exports.RockingChair = RockingChair;
      exports.RockingChairIcon = RockingChair;
      exports.RollerCoaster = RollerCoaster;
      exports.RollerCoasterIcon = RollerCoaster;
      exports.Rotate3D = Rotate3d;
      exports.Rotate3DIcon = Rotate3d;
      exports.Rotate3d = Rotate3d;
      exports.Rotate3dIcon = Rotate3d;
      exports.RotateCcw = RotateCcw;
      exports.RotateCcwIcon = RotateCcw;
      exports.RotateCcwKey = RotateCcwKey;
      exports.RotateCcwKeyIcon = RotateCcwKey;
      exports.RotateCcwSquare = RotateCcwSquare;
      exports.RotateCcwSquareIcon = RotateCcwSquare;
      exports.RotateCw = RotateCw;
      exports.RotateCwIcon = RotateCw;
      exports.RotateCwSquare = RotateCwSquare;
      exports.RotateCwSquareIcon = RotateCwSquare;
      exports.Route = Route2;
      exports.RouteIcon = Route2;
      exports.RouteOff = RouteOff;
      exports.RouteOffIcon = RouteOff;
      exports.Router = Router2;
      exports.RouterIcon = Router2;
      exports.Rows = Rows2;
      exports.Rows2 = Rows2;
      exports.Rows2Icon = Rows2;
      exports.Rows3 = Rows3;
      exports.Rows3Icon = Rows3;
      exports.Rows4 = Rows4;
      exports.Rows4Icon = Rows4;
      exports.RowsIcon = Rows2;
      exports.Rss = Rss;
      exports.RssIcon = Rss;
      exports.Ruler = Ruler;
      exports.RulerDimensionLine = RulerDimensionLine;
      exports.RulerDimensionLineIcon = RulerDimensionLine;
      exports.RulerIcon = Ruler;
      exports.RussianRuble = RussianRuble;
      exports.RussianRubleIcon = RussianRuble;
      exports.Sailboat = Sailboat;
      exports.SailboatIcon = Sailboat;
      exports.Salad = Salad;
      exports.SaladIcon = Salad;
      exports.Sandwich = Sandwich;
      exports.SandwichIcon = Sandwich;
      exports.Satellite = Satellite;
      exports.SatelliteDish = SatelliteDish;
      exports.SatelliteDishIcon = SatelliteDish;
      exports.SatelliteIcon = Satellite;
      exports.SaudiRiyal = SaudiRiyal;
      exports.SaudiRiyalIcon = SaudiRiyal;
      exports.Save = Save;
      exports.SaveAll = SaveAll;
      exports.SaveAllIcon = SaveAll;
      exports.SaveIcon = Save;
      exports.SaveOff = SaveOff;
      exports.SaveOffIcon = SaveOff;
      exports.Scale = Scale;
      exports.Scale3D = Scale3d;
      exports.Scale3DIcon = Scale3d;
      exports.Scale3d = Scale3d;
      exports.Scale3dIcon = Scale3d;
      exports.ScaleIcon = Scale;
      exports.Scaling = Scaling;
      exports.ScalingIcon = Scaling;
      exports.Scan = Scan;
      exports.ScanBarcode = ScanBarcode;
      exports.ScanBarcodeIcon = ScanBarcode;
      exports.ScanEye = ScanEye;
      exports.ScanEyeIcon = ScanEye;
      exports.ScanFace = ScanFace;
      exports.ScanFaceIcon = ScanFace;
      exports.ScanHeart = ScanHeart;
      exports.ScanHeartIcon = ScanHeart;
      exports.ScanIcon = Scan;
      exports.ScanLine = ScanLine;
      exports.ScanLineIcon = ScanLine;
      exports.ScanQrCode = ScanQrCode;
      exports.ScanQrCodeIcon = ScanQrCode;
      exports.ScanSearch = ScanSearch;
      exports.ScanSearchIcon = ScanSearch;
      exports.ScanText = ScanText;
      exports.ScanTextIcon = ScanText;
      exports.ScatterChart = ChartScatter;
      exports.ScatterChartIcon = ChartScatter;
      exports.School = School;
      exports.School2 = University;
      exports.School2Icon = University;
      exports.SchoolIcon = School;
      exports.Scissors = Scissors;
      exports.ScissorsIcon = Scissors;
      exports.ScissorsLineDashed = ScissorsLineDashed;
      exports.ScissorsLineDashedIcon = ScissorsLineDashed;
      exports.ScissorsSquare = SquareScissors;
      exports.ScissorsSquareDashedBottom = SquareBottomDashedScissors;
      exports.ScissorsSquareDashedBottomIcon = SquareBottomDashedScissors;
      exports.ScissorsSquareIcon = SquareScissors;
      exports.ScreenShare = ScreenShare;
      exports.ScreenShareIcon = ScreenShare;
      exports.ScreenShareOff = ScreenShareOff;
      exports.ScreenShareOffIcon = ScreenShareOff;
      exports.Scroll = Scroll;
      exports.ScrollIcon = Scroll;
      exports.ScrollText = ScrollText;
      exports.ScrollTextIcon = ScrollText;
      exports.Search = Search2;
      exports.SearchCheck = SearchCheck;
      exports.SearchCheckIcon = SearchCheck;
      exports.SearchCode = SearchCode;
      exports.SearchCodeIcon = SearchCode;
      exports.SearchIcon = Search2;
      exports.SearchSlash = SearchSlash;
      exports.SearchSlashIcon = SearchSlash;
      exports.SearchX = SearchX;
      exports.SearchXIcon = SearchX;
      exports.Section = Section;
      exports.SectionIcon = Section;
      exports.Send = Send;
      exports.SendHorizonal = SendHorizontal;
      exports.SendHorizonalIcon = SendHorizontal;
      exports.SendHorizontal = SendHorizontal;
      exports.SendHorizontalIcon = SendHorizontal;
      exports.SendIcon = Send;
      exports.SendToBack = SendToBack;
      exports.SendToBackIcon = SendToBack;
      exports.SeparatorHorizontal = SeparatorHorizontal;
      exports.SeparatorHorizontalIcon = SeparatorHorizontal;
      exports.SeparatorVertical = SeparatorVertical;
      exports.SeparatorVerticalIcon = SeparatorVertical;
      exports.Server = Server;
      exports.ServerCog = ServerCog;
      exports.ServerCogIcon = ServerCog;
      exports.ServerCrash = ServerCrash;
      exports.ServerCrashIcon = ServerCrash;
      exports.ServerIcon = Server;
      exports.ServerOff = ServerOff;
      exports.ServerOffIcon = ServerOff;
      exports.Settings = Settings3;
      exports.Settings2 = Settings2;
      exports.Settings2Icon = Settings2;
      exports.SettingsIcon = Settings3;
      exports.Shapes = Shapes;
      exports.ShapesIcon = Shapes;
      exports.Share = Share;
      exports.Share2 = Share2;
      exports.Share2Icon = Share2;
      exports.ShareIcon = Share;
      exports.Sheet = Sheet;
      exports.SheetIcon = Sheet;
      exports.Shell = Shell;
      exports.ShellIcon = Shell;
      exports.Shield = Shield2;
      exports.ShieldAlert = ShieldAlert;
      exports.ShieldAlertIcon = ShieldAlert;
      exports.ShieldBan = ShieldBan;
      exports.ShieldBanIcon = ShieldBan;
      exports.ShieldCheck = ShieldCheck;
      exports.ShieldCheckIcon = ShieldCheck;
      exports.ShieldClose = ShieldX;
      exports.ShieldCloseIcon = ShieldX;
      exports.ShieldEllipsis = ShieldEllipsis;
      exports.ShieldEllipsisIcon = ShieldEllipsis;
      exports.ShieldHalf = ShieldHalf;
      exports.ShieldHalfIcon = ShieldHalf;
      exports.ShieldIcon = Shield2;
      exports.ShieldMinus = ShieldMinus;
      exports.ShieldMinusIcon = ShieldMinus;
      exports.ShieldOff = ShieldOff;
      exports.ShieldOffIcon = ShieldOff;
      exports.ShieldPlus = ShieldPlus;
      exports.ShieldPlusIcon = ShieldPlus;
      exports.ShieldQuestion = ShieldQuestion;
      exports.ShieldQuestionIcon = ShieldQuestion;
      exports.ShieldUser = ShieldUser;
      exports.ShieldUserIcon = ShieldUser;
      exports.ShieldX = ShieldX;
      exports.ShieldXIcon = ShieldX;
      exports.Ship = Ship;
      exports.ShipIcon = Ship;
      exports.ShipWheel = ShipWheel;
      exports.ShipWheelIcon = ShipWheel;
      exports.Shirt = Shirt;
      exports.ShirtIcon = Shirt;
      exports.ShoppingBag = ShoppingBag;
      exports.ShoppingBagIcon = ShoppingBag;
      exports.ShoppingBasket = ShoppingBasket;
      exports.ShoppingBasketIcon = ShoppingBasket;
      exports.ShoppingCart = ShoppingCart;
      exports.ShoppingCartIcon = ShoppingCart;
      exports.Shovel = Shovel;
      exports.ShovelIcon = Shovel;
      exports.ShowerHead = ShowerHead;
      exports.ShowerHeadIcon = ShowerHead;
      exports.Shredder = Shredder;
      exports.ShredderIcon = Shredder;
      exports.Shrimp = Shrimp;
      exports.ShrimpIcon = Shrimp;
      exports.Shrink = Shrink;
      exports.ShrinkIcon = Shrink;
      exports.Shrub = Shrub;
      exports.ShrubIcon = Shrub;
      exports.Shuffle = Shuffle;
      exports.ShuffleIcon = Shuffle;
      exports.Sidebar = PanelLeft;
      exports.SidebarClose = PanelLeftClose2;
      exports.SidebarCloseIcon = PanelLeftClose2;
      exports.SidebarIcon = PanelLeft;
      exports.SidebarOpen = PanelLeftOpen;
      exports.SidebarOpenIcon = PanelLeftOpen;
      exports.Sigma = Sigma;
      exports.SigmaIcon = Sigma;
      exports.SigmaSquare = SquareSigma;
      exports.SigmaSquareIcon = SquareSigma;
      exports.Signal = Signal;
      exports.SignalHigh = SignalHigh;
      exports.SignalHighIcon = SignalHigh;
      exports.SignalIcon = Signal;
      exports.SignalLow = SignalLow;
      exports.SignalLowIcon = SignalLow;
      exports.SignalMedium = SignalMedium;
      exports.SignalMediumIcon = SignalMedium;
      exports.SignalZero = SignalZero;
      exports.SignalZeroIcon = SignalZero;
      exports.Signature = Signature;
      exports.SignatureIcon = Signature;
      exports.Signpost = Signpost;
      exports.SignpostBig = SignpostBig;
      exports.SignpostBigIcon = SignpostBig;
      exports.SignpostIcon = Signpost;
      exports.Siren = Siren;
      exports.SirenIcon = Siren;
      exports.SkipBack = SkipBack;
      exports.SkipBackIcon = SkipBack;
      exports.SkipForward = SkipForward;
      exports.SkipForwardIcon = SkipForward;
      exports.Skull = Skull;
      exports.SkullIcon = Skull;
      exports.Slack = Slack;
      exports.SlackIcon = Slack;
      exports.Slash = Slash;
      exports.SlashIcon = Slash;
      exports.SlashSquare = SquareSlash;
      exports.SlashSquareIcon = SquareSlash;
      exports.Slice = Slice;
      exports.SliceIcon = Slice;
      exports.Sliders = SlidersVertical;
      exports.SlidersHorizontal = SlidersHorizontal;
      exports.SlidersHorizontalIcon = SlidersHorizontal;
      exports.SlidersIcon = SlidersVertical;
      exports.SlidersVertical = SlidersVertical;
      exports.SlidersVerticalIcon = SlidersVertical;
      exports.Smartphone = Smartphone;
      exports.SmartphoneCharging = SmartphoneCharging;
      exports.SmartphoneChargingIcon = SmartphoneCharging;
      exports.SmartphoneIcon = Smartphone;
      exports.SmartphoneNfc = SmartphoneNfc;
      exports.SmartphoneNfcIcon = SmartphoneNfc;
      exports.Smile = Smile;
      exports.SmileIcon = Smile;
      exports.SmilePlus = SmilePlus;
      exports.SmilePlusIcon = SmilePlus;
      exports.Snail = Snail;
      exports.SnailIcon = Snail;
      exports.Snowflake = Snowflake;
      exports.SnowflakeIcon = Snowflake;
      exports.Sofa = Sofa;
      exports.SofaIcon = Sofa;
      exports.SortAsc = ArrowUpNarrowWide;
      exports.SortAscIcon = ArrowUpNarrowWide;
      exports.SortDesc = ArrowDownWideNarrow;
      exports.SortDescIcon = ArrowDownWideNarrow;
      exports.Soup = Soup;
      exports.SoupIcon = Soup;
      exports.Space = Space;
      exports.SpaceIcon = Space;
      exports.Spade = Spade;
      exports.SpadeIcon = Spade;
      exports.Sparkle = Sparkle;
      exports.SparkleIcon = Sparkle;
      exports.Sparkles = Sparkles;
      exports.SparklesIcon = Sparkles;
      exports.Speaker = Speaker;
      exports.SpeakerIcon = Speaker;
      exports.Speech = Speech;
      exports.SpeechIcon = Speech;
      exports.SpellCheck = SpellCheck;
      exports.SpellCheck2 = SpellCheck2;
      exports.SpellCheck2Icon = SpellCheck2;
      exports.SpellCheckIcon = SpellCheck;
      exports.Spline = Spline;
      exports.SplineIcon = Spline;
      exports.SplinePointer = SplinePointer;
      exports.SplinePointerIcon = SplinePointer;
      exports.Split = Split;
      exports.SplitIcon = Split;
      exports.SplitSquareHorizontal = SquareSplitHorizontal;
      exports.SplitSquareHorizontalIcon = SquareSplitHorizontal;
      exports.SplitSquareVertical = SquareSplitVertical;
      exports.SplitSquareVerticalIcon = SquareSplitVertical;
      exports.SprayCan = SprayCan;
      exports.SprayCanIcon = SprayCan;
      exports.Sprout = Sprout;
      exports.SproutIcon = Sprout;
      exports.Square = Square;
      exports.SquareActivity = SquareActivity;
      exports.SquareActivityIcon = SquareActivity;
      exports.SquareArrowDown = SquareArrowDown;
      exports.SquareArrowDownIcon = SquareArrowDown;
      exports.SquareArrowDownLeft = SquareArrowDownLeft;
      exports.SquareArrowDownLeftIcon = SquareArrowDownLeft;
      exports.SquareArrowDownRight = SquareArrowDownRight;
      exports.SquareArrowDownRightIcon = SquareArrowDownRight;
      exports.SquareArrowLeft = SquareArrowLeft;
      exports.SquareArrowLeftIcon = SquareArrowLeft;
      exports.SquareArrowOutDownLeft = SquareArrowOutDownLeft;
      exports.SquareArrowOutDownLeftIcon = SquareArrowOutDownLeft;
      exports.SquareArrowOutDownRight = SquareArrowOutDownRight;
      exports.SquareArrowOutDownRightIcon = SquareArrowOutDownRight;
      exports.SquareArrowOutUpLeft = SquareArrowOutUpLeft;
      exports.SquareArrowOutUpLeftIcon = SquareArrowOutUpLeft;
      exports.SquareArrowOutUpRight = SquareArrowOutUpRight;
      exports.SquareArrowOutUpRightIcon = SquareArrowOutUpRight;
      exports.SquareArrowRight = SquareArrowRight;
      exports.SquareArrowRightIcon = SquareArrowRight;
      exports.SquareArrowUp = SquareArrowUp;
      exports.SquareArrowUpIcon = SquareArrowUp;
      exports.SquareArrowUpLeft = SquareArrowUpLeft;
      exports.SquareArrowUpLeftIcon = SquareArrowUpLeft;
      exports.SquareArrowUpRight = SquareArrowUpRight;
      exports.SquareArrowUpRightIcon = SquareArrowUpRight;
      exports.SquareAsterisk = SquareAsterisk;
      exports.SquareAsteriskIcon = SquareAsterisk;
      exports.SquareBottomDashedScissors = SquareBottomDashedScissors;
      exports.SquareBottomDashedScissorsIcon = SquareBottomDashedScissors;
      exports.SquareChartGantt = SquareChartGantt;
      exports.SquareChartGanttIcon = SquareChartGantt;
      exports.SquareCheck = SquareCheck;
      exports.SquareCheckBig = SquareCheckBig;
      exports.SquareCheckBigIcon = SquareCheckBig;
      exports.SquareCheckIcon = SquareCheck;
      exports.SquareChevronDown = SquareChevronDown;
      exports.SquareChevronDownIcon = SquareChevronDown;
      exports.SquareChevronLeft = SquareChevronLeft;
      exports.SquareChevronLeftIcon = SquareChevronLeft;
      exports.SquareChevronRight = SquareChevronRight;
      exports.SquareChevronRightIcon = SquareChevronRight;
      exports.SquareChevronUp = SquareChevronUp;
      exports.SquareChevronUpIcon = SquareChevronUp;
      exports.SquareCode = SquareCode;
      exports.SquareCodeIcon = SquareCode;
      exports.SquareDashed = SquareDashed;
      exports.SquareDashedBottom = SquareDashedBottom;
      exports.SquareDashedBottomCode = SquareDashedBottomCode;
      exports.SquareDashedBottomCodeIcon = SquareDashedBottomCode;
      exports.SquareDashedBottomIcon = SquareDashedBottom;
      exports.SquareDashedIcon = SquareDashed;
      exports.SquareDashedKanban = SquareDashedKanban;
      exports.SquareDashedKanbanIcon = SquareDashedKanban;
      exports.SquareDashedMousePointer = SquareDashedMousePointer;
      exports.SquareDashedMousePointerIcon = SquareDashedMousePointer;
      exports.SquareDivide = SquareDivide;
      exports.SquareDivideIcon = SquareDivide;
      exports.SquareDot = SquareDot;
      exports.SquareDotIcon = SquareDot;
      exports.SquareEqual = SquareEqual;
      exports.SquareEqualIcon = SquareEqual;
      exports.SquareFunction = SquareFunction;
      exports.SquareFunctionIcon = SquareFunction;
      exports.SquareGanttChart = SquareChartGantt;
      exports.SquareGanttChartIcon = SquareChartGantt;
      exports.SquareIcon = Square;
      exports.SquareKanban = SquareKanban;
      exports.SquareKanbanIcon = SquareKanban;
      exports.SquareLibrary = SquareLibrary;
      exports.SquareLibraryIcon = SquareLibrary;
      exports.SquareM = SquareM;
      exports.SquareMIcon = SquareM;
      exports.SquareMenu = SquareMenu;
      exports.SquareMenuIcon = SquareMenu;
      exports.SquareMinus = SquareMinus;
      exports.SquareMinusIcon = SquareMinus;
      exports.SquareMousePointer = SquareMousePointer;
      exports.SquareMousePointerIcon = SquareMousePointer;
      exports.SquareParking = SquareParking;
      exports.SquareParkingIcon = SquareParking;
      exports.SquareParkingOff = SquareParkingOff;
      exports.SquareParkingOffIcon = SquareParkingOff;
      exports.SquarePen = SquarePen;
      exports.SquarePenIcon = SquarePen;
      exports.SquarePercent = SquarePercent;
      exports.SquarePercentIcon = SquarePercent;
      exports.SquarePi = SquarePi;
      exports.SquarePiIcon = SquarePi;
      exports.SquarePilcrow = SquarePilcrow;
      exports.SquarePilcrowIcon = SquarePilcrow;
      exports.SquarePlay = SquarePlay;
      exports.SquarePlayIcon = SquarePlay;
      exports.SquarePlus = SquarePlus;
      exports.SquarePlusIcon = SquarePlus;
      exports.SquarePower = SquarePower;
      exports.SquarePowerIcon = SquarePower;
      exports.SquareRadical = SquareRadical;
      exports.SquareRadicalIcon = SquareRadical;
      exports.SquareRoundCorner = SquareRoundCorner;
      exports.SquareRoundCornerIcon = SquareRoundCorner;
      exports.SquareScissors = SquareScissors;
      exports.SquareScissorsIcon = SquareScissors;
      exports.SquareSigma = SquareSigma;
      exports.SquareSigmaIcon = SquareSigma;
      exports.SquareSlash = SquareSlash;
      exports.SquareSlashIcon = SquareSlash;
      exports.SquareSplitHorizontal = SquareSplitHorizontal;
      exports.SquareSplitHorizontalIcon = SquareSplitHorizontal;
      exports.SquareSplitVertical = SquareSplitVertical;
      exports.SquareSplitVerticalIcon = SquareSplitVertical;
      exports.SquareSquare = SquareSquare;
      exports.SquareSquareIcon = SquareSquare;
      exports.SquareStack = SquareStack;
      exports.SquareStackIcon = SquareStack;
      exports.SquareTerminal = SquareTerminal;
      exports.SquareTerminalIcon = SquareTerminal;
      exports.SquareUser = SquareUser;
      exports.SquareUserIcon = SquareUser;
      exports.SquareUserRound = SquareUserRound;
      exports.SquareUserRoundIcon = SquareUserRound;
      exports.SquareX = SquareX;
      exports.SquareXIcon = SquareX;
      exports.SquaresExclude = SquaresExclude;
      exports.SquaresExcludeIcon = SquaresExclude;
      exports.SquaresIntersect = SquaresIntersect;
      exports.SquaresIntersectIcon = SquaresIntersect;
      exports.SquaresSubtract = SquaresSubtract;
      exports.SquaresSubtractIcon = SquaresSubtract;
      exports.SquaresUnite = SquaresUnite;
      exports.SquaresUniteIcon = SquaresUnite;
      exports.Squircle = Squircle;
      exports.SquircleIcon = Squircle;
      exports.Squirrel = Squirrel;
      exports.SquirrelIcon = Squirrel;
      exports.Stamp = Stamp;
      exports.StampIcon = Stamp;
      exports.Star = Star;
      exports.StarHalf = StarHalf;
      exports.StarHalfIcon = StarHalf;
      exports.StarIcon = Star;
      exports.StarOff = StarOff;
      exports.StarOffIcon = StarOff;
      exports.Stars = Sparkles;
      exports.StarsIcon = Sparkles;
      exports.StepBack = StepBack;
      exports.StepBackIcon = StepBack;
      exports.StepForward = StepForward;
      exports.StepForwardIcon = StepForward;
      exports.Stethoscope = Stethoscope3;
      exports.StethoscopeIcon = Stethoscope3;
      exports.Sticker = Sticker;
      exports.StickerIcon = Sticker;
      exports.StickyNote = StickyNote;
      exports.StickyNoteIcon = StickyNote;
      exports.StopCircle = CircleStop;
      exports.StopCircleIcon = CircleStop;
      exports.Store = Store;
      exports.StoreIcon = Store;
      exports.StretchHorizontal = StretchHorizontal;
      exports.StretchHorizontalIcon = StretchHorizontal;
      exports.StretchVertical = StretchVertical;
      exports.StretchVerticalIcon = StretchVertical;
      exports.Strikethrough = Strikethrough;
      exports.StrikethroughIcon = Strikethrough;
      exports.Subscript = Subscript;
      exports.SubscriptIcon = Subscript;
      exports.Subtitles = Captions;
      exports.SubtitlesIcon = Captions;
      exports.Sun = Sun;
      exports.SunDim = SunDim;
      exports.SunDimIcon = SunDim;
      exports.SunIcon = Sun;
      exports.SunMedium = SunMedium;
      exports.SunMediumIcon = SunMedium;
      exports.SunMoon = SunMoon;
      exports.SunMoonIcon = SunMoon;
      exports.SunSnow = SunSnow;
      exports.SunSnowIcon = SunSnow;
      exports.Sunrise = Sunrise;
      exports.SunriseIcon = Sunrise;
      exports.Sunset = Sunset;
      exports.SunsetIcon = Sunset;
      exports.Superscript = Superscript;
      exports.SuperscriptIcon = Superscript;
      exports.SwatchBook = SwatchBook;
      exports.SwatchBookIcon = SwatchBook;
      exports.SwissFranc = SwissFranc;
      exports.SwissFrancIcon = SwissFranc;
      exports.SwitchCamera = SwitchCamera;
      exports.SwitchCameraIcon = SwitchCamera;
      exports.Sword = Sword;
      exports.SwordIcon = Sword;
      exports.Swords = Swords;
      exports.SwordsIcon = Swords;
      exports.Syringe = Syringe;
      exports.SyringeIcon = Syringe;
      exports.Table = Table;
      exports.Table2 = Table2;
      exports.Table2Icon = Table2;
      exports.TableCellsMerge = TableCellsMerge;
      exports.TableCellsMergeIcon = TableCellsMerge;
      exports.TableCellsSplit = TableCellsSplit;
      exports.TableCellsSplitIcon = TableCellsSplit;
      exports.TableColumnsSplit = TableColumnsSplit;
      exports.TableColumnsSplitIcon = TableColumnsSplit;
      exports.TableConfig = Columns3Cog;
      exports.TableConfigIcon = Columns3Cog;
      exports.TableIcon = Table;
      exports.TableOfContents = TableOfContents;
      exports.TableOfContentsIcon = TableOfContents;
      exports.TableProperties = TableProperties;
      exports.TablePropertiesIcon = TableProperties;
      exports.TableRowsSplit = TableRowsSplit;
      exports.TableRowsSplitIcon = TableRowsSplit;
      exports.Tablet = Tablet;
      exports.TabletIcon = Tablet;
      exports.TabletSmartphone = TabletSmartphone;
      exports.TabletSmartphoneIcon = TabletSmartphone;
      exports.Tablets = Tablets;
      exports.TabletsIcon = Tablets;
      exports.Tag = Tag;
      exports.TagIcon = Tag;
      exports.Tags = Tags;
      exports.TagsIcon = Tags;
      exports.Tally1 = Tally1;
      exports.Tally1Icon = Tally1;
      exports.Tally2 = Tally2;
      exports.Tally2Icon = Tally2;
      exports.Tally3 = Tally3;
      exports.Tally3Icon = Tally3;
      exports.Tally4 = Tally4;
      exports.Tally4Icon = Tally4;
      exports.Tally5 = Tally5;
      exports.Tally5Icon = Tally5;
      exports.Tangent = Tangent;
      exports.TangentIcon = Tangent;
      exports.Target = Target2;
      exports.TargetIcon = Target2;
      exports.Telescope = Telescope;
      exports.TelescopeIcon = Telescope;
      exports.Tent = Tent;
      exports.TentIcon = Tent;
      exports.TentTree = TentTree;
      exports.TentTreeIcon = TentTree;
      exports.Terminal = Terminal;
      exports.TerminalIcon = Terminal;
      exports.TerminalSquare = SquareTerminal;
      exports.TerminalSquareIcon = SquareTerminal;
      exports.TestTube = TestTube;
      exports.TestTube2 = TestTubeDiagonal;
      exports.TestTube2Icon = TestTubeDiagonal;
      exports.TestTubeDiagonal = TestTubeDiagonal;
      exports.TestTubeDiagonalIcon = TestTubeDiagonal;
      exports.TestTubeIcon = TestTube;
      exports.TestTubes = TestTubes2;
      exports.TestTubesIcon = TestTubes2;
      exports.Text = Text;
      exports.TextCursor = TextCursor;
      exports.TextCursorIcon = TextCursor;
      exports.TextCursorInput = TextCursorInput;
      exports.TextCursorInputIcon = TextCursorInput;
      exports.TextIcon = Text;
      exports.TextQuote = TextQuote;
      exports.TextQuoteIcon = TextQuote;
      exports.TextSearch = TextSearch;
      exports.TextSearchIcon = TextSearch;
      exports.TextSelect = TextSelect;
      exports.TextSelectIcon = TextSelect;
      exports.TextSelection = TextSelect;
      exports.TextSelectionIcon = TextSelect;
      exports.Theater = Theater;
      exports.TheaterIcon = Theater;
      exports.Thermometer = Thermometer;
      exports.ThermometerIcon = Thermometer;
      exports.ThermometerSnowflake = ThermometerSnowflake;
      exports.ThermometerSnowflakeIcon = ThermometerSnowflake;
      exports.ThermometerSun = ThermometerSun;
      exports.ThermometerSunIcon = ThermometerSun;
      exports.ThumbsDown = ThumbsDown;
      exports.ThumbsDownIcon = ThumbsDown;
      exports.ThumbsUp = ThumbsUp;
      exports.ThumbsUpIcon = ThumbsUp;
      exports.Ticket = Ticket;
      exports.TicketCheck = TicketCheck;
      exports.TicketCheckIcon = TicketCheck;
      exports.TicketIcon = Ticket;
      exports.TicketMinus = TicketMinus;
      exports.TicketMinusIcon = TicketMinus;
      exports.TicketPercent = TicketPercent;
      exports.TicketPercentIcon = TicketPercent;
      exports.TicketPlus = TicketPlus;
      exports.TicketPlusIcon = TicketPlus;
      exports.TicketSlash = TicketSlash;
      exports.TicketSlashIcon = TicketSlash;
      exports.TicketX = TicketX;
      exports.TicketXIcon = TicketX;
      exports.Tickets = Tickets;
      exports.TicketsIcon = Tickets;
      exports.TicketsPlane = TicketsPlane;
      exports.TicketsPlaneIcon = TicketsPlane;
      exports.Timer = Timer2;
      exports.TimerIcon = Timer2;
      exports.TimerOff = TimerOff;
      exports.TimerOffIcon = TimerOff;
      exports.TimerReset = TimerReset;
      exports.TimerResetIcon = TimerReset;
      exports.ToggleLeft = ToggleLeft;
      exports.ToggleLeftIcon = ToggleLeft;
      exports.ToggleRight = ToggleRight;
      exports.ToggleRightIcon = ToggleRight;
      exports.Toilet = Toilet;
      exports.ToiletIcon = Toilet;
      exports.Tornado = Tornado;
      exports.TornadoIcon = Tornado;
      exports.Torus = Torus;
      exports.TorusIcon = Torus;
      exports.Touchpad = Touchpad;
      exports.TouchpadIcon = Touchpad;
      exports.TouchpadOff = TouchpadOff;
      exports.TouchpadOffIcon = TouchpadOff;
      exports.TowerControl = TowerControl;
      exports.TowerControlIcon = TowerControl;
      exports.ToyBrick = ToyBrick;
      exports.ToyBrickIcon = ToyBrick;
      exports.Tractor = Tractor;
      exports.TractorIcon = Tractor;
      exports.TrafficCone = TrafficCone;
      exports.TrafficConeIcon = TrafficCone;
      exports.Train = TramFront;
      exports.TrainFront = TrainFront;
      exports.TrainFrontIcon = TrainFront;
      exports.TrainFrontTunnel = TrainFrontTunnel;
      exports.TrainFrontTunnelIcon = TrainFrontTunnel;
      exports.TrainIcon = TramFront;
      exports.TrainTrack = TrainTrack;
      exports.TrainTrackIcon = TrainTrack;
      exports.TramFront = TramFront;
      exports.TramFrontIcon = TramFront;
      exports.Transgender = Transgender;
      exports.TransgenderIcon = Transgender;
      exports.Trash = Trash;
      exports.Trash2 = Trash2;
      exports.Trash2Icon = Trash2;
      exports.TrashIcon = Trash;
      exports.TreeDeciduous = TreeDeciduous;
      exports.TreeDeciduousIcon = TreeDeciduous;
      exports.TreePalm = TreePalm;
      exports.TreePalmIcon = TreePalm;
      exports.TreePine = TreePine;
      exports.TreePineIcon = TreePine;
      exports.Trees = Trees;
      exports.TreesIcon = Trees;
      exports.Trello = Trello;
      exports.TrelloIcon = Trello;
      exports.TrendingDown = TrendingDown;
      exports.TrendingDownIcon = TrendingDown;
      exports.TrendingUp = TrendingUp2;
      exports.TrendingUpDown = TrendingUpDown;
      exports.TrendingUpDownIcon = TrendingUpDown;
      exports.TrendingUpIcon = TrendingUp2;
      exports.Triangle = Triangle;
      exports.TriangleAlert = TriangleAlert;
      exports.TriangleAlertIcon = TriangleAlert;
      exports.TriangleDashed = TriangleDashed;
      exports.TriangleDashedIcon = TriangleDashed;
      exports.TriangleIcon = Triangle;
      exports.TriangleRight = TriangleRight;
      exports.TriangleRightIcon = TriangleRight;
      exports.Trophy = Trophy;
      exports.TrophyIcon = Trophy;
      exports.Truck = Truck;
      exports.TruckElectric = TruckElectric;
      exports.TruckElectricIcon = TruckElectric;
      exports.TruckIcon = Truck;
      exports.Turtle = Turtle;
      exports.TurtleIcon = Turtle;
      exports.Tv = Tv;
      exports.Tv2 = TvMinimal;
      exports.Tv2Icon = TvMinimal;
      exports.TvIcon = Tv;
      exports.TvMinimal = TvMinimal;
      exports.TvMinimalIcon = TvMinimal;
      exports.TvMinimalPlay = TvMinimalPlay;
      exports.TvMinimalPlayIcon = TvMinimalPlay;
      exports.Twitch = Twitch;
      exports.TwitchIcon = Twitch;
      exports.Twitter = Twitter2;
      exports.TwitterIcon = Twitter2;
      exports.Type = Type;
      exports.TypeIcon = Type;
      exports.TypeOutline = TypeOutline;
      exports.TypeOutlineIcon = TypeOutline;
      exports.Umbrella = Umbrella;
      exports.UmbrellaIcon = Umbrella;
      exports.UmbrellaOff = UmbrellaOff;
      exports.UmbrellaOffIcon = UmbrellaOff;
      exports.Underline = Underline;
      exports.UnderlineIcon = Underline;
      exports.Undo = Undo;
      exports.Undo2 = Undo2;
      exports.Undo2Icon = Undo2;
      exports.UndoDot = UndoDot;
      exports.UndoDotIcon = UndoDot;
      exports.UndoIcon = Undo;
      exports.UnfoldHorizontal = UnfoldHorizontal;
      exports.UnfoldHorizontalIcon = UnfoldHorizontal;
      exports.UnfoldVertical = UnfoldVertical;
      exports.UnfoldVerticalIcon = UnfoldVertical;
      exports.Ungroup = Ungroup;
      exports.UngroupIcon = Ungroup;
      exports.University = University;
      exports.UniversityIcon = University;
      exports.Unlink = Unlink;
      exports.Unlink2 = Unlink2;
      exports.Unlink2Icon = Unlink2;
      exports.UnlinkIcon = Unlink;
      exports.Unlock = LockOpen;
      exports.UnlockIcon = LockOpen;
      exports.UnlockKeyhole = LockKeyholeOpen;
      exports.UnlockKeyholeIcon = LockKeyholeOpen;
      exports.Unplug = Unplug;
      exports.UnplugIcon = Unplug;
      exports.Upload = Upload;
      exports.UploadCloud = CloudUpload;
      exports.UploadCloudIcon = CloudUpload;
      exports.UploadIcon = Upload;
      exports.Usb = Usb;
      exports.UsbIcon = Usb;
      exports.User = User;
      exports.User2 = UserRound;
      exports.User2Icon = UserRound;
      exports.UserCheck = UserCheck;
      exports.UserCheck2 = UserRoundCheck;
      exports.UserCheck2Icon = UserRoundCheck;
      exports.UserCheckIcon = UserCheck;
      exports.UserCircle = CircleUser;
      exports.UserCircle2 = CircleUserRound;
      exports.UserCircle2Icon = CircleUserRound;
      exports.UserCircleIcon = CircleUser;
      exports.UserCog = UserCog;
      exports.UserCog2 = UserRoundCog;
      exports.UserCog2Icon = UserRoundCog;
      exports.UserCogIcon = UserCog;
      exports.UserIcon = User;
      exports.UserLock = UserLock;
      exports.UserLockIcon = UserLock;
      exports.UserMinus = UserMinus;
      exports.UserMinus2 = UserRoundMinus;
      exports.UserMinus2Icon = UserRoundMinus;
      exports.UserMinusIcon = UserMinus;
      exports.UserPen = UserPen;
      exports.UserPenIcon = UserPen;
      exports.UserPlus = UserPlus;
      exports.UserPlus2 = UserRoundPlus;
      exports.UserPlus2Icon = UserRoundPlus;
      exports.UserPlusIcon = UserPlus;
      exports.UserRound = UserRound;
      exports.UserRoundCheck = UserRoundCheck;
      exports.UserRoundCheckIcon = UserRoundCheck;
      exports.UserRoundCog = UserRoundCog;
      exports.UserRoundCogIcon = UserRoundCog;
      exports.UserRoundIcon = UserRound;
      exports.UserRoundMinus = UserRoundMinus;
      exports.UserRoundMinusIcon = UserRoundMinus;
      exports.UserRoundPen = UserRoundPen;
      exports.UserRoundPenIcon = UserRoundPen;
      exports.UserRoundPlus = UserRoundPlus;
      exports.UserRoundPlusIcon = UserRoundPlus;
      exports.UserRoundSearch = UserRoundSearch;
      exports.UserRoundSearchIcon = UserRoundSearch;
      exports.UserRoundX = UserRoundX;
      exports.UserRoundXIcon = UserRoundX;
      exports.UserSearch = UserSearch;
      exports.UserSearchIcon = UserSearch;
      exports.UserSquare = SquareUser;
      exports.UserSquare2 = SquareUserRound;
      exports.UserSquare2Icon = SquareUserRound;
      exports.UserSquareIcon = SquareUser;
      exports.UserX = UserX;
      exports.UserX2 = UserRoundX;
      exports.UserX2Icon = UserRoundX;
      exports.UserXIcon = UserX;
      exports.Users = Users3;
      exports.Users2 = UsersRound;
      exports.Users2Icon = UsersRound;
      exports.UsersIcon = Users3;
      exports.UsersRound = UsersRound;
      exports.UsersRoundIcon = UsersRound;
      exports.Utensils = Utensils;
      exports.UtensilsCrossed = UtensilsCrossed;
      exports.UtensilsCrossedIcon = UtensilsCrossed;
      exports.UtensilsIcon = Utensils;
      exports.UtilityPole = UtilityPole;
      exports.UtilityPoleIcon = UtilityPole;
      exports.Variable = Variable;
      exports.VariableIcon = Variable;
      exports.Vault = Vault;
      exports.VaultIcon = Vault;
      exports.Vegan = Vegan;
      exports.VeganIcon = Vegan;
      exports.VenetianMask = VenetianMask;
      exports.VenetianMaskIcon = VenetianMask;
      exports.Venus = Venus;
      exports.VenusAndMars = VenusAndMars;
      exports.VenusAndMarsIcon = VenusAndMars;
      exports.VenusIcon = Venus;
      exports.Verified = BadgeCheck;
      exports.VerifiedIcon = BadgeCheck;
      exports.Vibrate = Vibrate;
      exports.VibrateIcon = Vibrate;
      exports.VibrateOff = VibrateOff;
      exports.VibrateOffIcon = VibrateOff;
      exports.Video = Video2;
      exports.VideoIcon = Video2;
      exports.VideoOff = VideoOff;
      exports.VideoOffIcon = VideoOff;
      exports.Videotape = Videotape;
      exports.VideotapeIcon = Videotape;
      exports.View = View;
      exports.ViewIcon = View;
      exports.Voicemail = Voicemail;
      exports.VoicemailIcon = Voicemail;
      exports.Volleyball = Volleyball;
      exports.VolleyballIcon = Volleyball;
      exports.Volume = Volume;
      exports.Volume1 = Volume1;
      exports.Volume1Icon = Volume1;
      exports.Volume2 = Volume2;
      exports.Volume2Icon = Volume2;
      exports.VolumeIcon = Volume;
      exports.VolumeOff = VolumeOff;
      exports.VolumeOffIcon = VolumeOff;
      exports.VolumeX = VolumeX;
      exports.VolumeXIcon = VolumeX;
      exports.Vote = Vote;
      exports.VoteIcon = Vote;
      exports.Wallet = Wallet;
      exports.Wallet2 = WalletMinimal;
      exports.Wallet2Icon = WalletMinimal;
      exports.WalletCards = WalletCards;
      exports.WalletCardsIcon = WalletCards;
      exports.WalletIcon = Wallet;
      exports.WalletMinimal = WalletMinimal;
      exports.WalletMinimalIcon = WalletMinimal;
      exports.Wallpaper = Wallpaper;
      exports.WallpaperIcon = Wallpaper;
      exports.Wand = Wand;
      exports.Wand2 = WandSparkles;
      exports.Wand2Icon = WandSparkles;
      exports.WandIcon = Wand;
      exports.WandSparkles = WandSparkles;
      exports.WandSparklesIcon = WandSparkles;
      exports.Warehouse = Warehouse;
      exports.WarehouseIcon = Warehouse;
      exports.WashingMachine = WashingMachine;
      exports.WashingMachineIcon = WashingMachine;
      exports.Watch = Watch;
      exports.WatchIcon = Watch;
      exports.Waves = Waves;
      exports.WavesIcon = Waves;
      exports.WavesLadder = WavesLadder;
      exports.WavesLadderIcon = WavesLadder;
      exports.Waypoints = Waypoints;
      exports.WaypointsIcon = Waypoints;
      exports.Webcam = Webcam;
      exports.WebcamIcon = Webcam;
      exports.Webhook = Webhook;
      exports.WebhookIcon = Webhook;
      exports.WebhookOff = WebhookOff;
      exports.WebhookOffIcon = WebhookOff;
      exports.Weight = Weight;
      exports.WeightIcon = Weight;
      exports.Wheat = Wheat;
      exports.WheatIcon = Wheat;
      exports.WheatOff = WheatOff;
      exports.WheatOffIcon = WheatOff;
      exports.WholeWord = WholeWord;
      exports.WholeWordIcon = WholeWord;
      exports.Wifi = Wifi;
      exports.WifiHigh = WifiHigh;
      exports.WifiHighIcon = WifiHigh;
      exports.WifiIcon = Wifi;
      exports.WifiLow = WifiLow;
      exports.WifiLowIcon = WifiLow;
      exports.WifiOff = WifiOff;
      exports.WifiOffIcon = WifiOff;
      exports.WifiPen = WifiPen;
      exports.WifiPenIcon = WifiPen;
      exports.WifiZero = WifiZero;
      exports.WifiZeroIcon = WifiZero;
      exports.Wind = Wind;
      exports.WindArrowDown = WindArrowDown;
      exports.WindArrowDownIcon = WindArrowDown;
      exports.WindIcon = Wind;
      exports.Wine = Wine;
      exports.WineIcon = Wine;
      exports.WineOff = WineOff;
      exports.WineOffIcon = WineOff;
      exports.Workflow = Workflow;
      exports.WorkflowIcon = Workflow;
      exports.Worm = Worm;
      exports.WormIcon = Worm;
      exports.WrapText = WrapText;
      exports.WrapTextIcon = WrapText;
      exports.Wrench = Wrench;
      exports.WrenchIcon = Wrench;
      exports.X = X3;
      exports.XCircle = CircleX;
      exports.XCircleIcon = CircleX;
      exports.XIcon = X3;
      exports.XOctagon = OctagonX;
      exports.XOctagonIcon = OctagonX;
      exports.XSquare = SquareX;
      exports.XSquareIcon = SquareX;
      exports.Youtube = Youtube;
      exports.YoutubeIcon = Youtube;
      exports.Zap = Zap3;
      exports.ZapIcon = Zap3;
      exports.ZapOff = ZapOff;
      exports.ZapOffIcon = ZapOff;
      exports.ZoomIn = ZoomIn;
      exports.ZoomInIcon = ZoomIn;
      exports.ZoomOut = ZoomOut;
      exports.ZoomOutIcon = ZoomOut;
      exports.createLucideIcon = createLucideIcon;
      exports.icons = index2;
    }
  });

  // node_modules/@supabase/node-fetch/browser.js
  var browser_exports = {};
  __export(browser_exports, {
    Headers: () => Headers2,
    Request: () => Request2,
    Response: () => Response2,
    default: () => browser_default,
    fetch: () => fetch2
  });
  var getGlobal, globalObject, fetch2, browser_default, Headers2, Request2, Response2;
  var init_browser = __esm({
    "node_modules/@supabase/node-fetch/browser.js"() {
      "use strict";
      getGlobal = function() {
        if (typeof self !== "undefined") {
          return self;
        }
        if (typeof window !== "undefined") {
          return window;
        }
        if (typeof global !== "undefined") {
          return global;
        }
        throw new Error("unable to locate global object");
      };
      globalObject = getGlobal();
      fetch2 = globalObject.fetch;
      browser_default = globalObject.fetch.bind(globalObject);
      Headers2 = globalObject.Headers;
      Request2 = globalObject.Request;
      Response2 = globalObject.Response;
    }
  });

  // node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.js
  var require_PostgrestError = __commonJS({
    "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var PostgrestError2 = class extends Error {
        constructor(context) {
          super(context.message);
          this.name = "PostgrestError";
          this.details = context.details;
          this.hint = context.hint;
          this.code = context.code;
        }
      };
      exports.default = PostgrestError2;
    }
  });

  // node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js
  var require_PostgrestBuilder = __commonJS({
    "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var node_fetch_1 = __importDefault((init_browser(), __toCommonJS(browser_exports)));
      var PostgrestError_1 = __importDefault(require_PostgrestError());
      var PostgrestBuilder2 = class {
        constructor(builder) {
          var _a, _b;
          this.shouldThrowOnError = false;
          this.method = builder.method;
          this.url = builder.url;
          this.headers = new Headers(builder.headers);
          this.schema = builder.schema;
          this.body = builder.body;
          this.shouldThrowOnError = (_a = builder.shouldThrowOnError) !== null && _a !== void 0 ? _a : false;
          this.signal = builder.signal;
          this.isMaybeSingle = (_b = builder.isMaybeSingle) !== null && _b !== void 0 ? _b : false;
          if (builder.fetch) {
            this.fetch = builder.fetch;
          } else if (typeof fetch === "undefined") {
            this.fetch = node_fetch_1.default;
          } else {
            this.fetch = fetch;
          }
        }
        /**
         * If there's an error with the query, throwOnError will reject the promise by
         * throwing the error instead of returning it as part of a successful response.
         *
         * {@link https://github.com/supabase/supabase-js/issues/92}
         */
        throwOnError() {
          this.shouldThrowOnError = true;
          return this;
        }
        /**
         * Set an HTTP header for the request.
         */
        setHeader(name, value) {
          this.headers = new Headers(this.headers);
          this.headers.set(name, value);
          return this;
        }
        then(onfulfilled, onrejected) {
          if (this.schema === void 0) {
          } else if (["GET", "HEAD"].includes(this.method)) {
            this.headers.set("Accept-Profile", this.schema);
          } else {
            this.headers.set("Content-Profile", this.schema);
          }
          if (this.method !== "GET" && this.method !== "HEAD") {
            this.headers.set("Content-Type", "application/json");
          }
          const _fetch = this.fetch;
          let res = _fetch(this.url.toString(), {
            method: this.method,
            headers: this.headers,
            body: JSON.stringify(this.body),
            signal: this.signal
          }).then(async (res2) => {
            var _a, _b, _c, _d;
            let error = null;
            let data2 = null;
            let count3 = null;
            let status = res2.status;
            let statusText = res2.statusText;
            if (res2.ok) {
              if (this.method !== "HEAD") {
                const body = await res2.text();
                if (body === "") {
                } else if (this.headers.get("Accept") === "text/csv") {
                  data2 = body;
                } else if (this.headers.get("Accept") && ((_a = this.headers.get("Accept")) === null || _a === void 0 ? void 0 : _a.includes("application/vnd.pgrst.plan+text"))) {
                  data2 = body;
                } else {
                  data2 = JSON.parse(body);
                }
              }
              const countHeader = (_b = this.headers.get("Prefer")) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);
              const contentRange = (_c = res2.headers.get("content-range")) === null || _c === void 0 ? void 0 : _c.split("/");
              if (countHeader && contentRange && contentRange.length > 1) {
                count3 = parseInt(contentRange[1]);
              }
              if (this.isMaybeSingle && this.method === "GET" && Array.isArray(data2)) {
                if (data2.length > 1) {
                  error = {
                    // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553
                    code: "PGRST116",
                    details: `Results contain ${data2.length} rows, application/vnd.pgrst.object+json requires 1 row`,
                    hint: null,
                    message: "JSON object requested, multiple (or no) rows returned"
                  };
                  data2 = null;
                  count3 = null;
                  status = 406;
                  statusText = "Not Acceptable";
                } else if (data2.length === 1) {
                  data2 = data2[0];
                } else {
                  data2 = null;
                }
              }
            } else {
              const body = await res2.text();
              try {
                error = JSON.parse(body);
                if (Array.isArray(error) && res2.status === 404) {
                  data2 = [];
                  error = null;
                  status = 200;
                  statusText = "OK";
                }
              } catch (_e) {
                if (res2.status === 404 && body === "") {
                  status = 204;
                  statusText = "No Content";
                } else {
                  error = {
                    message: body
                  };
                }
              }
              if (error && this.isMaybeSingle && ((_d = error === null || error === void 0 ? void 0 : error.details) === null || _d === void 0 ? void 0 : _d.includes("0 rows"))) {
                error = null;
                status = 200;
                statusText = "OK";
              }
              if (error && this.shouldThrowOnError) {
                throw new PostgrestError_1.default(error);
              }
            }
            const postgrestResponse = {
              error,
              data: data2,
              count: count3,
              status,
              statusText
            };
            return postgrestResponse;
          });
          if (!this.shouldThrowOnError) {
            res = res.catch((fetchError) => {
              var _a, _b, _c;
              return {
                error: {
                  message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : "FetchError"}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,
                  details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ""}`,
                  hint: "",
                  code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ""}`
                },
                data: null,
                count: null,
                status: 0,
                statusText: ""
              };
            });
          }
          return res.then(onfulfilled, onrejected);
        }
        /**
         * Override the type of the returned `data`.
         *
         * @typeParam NewResult - The new result type to override with
         * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead
         */
        returns() {
          return this;
        }
        /**
         * Override the type of the returned `data` field in the response.
         *
         * @typeParam NewResult - The new type to cast the response data to
         * @typeParam Options - Optional type configuration (defaults to { merge: true })
         * @typeParam Options.merge - When true, merges the new type with existing return type. When false, replaces the existing types entirely (defaults to true)
         * @example
         * ```typescript
         * // Merge with existing types (default behavior)
         * const query = supabase
         *   .from('users')
         *   .select()
         *   .overrideTypes<{ custom_field: string }>()
         *
         * // Replace existing types completely
         * const replaceQuery = supabase
         *   .from('users')
         *   .select()
         *   .overrideTypes<{ id: number; name: string }, { merge: false }>()
         * ```
         * @returns A PostgrestBuilder instance with the new type
         */
        overrideTypes() {
          return this;
        }
      };
      exports.default = PostgrestBuilder2;
    }
  });

  // node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js
  var require_PostgrestTransformBuilder = __commonJS({
    "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var PostgrestBuilder_1 = __importDefault(require_PostgrestBuilder());
      var PostgrestTransformBuilder2 = class extends PostgrestBuilder_1.default {
        /**
         * Perform a SELECT on the query result.
         *
         * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not
         * return modified rows. By calling this method, modified rows are returned in
         * `data`.
         *
         * @param columns - The columns to retrieve, separated by commas
         */
        select(columns) {
          let quoted = false;
          const cleanedColumns = (columns !== null && columns !== void 0 ? columns : "*").split("").map((c) => {
            if (/\s/.test(c) && !quoted) {
              return "";
            }
            if (c === '"') {
              quoted = !quoted;
            }
            return c;
          }).join("");
          this.url.searchParams.set("select", cleanedColumns);
          this.headers.append("Prefer", "return=representation");
          return this;
        }
        /**
         * Order the query result by `column`.
         *
         * You can call this method multiple times to order by multiple columns.
         *
         * You can order referenced tables, but it only affects the ordering of the
         * parent table if you use `!inner` in the query.
         *
         * @param column - The column to order by
         * @param options - Named parameters
         * @param options.ascending - If `true`, the result will be in ascending order
         * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,
         * `null`s appear last.
         * @param options.referencedTable - Set this to order a referenced table by
         * its columns
         * @param options.foreignTable - Deprecated, use `options.referencedTable`
         * instead
         */
        order(column, { ascending = true, nullsFirst, foreignTable, referencedTable = foreignTable } = {}) {
          const key = referencedTable ? `${referencedTable}.order` : "order";
          const existingOrder = this.url.searchParams.get(key);
          this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ""}${column}.${ascending ? "asc" : "desc"}${nullsFirst === void 0 ? "" : nullsFirst ? ".nullsfirst" : ".nullslast"}`);
          return this;
        }
        /**
         * Limit the query result by `count`.
         *
         * @param count - The maximum number of rows to return
         * @param options - Named parameters
         * @param options.referencedTable - Set this to limit rows of referenced
         * tables instead of the parent table
         * @param options.foreignTable - Deprecated, use `options.referencedTable`
         * instead
         */
        limit(count3, { foreignTable, referencedTable = foreignTable } = {}) {
          const key = typeof referencedTable === "undefined" ? "limit" : `${referencedTable}.limit`;
          this.url.searchParams.set(key, `${count3}`);
          return this;
        }
        /**
         * Limit the query result by starting at an offset `from` and ending at the offset `to`.
         * Only records within this range are returned.
         * This respects the query order and if there is no order clause the range could behave unexpectedly.
         * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third
         * and fourth rows of the query.
         *
         * @param from - The starting index from which to limit the result
         * @param to - The last index to which to limit the result
         * @param options - Named parameters
         * @param options.referencedTable - Set this to limit rows of referenced
         * tables instead of the parent table
         * @param options.foreignTable - Deprecated, use `options.referencedTable`
         * instead
         */
        range(from, to, { foreignTable, referencedTable = foreignTable } = {}) {
          const keyOffset = typeof referencedTable === "undefined" ? "offset" : `${referencedTable}.offset`;
          const keyLimit = typeof referencedTable === "undefined" ? "limit" : `${referencedTable}.limit`;
          this.url.searchParams.set(keyOffset, `${from}`);
          this.url.searchParams.set(keyLimit, `${to - from + 1}`);
          return this;
        }
        /**
         * Set the AbortSignal for the fetch request.
         *
         * @param signal - The AbortSignal to use for the fetch request
         */
        abortSignal(signal) {
          this.signal = signal;
          return this;
        }
        /**
         * Return `data` as a single object instead of an array of objects.
         *
         * Query result must be one row (e.g. using `.limit(1)`), otherwise this
         * returns an error.
         */
        single() {
          this.headers.set("Accept", "application/vnd.pgrst.object+json");
          return this;
        }
        /**
         * Return `data` as a single object instead of an array of objects.
         *
         * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise
         * this returns an error.
         */
        maybeSingle() {
          if (this.method === "GET") {
            this.headers.set("Accept", "application/json");
          } else {
            this.headers.set("Accept", "application/vnd.pgrst.object+json");
          }
          this.isMaybeSingle = true;
          return this;
        }
        /**
         * Return `data` as a string in CSV format.
         */
        csv() {
          this.headers.set("Accept", "text/csv");
          return this;
        }
        /**
         * Return `data` as an object in [GeoJSON](https://geojson.org) format.
         */
        geojson() {
          this.headers.set("Accept", "application/geo+json");
          return this;
        }
        /**
         * Return `data` as the EXPLAIN plan for the query.
         *
         * You need to enable the
         * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)
         * setting before using this method.
         *
         * @param options - Named parameters
         *
         * @param options.analyze - If `true`, the query will be executed and the
         * actual run time will be returned
         *
         * @param options.verbose - If `true`, the query identifier will be returned
         * and `data` will include the output columns of the query
         *
         * @param options.settings - If `true`, include information on configuration
         * parameters that affect query planning
         *
         * @param options.buffers - If `true`, include information on buffer usage
         *
         * @param options.wal - If `true`, include information on WAL record generation
         *
         * @param options.format - The format of the output, can be `"text"` (default)
         * or `"json"`
         */
        explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = "text" } = {}) {
          var _a;
          const options = [
            analyze ? "analyze" : null,
            verbose ? "verbose" : null,
            settings ? "settings" : null,
            buffers ? "buffers" : null,
            wal ? "wal" : null
          ].filter(Boolean).join("|");
          const forMediatype = (_a = this.headers.get("Accept")) !== null && _a !== void 0 ? _a : "application/json";
          this.headers.set("Accept", `application/vnd.pgrst.plan+${format}; for="${forMediatype}"; options=${options};`);
          if (format === "json") {
            return this;
          } else {
            return this;
          }
        }
        /**
         * Rollback the query.
         *
         * `data` will still be returned, but the query is not committed.
         */
        rollback() {
          this.headers.append("Prefer", "tx=rollback");
          return this;
        }
        /**
         * Override the type of the returned `data`.
         *
         * @typeParam NewResult - The new result type to override with
         * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead
         */
        returns() {
          return this;
        }
        /**
         * Set the maximum number of rows that can be affected by the query.
         * Only available in PostgREST v13+ and only works with PATCH and DELETE methods.
         *
         * @param value - The maximum number of rows that can be affected
         */
        maxAffected(value) {
          this.headers.append("Prefer", "handling=strict");
          this.headers.append("Prefer", `max-affected=${value}`);
          return this;
        }
      };
      exports.default = PostgrestTransformBuilder2;
    }
  });

  // node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js
  var require_PostgrestFilterBuilder = __commonJS({
    "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var PostgrestTransformBuilder_1 = __importDefault(require_PostgrestTransformBuilder());
      var PostgrestFilterBuilder2 = class extends PostgrestTransformBuilder_1.default {
        /**
         * Match only rows where `column` is equal to `value`.
         *
         * To check if the value of `column` is NULL, you should use `.is()` instead.
         *
         * @param column - The column to filter on
         * @param value - The value to filter with
         */
        eq(column, value) {
          this.url.searchParams.append(column, `eq.${value}`);
          return this;
        }
        /**
         * Match only rows where `column` is not equal to `value`.
         *
         * @param column - The column to filter on
         * @param value - The value to filter with
         */
        neq(column, value) {
          this.url.searchParams.append(column, `neq.${value}`);
          return this;
        }
        /**
         * Match only rows where `column` is greater than `value`.
         *
         * @param column - The column to filter on
         * @param value - The value to filter with
         */
        gt(column, value) {
          this.url.searchParams.append(column, `gt.${value}`);
          return this;
        }
        /**
         * Match only rows where `column` is greater than or equal to `value`.
         *
         * @param column - The column to filter on
         * @param value - The value to filter with
         */
        gte(column, value) {
          this.url.searchParams.append(column, `gte.${value}`);
          return this;
        }
        /**
         * Match only rows where `column` is less than `value`.
         *
         * @param column - The column to filter on
         * @param value - The value to filter with
         */
        lt(column, value) {
          this.url.searchParams.append(column, `lt.${value}`);
          return this;
        }
        /**
         * Match only rows where `column` is less than or equal to `value`.
         *
         * @param column - The column to filter on
         * @param value - The value to filter with
         */
        lte(column, value) {
          this.url.searchParams.append(column, `lte.${value}`);
          return this;
        }
        /**
         * Match only rows where `column` matches `pattern` case-sensitively.
         *
         * @param column - The column to filter on
         * @param pattern - The pattern to match with
         */
        like(column, pattern) {
          this.url.searchParams.append(column, `like.${pattern}`);
          return this;
        }
        /**
         * Match only rows where `column` matches all of `patterns` case-sensitively.
         *
         * @param column - The column to filter on
         * @param patterns - The patterns to match with
         */
        likeAllOf(column, patterns) {
          this.url.searchParams.append(column, `like(all).{${patterns.join(",")}}`);
          return this;
        }
        /**
         * Match only rows where `column` matches any of `patterns` case-sensitively.
         *
         * @param column - The column to filter on
         * @param patterns - The patterns to match with
         */
        likeAnyOf(column, patterns) {
          this.url.searchParams.append(column, `like(any).{${patterns.join(",")}}`);
          return this;
        }
        /**
         * Match only rows where `column` matches `pattern` case-insensitively.
         *
         * @param column - The column to filter on
         * @param pattern - The pattern to match with
         */
        ilike(column, pattern) {
          this.url.searchParams.append(column, `ilike.${pattern}`);
          return this;
        }
        /**
         * Match only rows where `column` matches all of `patterns` case-insensitively.
         *
         * @param column - The column to filter on
         * @param patterns - The patterns to match with
         */
        ilikeAllOf(column, patterns) {
          this.url.searchParams.append(column, `ilike(all).{${patterns.join(",")}}`);
          return this;
        }
        /**
         * Match only rows where `column` matches any of `patterns` case-insensitively.
         *
         * @param column - The column to filter on
         * @param patterns - The patterns to match with
         */
        ilikeAnyOf(column, patterns) {
          this.url.searchParams.append(column, `ilike(any).{${patterns.join(",")}}`);
          return this;
        }
        /**
         * Match only rows where `column` IS `value`.
         *
         * For non-boolean columns, this is only relevant for checking if the value of
         * `column` is NULL by setting `value` to `null`.
         *
         * For boolean columns, you can also set `value` to `true` or `false` and it
         * will behave the same way as `.eq()`.
         *
         * @param column - The column to filter on
         * @param value - The value to filter with
         */
        is(column, value) {
          this.url.searchParams.append(column, `is.${value}`);
          return this;
        }
        /**
         * Match only rows where `column` is included in the `values` array.
         *
         * @param column - The column to filter on
         * @param values - The values array to filter with
         */
        in(column, values) {
          const cleanedValues = Array.from(new Set(values)).map((s3) => {
            if (typeof s3 === "string" && new RegExp("[,()]").test(s3))
              return `"${s3}"`;
            else
              return `${s3}`;
          }).join(",");
          this.url.searchParams.append(column, `in.(${cleanedValues})`);
          return this;
        }
        /**
         * Only relevant for jsonb, array, and range columns. Match only rows where
         * `column` contains every element appearing in `value`.
         *
         * @param column - The jsonb, array, or range column to filter on
         * @param value - The jsonb, array, or range value to filter with
         */
        contains(column, value) {
          if (typeof value === "string") {
            this.url.searchParams.append(column, `cs.${value}`);
          } else if (Array.isArray(value)) {
            this.url.searchParams.append(column, `cs.{${value.join(",")}}`);
          } else {
            this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);
          }
          return this;
        }
        /**
         * Only relevant for jsonb, array, and range columns. Match only rows where
         * every element appearing in `column` is contained by `value`.
         *
         * @param column - The jsonb, array, or range column to filter on
         * @param value - The jsonb, array, or range value to filter with
         */
        containedBy(column, value) {
          if (typeof value === "string") {
            this.url.searchParams.append(column, `cd.${value}`);
          } else if (Array.isArray(value)) {
            this.url.searchParams.append(column, `cd.{${value.join(",")}}`);
          } else {
            this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);
          }
          return this;
        }
        /**
         * Only relevant for range columns. Match only rows where every element in
         * `column` is greater than any element in `range`.
         *
         * @param column - The range column to filter on
         * @param range - The range to filter with
         */
        rangeGt(column, range) {
          this.url.searchParams.append(column, `sr.${range}`);
          return this;
        }
        /**
         * Only relevant for range columns. Match only rows where every element in
         * `column` is either contained in `range` or greater than any element in
         * `range`.
         *
         * @param column - The range column to filter on
         * @param range - The range to filter with
         */
        rangeGte(column, range) {
          this.url.searchParams.append(column, `nxl.${range}`);
          return this;
        }
        /**
         * Only relevant for range columns. Match only rows where every element in
         * `column` is less than any element in `range`.
         *
         * @param column - The range column to filter on
         * @param range - The range to filter with
         */
        rangeLt(column, range) {
          this.url.searchParams.append(column, `sl.${range}`);
          return this;
        }
        /**
         * Only relevant for range columns. Match only rows where every element in
         * `column` is either contained in `range` or less than any element in
         * `range`.
         *
         * @param column - The range column to filter on
         * @param range - The range to filter with
         */
        rangeLte(column, range) {
          this.url.searchParams.append(column, `nxr.${range}`);
          return this;
        }
        /**
         * Only relevant for range columns. Match only rows where `column` is
         * mutually exclusive to `range` and there can be no element between the two
         * ranges.
         *
         * @param column - The range column to filter on
         * @param range - The range to filter with
         */
        rangeAdjacent(column, range) {
          this.url.searchParams.append(column, `adj.${range}`);
          return this;
        }
        /**
         * Only relevant for array and range columns. Match only rows where
         * `column` and `value` have an element in common.
         *
         * @param column - The array or range column to filter on
         * @param value - The array or range value to filter with
         */
        overlaps(column, value) {
          if (typeof value === "string") {
            this.url.searchParams.append(column, `ov.${value}`);
          } else {
            this.url.searchParams.append(column, `ov.{${value.join(",")}}`);
          }
          return this;
        }
        /**
         * Only relevant for text and tsvector columns. Match only rows where
         * `column` matches the query string in `query`.
         *
         * @param column - The text or tsvector column to filter on
         * @param query - The query text to match with
         * @param options - Named parameters
         * @param options.config - The text search configuration to use
         * @param options.type - Change how the `query` text is interpreted
         */
        textSearch(column, query, { config: config2, type } = {}) {
          let typePart = "";
          if (type === "plain") {
            typePart = "pl";
          } else if (type === "phrase") {
            typePart = "ph";
          } else if (type === "websearch") {
            typePart = "w";
          }
          const configPart = config2 === void 0 ? "" : `(${config2})`;
          this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);
          return this;
        }
        /**
         * Match only rows where each column in `query` keys is equal to its
         * associated value. Shorthand for multiple `.eq()`s.
         *
         * @param query - The object to filter with, with column names as keys mapped
         * to their filter values
         */
        match(query) {
          Object.entries(query).forEach(([column, value]) => {
            this.url.searchParams.append(column, `eq.${value}`);
          });
          return this;
        }
        /**
         * Match only rows which doesn't satisfy the filter.
         *
         * Unlike most filters, `opearator` and `value` are used as-is and need to
         * follow [PostgREST
         * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
         * to make sure they are properly sanitized.
         *
         * @param column - The column to filter on
         * @param operator - The operator to be negated to filter with, following
         * PostgREST syntax
         * @param value - The value to filter with, following PostgREST syntax
         */
        not(column, operator, value) {
          this.url.searchParams.append(column, `not.${operator}.${value}`);
          return this;
        }
        /**
         * Match only rows which satisfy at least one of the filters.
         *
         * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST
         * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
         * to make sure it's properly sanitized.
         *
         * It's currently not possible to do an `.or()` filter across multiple tables.
         *
         * @param filters - The filters to use, following PostgREST syntax
         * @param options - Named parameters
         * @param options.referencedTable - Set this to filter on referenced tables
         * instead of the parent table
         * @param options.foreignTable - Deprecated, use `referencedTable` instead
         */
        or(filters, { foreignTable, referencedTable = foreignTable } = {}) {
          const key = referencedTable ? `${referencedTable}.or` : "or";
          this.url.searchParams.append(key, `(${filters})`);
          return this;
        }
        /**
         * Match only rows which satisfy the filter. This is an escape hatch - you
         * should use the specific filter methods wherever possible.
         *
         * Unlike most filters, `opearator` and `value` are used as-is and need to
         * follow [PostgREST
         * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
         * to make sure they are properly sanitized.
         *
         * @param column - The column to filter on
         * @param operator - The operator to filter with, following PostgREST syntax
         * @param value - The value to filter with, following PostgREST syntax
         */
        filter(column, operator, value) {
          this.url.searchParams.append(column, `${operator}.${value}`);
          return this;
        }
      };
      exports.default = PostgrestFilterBuilder2;
    }
  });

  // node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js
  var require_PostgrestQueryBuilder = __commonJS({
    "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var PostgrestFilterBuilder_1 = __importDefault(require_PostgrestFilterBuilder());
      var PostgrestQueryBuilder2 = class {
        constructor(url, { headers = {}, schema: schema2, fetch: fetch3 }) {
          this.url = url;
          this.headers = new Headers(headers);
          this.schema = schema2;
          this.fetch = fetch3;
        }
        /**
         * Perform a SELECT query on the table or view.
         *
         * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`
         *
         * @param options - Named parameters
         *
         * @param options.head - When set to `true`, `data` will not be returned.
         * Useful if you only need the count.
         *
         * @param options.count - Count algorithm to use to count rows in the table or view.
         *
         * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
         * hood.
         *
         * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
         * statistics under the hood.
         *
         * `"estimated"`: Uses exact count for low numbers and planned count for high
         * numbers.
         */
        select(columns, { head: head2 = false, count: count3 } = {}) {
          const method = head2 ? "HEAD" : "GET";
          let quoted = false;
          const cleanedColumns = (columns !== null && columns !== void 0 ? columns : "*").split("").map((c) => {
            if (/\s/.test(c) && !quoted) {
              return "";
            }
            if (c === '"') {
              quoted = !quoted;
            }
            return c;
          }).join("");
          this.url.searchParams.set("select", cleanedColumns);
          if (count3) {
            this.headers.append("Prefer", `count=${count3}`);
          }
          return new PostgrestFilterBuilder_1.default({
            method,
            url: this.url,
            headers: this.headers,
            schema: this.schema,
            fetch: this.fetch
          });
        }
        /**
         * Perform an INSERT into the table or view.
         *
         * By default, inserted rows are not returned. To return it, chain the call
         * with `.select()`.
         *
         * @param values - The values to insert. Pass an object to insert a single row
         * or an array to insert multiple rows.
         *
         * @param options - Named parameters
         *
         * @param options.count - Count algorithm to use to count inserted rows.
         *
         * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
         * hood.
         *
         * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
         * statistics under the hood.
         *
         * `"estimated"`: Uses exact count for low numbers and planned count for high
         * numbers.
         *
         * @param options.defaultToNull - Make missing fields default to `null`.
         * Otherwise, use the default value for the column. Only applies for bulk
         * inserts.
         */
        insert(values, { count: count3, defaultToNull = true } = {}) {
          var _a;
          const method = "POST";
          if (count3) {
            this.headers.append("Prefer", `count=${count3}`);
          }
          if (!defaultToNull) {
            this.headers.append("Prefer", `missing=default`);
          }
          if (Array.isArray(values)) {
            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);
            if (columns.length > 0) {
              const uniqueColumns = [...new Set(columns)].map((column) => `"${column}"`);
              this.url.searchParams.set("columns", uniqueColumns.join(","));
            }
          }
          return new PostgrestFilterBuilder_1.default({
            method,
            url: this.url,
            headers: this.headers,
            schema: this.schema,
            body: values,
            fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch
          });
        }
        /**
         * Perform an UPSERT on the table or view. Depending on the column(s) passed
         * to `onConflict`, `.upsert()` allows you to perform the equivalent of
         * `.insert()` if a row with the corresponding `onConflict` columns doesn't
         * exist, or if it does exist, perform an alternative action depending on
         * `ignoreDuplicates`.
         *
         * By default, upserted rows are not returned. To return it, chain the call
         * with `.select()`.
         *
         * @param values - The values to upsert with. Pass an object to upsert a
         * single row or an array to upsert multiple rows.
         *
         * @param options - Named parameters
         *
         * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how
         * duplicate rows are determined. Two rows are duplicates if all the
         * `onConflict` columns are equal.
         *
         * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If
         * `false`, duplicate rows are merged with existing rows.
         *
         * @param options.count - Count algorithm to use to count upserted rows.
         *
         * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
         * hood.
         *
         * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
         * statistics under the hood.
         *
         * `"estimated"`: Uses exact count for low numbers and planned count for high
         * numbers.
         *
         * @param options.defaultToNull - Make missing fields default to `null`.
         * Otherwise, use the default value for the column. This only applies when
         * inserting new rows, not when merging with existing rows under
         * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.
         */
        upsert(values, { onConflict, ignoreDuplicates = false, count: count3, defaultToNull = true } = {}) {
          var _a;
          const method = "POST";
          this.headers.append("Prefer", `resolution=${ignoreDuplicates ? "ignore" : "merge"}-duplicates`);
          if (onConflict !== void 0)
            this.url.searchParams.set("on_conflict", onConflict);
          if (count3) {
            this.headers.append("Prefer", `count=${count3}`);
          }
          if (!defaultToNull) {
            this.headers.append("Prefer", "missing=default");
          }
          if (Array.isArray(values)) {
            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);
            if (columns.length > 0) {
              const uniqueColumns = [...new Set(columns)].map((column) => `"${column}"`);
              this.url.searchParams.set("columns", uniqueColumns.join(","));
            }
          }
          return new PostgrestFilterBuilder_1.default({
            method,
            url: this.url,
            headers: this.headers,
            schema: this.schema,
            body: values,
            fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch
          });
        }
        /**
         * Perform an UPDATE on the table or view.
         *
         * By default, updated rows are not returned. To return it, chain the call
         * with `.select()` after filters.
         *
         * @param values - The values to update with
         *
         * @param options - Named parameters
         *
         * @param options.count - Count algorithm to use to count updated rows.
         *
         * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
         * hood.
         *
         * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
         * statistics under the hood.
         *
         * `"estimated"`: Uses exact count for low numbers and planned count for high
         * numbers.
         */
        update(values, { count: count3 } = {}) {
          var _a;
          const method = "PATCH";
          if (count3) {
            this.headers.append("Prefer", `count=${count3}`);
          }
          return new PostgrestFilterBuilder_1.default({
            method,
            url: this.url,
            headers: this.headers,
            schema: this.schema,
            body: values,
            fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch
          });
        }
        /**
         * Perform a DELETE on the table or view.
         *
         * By default, deleted rows are not returned. To return it, chain the call
         * with `.select()` after filters.
         *
         * @param options - Named parameters
         *
         * @param options.count - Count algorithm to use to count deleted rows.
         *
         * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
         * hood.
         *
         * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
         * statistics under the hood.
         *
         * `"estimated"`: Uses exact count for low numbers and planned count for high
         * numbers.
         */
        delete({ count: count3 } = {}) {
          var _a;
          const method = "DELETE";
          if (count3) {
            this.headers.append("Prefer", `count=${count3}`);
          }
          return new PostgrestFilterBuilder_1.default({
            method,
            url: this.url,
            headers: this.headers,
            schema: this.schema,
            fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch
          });
        }
      };
      exports.default = PostgrestQueryBuilder2;
    }
  });

  // node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.js
  var require_PostgrestClient = __commonJS({
    "node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var PostgrestQueryBuilder_1 = __importDefault(require_PostgrestQueryBuilder());
      var PostgrestFilterBuilder_1 = __importDefault(require_PostgrestFilterBuilder());
      var PostgrestClient2 = class _PostgrestClient {
        // TODO: Add back shouldThrowOnError once we figure out the typings
        /**
         * Creates a PostgREST client.
         *
         * @param url - URL of the PostgREST endpoint
         * @param options - Named parameters
         * @param options.headers - Custom headers
         * @param options.schema - Postgres schema to switch to
         * @param options.fetch - Custom fetch
         */
        constructor(url, { headers = {}, schema: schema2, fetch: fetch3 } = {}) {
          this.url = url;
          this.headers = new Headers(headers);
          this.schemaName = schema2;
          this.fetch = fetch3;
        }
        /**
         * Perform a query on a table or a view.
         *
         * @param relation - The table or view name to query
         */
        from(relation) {
          const url = new URL(`${this.url}/${relation}`);
          return new PostgrestQueryBuilder_1.default(url, {
            headers: new Headers(this.headers),
            schema: this.schemaName,
            fetch: this.fetch
          });
        }
        /**
         * Select a schema to query or perform an function (rpc) call.
         *
         * The schema needs to be on the list of exposed schemas inside Supabase.
         *
         * @param schema - The schema to query
         */
        schema(schema2) {
          return new _PostgrestClient(this.url, {
            headers: this.headers,
            schema: schema2,
            fetch: this.fetch
          });
        }
        /**
         * Perform a function call.
         *
         * @param fn - The function name to call
         * @param args - The arguments to pass to the function call
         * @param options - Named parameters
         * @param options.head - When set to `true`, `data` will not be returned.
         * Useful if you only need the count.
         * @param options.get - When set to `true`, the function will be called with
         * read-only access mode.
         * @param options.count - Count algorithm to use to count rows returned by the
         * function. Only applicable for [set-returning
         * functions](https://www.postgresql.org/docs/current/functions-srf.html).
         *
         * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
         * hood.
         *
         * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
         * statistics under the hood.
         *
         * `"estimated"`: Uses exact count for low numbers and planned count for high
         * numbers.
         */
        rpc(fn, args = {}, { head: head2 = false, get: get3 = false, count: count3 } = {}) {
          var _a;
          let method;
          const url = new URL(`${this.url}/rpc/${fn}`);
          let body;
          if (head2 || get3) {
            method = head2 ? "HEAD" : "GET";
            Object.entries(args).filter(([_, value]) => value !== void 0).map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(",")}}` : `${value}`]).forEach(([name, value]) => {
              url.searchParams.append(name, value);
            });
          } else {
            method = "POST";
            body = args;
          }
          const headers = new Headers(this.headers);
          if (count3) {
            headers.set("Prefer", `count=${count3}`);
          }
          return new PostgrestFilterBuilder_1.default({
            method,
            url,
            headers,
            schema: this.schemaName,
            body,
            fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch
          });
        }
      };
      exports.default = PostgrestClient2;
    }
  });

  // node_modules/@supabase/postgrest-js/dist/cjs/index.js
  var require_cjs = __commonJS({
    "node_modules/@supabase/postgrest-js/dist/cjs/index.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PostgrestError = exports.PostgrestBuilder = exports.PostgrestTransformBuilder = exports.PostgrestFilterBuilder = exports.PostgrestQueryBuilder = exports.PostgrestClient = void 0;
      var PostgrestClient_1 = __importDefault(require_PostgrestClient());
      exports.PostgrestClient = PostgrestClient_1.default;
      var PostgrestQueryBuilder_1 = __importDefault(require_PostgrestQueryBuilder());
      exports.PostgrestQueryBuilder = PostgrestQueryBuilder_1.default;
      var PostgrestFilterBuilder_1 = __importDefault(require_PostgrestFilterBuilder());
      exports.PostgrestFilterBuilder = PostgrestFilterBuilder_1.default;
      var PostgrestTransformBuilder_1 = __importDefault(require_PostgrestTransformBuilder());
      exports.PostgrestTransformBuilder = PostgrestTransformBuilder_1.default;
      var PostgrestBuilder_1 = __importDefault(require_PostgrestBuilder());
      exports.PostgrestBuilder = PostgrestBuilder_1.default;
      var PostgrestError_1 = __importDefault(require_PostgrestError());
      exports.PostgrestError = PostgrestError_1.default;
      exports.default = {
        PostgrestClient: PostgrestClient_1.default,
        PostgrestQueryBuilder: PostgrestQueryBuilder_1.default,
        PostgrestFilterBuilder: PostgrestFilterBuilder_1.default,
        PostgrestTransformBuilder: PostgrestTransformBuilder_1.default,
        PostgrestBuilder: PostgrestBuilder_1.default,
        PostgrestError: PostgrestError_1.default
      };
    }
  });

  // src/main.tsx
  var import_client = __toESM(require_client());

  // node_modules/react-router/dist/development/chunk-PVWAREVJ.mjs
  var React = __toESM(require_react(), 1);
  var React2 = __toESM(require_react(), 1);
  var React3 = __toESM(require_react(), 1);
  var React4 = __toESM(require_react(), 1);
  var React9 = __toESM(require_react(), 1);
  var React8 = __toESM(require_react(), 1);
  var React7 = __toESM(require_react(), 1);
  var React6 = __toESM(require_react(), 1);
  var React5 = __toESM(require_react(), 1);
  var React10 = __toESM(require_react(), 1);
  var React11 = __toESM(require_react(), 1);
  var import_meta = {};
  var PopStateEventType = "popstate";
  function createHashHistory(options = {}) {
    function createHashLocation(window2, globalHistory) {
      let {
        pathname = "/",
        search = "",
        hash = ""
      } = parsePath(window2.location.hash.substring(1));
      if (!pathname.startsWith("/") && !pathname.startsWith(".")) {
        pathname = "/" + pathname;
      }
      return createLocation(
        "",
        { pathname, search, hash },
        // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null,
        globalHistory.state && globalHistory.state.key || "default"
      );
    }
    function createHashHref(window2, to) {
      let base = window2.document.querySelector("base");
      let href = "";
      if (base && base.getAttribute("href")) {
        let url = window2.location.href;
        let hashIndex = url.indexOf("#");
        href = hashIndex === -1 ? url : url.slice(0, hashIndex);
      }
      return href + "#" + (typeof to === "string" ? to : createPath(to));
    }
    function validateHashLocation(location, to) {
      warning(
        location.pathname.charAt(0) === "/",
        `relative pathnames are not supported in hash history.push(${JSON.stringify(
          to
        )})`
      );
    }
    return getUrlBasedHistory(
      createHashLocation,
      createHashHref,
      validateHashLocation,
      options
    );
  }
  function invariant(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  function warning(cond, message) {
    if (!cond) {
      if (typeof console !== "undefined") console.warn(message);
      try {
        throw new Error(message);
      } catch (e) {
      }
    }
  }
  function createKey() {
    return Math.random().toString(36).substring(2, 10);
  }
  function getHistoryState(location, index2) {
    return {
      usr: location.state,
      key: location.key,
      idx: index2
    };
  }
  function createLocation(current, to, state = null, key) {
    let location = {
      pathname: typeof current === "string" ? current : current.pathname,
      search: "",
      hash: "",
      ...typeof to === "string" ? parsePath(to) : to,
      state,
      // TODO: This could be cleaned up.  push/replace should probably just take
      // full Locations now and avoid the need to run through this flow at all
      // But that's a pretty big refactor to the current test suite so going to
      // keep as is for the time being and just let any incoming keys take precedence
      key: to && to.key || key || createKey()
    };
    return location;
  }
  function createPath({
    pathname = "/",
    search = "",
    hash = ""
  }) {
    if (search && search !== "?")
      pathname += search.charAt(0) === "?" ? search : "?" + search;
    if (hash && hash !== "#")
      pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
    return pathname;
  }
  function parsePath(path) {
    let parsedPath = {};
    if (path) {
      let hashIndex = path.indexOf("#");
      if (hashIndex >= 0) {
        parsedPath.hash = path.substring(hashIndex);
        path = path.substring(0, hashIndex);
      }
      let searchIndex = path.indexOf("?");
      if (searchIndex >= 0) {
        parsedPath.search = path.substring(searchIndex);
        path = path.substring(0, searchIndex);
      }
      if (path) {
        parsedPath.pathname = path;
      }
    }
    return parsedPath;
  }
  function getUrlBasedHistory(getLocation, createHref2, validateLocation, options = {}) {
    let { window: window2 = document.defaultView, v5Compat = false } = options;
    let globalHistory = window2.history;
    let action = "POP";
    let listener = null;
    let index2 = getIndex();
    if (index2 == null) {
      index2 = 0;
      globalHistory.replaceState({ ...globalHistory.state, idx: index2 }, "");
    }
    function getIndex() {
      let state = globalHistory.state || { idx: null };
      return state.idx;
    }
    function handlePop() {
      action = "POP";
      let nextIndex = getIndex();
      let delta = nextIndex == null ? null : nextIndex - index2;
      index2 = nextIndex;
      if (listener) {
        listener({ action, location: history.location, delta });
      }
    }
    function push(to, state) {
      action = "PUSH";
      let location = createLocation(history.location, to, state);
      if (validateLocation) validateLocation(location, to);
      index2 = getIndex() + 1;
      let historyState = getHistoryState(location, index2);
      let url = history.createHref(location);
      try {
        globalHistory.pushState(historyState, "", url);
      } catch (error) {
        if (error instanceof DOMException && error.name === "DataCloneError") {
          throw error;
        }
        window2.location.assign(url);
      }
      if (v5Compat && listener) {
        listener({ action, location: history.location, delta: 1 });
      }
    }
    function replace2(to, state) {
      action = "REPLACE";
      let location = createLocation(history.location, to, state);
      if (validateLocation) validateLocation(location, to);
      index2 = getIndex();
      let historyState = getHistoryState(location, index2);
      let url = history.createHref(location);
      globalHistory.replaceState(historyState, "", url);
      if (v5Compat && listener) {
        listener({ action, location: history.location, delta: 0 });
      }
    }
    function createURL(to) {
      return createBrowserURLImpl(to);
    }
    let history = {
      get action() {
        return action;
      },
      get location() {
        return getLocation(window2, globalHistory);
      },
      listen(fn) {
        if (listener) {
          throw new Error("A history only accepts one active listener");
        }
        window2.addEventListener(PopStateEventType, handlePop);
        listener = fn;
        return () => {
          window2.removeEventListener(PopStateEventType, handlePop);
          listener = null;
        };
      },
      createHref(to) {
        return createHref2(window2, to);
      },
      createURL,
      encodeLocation(to) {
        let url = createURL(to);
        return {
          pathname: url.pathname,
          search: url.search,
          hash: url.hash
        };
      },
      push,
      replace: replace2,
      go(n2) {
        return globalHistory.go(n2);
      }
    };
    return history;
  }
  function createBrowserURLImpl(to, isAbsolute = false) {
    let base = "http://localhost";
    if (typeof window !== "undefined") {
      base = window.location.origin !== "null" ? window.location.origin : window.location.href;
    }
    invariant(base, "No window.location.(origin|href) available to create URL");
    let href = typeof to === "string" ? to : createPath(to);
    href = href.replace(/ $/, "%20");
    if (!isAbsolute && href.startsWith("//")) {
      href = base + href;
    }
    return new URL(href, base);
  }
  var _map;
  _map = /* @__PURE__ */ new WeakMap();
  function matchRoutes(routes, locationArg, basename = "/") {
    return matchRoutesImpl(routes, locationArg, basename, false);
  }
  function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
    let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    let pathname = stripBasename(location.pathname || "/", basename);
    if (pathname == null) {
      return null;
    }
    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches = null;
    for (let i3 = 0; matches == null && i3 < branches.length; ++i3) {
      let decoded = decodePath(pathname);
      matches = matchRouteBranch(
        branches[i3],
        decoded,
        allowPartial
      );
    }
    return matches;
  }
  function convertRouteMatchToUiMatch(match, loaderData) {
    let { route, pathname, params } = match;
    return {
      id: route.id,
      pathname,
      params,
      data: loaderData[route.id],
      loaderData: loaderData[route.id],
      handle: route.handle
    };
  }
  function flattenRoutes(routes, branches = [], parentsMeta = [], parentPath = "", _hasParentOptionalSegments = false) {
    let flattenRoute = (route, index2, hasParentOptionalSegments = _hasParentOptionalSegments, relativePath) => {
      let meta = {
        relativePath: relativePath === void 0 ? route.path || "" : relativePath,
        caseSensitive: route.caseSensitive === true,
        childrenIndex: index2,
        route
      };
      if (meta.relativePath.startsWith("/")) {
        if (!meta.relativePath.startsWith(parentPath) && hasParentOptionalSegments) {
          return;
        }
        invariant(
          meta.relativePath.startsWith(parentPath),
          `Absolute route path "${meta.relativePath}" nested under path "${parentPath}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`
        );
        meta.relativePath = meta.relativePath.slice(parentPath.length);
      }
      let path = joinPaths([parentPath, meta.relativePath]);
      let routesMeta = parentsMeta.concat(meta);
      if (route.children && route.children.length > 0) {
        invariant(
          // Our types know better, but runtime JS may not!
          // @ts-expect-error
          route.index !== true,
          `Index routes must not have child routes. Please remove all child routes from route path "${path}".`
        );
        flattenRoutes(
          route.children,
          branches,
          routesMeta,
          path,
          hasParentOptionalSegments
        );
      }
      if (route.path == null && !route.index) {
        return;
      }
      branches.push({
        path,
        score: computeScore(path, route.index),
        routesMeta
      });
    };
    routes.forEach((route, index2) => {
      if (route.path === "" || !route.path?.includes("?")) {
        flattenRoute(route, index2);
      } else {
        for (let exploded of explodeOptionalSegments(route.path)) {
          flattenRoute(route, index2, true, exploded);
        }
      }
    });
    return branches;
  }
  function explodeOptionalSegments(path) {
    let segments = path.split("/");
    if (segments.length === 0) return [];
    let [first, ...rest] = segments;
    let isOptional = first.endsWith("?");
    let required = first.replace(/\?$/, "");
    if (rest.length === 0) {
      return isOptional ? [required, ""] : [required];
    }
    let restExploded = explodeOptionalSegments(rest.join("/"));
    let result = [];
    result.push(
      ...restExploded.map(
        (subpath) => subpath === "" ? required : [required, subpath].join("/")
      )
    );
    if (isOptional) {
      result.push(...restExploded);
    }
    return result.map(
      (exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded
    );
  }
  function rankRouteBranches(branches) {
    branches.sort(
      (a2, b) => a2.score !== b.score ? b.score - a2.score : compareIndexes(
        a2.routesMeta.map((meta) => meta.childrenIndex),
        b.routesMeta.map((meta) => meta.childrenIndex)
      )
    );
  }
  var paramRe = /^:[\w-]+$/;
  var dynamicSegmentValue = 3;
  var indexRouteValue = 2;
  var emptySegmentValue = 1;
  var staticSegmentValue = 10;
  var splatPenalty = -2;
  var isSplat = (s3) => s3 === "*";
  function computeScore(path, index2) {
    let segments = path.split("/");
    let initialScore = segments.length;
    if (segments.some(isSplat)) {
      initialScore += splatPenalty;
    }
    if (index2) {
      initialScore += indexRouteValue;
    }
    return segments.filter((s3) => !isSplat(s3)).reduce(
      (score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue),
      initialScore
    );
  }
  function compareIndexes(a2, b) {
    let siblings = a2.length === b.length && a2.slice(0, -1).every((n2, i3) => n2 === b[i3]);
    return siblings ? (
      // If two routes are siblings, we should try to match the earlier sibling
      // first. This allows people to have fine-grained control over the matching
      // behavior by simply putting routes with identical paths in the order they
      // want them tried.
      a2[a2.length - 1] - b[b.length - 1]
    ) : (
      // Otherwise, it doesn't really make sense to rank non-siblings by index,
      // so they sort equally.
      0
    );
  }
  function matchRouteBranch(branch, pathname, allowPartial = false) {
    let { routesMeta } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches = [];
    for (let i3 = 0; i3 < routesMeta.length; ++i3) {
      let meta = routesMeta[i3];
      let end = i3 === routesMeta.length - 1;
      let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
      let match = matchPath(
        { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },
        remainingPathname
      );
      let route = meta.route;
      if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
        match = matchPath(
          {
            path: meta.relativePath,
            caseSensitive: meta.caseSensitive,
            end: false
          },
          remainingPathname
        );
      }
      if (!match) {
        return null;
      }
      Object.assign(matchedParams, match.params);
      matches.push({
        // TODO: Can this as be avoided?
        params: matchedParams,
        pathname: joinPaths([matchedPathname, match.pathname]),
        pathnameBase: normalizePathname(
          joinPaths([matchedPathname, match.pathnameBase])
        ),
        route
      });
      if (match.pathnameBase !== "/") {
        matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
      }
    }
    return matches;
  }
  function matchPath(pattern, pathname) {
    if (typeof pattern === "string") {
      pattern = { path: pattern, caseSensitive: false, end: true };
    }
    let [matcher, compiledParams] = compilePath(
      pattern.path,
      pattern.caseSensitive,
      pattern.end
    );
    let match = pathname.match(matcher);
    if (!match) return null;
    let matchedPathname = match[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match.slice(1);
    let params = compiledParams.reduce(
      (memo2, { paramName, isOptional }, index2) => {
        if (paramName === "*") {
          let splatValue = captureGroups[index2] || "";
          pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
        }
        const value = captureGroups[index2];
        if (isOptional && !value) {
          memo2[paramName] = void 0;
        } else {
          memo2[paramName] = (value || "").replace(/%2F/g, "/");
        }
        return memo2;
      },
      {}
    );
    return {
      params,
      pathname: matchedPathname,
      pathnameBase,
      pattern
    };
  }
  function compilePath(path, caseSensitive = false, end = true) {
    warning(
      path === "*" || !path.endsWith("*") || path.endsWith("/*"),
      `Route path "${path}" will be treated as if it were "${path.replace(/\*$/, "/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${path.replace(/\*$/, "/*")}".`
    );
    let params = [];
    let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(
      /\/:([\w-]+)(\?)?/g,
      (_, paramName, isOptional) => {
        params.push({ paramName, isOptional: isOptional != null });
        return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
      }
    ).replace(/\/([\w-]+)\?(\/|$)/g, "(/$1)?$2");
    if (path.endsWith("*")) {
      params.push({ paramName: "*" });
      regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
    } else if (end) {
      regexpSource += "\\/*$";
    } else if (path !== "" && path !== "/") {
      regexpSource += "(?:(?=\\/|$))";
    } else {
    }
    let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
    return [matcher, params];
  }
  function decodePath(value) {
    try {
      return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
    } catch (error) {
      warning(
        false,
        `The URL path "${value}" could not be decoded because it is a malformed URL segment. This is probably due to a bad percent encoding (${error}).`
      );
      return value;
    }
  }
  function stripBasename(pathname, basename) {
    if (basename === "/") return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
      return null;
    }
    let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") {
      return null;
    }
    return pathname.slice(startIndex) || "/";
  }
  function resolvePath(to, fromPathname = "/") {
    let {
      pathname: toPathname,
      search = "",
      hash = ""
    } = typeof to === "string" ? parsePath(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
      pathname,
      search: normalizeSearch(search),
      hash: normalizeHash(hash)
    };
  }
  function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment) => {
      if (segment === "..") {
        if (segments.length > 1) segments.pop();
      } else if (segment !== ".") {
        segments.push(segment);
      }
    });
    return segments.length > 1 ? segments.join("/") : "/";
  }
  function getInvalidPathError(char, field, dest, path) {
    return `Cannot include a '${char}' character in a manually specified \`to.${field}\` field [${JSON.stringify(
      path
    )}].  Please separate it out to the \`to.${dest}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`;
  }
  function getPathContributingMatches(matches) {
    return matches.filter(
      (match, index2) => index2 === 0 || match.route.path && match.route.path.length > 0
    );
  }
  function getResolveToMatches(matches) {
    let pathMatches2 = getPathContributingMatches(matches);
    return pathMatches2.map(
      (match, idx) => idx === pathMatches2.length - 1 ? match.pathname : match.pathnameBase
    );
  }
  function resolveTo(toArg, routePathnames, locationPathname, isPathRelative = false) {
    let to;
    if (typeof toArg === "string") {
      to = parsePath(toArg);
    } else {
      to = { ...toArg };
      invariant(
        !to.pathname || !to.pathname.includes("?"),
        getInvalidPathError("?", "pathname", "search", to)
      );
      invariant(
        !to.pathname || !to.pathname.includes("#"),
        getInvalidPathError("#", "pathname", "hash", to)
      );
      invariant(
        !to.search || !to.search.includes("#"),
        getInvalidPathError("#", "search", "hash", to)
      );
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from;
    if (toPathname == null) {
      from = locationPathname;
    } else {
      let routePathnameIndex = routePathnames.length - 1;
      if (!isPathRelative && toPathname.startsWith("..")) {
        let toSegments = toPathname.split("/");
        while (toSegments[0] === "..") {
          toSegments.shift();
          routePathnameIndex -= 1;
        }
        to.pathname = toSegments.join("/");
      }
      from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path = resolvePath(to, from);
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
      path.pathname += "/";
    }
    return path;
  }
  var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
  var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
  var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
  var normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
  function isRouteErrorResponse(error) {
    return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
  }
  var validMutationMethodsArr = [
    "POST",
    "PUT",
    "PATCH",
    "DELETE"
  ];
  var validMutationMethods = new Set(
    validMutationMethodsArr
  );
  var validRequestMethodsArr = [
    "GET",
    ...validMutationMethodsArr
  ];
  var validRequestMethods = new Set(validRequestMethodsArr);
  var ResetLoaderDataSymbol = Symbol("ResetLoaderData");
  var DataRouterContext = React.createContext(null);
  DataRouterContext.displayName = "DataRouter";
  var DataRouterStateContext = React.createContext(null);
  DataRouterStateContext.displayName = "DataRouterState";
  var RSCRouterContext = React.createContext(false);
  var ViewTransitionContext = React.createContext({
    isTransitioning: false
  });
  ViewTransitionContext.displayName = "ViewTransition";
  var FetchersContext = React.createContext(
    /* @__PURE__ */ new Map()
  );
  FetchersContext.displayName = "Fetchers";
  var AwaitContext = React.createContext(null);
  AwaitContext.displayName = "Await";
  var NavigationContext = React.createContext(
    null
  );
  NavigationContext.displayName = "Navigation";
  var LocationContext = React.createContext(
    null
  );
  LocationContext.displayName = "Location";
  var RouteContext = React.createContext({
    outlet: null,
    matches: [],
    isDataRoute: false
  });
  RouteContext.displayName = "Route";
  var RouteErrorContext = React.createContext(null);
  RouteErrorContext.displayName = "RouteError";
  var ENABLE_DEV_WARNINGS = true;
  function useHref(to, { relative } = {}) {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useHref() may be used only in the context of a <Router> component.`
    );
    let { basename, navigator: navigator2 } = React2.useContext(NavigationContext);
    let { hash, pathname, search } = useResolvedPath(to, { relative });
    let joinedPathname = pathname;
    if (basename !== "/") {
      joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
    }
    return navigator2.createHref({ pathname: joinedPathname, search, hash });
  }
  function useInRouterContext() {
    return React2.useContext(LocationContext) != null;
  }
  function useLocation() {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useLocation() may be used only in the context of a <Router> component.`
    );
    return React2.useContext(LocationContext).location;
  }
  var navigateEffectWarning = `You should call navigate() in a React.useEffect(), not when your component is first rendered.`;
  function useIsomorphicLayoutEffect(cb) {
    let isStatic = React2.useContext(NavigationContext).static;
    if (!isStatic) {
      React2.useLayoutEffect(cb);
    }
  }
  function useNavigate() {
    let { isDataRoute } = React2.useContext(RouteContext);
    return isDataRoute ? useNavigateStable() : useNavigateUnstable();
  }
  function useNavigateUnstable() {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useNavigate() may be used only in the context of a <Router> component.`
    );
    let dataRouterContext = React2.useContext(DataRouterContext);
    let { basename, navigator: navigator2 } = React2.useContext(NavigationContext);
    let { matches } = React2.useContext(RouteContext);
    let { pathname: locationPathname } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
    let activeRef = React2.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React2.useCallback(
      (to, options = {}) => {
        warning(activeRef.current, navigateEffectWarning);
        if (!activeRef.current) return;
        if (typeof to === "number") {
          navigator2.go(to);
          return;
        }
        let path = resolveTo(
          to,
          JSON.parse(routePathnamesJson),
          locationPathname,
          options.relative === "path"
        );
        if (dataRouterContext == null && basename !== "/") {
          path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
        }
        (!!options.replace ? navigator2.replace : navigator2.push)(
          path,
          options.state,
          options
        );
      },
      [
        basename,
        navigator2,
        routePathnamesJson,
        locationPathname,
        dataRouterContext
      ]
    );
    return navigate;
  }
  var OutletContext = React2.createContext(null);
  function useParams() {
    let { matches } = React2.useContext(RouteContext);
    let routeMatch = matches[matches.length - 1];
    return routeMatch ? routeMatch.params : {};
  }
  function useResolvedPath(to, { relative } = {}) {
    let { matches } = React2.useContext(RouteContext);
    let { pathname: locationPathname } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches));
    return React2.useMemo(
      () => resolveTo(
        to,
        JSON.parse(routePathnamesJson),
        locationPathname,
        relative === "path"
      ),
      [to, routePathnamesJson, locationPathname, relative]
    );
  }
  function useRoutes(routes, locationArg) {
    return useRoutesImpl(routes, locationArg);
  }
  function useRoutesImpl(routes, locationArg, dataRouterState, unstable_onError, future) {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useRoutes() may be used only in the context of a <Router> component.`
    );
    let { navigator: navigator2 } = React2.useContext(NavigationContext);
    let { matches: parentMatches } = React2.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    if (ENABLE_DEV_WARNINGS) {
      let parentPath = parentRoute && parentRoute.path || "";
      warningOnce(
        parentPathname,
        !parentRoute || parentPath.endsWith("*") || parentPath.endsWith("*?"),
        `You rendered descendant <Routes> (or called \`useRoutes()\`) at "${parentPathname}" (under <Route path="${parentPath}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

Please change the parent <Route path="${parentPath}"> to <Route path="${parentPath === "/" ? "*" : `${parentPath}/*`}">.`
      );
    }
    let locationFromContext = useLocation();
    let location;
    if (locationArg) {
      let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      invariant(
        parentPathnameBase === "/" || parsedLocationArg.pathname?.startsWith(parentPathnameBase),
        `When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${parentPathnameBase}" but pathname "${parsedLocationArg.pathname}" was given in the \`location\` prop.`
      );
      location = parsedLocationArg;
    } else {
      location = locationFromContext;
    }
    let pathname = location.pathname || "/";
    let remainingPathname = pathname;
    if (parentPathnameBase !== "/") {
      let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
      let segments = pathname.replace(/^\//, "").split("/");
      remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
    }
    let matches = matchRoutes(routes, { pathname: remainingPathname });
    if (ENABLE_DEV_WARNINGS) {
      warning(
        parentRoute || matches != null,
        `No routes matched location "${location.pathname}${location.search}${location.hash}" `
      );
      warning(
        matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0,
        `Matched leaf route at location "${location.pathname}${location.search}${location.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`
      );
    }
    let renderedMatches = _renderMatches(
      matches && matches.map(
        (match) => Object.assign({}, match, {
          params: Object.assign({}, parentParams, match.params),
          pathname: joinPaths([
            parentPathnameBase,
            // Re-encode pathnames that were decoded inside matchRoutes
            navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
          ]),
          pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
            parentPathnameBase,
            // Re-encode pathnames that were decoded inside matchRoutes
            navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
          ])
        })
      ),
      parentMatches,
      dataRouterState,
      unstable_onError,
      future
    );
    if (locationArg && renderedMatches) {
      return /* @__PURE__ */ React2.createElement(
        LocationContext.Provider,
        {
          value: {
            location: {
              pathname: "/",
              search: "",
              hash: "",
              state: null,
              key: "default",
              ...location
            },
            navigationType: "POP"
            /* Pop */
          }
        },
        renderedMatches
      );
    }
    return renderedMatches;
  }
  function DefaultErrorComponent() {
    let error = useRouteError();
    let message = isRouteErrorResponse(error) ? `${error.status} ${error.statusText}` : error instanceof Error ? error.message : JSON.stringify(error);
    let stack = error instanceof Error ? error.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = { padding: "0.5rem", backgroundColor: lightgrey };
    let codeStyles = { padding: "2px 4px", backgroundColor: lightgrey };
    let devInfo = null;
    if (ENABLE_DEV_WARNINGS) {
      console.error(
        "Error handled by React Router default ErrorBoundary:",
        error
      );
      devInfo = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React2.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React2.createElement("code", { style: codeStyles }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React2.createElement("code", { style: codeStyles }, "errorElement"), " prop on your route."));
    }
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React2.createElement("h3", { style: { fontStyle: "italic" } }, message), stack ? /* @__PURE__ */ React2.createElement("pre", { style: preStyles }, stack) : null, devInfo);
  }
  var defaultErrorElement = /* @__PURE__ */ React2.createElement(DefaultErrorComponent, null);
  var RenderErrorBoundary = class extends React2.Component {
    constructor(props) {
      super(props);
      this.state = {
        location: props.location,
        revalidation: props.revalidation,
        error: props.error
      };
    }
    static getDerivedStateFromError(error) {
      return { error };
    }
    static getDerivedStateFromProps(props, state) {
      if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
        return {
          error: props.error,
          location: props.location,
          revalidation: props.revalidation
        };
      }
      return {
        error: props.error !== void 0 ? props.error : state.error,
        location: state.location,
        revalidation: props.revalidation || state.revalidation
      };
    }
    componentDidCatch(error, errorInfo) {
      if (this.props.unstable_onError) {
        this.props.unstable_onError(error, errorInfo);
      } else {
        console.error(
          "React Router caught the following error during render",
          error
        );
      }
    }
    render() {
      return this.state.error !== void 0 ? /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: this.props.routeContext }, /* @__PURE__ */ React2.createElement(
        RouteErrorContext.Provider,
        {
          value: this.state.error,
          children: this.props.component
        }
      )) : this.props.children;
    }
  };
  function RenderedRoute({ routeContext, match, children }) {
    let dataRouterContext = React2.useContext(DataRouterContext);
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
      dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
    }
    return /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: routeContext }, children);
  }
  function _renderMatches(matches, parentMatches = [], dataRouterState = null, unstable_onError = null, future = null) {
    if (matches == null) {
      if (!dataRouterState) {
        return null;
      }
      if (dataRouterState.errors) {
        matches = dataRouterState.matches;
      } else if (parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
        matches = dataRouterState.matches;
      } else {
        return null;
      }
    }
    let renderedMatches = matches;
    let errors = dataRouterState?.errors;
    if (errors != null) {
      let errorIndex = renderedMatches.findIndex(
        (m) => m.route.id && errors?.[m.route.id] !== void 0
      );
      invariant(
        errorIndex >= 0,
        `Could not find a matching route for errors on route IDs: ${Object.keys(
          errors
        ).join(",")}`
      );
      renderedMatches = renderedMatches.slice(
        0,
        Math.min(renderedMatches.length, errorIndex + 1)
      );
    }
    let renderFallback = false;
    let fallbackIndex = -1;
    if (dataRouterState) {
      for (let i3 = 0; i3 < renderedMatches.length; i3++) {
        let match = renderedMatches[i3];
        if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
          fallbackIndex = i3;
        }
        if (match.route.id) {
          let { loaderData, errors: errors2 } = dataRouterState;
          let needsToRunLoader = match.route.loader && !loaderData.hasOwnProperty(match.route.id) && (!errors2 || errors2[match.route.id] === void 0);
          if (match.route.lazy || needsToRunLoader) {
            renderFallback = true;
            if (fallbackIndex >= 0) {
              renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
            } else {
              renderedMatches = [renderedMatches[0]];
            }
            break;
          }
        }
      }
    }
    return renderedMatches.reduceRight(
      (outlet, match, index2) => {
        let error;
        let shouldRenderHydrateFallback = false;
        let errorElement = null;
        let hydrateFallbackElement = null;
        if (dataRouterState) {
          error = errors && match.route.id ? errors[match.route.id] : void 0;
          errorElement = match.route.errorElement || defaultErrorElement;
          if (renderFallback) {
            if (fallbackIndex < 0 && index2 === 0) {
              warningOnce(
                "route-fallback",
                false,
                "No `HydrateFallback` element provided to render during initial hydration"
              );
              shouldRenderHydrateFallback = true;
              hydrateFallbackElement = null;
            } else if (fallbackIndex === index2) {
              shouldRenderHydrateFallback = true;
              hydrateFallbackElement = match.route.hydrateFallbackElement || null;
            }
          }
        }
        let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
        let getChildren = () => {
          let children;
          if (error) {
            children = errorElement;
          } else if (shouldRenderHydrateFallback) {
            children = hydrateFallbackElement;
          } else if (match.route.Component) {
            children = /* @__PURE__ */ React2.createElement(match.route.Component, null);
          } else if (match.route.element) {
            children = match.route.element;
          } else {
            children = outlet;
          }
          return /* @__PURE__ */ React2.createElement(
            RenderedRoute,
            {
              match,
              routeContext: {
                outlet,
                matches: matches2,
                isDataRoute: dataRouterState != null
              },
              children
            }
          );
        };
        return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index2 === 0) ? /* @__PURE__ */ React2.createElement(
          RenderErrorBoundary,
          {
            location: dataRouterState.location,
            revalidation: dataRouterState.revalidation,
            component: errorElement,
            error,
            children: getChildren(),
            routeContext: { outlet: null, matches: matches2, isDataRoute: true },
            unstable_onError
          }
        ) : getChildren();
      },
      null
    );
  }
  function getDataRouterConsoleError(hookName) {
    return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
  }
  function useDataRouterContext(hookName) {
    let ctx = React2.useContext(DataRouterContext);
    invariant(ctx, getDataRouterConsoleError(hookName));
    return ctx;
  }
  function useDataRouterState(hookName) {
    let state = React2.useContext(DataRouterStateContext);
    invariant(state, getDataRouterConsoleError(hookName));
    return state;
  }
  function useRouteContext(hookName) {
    let route = React2.useContext(RouteContext);
    invariant(route, getDataRouterConsoleError(hookName));
    return route;
  }
  function useCurrentRouteId(hookName) {
    let route = useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    invariant(
      thisRoute.route.id,
      `${hookName} can only be used on routes that contain a unique "id"`
    );
    return thisRoute.route.id;
  }
  function useRouteId() {
    return useCurrentRouteId(
      "useRouteId"
      /* UseRouteId */
    );
  }
  function useNavigation() {
    let state = useDataRouterState(
      "useNavigation"
      /* UseNavigation */
    );
    return state.navigation;
  }
  function useMatches() {
    let { matches, loaderData } = useDataRouterState(
      "useMatches"
      /* UseMatches */
    );
    return React2.useMemo(
      () => matches.map((m) => convertRouteMatchToUiMatch(m, loaderData)),
      [matches, loaderData]
    );
  }
  function useRouteError() {
    let error = React2.useContext(RouteErrorContext);
    let state = useDataRouterState(
      "useRouteError"
      /* UseRouteError */
    );
    let routeId = useCurrentRouteId(
      "useRouteError"
      /* UseRouteError */
    );
    if (error !== void 0) {
      return error;
    }
    return state.errors?.[routeId];
  }
  function useNavigateStable() {
    let { router } = useDataRouterContext(
      "useNavigate"
      /* UseNavigateStable */
    );
    let id = useCurrentRouteId(
      "useNavigate"
      /* UseNavigateStable */
    );
    let activeRef = React2.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React2.useCallback(
      async (to, options = {}) => {
        warning(activeRef.current, navigateEffectWarning);
        if (!activeRef.current) return;
        if (typeof to === "number") {
          router.navigate(to);
        } else {
          await router.navigate(to, { fromRouteId: id, ...options });
        }
      },
      [router, id]
    );
    return navigate;
  }
  var alreadyWarned = {};
  function warningOnce(key, cond, message) {
    if (!cond && !alreadyWarned[key]) {
      alreadyWarned[key] = true;
      warning(false, message);
    }
  }
  var MemoizedDataRoutes = React3.memo(DataRoutes);
  function DataRoutes({
    routes,
    future,
    state,
    unstable_onError
  }) {
    return useRoutesImpl(routes, void 0, state, unstable_onError, future);
  }
  function Route(props) {
    invariant(
      false,
      `A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.`
    );
  }
  function Router({
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = "POP",
    navigator: navigator2,
    static: staticProp = false
  }) {
    invariant(
      !useInRouterContext(),
      `You cannot render a <Router> inside another <Router>. You should never have more than one in your app.`
    );
    let basename = basenameProp.replace(/^\/*/, "/");
    let navigationContext = React3.useMemo(
      () => ({
        basename,
        navigator: navigator2,
        static: staticProp,
        future: {}
      }),
      [basename, navigator2, staticProp]
    );
    if (typeof locationProp === "string") {
      locationProp = parsePath(locationProp);
    }
    let {
      pathname = "/",
      search = "",
      hash = "",
      state = null,
      key = "default"
    } = locationProp;
    let locationContext = React3.useMemo(() => {
      let trailingPathname = stripBasename(pathname, basename);
      if (trailingPathname == null) {
        return null;
      }
      return {
        location: {
          pathname: trailingPathname,
          search,
          hash,
          state,
          key
        },
        navigationType
      };
    }, [basename, pathname, search, hash, state, key, navigationType]);
    warning(
      locationContext != null,
      `<Router basename="${basename}"> is not able to match the URL "${pathname}${search}${hash}" because it does not start with the basename, so the <Router> won't render anything.`
    );
    if (locationContext == null) {
      return null;
    }
    return /* @__PURE__ */ React3.createElement(NavigationContext.Provider, { value: navigationContext }, /* @__PURE__ */ React3.createElement(LocationContext.Provider, { children, value: locationContext }));
  }
  function Routes({
    children,
    location
  }) {
    return useRoutes(createRoutesFromChildren(children), location);
  }
  function createRoutesFromChildren(children, parentPath = []) {
    let routes = [];
    React3.Children.forEach(children, (element, index2) => {
      if (!React3.isValidElement(element)) {
        return;
      }
      let treePath = [...parentPath, index2];
      if (element.type === React3.Fragment) {
        routes.push.apply(
          routes,
          createRoutesFromChildren(element.props.children, treePath)
        );
        return;
      }
      invariant(
        element.type === Route,
        `[${typeof element.type === "string" ? element.type : element.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`
      );
      invariant(
        !element.props.index || !element.props.children,
        "An index route cannot have child routes."
      );
      let route = {
        id: element.props.id || treePath.join("-"),
        caseSensitive: element.props.caseSensitive,
        element: element.props.element,
        Component: element.props.Component,
        index: element.props.index,
        path: element.props.path,
        loader: element.props.loader,
        action: element.props.action,
        hydrateFallbackElement: element.props.hydrateFallbackElement,
        HydrateFallback: element.props.HydrateFallback,
        errorElement: element.props.errorElement,
        ErrorBoundary: element.props.ErrorBoundary,
        hasErrorBoundary: element.props.hasErrorBoundary === true || element.props.ErrorBoundary != null || element.props.errorElement != null,
        shouldRevalidate: element.props.shouldRevalidate,
        handle: element.props.handle,
        lazy: element.props.lazy
      };
      if (element.props.children) {
        route.children = createRoutesFromChildren(
          element.props.children,
          treePath
        );
      }
      routes.push(route);
    });
    return routes;
  }
  var defaultMethod = "get";
  var defaultEncType = "application/x-www-form-urlencoded";
  function isHtmlElement(object) {
    return object != null && typeof object.tagName === "string";
  }
  function isButtonElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
  }
  function isFormElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
  }
  function isInputElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  function shouldProcessLinkClick(event, target) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target || target === "_self") && // Let browser handle "target=_blank" etc.
    !isModifiedEvent(event);
  }
  var _formDataSupportsSubmitter = null;
  function isFormDataSubmitterSupported() {
    if (_formDataSupportsSubmitter === null) {
      try {
        new FormData(
          document.createElement("form"),
          // @ts-expect-error if FormData supports the submitter parameter, this will throw
          0
        );
        _formDataSupportsSubmitter = false;
      } catch (e) {
        _formDataSupportsSubmitter = true;
      }
    }
    return _formDataSupportsSubmitter;
  }
  var supportedFormEncTypes = /* @__PURE__ */ new Set([
    "application/x-www-form-urlencoded",
    "multipart/form-data",
    "text/plain"
  ]);
  function getFormEncType(encType) {
    if (encType != null && !supportedFormEncTypes.has(encType)) {
      warning(
        false,
        `"${encType}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${defaultEncType}"`
      );
      return null;
    }
    return encType;
  }
  function getFormSubmissionInfo(target, basename) {
    let method;
    let action;
    let encType;
    let formData;
    let body;
    if (isFormElement(target)) {
      let attr = target.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method = target.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(target);
    } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
      let form = target.form;
      if (form == null) {
        throw new Error(
          `Cannot submit a <button> or <input type="submit"> without a <form>`
        );
      }
      let attr = target.getAttribute("formaction") || form.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(form, target);
      if (!isFormDataSubmitterSupported()) {
        let { name, type, value } = target;
        if (type === "image") {
          let prefix = name ? `${name}.` : "";
          formData.append(`${prefix}x`, "0");
          formData.append(`${prefix}y`, "0");
        } else if (name) {
          formData.append(name, value);
        }
      }
    } else if (isHtmlElement(target)) {
      throw new Error(
        `Cannot submit element that is not <form>, <button>, or <input type="submit|image">`
      );
    } else {
      method = defaultMethod;
      action = null;
      encType = defaultEncType;
      body = target;
    }
    if (formData && encType === "text/plain") {
      body = formData;
      formData = void 0;
    }
    return { action, method: method.toLowerCase(), encType, formData, body };
  }
  var objectProtoNames = Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
  function invariant2(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  var SingleFetchRedirectSymbol = Symbol("SingleFetchRedirect");
  function singleFetchUrl(reqUrl, basename, extension) {
    let url = typeof reqUrl === "string" ? new URL(
      reqUrl,
      // This can be called during the SSR flow via PrefetchPageLinksImpl so
      // don't assume window is available
      typeof window === "undefined" ? "server://singlefetch/" : window.location.origin
    ) : reqUrl;
    if (url.pathname === "/") {
      url.pathname = `_root.${extension}`;
    } else if (basename && stripBasename(url.pathname, basename) === "/") {
      url.pathname = `${basename.replace(/\/$/, "")}/_root.${extension}`;
    } else {
      url.pathname = `${url.pathname.replace(/\/$/, "")}.${extension}`;
    }
    return url;
  }
  async function loadRouteModule(route, routeModulesCache) {
    if (route.id in routeModulesCache) {
      return routeModulesCache[route.id];
    }
    try {
      let routeModule = await import(
        /* @vite-ignore */
        /* webpackIgnore: true */
        route.module
      );
      routeModulesCache[route.id] = routeModule;
      return routeModule;
    } catch (error) {
      console.error(
        `Error loading route module \`${route.module}\`, reloading page...`
      );
      console.error(error);
      if (window.__reactRouterContext && window.__reactRouterContext.isSpaMode && // @ts-expect-error
      import_meta.hot) {
        throw error;
      }
      window.location.reload();
      return new Promise(() => {
      });
    }
  }
  function isPageLinkDescriptor(object) {
    return object != null && typeof object.page === "string";
  }
  function isHtmlLinkDescriptor(object) {
    if (object == null) {
      return false;
    }
    if (object.href == null) {
      return object.rel === "preload" && typeof object.imageSrcSet === "string" && typeof object.imageSizes === "string";
    }
    return typeof object.rel === "string" && typeof object.href === "string";
  }
  async function getKeyedPrefetchLinks(matches, manifest, routeModules) {
    let links = await Promise.all(
      matches.map(async (match) => {
        let route = manifest.routes[match.route.id];
        if (route) {
          let mod = await loadRouteModule(route, routeModules);
          return mod.links ? mod.links() : [];
        }
        return [];
      })
    );
    return dedupeLinkDescriptors(
      links.flat(1).filter(isHtmlLinkDescriptor).filter((link) => link.rel === "stylesheet" || link.rel === "preload").map(
        (link) => link.rel === "stylesheet" ? { ...link, rel: "prefetch", as: "style" } : { ...link, rel: "prefetch" }
      )
    );
  }
  function getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location, mode) {
    let isNew = (match, index2) => {
      if (!currentMatches[index2]) return true;
      return match.route.id !== currentMatches[index2].route.id;
    };
    let matchPathChanged = (match, index2) => {
      return (
        // param change, /users/123 -> /users/456
        currentMatches[index2].pathname !== match.pathname || // splat param changed, which is not present in match.path
        // e.g. /files/images/avatar.jpg -> files/finances.xls
        currentMatches[index2].route.path?.endsWith("*") && currentMatches[index2].params["*"] !== match.params["*"]
      );
    };
    if (mode === "assets") {
      return nextMatches.filter(
        (match, index2) => isNew(match, index2) || matchPathChanged(match, index2)
      );
    }
    if (mode === "data") {
      return nextMatches.filter((match, index2) => {
        let manifestRoute = manifest.routes[match.route.id];
        if (!manifestRoute || !manifestRoute.hasLoader) {
          return false;
        }
        if (isNew(match, index2) || matchPathChanged(match, index2)) {
          return true;
        }
        if (match.route.shouldRevalidate) {
          let routeChoice = match.route.shouldRevalidate({
            currentUrl: new URL(
              location.pathname + location.search + location.hash,
              window.origin
            ),
            currentParams: currentMatches[0]?.params || {},
            nextUrl: new URL(page, window.origin),
            nextParams: match.params,
            defaultShouldRevalidate: true
          });
          if (typeof routeChoice === "boolean") {
            return routeChoice;
          }
        }
        return true;
      });
    }
    return [];
  }
  function getModuleLinkHrefs(matches, manifest, { includeHydrateFallback } = {}) {
    return dedupeHrefs(
      matches.map((match) => {
        let route = manifest.routes[match.route.id];
        if (!route) return [];
        let hrefs = [route.module];
        if (route.clientActionModule) {
          hrefs = hrefs.concat(route.clientActionModule);
        }
        if (route.clientLoaderModule) {
          hrefs = hrefs.concat(route.clientLoaderModule);
        }
        if (includeHydrateFallback && route.hydrateFallbackModule) {
          hrefs = hrefs.concat(route.hydrateFallbackModule);
        }
        if (route.imports) {
          hrefs = hrefs.concat(route.imports);
        }
        return hrefs;
      }).flat(1)
    );
  }
  function dedupeHrefs(hrefs) {
    return [...new Set(hrefs)];
  }
  function sortKeys(obj) {
    let sorted = {};
    let keys = Object.keys(obj).sort();
    for (let key of keys) {
      sorted[key] = obj[key];
    }
    return sorted;
  }
  function dedupeLinkDescriptors(descriptors, preloads) {
    let set2 = /* @__PURE__ */ new Set();
    let preloadsSet = new Set(preloads);
    return descriptors.reduce((deduped, descriptor) => {
      let alreadyModulePreload = preloads && !isPageLinkDescriptor(descriptor) && descriptor.as === "script" && descriptor.href && preloadsSet.has(descriptor.href);
      if (alreadyModulePreload) {
        return deduped;
      }
      let key = JSON.stringify(sortKeys(descriptor));
      if (!set2.has(key)) {
        set2.add(key);
        deduped.push({ key, link: descriptor });
      }
      return deduped;
    }, []);
  }
  function useDataRouterContext2() {
    let context = React8.useContext(DataRouterContext);
    invariant2(
      context,
      "You must render this element inside a <DataRouterContext.Provider> element"
    );
    return context;
  }
  function useDataRouterStateContext() {
    let context = React8.useContext(DataRouterStateContext);
    invariant2(
      context,
      "You must render this element inside a <DataRouterStateContext.Provider> element"
    );
    return context;
  }
  var FrameworkContext = React8.createContext(void 0);
  FrameworkContext.displayName = "FrameworkContext";
  function useFrameworkContext() {
    let context = React8.useContext(FrameworkContext);
    invariant2(
      context,
      "You must render this element inside a <HydratedRouter> element"
    );
    return context;
  }
  function usePrefetchBehavior(prefetch, theirElementProps) {
    let frameworkContext = React8.useContext(FrameworkContext);
    let [maybePrefetch, setMaybePrefetch] = React8.useState(false);
    let [shouldPrefetch, setShouldPrefetch] = React8.useState(false);
    let { onFocus, onBlur, onMouseEnter, onMouseLeave, onTouchStart } = theirElementProps;
    let ref = React8.useRef(null);
    React8.useEffect(() => {
      if (prefetch === "render") {
        setShouldPrefetch(true);
      }
      if (prefetch === "viewport") {
        let callback = (entries) => {
          entries.forEach((entry) => {
            setShouldPrefetch(entry.isIntersecting);
          });
        };
        let observer = new IntersectionObserver(callback, { threshold: 0.5 });
        if (ref.current) observer.observe(ref.current);
        return () => {
          observer.disconnect();
        };
      }
    }, [prefetch]);
    React8.useEffect(() => {
      if (maybePrefetch) {
        let id = setTimeout(() => {
          setShouldPrefetch(true);
        }, 100);
        return () => {
          clearTimeout(id);
        };
      }
    }, [maybePrefetch]);
    let setIntent = () => {
      setMaybePrefetch(true);
    };
    let cancelIntent = () => {
      setMaybePrefetch(false);
      setShouldPrefetch(false);
    };
    if (!frameworkContext) {
      return [false, ref, {}];
    }
    if (prefetch !== "intent") {
      return [shouldPrefetch, ref, {}];
    }
    return [
      shouldPrefetch,
      ref,
      {
        onFocus: composeEventHandlers(onFocus, setIntent),
        onBlur: composeEventHandlers(onBlur, cancelIntent),
        onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),
        onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),
        onTouchStart: composeEventHandlers(onTouchStart, setIntent)
      }
    ];
  }
  function composeEventHandlers(theirHandler, ourHandler) {
    return (event) => {
      theirHandler && theirHandler(event);
      if (!event.defaultPrevented) {
        ourHandler(event);
      }
    };
  }
  function PrefetchPageLinks({ page, ...linkProps }) {
    let { router } = useDataRouterContext2();
    let matches = React8.useMemo(
      () => matchRoutes(router.routes, page, router.basename),
      [router.routes, page, router.basename]
    );
    if (!matches) {
      return null;
    }
    return /* @__PURE__ */ React8.createElement(PrefetchPageLinksImpl, { page, matches, ...linkProps });
  }
  function useKeyedPrefetchLinks(matches) {
    let { manifest, routeModules } = useFrameworkContext();
    let [keyedPrefetchLinks, setKeyedPrefetchLinks] = React8.useState([]);
    React8.useEffect(() => {
      let interrupted = false;
      void getKeyedPrefetchLinks(matches, manifest, routeModules).then(
        (links) => {
          if (!interrupted) {
            setKeyedPrefetchLinks(links);
          }
        }
      );
      return () => {
        interrupted = true;
      };
    }, [matches, manifest, routeModules]);
    return keyedPrefetchLinks;
  }
  function PrefetchPageLinksImpl({
    page,
    matches: nextMatches,
    ...linkProps
  }) {
    let location = useLocation();
    let { manifest, routeModules } = useFrameworkContext();
    let { basename } = useDataRouterContext2();
    let { loaderData, matches } = useDataRouterStateContext();
    let newMatchesForData = React8.useMemo(
      () => getNewMatchesForLinks(
        page,
        nextMatches,
        matches,
        manifest,
        location,
        "data"
      ),
      [page, nextMatches, matches, manifest, location]
    );
    let newMatchesForAssets = React8.useMemo(
      () => getNewMatchesForLinks(
        page,
        nextMatches,
        matches,
        manifest,
        location,
        "assets"
      ),
      [page, nextMatches, matches, manifest, location]
    );
    let dataHrefs = React8.useMemo(() => {
      if (page === location.pathname + location.search + location.hash) {
        return [];
      }
      let routesParams = /* @__PURE__ */ new Set();
      let foundOptOutRoute = false;
      nextMatches.forEach((m) => {
        let manifestRoute = manifest.routes[m.route.id];
        if (!manifestRoute || !manifestRoute.hasLoader) {
          return;
        }
        if (!newMatchesForData.some((m2) => m2.route.id === m.route.id) && m.route.id in loaderData && routeModules[m.route.id]?.shouldRevalidate) {
          foundOptOutRoute = true;
        } else if (manifestRoute.hasClientLoader) {
          foundOptOutRoute = true;
        } else {
          routesParams.add(m.route.id);
        }
      });
      if (routesParams.size === 0) {
        return [];
      }
      let url = singleFetchUrl(page, basename, "data");
      if (foundOptOutRoute && routesParams.size > 0) {
        url.searchParams.set(
          "_routes",
          nextMatches.filter((m) => routesParams.has(m.route.id)).map((m) => m.route.id).join(",")
        );
      }
      return [url.pathname + url.search];
    }, [
      basename,
      loaderData,
      location,
      manifest,
      newMatchesForData,
      nextMatches,
      page,
      routeModules
    ]);
    let moduleHrefs = React8.useMemo(
      () => getModuleLinkHrefs(newMatchesForAssets, manifest),
      [newMatchesForAssets, manifest]
    );
    let keyedPrefetchLinks = useKeyedPrefetchLinks(newMatchesForAssets);
    return /* @__PURE__ */ React8.createElement(React8.Fragment, null, dataHrefs.map((href) => /* @__PURE__ */ React8.createElement("link", { key: href, rel: "prefetch", as: "fetch", href, ...linkProps })), moduleHrefs.map((href) => /* @__PURE__ */ React8.createElement("link", { key: href, rel: "modulepreload", href, ...linkProps })), keyedPrefetchLinks.map(({ key, link }) => (
      // these don't spread `linkProps` because they are full link descriptors
      // already with their own props
      /* @__PURE__ */ React8.createElement("link", { key, nonce: linkProps.nonce, ...link })
    )));
  }
  function mergeRefs(...refs) {
    return (value) => {
      refs.forEach((ref) => {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref != null) {
          ref.current = value;
        }
      });
    };
  }
  var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
  try {
    if (isBrowser) {
      window.__reactRouterVersion = // @ts-expect-error
      "7.8.2";
    }
  } catch (e) {
  }
  function HashRouter({ basename, children, window: window2 }) {
    let historyRef = React10.useRef();
    if (historyRef.current == null) {
      historyRef.current = createHashHistory({ window: window2, v5Compat: true });
    }
    let history = historyRef.current;
    let [state, setStateImpl] = React10.useState({
      action: history.action,
      location: history.location
    });
    let setState = React10.useCallback(
      (newState) => {
        React10.startTransition(() => setStateImpl(newState));
      },
      [setStateImpl]
    );
    React10.useLayoutEffect(() => history.listen(setState), [history, setState]);
    return /* @__PURE__ */ React10.createElement(
      Router,
      {
        basename,
        children,
        location: state.location,
        navigationType: state.action,
        navigator: history
      }
    );
  }
  function HistoryRouter({
    basename,
    children,
    history
  }) {
    let [state, setStateImpl] = React10.useState({
      action: history.action,
      location: history.location
    });
    let setState = React10.useCallback(
      (newState) => {
        React10.startTransition(() => setStateImpl(newState));
      },
      [setStateImpl]
    );
    React10.useLayoutEffect(() => history.listen(setState), [history, setState]);
    return /* @__PURE__ */ React10.createElement(
      Router,
      {
        basename,
        children,
        location: state.location,
        navigationType: state.action,
        navigator: history
      }
    );
  }
  HistoryRouter.displayName = "unstable_HistoryRouter";
  var ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
  var Link = React10.forwardRef(
    function LinkWithRef({
      onClick,
      discover = "render",
      prefetch = "none",
      relative,
      reloadDocument,
      replace: replace2,
      state,
      target,
      to,
      preventScrollReset,
      viewTransition,
      ...rest
    }, forwardedRef) {
      let { basename } = React10.useContext(NavigationContext);
      let isAbsolute = typeof to === "string" && ABSOLUTE_URL_REGEX2.test(to);
      let absoluteHref;
      let isExternal = false;
      if (typeof to === "string" && isAbsolute) {
        absoluteHref = to;
        if (isBrowser) {
          try {
            let currentUrl = new URL(window.location.href);
            let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
            let path = stripBasename(targetUrl.pathname, basename);
            if (targetUrl.origin === currentUrl.origin && path != null) {
              to = path + targetUrl.search + targetUrl.hash;
            } else {
              isExternal = true;
            }
          } catch (e) {
            warning(
              false,
              `<Link to="${to}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`
            );
          }
        }
      }
      let href = useHref(to, { relative });
      let [shouldPrefetch, prefetchRef, prefetchHandlers] = usePrefetchBehavior(
        prefetch,
        rest
      );
      let internalOnClick = useLinkClickHandler(to, {
        replace: replace2,
        state,
        target,
        preventScrollReset,
        relative,
        viewTransition
      });
      function handleClick(event) {
        if (onClick) onClick(event);
        if (!event.defaultPrevented) {
          internalOnClick(event);
        }
      }
      let link = (
        // eslint-disable-next-line jsx-a11y/anchor-has-content
        /* @__PURE__ */ React10.createElement(
          "a",
          {
            ...rest,
            ...prefetchHandlers,
            href: absoluteHref || href,
            onClick: isExternal || reloadDocument ? onClick : handleClick,
            ref: mergeRefs(forwardedRef, prefetchRef),
            target,
            "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
          }
        )
      );
      return shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React10.createElement(React10.Fragment, null, link, /* @__PURE__ */ React10.createElement(PrefetchPageLinks, { page: href })) : link;
    }
  );
  Link.displayName = "Link";
  var NavLink = React10.forwardRef(
    function NavLinkWithRef({
      "aria-current": ariaCurrentProp = "page",
      caseSensitive = false,
      className: classNameProp = "",
      end = false,
      style: styleProp,
      to,
      viewTransition,
      children,
      ...rest
    }, ref) {
      let path = useResolvedPath(to, { relative: rest.relative });
      let location = useLocation();
      let routerState = React10.useContext(DataRouterStateContext);
      let { navigator: navigator2, basename } = React10.useContext(NavigationContext);
      let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
      // eslint-disable-next-line react-hooks/rules-of-hooks
      useViewTransitionState(path) && viewTransition === true;
      let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
      let locationPathname = location.pathname;
      let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
      if (!caseSensitive) {
        locationPathname = locationPathname.toLowerCase();
        nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
        toPathname = toPathname.toLowerCase();
      }
      if (nextLocationPathname && basename) {
        nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
      }
      const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
      let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
      let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
      let renderProps = {
        isActive,
        isPending,
        isTransitioning
      };
      let ariaCurrent = isActive ? ariaCurrentProp : void 0;
      let className;
      if (typeof classNameProp === "function") {
        className = classNameProp(renderProps);
      } else {
        className = [
          classNameProp,
          isActive ? "active" : null,
          isPending ? "pending" : null,
          isTransitioning ? "transitioning" : null
        ].filter(Boolean).join(" ");
      }
      let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
      return /* @__PURE__ */ React10.createElement(
        Link,
        {
          ...rest,
          "aria-current": ariaCurrent,
          className,
          ref,
          style,
          to,
          viewTransition
        },
        typeof children === "function" ? children(renderProps) : children
      );
    }
  );
  NavLink.displayName = "NavLink";
  var Form = React10.forwardRef(
    ({
      discover = "render",
      fetcherKey,
      navigate,
      reloadDocument,
      replace: replace2,
      state,
      method = defaultMethod,
      action,
      onSubmit,
      relative,
      preventScrollReset,
      viewTransition,
      ...props
    }, forwardedRef) => {
      let submit = useSubmit();
      let formAction = useFormAction(action, { relative });
      let formMethod = method.toLowerCase() === "get" ? "get" : "post";
      let isAbsolute = typeof action === "string" && ABSOLUTE_URL_REGEX2.test(action);
      let submitHandler = (event) => {
        onSubmit && onSubmit(event);
        if (event.defaultPrevented) return;
        event.preventDefault();
        let submitter = event.nativeEvent.submitter;
        let submitMethod = submitter?.getAttribute("formmethod") || method;
        submit(submitter || event.currentTarget, {
          fetcherKey,
          method: submitMethod,
          navigate,
          replace: replace2,
          state,
          relative,
          preventScrollReset,
          viewTransition
        });
      };
      return /* @__PURE__ */ React10.createElement(
        "form",
        {
          ref: forwardedRef,
          method: formMethod,
          action: formAction,
          onSubmit: reloadDocument ? onSubmit : submitHandler,
          ...props,
          "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
        }
      );
    }
  );
  Form.displayName = "Form";
  function ScrollRestoration({
    getKey,
    storageKey: storageKey3,
    ...props
  }) {
    let remixContext = React10.useContext(FrameworkContext);
    let { basename } = React10.useContext(NavigationContext);
    let location = useLocation();
    let matches = useMatches();
    useScrollRestoration({ getKey, storageKey: storageKey3 });
    let ssrKey = React10.useMemo(
      () => {
        if (!remixContext || !getKey) return null;
        let userKey = getScrollRestorationKey(
          location,
          matches,
          basename,
          getKey
        );
        return userKey !== location.key ? userKey : null;
      },
      // Nah, we only need this the first time for the SSR render
      // eslint-disable-next-line react-hooks/exhaustive-deps
      []
    );
    if (!remixContext || remixContext.isSpaMode) {
      return null;
    }
    let restoreScroll = ((storageKey22, restoreKey) => {
      if (!window.history.state || !window.history.state.key) {
        let key = Math.random().toString(32).slice(2);
        window.history.replaceState({ key }, "");
      }
      try {
        let positions = JSON.parse(sessionStorage.getItem(storageKey22) || "{}");
        let storedY = positions[restoreKey || window.history.state.key];
        if (typeof storedY === "number") {
          window.scrollTo(0, storedY);
        }
      } catch (error) {
        console.error(error);
        sessionStorage.removeItem(storageKey22);
      }
    }).toString();
    return /* @__PURE__ */ React10.createElement(
      "script",
      {
        ...props,
        suppressHydrationWarning: true,
        dangerouslySetInnerHTML: {
          __html: `(${restoreScroll})(${JSON.stringify(
            storageKey3 || SCROLL_RESTORATION_STORAGE_KEY
          )}, ${JSON.stringify(ssrKey)})`
        }
      }
    );
  }
  ScrollRestoration.displayName = "ScrollRestoration";
  function getDataRouterConsoleError2(hookName) {
    return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
  }
  function useDataRouterContext3(hookName) {
    let ctx = React10.useContext(DataRouterContext);
    invariant(ctx, getDataRouterConsoleError2(hookName));
    return ctx;
  }
  function useDataRouterState2(hookName) {
    let state = React10.useContext(DataRouterStateContext);
    invariant(state, getDataRouterConsoleError2(hookName));
    return state;
  }
  function useLinkClickHandler(to, {
    target,
    replace: replaceProp,
    state,
    preventScrollReset,
    relative,
    viewTransition
  } = {}) {
    let navigate = useNavigate();
    let location = useLocation();
    let path = useResolvedPath(to, { relative });
    return React10.useCallback(
      (event) => {
        if (shouldProcessLinkClick(event, target)) {
          event.preventDefault();
          let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
          navigate(to, {
            replace: replace2,
            state,
            preventScrollReset,
            relative,
            viewTransition
          });
        }
      },
      [
        location,
        navigate,
        path,
        replaceProp,
        state,
        target,
        to,
        preventScrollReset,
        relative,
        viewTransition
      ]
    );
  }
  var fetcherId = 0;
  var getUniqueFetcherId = () => `__${String(++fetcherId)}__`;
  function useSubmit() {
    let { router } = useDataRouterContext3(
      "useSubmit"
      /* UseSubmit */
    );
    let { basename } = React10.useContext(NavigationContext);
    let currentRouteId = useRouteId();
    return React10.useCallback(
      async (target, options = {}) => {
        let { action, method, encType, formData, body } = getFormSubmissionInfo(
          target,
          basename
        );
        if (options.navigate === false) {
          let key = options.fetcherKey || getUniqueFetcherId();
          await router.fetch(key, currentRouteId, options.action || action, {
            preventScrollReset: options.preventScrollReset,
            formData,
            body,
            formMethod: options.method || method,
            formEncType: options.encType || encType,
            flushSync: options.flushSync
          });
        } else {
          await router.navigate(options.action || action, {
            preventScrollReset: options.preventScrollReset,
            formData,
            body,
            formMethod: options.method || method,
            formEncType: options.encType || encType,
            replace: options.replace,
            state: options.state,
            fromRouteId: currentRouteId,
            flushSync: options.flushSync,
            viewTransition: options.viewTransition
          });
        }
      },
      [router, basename, currentRouteId]
    );
  }
  function useFormAction(action, { relative } = {}) {
    let { basename } = React10.useContext(NavigationContext);
    let routeContext = React10.useContext(RouteContext);
    invariant(routeContext, "useFormAction must be used inside a RouteContext");
    let [match] = routeContext.matches.slice(-1);
    let path = { ...useResolvedPath(action ? action : ".", { relative }) };
    let location = useLocation();
    if (action == null) {
      path.search = location.search;
      let params = new URLSearchParams(path.search);
      let indexValues = params.getAll("index");
      let hasNakedIndexParam = indexValues.some((v) => v === "");
      if (hasNakedIndexParam) {
        params.delete("index");
        indexValues.filter((v) => v).forEach((v) => params.append("index", v));
        let qs = params.toString();
        path.search = qs ? `?${qs}` : "";
      }
    }
    if ((!action || action === ".") && match.route.index) {
      path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    }
    if (basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    return createPath(path);
  }
  var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
  var savedScrollPositions = {};
  function getScrollRestorationKey(location, matches, basename, getKey) {
    let key = null;
    if (getKey) {
      if (basename !== "/") {
        key = getKey(
          {
            ...location,
            pathname: stripBasename(location.pathname, basename) || location.pathname
          },
          matches
        );
      } else {
        key = getKey(location, matches);
      }
    }
    if (key == null) {
      key = location.key;
    }
    return key;
  }
  function useScrollRestoration({
    getKey,
    storageKey: storageKey3
  } = {}) {
    let { router } = useDataRouterContext3(
      "useScrollRestoration"
      /* UseScrollRestoration */
    );
    let { restoreScrollPosition, preventScrollReset } = useDataRouterState2(
      "useScrollRestoration"
      /* UseScrollRestoration */
    );
    let { basename } = React10.useContext(NavigationContext);
    let location = useLocation();
    let matches = useMatches();
    let navigation = useNavigation();
    React10.useEffect(() => {
      window.history.scrollRestoration = "manual";
      return () => {
        window.history.scrollRestoration = "auto";
      };
    }, []);
    usePageHide(
      React10.useCallback(() => {
        if (navigation.state === "idle") {
          let key = getScrollRestorationKey(location, matches, basename, getKey);
          savedScrollPositions[key] = window.scrollY;
        }
        try {
          sessionStorage.setItem(
            storageKey3 || SCROLL_RESTORATION_STORAGE_KEY,
            JSON.stringify(savedScrollPositions)
          );
        } catch (error) {
          warning(
            false,
            `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error}).`
          );
        }
        window.history.scrollRestoration = "auto";
      }, [navigation.state, getKey, basename, location, matches, storageKey3])
    );
    if (typeof document !== "undefined") {
      React10.useLayoutEffect(() => {
        try {
          let sessionPositions = sessionStorage.getItem(
            storageKey3 || SCROLL_RESTORATION_STORAGE_KEY
          );
          if (sessionPositions) {
            savedScrollPositions = JSON.parse(sessionPositions);
          }
        } catch (e) {
        }
      }, [storageKey3]);
      React10.useLayoutEffect(() => {
        let disableScrollRestoration = router?.enableScrollRestoration(
          savedScrollPositions,
          () => window.scrollY,
          getKey ? (location2, matches2) => getScrollRestorationKey(location2, matches2, basename, getKey) : void 0
        );
        return () => disableScrollRestoration && disableScrollRestoration();
      }, [router, basename, getKey]);
      React10.useLayoutEffect(() => {
        if (restoreScrollPosition === false) {
          return;
        }
        if (typeof restoreScrollPosition === "number") {
          window.scrollTo(0, restoreScrollPosition);
          return;
        }
        try {
          if (location.hash) {
            let el = document.getElementById(
              decodeURIComponent(location.hash.slice(1))
            );
            if (el) {
              el.scrollIntoView();
              return;
            }
          }
        } catch {
          warning(
            false,
            `"${location.hash.slice(
              1
            )}" is not a decodable element ID. The view will not scroll to it.`
          );
        }
        if (preventScrollReset === true) {
          return;
        }
        window.scrollTo(0, 0);
      }, [location, restoreScrollPosition, preventScrollReset]);
    }
  }
  function usePageHide(callback, options) {
    let { capture } = options || {};
    React10.useEffect(() => {
      let opts = capture != null ? { capture } : void 0;
      window.addEventListener("pagehide", callback, opts);
      return () => {
        window.removeEventListener("pagehide", callback, opts);
      };
    }, [callback, capture]);
  }
  function useViewTransitionState(to, { relative } = {}) {
    let vtContext = React10.useContext(ViewTransitionContext);
    invariant(
      vtContext != null,
      "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?"
    );
    let { basename } = useDataRouterContext3(
      "useViewTransitionState"
      /* useViewTransitionState */
    );
    let path = useResolvedPath(to, { relative });
    if (!vtContext.isTransitioning) {
      return false;
    }
    let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
    let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
    return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
  }

  // src/pages/Home.tsx
  var import_react3 = __toESM(require_react());

  // src/components/layout/Header.tsx
  var import_react2 = __toESM(require_react());

  // src/components/ui/button.tsx
  var React14 = __toESM(require_react());

  // node_modules/@radix-ui/react-slot/dist/index.mjs
  var React13 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-compose-refs/dist/index.mjs
  var React12 = __toESM(require_react(), 1);
  function setRef(ref, value) {
    if (typeof ref === "function") {
      return ref(value);
    } else if (ref !== null && ref !== void 0) {
      ref.current = value;
    }
  }
  function composeRefs(...refs) {
    return (node) => {
      let hasCleanup = false;
      const cleanups = refs.map((ref) => {
        const cleanup = setRef(ref, node);
        if (!hasCleanup && typeof cleanup == "function") {
          hasCleanup = true;
        }
        return cleanup;
      });
      if (hasCleanup) {
        return () => {
          for (let i3 = 0; i3 < cleanups.length; i3++) {
            const cleanup = cleanups[i3];
            if (typeof cleanup == "function") {
              cleanup();
            } else {
              setRef(refs[i3], null);
            }
          }
        };
      }
    };
  }
  function useComposedRefs(...refs) {
    return React12.useCallback(composeRefs(...refs), refs);
  }

  // node_modules/@radix-ui/react-slot/dist/index.mjs
  var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
  // @__NO_SIDE_EFFECTS__
  function createSlot(ownerName) {
    const SlotClone = /* @__PURE__ */ createSlotClone(ownerName);
    const Slot22 = React13.forwardRef((props, forwardedRef) => {
      const { children, ...slotProps } = props;
      const childrenArray = React13.Children.toArray(children);
      const slottable = childrenArray.find(isSlottable);
      if (slottable) {
        const newElement = slottable.props.children;
        const newChildren = childrenArray.map((child) => {
          if (child === slottable) {
            if (React13.Children.count(newElement) > 1) return React13.Children.only(null);
            return React13.isValidElement(newElement) ? newElement.props.children : null;
          } else {
            return child;
          }
        });
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SlotClone, { ...slotProps, ref: forwardedRef, children: React13.isValidElement(newElement) ? React13.cloneElement(newElement, void 0, newChildren) : null });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SlotClone, { ...slotProps, ref: forwardedRef, children });
    });
    Slot22.displayName = `${ownerName}.Slot`;
    return Slot22;
  }
  var Slot = /* @__PURE__ */ createSlot("Slot");
  // @__NO_SIDE_EFFECTS__
  function createSlotClone(ownerName) {
    const SlotClone = React13.forwardRef((props, forwardedRef) => {
      const { children, ...slotProps } = props;
      if (React13.isValidElement(children)) {
        const childrenRef = getElementRef(children);
        const props2 = mergeProps(slotProps, children.props);
        if (children.type !== React13.Fragment) {
          props2.ref = forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef;
        }
        return React13.cloneElement(children, props2);
      }
      return React13.Children.count(children) > 1 ? React13.Children.only(null) : null;
    });
    SlotClone.displayName = `${ownerName}.SlotClone`;
    return SlotClone;
  }
  var SLOTTABLE_IDENTIFIER = Symbol("radix.slottable");
  function isSlottable(child) {
    return React13.isValidElement(child) && typeof child.type === "function" && "__radixId" in child.type && child.type.__radixId === SLOTTABLE_IDENTIFIER;
  }
  function mergeProps(slotProps, childProps) {
    const overrideProps = { ...childProps };
    for (const propName in childProps) {
      const slotPropValue = slotProps[propName];
      const childPropValue = childProps[propName];
      const isHandler = /^on[A-Z]/.test(propName);
      if (isHandler) {
        if (slotPropValue && childPropValue) {
          overrideProps[propName] = (...args) => {
            const result = childPropValue(...args);
            slotPropValue(...args);
            return result;
          };
        } else if (slotPropValue) {
          overrideProps[propName] = slotPropValue;
        }
      } else if (propName === "style") {
        overrideProps[propName] = { ...slotPropValue, ...childPropValue };
      } else if (propName === "className") {
        overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(" ");
      }
    }
    return { ...slotProps, ...overrideProps };
  }
  function getElementRef(element) {
    let getter = Object.getOwnPropertyDescriptor(element.props, "ref")?.get;
    let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
      return element.ref;
    }
    getter = Object.getOwnPropertyDescriptor(element, "ref")?.get;
    mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
      return element.props.ref;
    }
    return element.props.ref || element.ref;
  }

  // node_modules/clsx/dist/clsx.mjs
  function r(e) {
    var t2, f, n2 = "";
    if ("string" == typeof e || "number" == typeof e) n2 += e;
    else if ("object" == typeof e) if (Array.isArray(e)) {
      var o2 = e.length;
      for (t2 = 0; t2 < o2; t2++) e[t2] && (f = r(e[t2])) && (n2 && (n2 += " "), n2 += f);
    } else for (f in e) e[f] && (n2 && (n2 += " "), n2 += f);
    return n2;
  }
  function clsx() {
    for (var e, t2, f = 0, n2 = "", o2 = arguments.length; f < o2; f++) (e = arguments[f]) && (t2 = r(e)) && (n2 && (n2 += " "), n2 += t2);
    return n2;
  }

  // node_modules/class-variance-authority/dist/index.mjs
  var falsyToString = (value) => typeof value === "boolean" ? `${value}` : value === 0 ? "0" : value;
  var cx = clsx;
  var cva = (base, config2) => (props) => {
    var _config_compoundVariants;
    if ((config2 === null || config2 === void 0 ? void 0 : config2.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
    const { variants, defaultVariants } = config2;
    const getVariantClassNames = Object.keys(variants).map((variant) => {
      const variantProp = props === null || props === void 0 ? void 0 : props[variant];
      const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];
      if (variantProp === null) return null;
      const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);
      return variants[variant][variantKey];
    });
    const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param) => {
      let [key, value] = param;
      if (value === void 0) {
        return acc;
      }
      acc[key] = value;
      return acc;
    }, {});
    const getCompoundVariantClassNames = config2 === null || config2 === void 0 ? void 0 : (_config_compoundVariants = config2.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param) => {
      let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;
      return Object.entries(compoundVariantOptions).every((param2) => {
        let [key, value] = param2;
        return Array.isArray(value) ? value.includes({
          ...defaultVariants,
          ...propsWithoutUndefined
        }[key]) : {
          ...defaultVariants,
          ...propsWithoutUndefined
        }[key] === value;
      }) ? [
        ...acc,
        cvClass,
        cvClassName
      ] : acc;
    }, []);
    return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
  };

  // node_modules/tailwind-merge/dist/bundle-mjs.mjs
  var CLASS_PART_SEPARATOR = "-";
  var createClassGroupUtils = (config2) => {
    const classMap = createClassMap(config2);
    const {
      conflictingClassGroups,
      conflictingClassGroupModifiers
    } = config2;
    const getClassGroupId = (className) => {
      const classParts = className.split(CLASS_PART_SEPARATOR);
      if (classParts[0] === "" && classParts.length !== 1) {
        classParts.shift();
      }
      return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
    };
    const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {
      const conflicts = conflictingClassGroups[classGroupId] || [];
      if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
        return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
      }
      return conflicts;
    };
    return {
      getClassGroupId,
      getConflictingClassGroupIds
    };
  };
  var getGroupRecursive = (classParts, classPartObject) => {
    if (classParts.length === 0) {
      return classPartObject.classGroupId;
    }
    const currentClassPart = classParts[0];
    const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
    const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
    if (classGroupFromNextClassPart) {
      return classGroupFromNextClassPart;
    }
    if (classPartObject.validators.length === 0) {
      return void 0;
    }
    const classRest = classParts.join(CLASS_PART_SEPARATOR);
    return classPartObject.validators.find(({
      validator
    }) => validator(classRest))?.classGroupId;
  };
  var arbitraryPropertyRegex = /^\[(.+)\]$/;
  var getGroupIdForArbitraryProperty = (className) => {
    if (arbitraryPropertyRegex.test(className)) {
      const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
      const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(":"));
      if (property) {
        return "arbitrary.." + property;
      }
    }
  };
  var createClassMap = (config2) => {
    const {
      theme,
      classGroups
    } = config2;
    const classMap = {
      nextPart: /* @__PURE__ */ new Map(),
      validators: []
    };
    for (const classGroupId in classGroups) {
      processClassesRecursively(classGroups[classGroupId], classMap, classGroupId, theme);
    }
    return classMap;
  };
  var processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {
    classGroup.forEach((classDefinition) => {
      if (typeof classDefinition === "string") {
        const classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
        classPartObjectToEdit.classGroupId = classGroupId;
        return;
      }
      if (typeof classDefinition === "function") {
        if (isThemeGetter(classDefinition)) {
          processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
          return;
        }
        classPartObject.validators.push({
          validator: classDefinition,
          classGroupId
        });
        return;
      }
      Object.entries(classDefinition).forEach(([key, classGroup2]) => {
        processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
      });
    });
  };
  var getPart = (classPartObject, path) => {
    let currentClassPartObject = classPartObject;
    path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {
      if (!currentClassPartObject.nextPart.has(pathPart)) {
        currentClassPartObject.nextPart.set(pathPart, {
          nextPart: /* @__PURE__ */ new Map(),
          validators: []
        });
      }
      currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
    });
    return currentClassPartObject;
  };
  var isThemeGetter = (func) => func.isThemeGetter;
  var createLruCache = (maxCacheSize) => {
    if (maxCacheSize < 1) {
      return {
        get: () => void 0,
        set: () => {
        }
      };
    }
    let cacheSize = 0;
    let cache = /* @__PURE__ */ new Map();
    let previousCache = /* @__PURE__ */ new Map();
    const update = (key, value) => {
      cache.set(key, value);
      cacheSize++;
      if (cacheSize > maxCacheSize) {
        cacheSize = 0;
        previousCache = cache;
        cache = /* @__PURE__ */ new Map();
      }
    };
    return {
      get(key) {
        let value = cache.get(key);
        if (value !== void 0) {
          return value;
        }
        if ((value = previousCache.get(key)) !== void 0) {
          update(key, value);
          return value;
        }
      },
      set(key, value) {
        if (cache.has(key)) {
          cache.set(key, value);
        } else {
          update(key, value);
        }
      }
    };
  };
  var IMPORTANT_MODIFIER = "!";
  var MODIFIER_SEPARATOR = ":";
  var MODIFIER_SEPARATOR_LENGTH = MODIFIER_SEPARATOR.length;
  var createParseClassName = (config2) => {
    const {
      prefix,
      experimentalParseClassName
    } = config2;
    let parseClassName = (className) => {
      const modifiers = [];
      let bracketDepth = 0;
      let parenDepth = 0;
      let modifierStart = 0;
      let postfixModifierPosition;
      for (let index2 = 0; index2 < className.length; index2++) {
        let currentCharacter = className[index2];
        if (bracketDepth === 0 && parenDepth === 0) {
          if (currentCharacter === MODIFIER_SEPARATOR) {
            modifiers.push(className.slice(modifierStart, index2));
            modifierStart = index2 + MODIFIER_SEPARATOR_LENGTH;
            continue;
          }
          if (currentCharacter === "/") {
            postfixModifierPosition = index2;
            continue;
          }
        }
        if (currentCharacter === "[") {
          bracketDepth++;
        } else if (currentCharacter === "]") {
          bracketDepth--;
        } else if (currentCharacter === "(") {
          parenDepth++;
        } else if (currentCharacter === ")") {
          parenDepth--;
        }
      }
      const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
      const baseClassName = stripImportantModifier(baseClassNameWithImportantModifier);
      const hasImportantModifier = baseClassName !== baseClassNameWithImportantModifier;
      const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
      return {
        modifiers,
        hasImportantModifier,
        baseClassName,
        maybePostfixModifierPosition
      };
    };
    if (prefix) {
      const fullPrefix = prefix + MODIFIER_SEPARATOR;
      const parseClassNameOriginal = parseClassName;
      parseClassName = (className) => className.startsWith(fullPrefix) ? parseClassNameOriginal(className.substring(fullPrefix.length)) : {
        isExternal: true,
        modifiers: [],
        hasImportantModifier: false,
        baseClassName: className,
        maybePostfixModifierPosition: void 0
      };
    }
    if (experimentalParseClassName) {
      const parseClassNameOriginal = parseClassName;
      parseClassName = (className) => experimentalParseClassName({
        className,
        parseClassName: parseClassNameOriginal
      });
    }
    return parseClassName;
  };
  var stripImportantModifier = (baseClassName) => {
    if (baseClassName.endsWith(IMPORTANT_MODIFIER)) {
      return baseClassName.substring(0, baseClassName.length - 1);
    }
    if (baseClassName.startsWith(IMPORTANT_MODIFIER)) {
      return baseClassName.substring(1);
    }
    return baseClassName;
  };
  var createSortModifiers = (config2) => {
    const orderSensitiveModifiers = Object.fromEntries(config2.orderSensitiveModifiers.map((modifier) => [modifier, true]));
    const sortModifiers = (modifiers) => {
      if (modifiers.length <= 1) {
        return modifiers;
      }
      const sortedModifiers = [];
      let unsortedModifiers = [];
      modifiers.forEach((modifier) => {
        const isPositionSensitive = modifier[0] === "[" || orderSensitiveModifiers[modifier];
        if (isPositionSensitive) {
          sortedModifiers.push(...unsortedModifiers.sort(), modifier);
          unsortedModifiers = [];
        } else {
          unsortedModifiers.push(modifier);
        }
      });
      sortedModifiers.push(...unsortedModifiers.sort());
      return sortedModifiers;
    };
    return sortModifiers;
  };
  var createConfigUtils = (config2) => ({
    cache: createLruCache(config2.cacheSize),
    parseClassName: createParseClassName(config2),
    sortModifiers: createSortModifiers(config2),
    ...createClassGroupUtils(config2)
  });
  var SPLIT_CLASSES_REGEX = /\s+/;
  var mergeClassList = (classList, configUtils) => {
    const {
      parseClassName,
      getClassGroupId,
      getConflictingClassGroupIds,
      sortModifiers
    } = configUtils;
    const classGroupsInConflict = [];
    const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);
    let result = "";
    for (let index2 = classNames.length - 1; index2 >= 0; index2 -= 1) {
      const originalClassName = classNames[index2];
      const {
        isExternal,
        modifiers,
        hasImportantModifier,
        baseClassName,
        maybePostfixModifierPosition
      } = parseClassName(originalClassName);
      if (isExternal) {
        result = originalClassName + (result.length > 0 ? " " + result : result);
        continue;
      }
      let hasPostfixModifier = !!maybePostfixModifierPosition;
      let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
      if (!classGroupId) {
        if (!hasPostfixModifier) {
          result = originalClassName + (result.length > 0 ? " " + result : result);
          continue;
        }
        classGroupId = getClassGroupId(baseClassName);
        if (!classGroupId) {
          result = originalClassName + (result.length > 0 ? " " + result : result);
          continue;
        }
        hasPostfixModifier = false;
      }
      const variantModifier = sortModifiers(modifiers).join(":");
      const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
      const classId = modifierId + classGroupId;
      if (classGroupsInConflict.includes(classId)) {
        continue;
      }
      classGroupsInConflict.push(classId);
      const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);
      for (let i3 = 0; i3 < conflictGroups.length; ++i3) {
        const group = conflictGroups[i3];
        classGroupsInConflict.push(modifierId + group);
      }
      result = originalClassName + (result.length > 0 ? " " + result : result);
    }
    return result;
  };
  function twJoin() {
    let index2 = 0;
    let argument;
    let resolvedValue;
    let string = "";
    while (index2 < arguments.length) {
      if (argument = arguments[index2++]) {
        if (resolvedValue = toValue(argument)) {
          string && (string += " ");
          string += resolvedValue;
        }
      }
    }
    return string;
  }
  var toValue = (mix) => {
    if (typeof mix === "string") {
      return mix;
    }
    let resolvedValue;
    let string = "";
    for (let k = 0; k < mix.length; k++) {
      if (mix[k]) {
        if (resolvedValue = toValue(mix[k])) {
          string && (string += " ");
          string += resolvedValue;
        }
      }
    }
    return string;
  };
  function createTailwindMerge(createConfigFirst, ...createConfigRest) {
    let configUtils;
    let cacheGet;
    let cacheSet;
    let functionToCall = initTailwindMerge;
    function initTailwindMerge(classList) {
      const config2 = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
      configUtils = createConfigUtils(config2);
      cacheGet = configUtils.cache.get;
      cacheSet = configUtils.cache.set;
      functionToCall = tailwindMerge;
      return tailwindMerge(classList);
    }
    function tailwindMerge(classList) {
      const cachedResult = cacheGet(classList);
      if (cachedResult) {
        return cachedResult;
      }
      const result = mergeClassList(classList, configUtils);
      cacheSet(classList, result);
      return result;
    }
    return function callTailwindMerge() {
      return functionToCall(twJoin.apply(null, arguments));
    };
  }
  var fromTheme = (key) => {
    const themeGetter = (theme) => theme[key] || [];
    themeGetter.isThemeGetter = true;
    return themeGetter;
  };
  var arbitraryValueRegex = /^\[(?:(\w[\w-]*):)?(.+)\]$/i;
  var arbitraryVariableRegex = /^\((?:(\w[\w-]*):)?(.+)\)$/i;
  var fractionRegex = /^\d+\/\d+$/;
  var tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
  var lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
  var colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch)|color-mix)\(.+\)$/;
  var shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
  var imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
  var isFraction = (value) => fractionRegex.test(value);
  var isNumber = (value) => !!value && !Number.isNaN(Number(value));
  var isInteger = (value) => !!value && Number.isInteger(Number(value));
  var isPercent = (value) => value.endsWith("%") && isNumber(value.slice(0, -1));
  var isTshirtSize = (value) => tshirtUnitRegex.test(value);
  var isAny = () => true;
  var isLengthOnly = (value) => (
    // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
    // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
    // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
    lengthUnitRegex.test(value) && !colorFunctionRegex.test(value)
  );
  var isNever = () => false;
  var isShadow = (value) => shadowRegex.test(value);
  var isImage = (value) => imageRegex.test(value);
  var isAnyNonArbitrary = (value) => !isArbitraryValue(value) && !isArbitraryVariable(value);
  var isArbitrarySize = (value) => getIsArbitraryValue(value, isLabelSize, isNever);
  var isArbitraryValue = (value) => arbitraryValueRegex.test(value);
  var isArbitraryLength = (value) => getIsArbitraryValue(value, isLabelLength, isLengthOnly);
  var isArbitraryNumber = (value) => getIsArbitraryValue(value, isLabelNumber, isNumber);
  var isArbitraryPosition = (value) => getIsArbitraryValue(value, isLabelPosition, isNever);
  var isArbitraryImage = (value) => getIsArbitraryValue(value, isLabelImage, isImage);
  var isArbitraryShadow = (value) => getIsArbitraryValue(value, isLabelShadow, isShadow);
  var isArbitraryVariable = (value) => arbitraryVariableRegex.test(value);
  var isArbitraryVariableLength = (value) => getIsArbitraryVariable(value, isLabelLength);
  var isArbitraryVariableFamilyName = (value) => getIsArbitraryVariable(value, isLabelFamilyName);
  var isArbitraryVariablePosition = (value) => getIsArbitraryVariable(value, isLabelPosition);
  var isArbitraryVariableSize = (value) => getIsArbitraryVariable(value, isLabelSize);
  var isArbitraryVariableImage = (value) => getIsArbitraryVariable(value, isLabelImage);
  var isArbitraryVariableShadow = (value) => getIsArbitraryVariable(value, isLabelShadow, true);
  var getIsArbitraryValue = (value, testLabel, testValue) => {
    const result = arbitraryValueRegex.exec(value);
    if (result) {
      if (result[1]) {
        return testLabel(result[1]);
      }
      return testValue(result[2]);
    }
    return false;
  };
  var getIsArbitraryVariable = (value, testLabel, shouldMatchNoLabel = false) => {
    const result = arbitraryVariableRegex.exec(value);
    if (result) {
      if (result[1]) {
        return testLabel(result[1]);
      }
      return shouldMatchNoLabel;
    }
    return false;
  };
  var isLabelPosition = (label) => label === "position" || label === "percentage";
  var isLabelImage = (label) => label === "image" || label === "url";
  var isLabelSize = (label) => label === "length" || label === "size" || label === "bg-size";
  var isLabelLength = (label) => label === "length";
  var isLabelNumber = (label) => label === "number";
  var isLabelFamilyName = (label) => label === "family-name";
  var isLabelShadow = (label) => label === "shadow";
  var getDefaultConfig = () => {
    const themeColor = fromTheme("color");
    const themeFont = fromTheme("font");
    const themeText = fromTheme("text");
    const themeFontWeight = fromTheme("font-weight");
    const themeTracking = fromTheme("tracking");
    const themeLeading = fromTheme("leading");
    const themeBreakpoint = fromTheme("breakpoint");
    const themeContainer = fromTheme("container");
    const themeSpacing = fromTheme("spacing");
    const themeRadius = fromTheme("radius");
    const themeShadow = fromTheme("shadow");
    const themeInsetShadow = fromTheme("inset-shadow");
    const themeTextShadow = fromTheme("text-shadow");
    const themeDropShadow = fromTheme("drop-shadow");
    const themeBlur = fromTheme("blur");
    const themePerspective = fromTheme("perspective");
    const themeAspect = fromTheme("aspect");
    const themeEase = fromTheme("ease");
    const themeAnimate = fromTheme("animate");
    const scaleBreak = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
    const scalePosition = () => [
      "center",
      "top",
      "bottom",
      "left",
      "right",
      "top-left",
      // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
      "left-top",
      "top-right",
      // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
      "right-top",
      "bottom-right",
      // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
      "right-bottom",
      "bottom-left",
      // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
      "left-bottom"
    ];
    const scalePositionWithArbitrary = () => [...scalePosition(), isArbitraryVariable, isArbitraryValue];
    const scaleOverflow = () => ["auto", "hidden", "clip", "visible", "scroll"];
    const scaleOverscroll = () => ["auto", "contain", "none"];
    const scaleUnambiguousSpacing = () => [isArbitraryVariable, isArbitraryValue, themeSpacing];
    const scaleInset = () => [isFraction, "full", "auto", ...scaleUnambiguousSpacing()];
    const scaleGridTemplateColsRows = () => [isInteger, "none", "subgrid", isArbitraryVariable, isArbitraryValue];
    const scaleGridColRowStartAndEnd = () => ["auto", {
      span: ["full", isInteger, isArbitraryVariable, isArbitraryValue]
    }, isInteger, isArbitraryVariable, isArbitraryValue];
    const scaleGridColRowStartOrEnd = () => [isInteger, "auto", isArbitraryVariable, isArbitraryValue];
    const scaleGridAutoColsRows = () => ["auto", "min", "max", "fr", isArbitraryVariable, isArbitraryValue];
    const scaleAlignPrimaryAxis = () => ["start", "end", "center", "between", "around", "evenly", "stretch", "baseline", "center-safe", "end-safe"];
    const scaleAlignSecondaryAxis = () => ["start", "end", "center", "stretch", "center-safe", "end-safe"];
    const scaleMargin = () => ["auto", ...scaleUnambiguousSpacing()];
    const scaleSizing = () => [isFraction, "auto", "full", "dvw", "dvh", "lvw", "lvh", "svw", "svh", "min", "max", "fit", ...scaleUnambiguousSpacing()];
    const scaleColor = () => [themeColor, isArbitraryVariable, isArbitraryValue];
    const scaleBgPosition = () => [...scalePosition(), isArbitraryVariablePosition, isArbitraryPosition, {
      position: [isArbitraryVariable, isArbitraryValue]
    }];
    const scaleBgRepeat = () => ["no-repeat", {
      repeat: ["", "x", "y", "space", "round"]
    }];
    const scaleBgSize = () => ["auto", "cover", "contain", isArbitraryVariableSize, isArbitrarySize, {
      size: [isArbitraryVariable, isArbitraryValue]
    }];
    const scaleGradientStopPosition = () => [isPercent, isArbitraryVariableLength, isArbitraryLength];
    const scaleRadius = () => [
      // Deprecated since Tailwind CSS v4.0.0
      "",
      "none",
      "full",
      themeRadius,
      isArbitraryVariable,
      isArbitraryValue
    ];
    const scaleBorderWidth = () => ["", isNumber, isArbitraryVariableLength, isArbitraryLength];
    const scaleLineStyle = () => ["solid", "dashed", "dotted", "double"];
    const scaleBlendMode = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
    const scaleMaskImagePosition = () => [isNumber, isPercent, isArbitraryVariablePosition, isArbitraryPosition];
    const scaleBlur = () => [
      // Deprecated since Tailwind CSS v4.0.0
      "",
      "none",
      themeBlur,
      isArbitraryVariable,
      isArbitraryValue
    ];
    const scaleRotate = () => ["none", isNumber, isArbitraryVariable, isArbitraryValue];
    const scaleScale = () => ["none", isNumber, isArbitraryVariable, isArbitraryValue];
    const scaleSkew = () => [isNumber, isArbitraryVariable, isArbitraryValue];
    const scaleTranslate = () => [isFraction, "full", ...scaleUnambiguousSpacing()];
    return {
      cacheSize: 500,
      theme: {
        animate: ["spin", "ping", "pulse", "bounce"],
        aspect: ["video"],
        blur: [isTshirtSize],
        breakpoint: [isTshirtSize],
        color: [isAny],
        container: [isTshirtSize],
        "drop-shadow": [isTshirtSize],
        ease: ["in", "out", "in-out"],
        font: [isAnyNonArbitrary],
        "font-weight": ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black"],
        "inset-shadow": [isTshirtSize],
        leading: ["none", "tight", "snug", "normal", "relaxed", "loose"],
        perspective: ["dramatic", "near", "normal", "midrange", "distant", "none"],
        radius: [isTshirtSize],
        shadow: [isTshirtSize],
        spacing: ["px", isNumber],
        text: [isTshirtSize],
        "text-shadow": [isTshirtSize],
        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest"]
      },
      classGroups: {
        // --------------
        // --- Layout ---
        // --------------
        /**
         * Aspect Ratio
         * @see https://tailwindcss.com/docs/aspect-ratio
         */
        aspect: [{
          aspect: ["auto", "square", isFraction, isArbitraryValue, isArbitraryVariable, themeAspect]
        }],
        /**
         * Container
         * @see https://tailwindcss.com/docs/container
         * @deprecated since Tailwind CSS v4.0.0
         */
        container: ["container"],
        /**
         * Columns
         * @see https://tailwindcss.com/docs/columns
         */
        columns: [{
          columns: [isNumber, isArbitraryValue, isArbitraryVariable, themeContainer]
        }],
        /**
         * Break After
         * @see https://tailwindcss.com/docs/break-after
         */
        "break-after": [{
          "break-after": scaleBreak()
        }],
        /**
         * Break Before
         * @see https://tailwindcss.com/docs/break-before
         */
        "break-before": [{
          "break-before": scaleBreak()
        }],
        /**
         * Break Inside
         * @see https://tailwindcss.com/docs/break-inside
         */
        "break-inside": [{
          "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
        }],
        /**
         * Box Decoration Break
         * @see https://tailwindcss.com/docs/box-decoration-break
         */
        "box-decoration": [{
          "box-decoration": ["slice", "clone"]
        }],
        /**
         * Box Sizing
         * @see https://tailwindcss.com/docs/box-sizing
         */
        box: [{
          box: ["border", "content"]
        }],
        /**
         * Display
         * @see https://tailwindcss.com/docs/display
         */
        display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
        /**
         * Screen Reader Only
         * @see https://tailwindcss.com/docs/display#screen-reader-only
         */
        sr: ["sr-only", "not-sr-only"],
        /**
         * Floats
         * @see https://tailwindcss.com/docs/float
         */
        float: [{
          float: ["right", "left", "none", "start", "end"]
        }],
        /**
         * Clear
         * @see https://tailwindcss.com/docs/clear
         */
        clear: [{
          clear: ["left", "right", "both", "none", "start", "end"]
        }],
        /**
         * Isolation
         * @see https://tailwindcss.com/docs/isolation
         */
        isolation: ["isolate", "isolation-auto"],
        /**
         * Object Fit
         * @see https://tailwindcss.com/docs/object-fit
         */
        "object-fit": [{
          object: ["contain", "cover", "fill", "none", "scale-down"]
        }],
        /**
         * Object Position
         * @see https://tailwindcss.com/docs/object-position
         */
        "object-position": [{
          object: scalePositionWithArbitrary()
        }],
        /**
         * Overflow
         * @see https://tailwindcss.com/docs/overflow
         */
        overflow: [{
          overflow: scaleOverflow()
        }],
        /**
         * Overflow X
         * @see https://tailwindcss.com/docs/overflow
         */
        "overflow-x": [{
          "overflow-x": scaleOverflow()
        }],
        /**
         * Overflow Y
         * @see https://tailwindcss.com/docs/overflow
         */
        "overflow-y": [{
          "overflow-y": scaleOverflow()
        }],
        /**
         * Overscroll Behavior
         * @see https://tailwindcss.com/docs/overscroll-behavior
         */
        overscroll: [{
          overscroll: scaleOverscroll()
        }],
        /**
         * Overscroll Behavior X
         * @see https://tailwindcss.com/docs/overscroll-behavior
         */
        "overscroll-x": [{
          "overscroll-x": scaleOverscroll()
        }],
        /**
         * Overscroll Behavior Y
         * @see https://tailwindcss.com/docs/overscroll-behavior
         */
        "overscroll-y": [{
          "overscroll-y": scaleOverscroll()
        }],
        /**
         * Position
         * @see https://tailwindcss.com/docs/position
         */
        position: ["static", "fixed", "absolute", "relative", "sticky"],
        /**
         * Top / Right / Bottom / Left
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        inset: [{
          inset: scaleInset()
        }],
        /**
         * Right / Left
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        "inset-x": [{
          "inset-x": scaleInset()
        }],
        /**
         * Top / Bottom
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        "inset-y": [{
          "inset-y": scaleInset()
        }],
        /**
         * Start
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        start: [{
          start: scaleInset()
        }],
        /**
         * End
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        end: [{
          end: scaleInset()
        }],
        /**
         * Top
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        top: [{
          top: scaleInset()
        }],
        /**
         * Right
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        right: [{
          right: scaleInset()
        }],
        /**
         * Bottom
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        bottom: [{
          bottom: scaleInset()
        }],
        /**
         * Left
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        left: [{
          left: scaleInset()
        }],
        /**
         * Visibility
         * @see https://tailwindcss.com/docs/visibility
         */
        visibility: ["visible", "invisible", "collapse"],
        /**
         * Z-Index
         * @see https://tailwindcss.com/docs/z-index
         */
        z: [{
          z: [isInteger, "auto", isArbitraryVariable, isArbitraryValue]
        }],
        // ------------------------
        // --- Flexbox and Grid ---
        // ------------------------
        /**
         * Flex Basis
         * @see https://tailwindcss.com/docs/flex-basis
         */
        basis: [{
          basis: [isFraction, "full", "auto", themeContainer, ...scaleUnambiguousSpacing()]
        }],
        /**
         * Flex Direction
         * @see https://tailwindcss.com/docs/flex-direction
         */
        "flex-direction": [{
          flex: ["row", "row-reverse", "col", "col-reverse"]
        }],
        /**
         * Flex Wrap
         * @see https://tailwindcss.com/docs/flex-wrap
         */
        "flex-wrap": [{
          flex: ["nowrap", "wrap", "wrap-reverse"]
        }],
        /**
         * Flex
         * @see https://tailwindcss.com/docs/flex
         */
        flex: [{
          flex: [isNumber, isFraction, "auto", "initial", "none", isArbitraryValue]
        }],
        /**
         * Flex Grow
         * @see https://tailwindcss.com/docs/flex-grow
         */
        grow: [{
          grow: ["", isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Flex Shrink
         * @see https://tailwindcss.com/docs/flex-shrink
         */
        shrink: [{
          shrink: ["", isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Order
         * @see https://tailwindcss.com/docs/order
         */
        order: [{
          order: [isInteger, "first", "last", "none", isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Grid Template Columns
         * @see https://tailwindcss.com/docs/grid-template-columns
         */
        "grid-cols": [{
          "grid-cols": scaleGridTemplateColsRows()
        }],
        /**
         * Grid Column Start / End
         * @see https://tailwindcss.com/docs/grid-column
         */
        "col-start-end": [{
          col: scaleGridColRowStartAndEnd()
        }],
        /**
         * Grid Column Start
         * @see https://tailwindcss.com/docs/grid-column
         */
        "col-start": [{
          "col-start": scaleGridColRowStartOrEnd()
        }],
        /**
         * Grid Column End
         * @see https://tailwindcss.com/docs/grid-column
         */
        "col-end": [{
          "col-end": scaleGridColRowStartOrEnd()
        }],
        /**
         * Grid Template Rows
         * @see https://tailwindcss.com/docs/grid-template-rows
         */
        "grid-rows": [{
          "grid-rows": scaleGridTemplateColsRows()
        }],
        /**
         * Grid Row Start / End
         * @see https://tailwindcss.com/docs/grid-row
         */
        "row-start-end": [{
          row: scaleGridColRowStartAndEnd()
        }],
        /**
         * Grid Row Start
         * @see https://tailwindcss.com/docs/grid-row
         */
        "row-start": [{
          "row-start": scaleGridColRowStartOrEnd()
        }],
        /**
         * Grid Row End
         * @see https://tailwindcss.com/docs/grid-row
         */
        "row-end": [{
          "row-end": scaleGridColRowStartOrEnd()
        }],
        /**
         * Grid Auto Flow
         * @see https://tailwindcss.com/docs/grid-auto-flow
         */
        "grid-flow": [{
          "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
        }],
        /**
         * Grid Auto Columns
         * @see https://tailwindcss.com/docs/grid-auto-columns
         */
        "auto-cols": [{
          "auto-cols": scaleGridAutoColsRows()
        }],
        /**
         * Grid Auto Rows
         * @see https://tailwindcss.com/docs/grid-auto-rows
         */
        "auto-rows": [{
          "auto-rows": scaleGridAutoColsRows()
        }],
        /**
         * Gap
         * @see https://tailwindcss.com/docs/gap
         */
        gap: [{
          gap: scaleUnambiguousSpacing()
        }],
        /**
         * Gap X
         * @see https://tailwindcss.com/docs/gap
         */
        "gap-x": [{
          "gap-x": scaleUnambiguousSpacing()
        }],
        /**
         * Gap Y
         * @see https://tailwindcss.com/docs/gap
         */
        "gap-y": [{
          "gap-y": scaleUnambiguousSpacing()
        }],
        /**
         * Justify Content
         * @see https://tailwindcss.com/docs/justify-content
         */
        "justify-content": [{
          justify: [...scaleAlignPrimaryAxis(), "normal"]
        }],
        /**
         * Justify Items
         * @see https://tailwindcss.com/docs/justify-items
         */
        "justify-items": [{
          "justify-items": [...scaleAlignSecondaryAxis(), "normal"]
        }],
        /**
         * Justify Self
         * @see https://tailwindcss.com/docs/justify-self
         */
        "justify-self": [{
          "justify-self": ["auto", ...scaleAlignSecondaryAxis()]
        }],
        /**
         * Align Content
         * @see https://tailwindcss.com/docs/align-content
         */
        "align-content": [{
          content: ["normal", ...scaleAlignPrimaryAxis()]
        }],
        /**
         * Align Items
         * @see https://tailwindcss.com/docs/align-items
         */
        "align-items": [{
          items: [...scaleAlignSecondaryAxis(), {
            baseline: ["", "last"]
          }]
        }],
        /**
         * Align Self
         * @see https://tailwindcss.com/docs/align-self
         */
        "align-self": [{
          self: ["auto", ...scaleAlignSecondaryAxis(), {
            baseline: ["", "last"]
          }]
        }],
        /**
         * Place Content
         * @see https://tailwindcss.com/docs/place-content
         */
        "place-content": [{
          "place-content": scaleAlignPrimaryAxis()
        }],
        /**
         * Place Items
         * @see https://tailwindcss.com/docs/place-items
         */
        "place-items": [{
          "place-items": [...scaleAlignSecondaryAxis(), "baseline"]
        }],
        /**
         * Place Self
         * @see https://tailwindcss.com/docs/place-self
         */
        "place-self": [{
          "place-self": ["auto", ...scaleAlignSecondaryAxis()]
        }],
        // Spacing
        /**
         * Padding
         * @see https://tailwindcss.com/docs/padding
         */
        p: [{
          p: scaleUnambiguousSpacing()
        }],
        /**
         * Padding X
         * @see https://tailwindcss.com/docs/padding
         */
        px: [{
          px: scaleUnambiguousSpacing()
        }],
        /**
         * Padding Y
         * @see https://tailwindcss.com/docs/padding
         */
        py: [{
          py: scaleUnambiguousSpacing()
        }],
        /**
         * Padding Start
         * @see https://tailwindcss.com/docs/padding
         */
        ps: [{
          ps: scaleUnambiguousSpacing()
        }],
        /**
         * Padding End
         * @see https://tailwindcss.com/docs/padding
         */
        pe: [{
          pe: scaleUnambiguousSpacing()
        }],
        /**
         * Padding Top
         * @see https://tailwindcss.com/docs/padding
         */
        pt: [{
          pt: scaleUnambiguousSpacing()
        }],
        /**
         * Padding Right
         * @see https://tailwindcss.com/docs/padding
         */
        pr: [{
          pr: scaleUnambiguousSpacing()
        }],
        /**
         * Padding Bottom
         * @see https://tailwindcss.com/docs/padding
         */
        pb: [{
          pb: scaleUnambiguousSpacing()
        }],
        /**
         * Padding Left
         * @see https://tailwindcss.com/docs/padding
         */
        pl: [{
          pl: scaleUnambiguousSpacing()
        }],
        /**
         * Margin
         * @see https://tailwindcss.com/docs/margin
         */
        m: [{
          m: scaleMargin()
        }],
        /**
         * Margin X
         * @see https://tailwindcss.com/docs/margin
         */
        mx: [{
          mx: scaleMargin()
        }],
        /**
         * Margin Y
         * @see https://tailwindcss.com/docs/margin
         */
        my: [{
          my: scaleMargin()
        }],
        /**
         * Margin Start
         * @see https://tailwindcss.com/docs/margin
         */
        ms: [{
          ms: scaleMargin()
        }],
        /**
         * Margin End
         * @see https://tailwindcss.com/docs/margin
         */
        me: [{
          me: scaleMargin()
        }],
        /**
         * Margin Top
         * @see https://tailwindcss.com/docs/margin
         */
        mt: [{
          mt: scaleMargin()
        }],
        /**
         * Margin Right
         * @see https://tailwindcss.com/docs/margin
         */
        mr: [{
          mr: scaleMargin()
        }],
        /**
         * Margin Bottom
         * @see https://tailwindcss.com/docs/margin
         */
        mb: [{
          mb: scaleMargin()
        }],
        /**
         * Margin Left
         * @see https://tailwindcss.com/docs/margin
         */
        ml: [{
          ml: scaleMargin()
        }],
        /**
         * Space Between X
         * @see https://tailwindcss.com/docs/margin#adding-space-between-children
         */
        "space-x": [{
          "space-x": scaleUnambiguousSpacing()
        }],
        /**
         * Space Between X Reverse
         * @see https://tailwindcss.com/docs/margin#adding-space-between-children
         */
        "space-x-reverse": ["space-x-reverse"],
        /**
         * Space Between Y
         * @see https://tailwindcss.com/docs/margin#adding-space-between-children
         */
        "space-y": [{
          "space-y": scaleUnambiguousSpacing()
        }],
        /**
         * Space Between Y Reverse
         * @see https://tailwindcss.com/docs/margin#adding-space-between-children
         */
        "space-y-reverse": ["space-y-reverse"],
        // --------------
        // --- Sizing ---
        // --------------
        /**
         * Size
         * @see https://tailwindcss.com/docs/width#setting-both-width-and-height
         */
        size: [{
          size: scaleSizing()
        }],
        /**
         * Width
         * @see https://tailwindcss.com/docs/width
         */
        w: [{
          w: [themeContainer, "screen", ...scaleSizing()]
        }],
        /**
         * Min-Width
         * @see https://tailwindcss.com/docs/min-width
         */
        "min-w": [{
          "min-w": [
            themeContainer,
            "screen",
            /** Deprecated. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
            "none",
            ...scaleSizing()
          ]
        }],
        /**
         * Max-Width
         * @see https://tailwindcss.com/docs/max-width
         */
        "max-w": [{
          "max-w": [
            themeContainer,
            "screen",
            "none",
            /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
            "prose",
            /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
            {
              screen: [themeBreakpoint]
            },
            ...scaleSizing()
          ]
        }],
        /**
         * Height
         * @see https://tailwindcss.com/docs/height
         */
        h: [{
          h: ["screen", "lh", ...scaleSizing()]
        }],
        /**
         * Min-Height
         * @see https://tailwindcss.com/docs/min-height
         */
        "min-h": [{
          "min-h": ["screen", "lh", "none", ...scaleSizing()]
        }],
        /**
         * Max-Height
         * @see https://tailwindcss.com/docs/max-height
         */
        "max-h": [{
          "max-h": ["screen", "lh", ...scaleSizing()]
        }],
        // ------------------
        // --- Typography ---
        // ------------------
        /**
         * Font Size
         * @see https://tailwindcss.com/docs/font-size
         */
        "font-size": [{
          text: ["base", themeText, isArbitraryVariableLength, isArbitraryLength]
        }],
        /**
         * Font Smoothing
         * @see https://tailwindcss.com/docs/font-smoothing
         */
        "font-smoothing": ["antialiased", "subpixel-antialiased"],
        /**
         * Font Style
         * @see https://tailwindcss.com/docs/font-style
         */
        "font-style": ["italic", "not-italic"],
        /**
         * Font Weight
         * @see https://tailwindcss.com/docs/font-weight
         */
        "font-weight": [{
          font: [themeFontWeight, isArbitraryVariable, isArbitraryNumber]
        }],
        /**
         * Font Stretch
         * @see https://tailwindcss.com/docs/font-stretch
         */
        "font-stretch": [{
          "font-stretch": ["ultra-condensed", "extra-condensed", "condensed", "semi-condensed", "normal", "semi-expanded", "expanded", "extra-expanded", "ultra-expanded", isPercent, isArbitraryValue]
        }],
        /**
         * Font Family
         * @see https://tailwindcss.com/docs/font-family
         */
        "font-family": [{
          font: [isArbitraryVariableFamilyName, isArbitraryValue, themeFont]
        }],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-normal": ["normal-nums"],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-ordinal": ["ordinal"],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-slashed-zero": ["slashed-zero"],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-figure": ["lining-nums", "oldstyle-nums"],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-spacing": ["proportional-nums", "tabular-nums"],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-fraction": ["diagonal-fractions", "stacked-fractions"],
        /**
         * Letter Spacing
         * @see https://tailwindcss.com/docs/letter-spacing
         */
        tracking: [{
          tracking: [themeTracking, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Line Clamp
         * @see https://tailwindcss.com/docs/line-clamp
         */
        "line-clamp": [{
          "line-clamp": [isNumber, "none", isArbitraryVariable, isArbitraryNumber]
        }],
        /**
         * Line Height
         * @see https://tailwindcss.com/docs/line-height
         */
        leading: [{
          leading: [
            /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
            themeLeading,
            ...scaleUnambiguousSpacing()
          ]
        }],
        /**
         * List Style Image
         * @see https://tailwindcss.com/docs/list-style-image
         */
        "list-image": [{
          "list-image": ["none", isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * List Style Position
         * @see https://tailwindcss.com/docs/list-style-position
         */
        "list-style-position": [{
          list: ["inside", "outside"]
        }],
        /**
         * List Style Type
         * @see https://tailwindcss.com/docs/list-style-type
         */
        "list-style-type": [{
          list: ["disc", "decimal", "none", isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Text Alignment
         * @see https://tailwindcss.com/docs/text-align
         */
        "text-alignment": [{
          text: ["left", "center", "right", "justify", "start", "end"]
        }],
        /**
         * Placeholder Color
         * @deprecated since Tailwind CSS v3.0.0
         * @see https://v3.tailwindcss.com/docs/placeholder-color
         */
        "placeholder-color": [{
          placeholder: scaleColor()
        }],
        /**
         * Text Color
         * @see https://tailwindcss.com/docs/text-color
         */
        "text-color": [{
          text: scaleColor()
        }],
        /**
         * Text Decoration
         * @see https://tailwindcss.com/docs/text-decoration
         */
        "text-decoration": ["underline", "overline", "line-through", "no-underline"],
        /**
         * Text Decoration Style
         * @see https://tailwindcss.com/docs/text-decoration-style
         */
        "text-decoration-style": [{
          decoration: [...scaleLineStyle(), "wavy"]
        }],
        /**
         * Text Decoration Thickness
         * @see https://tailwindcss.com/docs/text-decoration-thickness
         */
        "text-decoration-thickness": [{
          decoration: [isNumber, "from-font", "auto", isArbitraryVariable, isArbitraryLength]
        }],
        /**
         * Text Decoration Color
         * @see https://tailwindcss.com/docs/text-decoration-color
         */
        "text-decoration-color": [{
          decoration: scaleColor()
        }],
        /**
         * Text Underline Offset
         * @see https://tailwindcss.com/docs/text-underline-offset
         */
        "underline-offset": [{
          "underline-offset": [isNumber, "auto", isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Text Transform
         * @see https://tailwindcss.com/docs/text-transform
         */
        "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
        /**
         * Text Overflow
         * @see https://tailwindcss.com/docs/text-overflow
         */
        "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
        /**
         * Text Wrap
         * @see https://tailwindcss.com/docs/text-wrap
         */
        "text-wrap": [{
          text: ["wrap", "nowrap", "balance", "pretty"]
        }],
        /**
         * Text Indent
         * @see https://tailwindcss.com/docs/text-indent
         */
        indent: [{
          indent: scaleUnambiguousSpacing()
        }],
        /**
         * Vertical Alignment
         * @see https://tailwindcss.com/docs/vertical-align
         */
        "vertical-align": [{
          align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Whitespace
         * @see https://tailwindcss.com/docs/whitespace
         */
        whitespace: [{
          whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
        }],
        /**
         * Word Break
         * @see https://tailwindcss.com/docs/word-break
         */
        break: [{
          break: ["normal", "words", "all", "keep"]
        }],
        /**
         * Overflow Wrap
         * @see https://tailwindcss.com/docs/overflow-wrap
         */
        wrap: [{
          wrap: ["break-word", "anywhere", "normal"]
        }],
        /**
         * Hyphens
         * @see https://tailwindcss.com/docs/hyphens
         */
        hyphens: [{
          hyphens: ["none", "manual", "auto"]
        }],
        /**
         * Content
         * @see https://tailwindcss.com/docs/content
         */
        content: [{
          content: ["none", isArbitraryVariable, isArbitraryValue]
        }],
        // -------------------
        // --- Backgrounds ---
        // -------------------
        /**
         * Background Attachment
         * @see https://tailwindcss.com/docs/background-attachment
         */
        "bg-attachment": [{
          bg: ["fixed", "local", "scroll"]
        }],
        /**
         * Background Clip
         * @see https://tailwindcss.com/docs/background-clip
         */
        "bg-clip": [{
          "bg-clip": ["border", "padding", "content", "text"]
        }],
        /**
         * Background Origin
         * @see https://tailwindcss.com/docs/background-origin
         */
        "bg-origin": [{
          "bg-origin": ["border", "padding", "content"]
        }],
        /**
         * Background Position
         * @see https://tailwindcss.com/docs/background-position
         */
        "bg-position": [{
          bg: scaleBgPosition()
        }],
        /**
         * Background Repeat
         * @see https://tailwindcss.com/docs/background-repeat
         */
        "bg-repeat": [{
          bg: scaleBgRepeat()
        }],
        /**
         * Background Size
         * @see https://tailwindcss.com/docs/background-size
         */
        "bg-size": [{
          bg: scaleBgSize()
        }],
        /**
         * Background Image
         * @see https://tailwindcss.com/docs/background-image
         */
        "bg-image": [{
          bg: ["none", {
            linear: [{
              to: ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
            }, isInteger, isArbitraryVariable, isArbitraryValue],
            radial: ["", isArbitraryVariable, isArbitraryValue],
            conic: [isInteger, isArbitraryVariable, isArbitraryValue]
          }, isArbitraryVariableImage, isArbitraryImage]
        }],
        /**
         * Background Color
         * @see https://tailwindcss.com/docs/background-color
         */
        "bg-color": [{
          bg: scaleColor()
        }],
        /**
         * Gradient Color Stops From Position
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-from-pos": [{
          from: scaleGradientStopPosition()
        }],
        /**
         * Gradient Color Stops Via Position
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-via-pos": [{
          via: scaleGradientStopPosition()
        }],
        /**
         * Gradient Color Stops To Position
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-to-pos": [{
          to: scaleGradientStopPosition()
        }],
        /**
         * Gradient Color Stops From
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-from": [{
          from: scaleColor()
        }],
        /**
         * Gradient Color Stops Via
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-via": [{
          via: scaleColor()
        }],
        /**
         * Gradient Color Stops To
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-to": [{
          to: scaleColor()
        }],
        // ---------------
        // --- Borders ---
        // ---------------
        /**
         * Border Radius
         * @see https://tailwindcss.com/docs/border-radius
         */
        rounded: [{
          rounded: scaleRadius()
        }],
        /**
         * Border Radius Start
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-s": [{
          "rounded-s": scaleRadius()
        }],
        /**
         * Border Radius End
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-e": [{
          "rounded-e": scaleRadius()
        }],
        /**
         * Border Radius Top
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-t": [{
          "rounded-t": scaleRadius()
        }],
        /**
         * Border Radius Right
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-r": [{
          "rounded-r": scaleRadius()
        }],
        /**
         * Border Radius Bottom
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-b": [{
          "rounded-b": scaleRadius()
        }],
        /**
         * Border Radius Left
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-l": [{
          "rounded-l": scaleRadius()
        }],
        /**
         * Border Radius Start Start
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-ss": [{
          "rounded-ss": scaleRadius()
        }],
        /**
         * Border Radius Start End
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-se": [{
          "rounded-se": scaleRadius()
        }],
        /**
         * Border Radius End End
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-ee": [{
          "rounded-ee": scaleRadius()
        }],
        /**
         * Border Radius End Start
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-es": [{
          "rounded-es": scaleRadius()
        }],
        /**
         * Border Radius Top Left
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-tl": [{
          "rounded-tl": scaleRadius()
        }],
        /**
         * Border Radius Top Right
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-tr": [{
          "rounded-tr": scaleRadius()
        }],
        /**
         * Border Radius Bottom Right
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-br": [{
          "rounded-br": scaleRadius()
        }],
        /**
         * Border Radius Bottom Left
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-bl": [{
          "rounded-bl": scaleRadius()
        }],
        /**
         * Border Width
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w": [{
          border: scaleBorderWidth()
        }],
        /**
         * Border Width X
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-x": [{
          "border-x": scaleBorderWidth()
        }],
        /**
         * Border Width Y
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-y": [{
          "border-y": scaleBorderWidth()
        }],
        /**
         * Border Width Start
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-s": [{
          "border-s": scaleBorderWidth()
        }],
        /**
         * Border Width End
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-e": [{
          "border-e": scaleBorderWidth()
        }],
        /**
         * Border Width Top
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-t": [{
          "border-t": scaleBorderWidth()
        }],
        /**
         * Border Width Right
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-r": [{
          "border-r": scaleBorderWidth()
        }],
        /**
         * Border Width Bottom
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-b": [{
          "border-b": scaleBorderWidth()
        }],
        /**
         * Border Width Left
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-l": [{
          "border-l": scaleBorderWidth()
        }],
        /**
         * Divide Width X
         * @see https://tailwindcss.com/docs/border-width#between-children
         */
        "divide-x": [{
          "divide-x": scaleBorderWidth()
        }],
        /**
         * Divide Width X Reverse
         * @see https://tailwindcss.com/docs/border-width#between-children
         */
        "divide-x-reverse": ["divide-x-reverse"],
        /**
         * Divide Width Y
         * @see https://tailwindcss.com/docs/border-width#between-children
         */
        "divide-y": [{
          "divide-y": scaleBorderWidth()
        }],
        /**
         * Divide Width Y Reverse
         * @see https://tailwindcss.com/docs/border-width#between-children
         */
        "divide-y-reverse": ["divide-y-reverse"],
        /**
         * Border Style
         * @see https://tailwindcss.com/docs/border-style
         */
        "border-style": [{
          border: [...scaleLineStyle(), "hidden", "none"]
        }],
        /**
         * Divide Style
         * @see https://tailwindcss.com/docs/border-style#setting-the-divider-style
         */
        "divide-style": [{
          divide: [...scaleLineStyle(), "hidden", "none"]
        }],
        /**
         * Border Color
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color": [{
          border: scaleColor()
        }],
        /**
         * Border Color X
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-x": [{
          "border-x": scaleColor()
        }],
        /**
         * Border Color Y
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-y": [{
          "border-y": scaleColor()
        }],
        /**
         * Border Color S
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-s": [{
          "border-s": scaleColor()
        }],
        /**
         * Border Color E
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-e": [{
          "border-e": scaleColor()
        }],
        /**
         * Border Color Top
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-t": [{
          "border-t": scaleColor()
        }],
        /**
         * Border Color Right
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-r": [{
          "border-r": scaleColor()
        }],
        /**
         * Border Color Bottom
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-b": [{
          "border-b": scaleColor()
        }],
        /**
         * Border Color Left
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-l": [{
          "border-l": scaleColor()
        }],
        /**
         * Divide Color
         * @see https://tailwindcss.com/docs/divide-color
         */
        "divide-color": [{
          divide: scaleColor()
        }],
        /**
         * Outline Style
         * @see https://tailwindcss.com/docs/outline-style
         */
        "outline-style": [{
          outline: [...scaleLineStyle(), "none", "hidden"]
        }],
        /**
         * Outline Offset
         * @see https://tailwindcss.com/docs/outline-offset
         */
        "outline-offset": [{
          "outline-offset": [isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Outline Width
         * @see https://tailwindcss.com/docs/outline-width
         */
        "outline-w": [{
          outline: ["", isNumber, isArbitraryVariableLength, isArbitraryLength]
        }],
        /**
         * Outline Color
         * @see https://tailwindcss.com/docs/outline-color
         */
        "outline-color": [{
          outline: scaleColor()
        }],
        // ---------------
        // --- Effects ---
        // ---------------
        /**
         * Box Shadow
         * @see https://tailwindcss.com/docs/box-shadow
         */
        shadow: [{
          shadow: [
            // Deprecated since Tailwind CSS v4.0.0
            "",
            "none",
            themeShadow,
            isArbitraryVariableShadow,
            isArbitraryShadow
          ]
        }],
        /**
         * Box Shadow Color
         * @see https://tailwindcss.com/docs/box-shadow#setting-the-shadow-color
         */
        "shadow-color": [{
          shadow: scaleColor()
        }],
        /**
         * Inset Box Shadow
         * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow
         */
        "inset-shadow": [{
          "inset-shadow": ["none", themeInsetShadow, isArbitraryVariableShadow, isArbitraryShadow]
        }],
        /**
         * Inset Box Shadow Color
         * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-shadow-color
         */
        "inset-shadow-color": [{
          "inset-shadow": scaleColor()
        }],
        /**
         * Ring Width
         * @see https://tailwindcss.com/docs/box-shadow#adding-a-ring
         */
        "ring-w": [{
          ring: scaleBorderWidth()
        }],
        /**
         * Ring Width Inset
         * @see https://v3.tailwindcss.com/docs/ring-width#inset-rings
         * @deprecated since Tailwind CSS v4.0.0
         * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
         */
        "ring-w-inset": ["ring-inset"],
        /**
         * Ring Color
         * @see https://tailwindcss.com/docs/box-shadow#setting-the-ring-color
         */
        "ring-color": [{
          ring: scaleColor()
        }],
        /**
         * Ring Offset Width
         * @see https://v3.tailwindcss.com/docs/ring-offset-width
         * @deprecated since Tailwind CSS v4.0.0
         * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
         */
        "ring-offset-w": [{
          "ring-offset": [isNumber, isArbitraryLength]
        }],
        /**
         * Ring Offset Color
         * @see https://v3.tailwindcss.com/docs/ring-offset-color
         * @deprecated since Tailwind CSS v4.0.0
         * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
         */
        "ring-offset-color": [{
          "ring-offset": scaleColor()
        }],
        /**
         * Inset Ring Width
         * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring
         */
        "inset-ring-w": [{
          "inset-ring": scaleBorderWidth()
        }],
        /**
         * Inset Ring Color
         * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-ring-color
         */
        "inset-ring-color": [{
          "inset-ring": scaleColor()
        }],
        /**
         * Text Shadow
         * @see https://tailwindcss.com/docs/text-shadow
         */
        "text-shadow": [{
          "text-shadow": ["none", themeTextShadow, isArbitraryVariableShadow, isArbitraryShadow]
        }],
        /**
         * Text Shadow Color
         * @see https://tailwindcss.com/docs/text-shadow#setting-the-shadow-color
         */
        "text-shadow-color": [{
          "text-shadow": scaleColor()
        }],
        /**
         * Opacity
         * @see https://tailwindcss.com/docs/opacity
         */
        opacity: [{
          opacity: [isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Mix Blend Mode
         * @see https://tailwindcss.com/docs/mix-blend-mode
         */
        "mix-blend": [{
          "mix-blend": [...scaleBlendMode(), "plus-darker", "plus-lighter"]
        }],
        /**
         * Background Blend Mode
         * @see https://tailwindcss.com/docs/background-blend-mode
         */
        "bg-blend": [{
          "bg-blend": scaleBlendMode()
        }],
        /**
         * Mask Clip
         * @see https://tailwindcss.com/docs/mask-clip
         */
        "mask-clip": [{
          "mask-clip": ["border", "padding", "content", "fill", "stroke", "view"]
        }, "mask-no-clip"],
        /**
         * Mask Composite
         * @see https://tailwindcss.com/docs/mask-composite
         */
        "mask-composite": [{
          mask: ["add", "subtract", "intersect", "exclude"]
        }],
        /**
         * Mask Image
         * @see https://tailwindcss.com/docs/mask-image
         */
        "mask-image-linear-pos": [{
          "mask-linear": [isNumber]
        }],
        "mask-image-linear-from-pos": [{
          "mask-linear-from": scaleMaskImagePosition()
        }],
        "mask-image-linear-to-pos": [{
          "mask-linear-to": scaleMaskImagePosition()
        }],
        "mask-image-linear-from-color": [{
          "mask-linear-from": scaleColor()
        }],
        "mask-image-linear-to-color": [{
          "mask-linear-to": scaleColor()
        }],
        "mask-image-t-from-pos": [{
          "mask-t-from": scaleMaskImagePosition()
        }],
        "mask-image-t-to-pos": [{
          "mask-t-to": scaleMaskImagePosition()
        }],
        "mask-image-t-from-color": [{
          "mask-t-from": scaleColor()
        }],
        "mask-image-t-to-color": [{
          "mask-t-to": scaleColor()
        }],
        "mask-image-r-from-pos": [{
          "mask-r-from": scaleMaskImagePosition()
        }],
        "mask-image-r-to-pos": [{
          "mask-r-to": scaleMaskImagePosition()
        }],
        "mask-image-r-from-color": [{
          "mask-r-from": scaleColor()
        }],
        "mask-image-r-to-color": [{
          "mask-r-to": scaleColor()
        }],
        "mask-image-b-from-pos": [{
          "mask-b-from": scaleMaskImagePosition()
        }],
        "mask-image-b-to-pos": [{
          "mask-b-to": scaleMaskImagePosition()
        }],
        "mask-image-b-from-color": [{
          "mask-b-from": scaleColor()
        }],
        "mask-image-b-to-color": [{
          "mask-b-to": scaleColor()
        }],
        "mask-image-l-from-pos": [{
          "mask-l-from": scaleMaskImagePosition()
        }],
        "mask-image-l-to-pos": [{
          "mask-l-to": scaleMaskImagePosition()
        }],
        "mask-image-l-from-color": [{
          "mask-l-from": scaleColor()
        }],
        "mask-image-l-to-color": [{
          "mask-l-to": scaleColor()
        }],
        "mask-image-x-from-pos": [{
          "mask-x-from": scaleMaskImagePosition()
        }],
        "mask-image-x-to-pos": [{
          "mask-x-to": scaleMaskImagePosition()
        }],
        "mask-image-x-from-color": [{
          "mask-x-from": scaleColor()
        }],
        "mask-image-x-to-color": [{
          "mask-x-to": scaleColor()
        }],
        "mask-image-y-from-pos": [{
          "mask-y-from": scaleMaskImagePosition()
        }],
        "mask-image-y-to-pos": [{
          "mask-y-to": scaleMaskImagePosition()
        }],
        "mask-image-y-from-color": [{
          "mask-y-from": scaleColor()
        }],
        "mask-image-y-to-color": [{
          "mask-y-to": scaleColor()
        }],
        "mask-image-radial": [{
          "mask-radial": [isArbitraryVariable, isArbitraryValue]
        }],
        "mask-image-radial-from-pos": [{
          "mask-radial-from": scaleMaskImagePosition()
        }],
        "mask-image-radial-to-pos": [{
          "mask-radial-to": scaleMaskImagePosition()
        }],
        "mask-image-radial-from-color": [{
          "mask-radial-from": scaleColor()
        }],
        "mask-image-radial-to-color": [{
          "mask-radial-to": scaleColor()
        }],
        "mask-image-radial-shape": [{
          "mask-radial": ["circle", "ellipse"]
        }],
        "mask-image-radial-size": [{
          "mask-radial": [{
            closest: ["side", "corner"],
            farthest: ["side", "corner"]
          }]
        }],
        "mask-image-radial-pos": [{
          "mask-radial-at": scalePosition()
        }],
        "mask-image-conic-pos": [{
          "mask-conic": [isNumber]
        }],
        "mask-image-conic-from-pos": [{
          "mask-conic-from": scaleMaskImagePosition()
        }],
        "mask-image-conic-to-pos": [{
          "mask-conic-to": scaleMaskImagePosition()
        }],
        "mask-image-conic-from-color": [{
          "mask-conic-from": scaleColor()
        }],
        "mask-image-conic-to-color": [{
          "mask-conic-to": scaleColor()
        }],
        /**
         * Mask Mode
         * @see https://tailwindcss.com/docs/mask-mode
         */
        "mask-mode": [{
          mask: ["alpha", "luminance", "match"]
        }],
        /**
         * Mask Origin
         * @see https://tailwindcss.com/docs/mask-origin
         */
        "mask-origin": [{
          "mask-origin": ["border", "padding", "content", "fill", "stroke", "view"]
        }],
        /**
         * Mask Position
         * @see https://tailwindcss.com/docs/mask-position
         */
        "mask-position": [{
          mask: scaleBgPosition()
        }],
        /**
         * Mask Repeat
         * @see https://tailwindcss.com/docs/mask-repeat
         */
        "mask-repeat": [{
          mask: scaleBgRepeat()
        }],
        /**
         * Mask Size
         * @see https://tailwindcss.com/docs/mask-size
         */
        "mask-size": [{
          mask: scaleBgSize()
        }],
        /**
         * Mask Type
         * @see https://tailwindcss.com/docs/mask-type
         */
        "mask-type": [{
          "mask-type": ["alpha", "luminance"]
        }],
        /**
         * Mask Image
         * @see https://tailwindcss.com/docs/mask-image
         */
        "mask-image": [{
          mask: ["none", isArbitraryVariable, isArbitraryValue]
        }],
        // ---------------
        // --- Filters ---
        // ---------------
        /**
         * Filter
         * @see https://tailwindcss.com/docs/filter
         */
        filter: [{
          filter: [
            // Deprecated since Tailwind CSS v3.0.0
            "",
            "none",
            isArbitraryVariable,
            isArbitraryValue
          ]
        }],
        /**
         * Blur
         * @see https://tailwindcss.com/docs/blur
         */
        blur: [{
          blur: scaleBlur()
        }],
        /**
         * Brightness
         * @see https://tailwindcss.com/docs/brightness
         */
        brightness: [{
          brightness: [isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Contrast
         * @see https://tailwindcss.com/docs/contrast
         */
        contrast: [{
          contrast: [isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Drop Shadow
         * @see https://tailwindcss.com/docs/drop-shadow
         */
        "drop-shadow": [{
          "drop-shadow": [
            // Deprecated since Tailwind CSS v4.0.0
            "",
            "none",
            themeDropShadow,
            isArbitraryVariableShadow,
            isArbitraryShadow
          ]
        }],
        /**
         * Drop Shadow Color
         * @see https://tailwindcss.com/docs/filter-drop-shadow#setting-the-shadow-color
         */
        "drop-shadow-color": [{
          "drop-shadow": scaleColor()
        }],
        /**
         * Grayscale
         * @see https://tailwindcss.com/docs/grayscale
         */
        grayscale: [{
          grayscale: ["", isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Hue Rotate
         * @see https://tailwindcss.com/docs/hue-rotate
         */
        "hue-rotate": [{
          "hue-rotate": [isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Invert
         * @see https://tailwindcss.com/docs/invert
         */
        invert: [{
          invert: ["", isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Saturate
         * @see https://tailwindcss.com/docs/saturate
         */
        saturate: [{
          saturate: [isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Sepia
         * @see https://tailwindcss.com/docs/sepia
         */
        sepia: [{
          sepia: ["", isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Backdrop Filter
         * @see https://tailwindcss.com/docs/backdrop-filter
         */
        "backdrop-filter": [{
          "backdrop-filter": [
            // Deprecated since Tailwind CSS v3.0.0
            "",
            "none",
            isArbitraryVariable,
            isArbitraryValue
          ]
        }],
        /**
         * Backdrop Blur
         * @see https://tailwindcss.com/docs/backdrop-blur
         */
        "backdrop-blur": [{
          "backdrop-blur": scaleBlur()
        }],
        /**
         * Backdrop Brightness
         * @see https://tailwindcss.com/docs/backdrop-brightness
         */
        "backdrop-brightness": [{
          "backdrop-brightness": [isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Backdrop Contrast
         * @see https://tailwindcss.com/docs/backdrop-contrast
         */
        "backdrop-contrast": [{
          "backdrop-contrast": [isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Backdrop Grayscale
         * @see https://tailwindcss.com/docs/backdrop-grayscale
         */
        "backdrop-grayscale": [{
          "backdrop-grayscale": ["", isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Backdrop Hue Rotate
         * @see https://tailwindcss.com/docs/backdrop-hue-rotate
         */
        "backdrop-hue-rotate": [{
          "backdrop-hue-rotate": [isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Backdrop Invert
         * @see https://tailwindcss.com/docs/backdrop-invert
         */
        "backdrop-invert": [{
          "backdrop-invert": ["", isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Backdrop Opacity
         * @see https://tailwindcss.com/docs/backdrop-opacity
         */
        "backdrop-opacity": [{
          "backdrop-opacity": [isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Backdrop Saturate
         * @see https://tailwindcss.com/docs/backdrop-saturate
         */
        "backdrop-saturate": [{
          "backdrop-saturate": [isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Backdrop Sepia
         * @see https://tailwindcss.com/docs/backdrop-sepia
         */
        "backdrop-sepia": [{
          "backdrop-sepia": ["", isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        // --------------
        // --- Tables ---
        // --------------
        /**
         * Border Collapse
         * @see https://tailwindcss.com/docs/border-collapse
         */
        "border-collapse": [{
          border: ["collapse", "separate"]
        }],
        /**
         * Border Spacing
         * @see https://tailwindcss.com/docs/border-spacing
         */
        "border-spacing": [{
          "border-spacing": scaleUnambiguousSpacing()
        }],
        /**
         * Border Spacing X
         * @see https://tailwindcss.com/docs/border-spacing
         */
        "border-spacing-x": [{
          "border-spacing-x": scaleUnambiguousSpacing()
        }],
        /**
         * Border Spacing Y
         * @see https://tailwindcss.com/docs/border-spacing
         */
        "border-spacing-y": [{
          "border-spacing-y": scaleUnambiguousSpacing()
        }],
        /**
         * Table Layout
         * @see https://tailwindcss.com/docs/table-layout
         */
        "table-layout": [{
          table: ["auto", "fixed"]
        }],
        /**
         * Caption Side
         * @see https://tailwindcss.com/docs/caption-side
         */
        caption: [{
          caption: ["top", "bottom"]
        }],
        // ---------------------------------
        // --- Transitions and Animation ---
        // ---------------------------------
        /**
         * Transition Property
         * @see https://tailwindcss.com/docs/transition-property
         */
        transition: [{
          transition: ["", "all", "colors", "opacity", "shadow", "transform", "none", isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Transition Behavior
         * @see https://tailwindcss.com/docs/transition-behavior
         */
        "transition-behavior": [{
          transition: ["normal", "discrete"]
        }],
        /**
         * Transition Duration
         * @see https://tailwindcss.com/docs/transition-duration
         */
        duration: [{
          duration: [isNumber, "initial", isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Transition Timing Function
         * @see https://tailwindcss.com/docs/transition-timing-function
         */
        ease: [{
          ease: ["linear", "initial", themeEase, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Transition Delay
         * @see https://tailwindcss.com/docs/transition-delay
         */
        delay: [{
          delay: [isNumber, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Animation
         * @see https://tailwindcss.com/docs/animation
         */
        animate: [{
          animate: ["none", themeAnimate, isArbitraryVariable, isArbitraryValue]
        }],
        // ------------------
        // --- Transforms ---
        // ------------------
        /**
         * Backface Visibility
         * @see https://tailwindcss.com/docs/backface-visibility
         */
        backface: [{
          backface: ["hidden", "visible"]
        }],
        /**
         * Perspective
         * @see https://tailwindcss.com/docs/perspective
         */
        perspective: [{
          perspective: [themePerspective, isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Perspective Origin
         * @see https://tailwindcss.com/docs/perspective-origin
         */
        "perspective-origin": [{
          "perspective-origin": scalePositionWithArbitrary()
        }],
        /**
         * Rotate
         * @see https://tailwindcss.com/docs/rotate
         */
        rotate: [{
          rotate: scaleRotate()
        }],
        /**
         * Rotate X
         * @see https://tailwindcss.com/docs/rotate
         */
        "rotate-x": [{
          "rotate-x": scaleRotate()
        }],
        /**
         * Rotate Y
         * @see https://tailwindcss.com/docs/rotate
         */
        "rotate-y": [{
          "rotate-y": scaleRotate()
        }],
        /**
         * Rotate Z
         * @see https://tailwindcss.com/docs/rotate
         */
        "rotate-z": [{
          "rotate-z": scaleRotate()
        }],
        /**
         * Scale
         * @see https://tailwindcss.com/docs/scale
         */
        scale: [{
          scale: scaleScale()
        }],
        /**
         * Scale X
         * @see https://tailwindcss.com/docs/scale
         */
        "scale-x": [{
          "scale-x": scaleScale()
        }],
        /**
         * Scale Y
         * @see https://tailwindcss.com/docs/scale
         */
        "scale-y": [{
          "scale-y": scaleScale()
        }],
        /**
         * Scale Z
         * @see https://tailwindcss.com/docs/scale
         */
        "scale-z": [{
          "scale-z": scaleScale()
        }],
        /**
         * Scale 3D
         * @see https://tailwindcss.com/docs/scale
         */
        "scale-3d": ["scale-3d"],
        /**
         * Skew
         * @see https://tailwindcss.com/docs/skew
         */
        skew: [{
          skew: scaleSkew()
        }],
        /**
         * Skew X
         * @see https://tailwindcss.com/docs/skew
         */
        "skew-x": [{
          "skew-x": scaleSkew()
        }],
        /**
         * Skew Y
         * @see https://tailwindcss.com/docs/skew
         */
        "skew-y": [{
          "skew-y": scaleSkew()
        }],
        /**
         * Transform
         * @see https://tailwindcss.com/docs/transform
         */
        transform: [{
          transform: [isArbitraryVariable, isArbitraryValue, "", "none", "gpu", "cpu"]
        }],
        /**
         * Transform Origin
         * @see https://tailwindcss.com/docs/transform-origin
         */
        "transform-origin": [{
          origin: scalePositionWithArbitrary()
        }],
        /**
         * Transform Style
         * @see https://tailwindcss.com/docs/transform-style
         */
        "transform-style": [{
          transform: ["3d", "flat"]
        }],
        /**
         * Translate
         * @see https://tailwindcss.com/docs/translate
         */
        translate: [{
          translate: scaleTranslate()
        }],
        /**
         * Translate X
         * @see https://tailwindcss.com/docs/translate
         */
        "translate-x": [{
          "translate-x": scaleTranslate()
        }],
        /**
         * Translate Y
         * @see https://tailwindcss.com/docs/translate
         */
        "translate-y": [{
          "translate-y": scaleTranslate()
        }],
        /**
         * Translate Z
         * @see https://tailwindcss.com/docs/translate
         */
        "translate-z": [{
          "translate-z": scaleTranslate()
        }],
        /**
         * Translate None
         * @see https://tailwindcss.com/docs/translate
         */
        "translate-none": ["translate-none"],
        // ---------------------
        // --- Interactivity ---
        // ---------------------
        /**
         * Accent Color
         * @see https://tailwindcss.com/docs/accent-color
         */
        accent: [{
          accent: scaleColor()
        }],
        /**
         * Appearance
         * @see https://tailwindcss.com/docs/appearance
         */
        appearance: [{
          appearance: ["none", "auto"]
        }],
        /**
         * Caret Color
         * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
         */
        "caret-color": [{
          caret: scaleColor()
        }],
        /**
         * Color Scheme
         * @see https://tailwindcss.com/docs/color-scheme
         */
        "color-scheme": [{
          scheme: ["normal", "dark", "light", "light-dark", "only-dark", "only-light"]
        }],
        /**
         * Cursor
         * @see https://tailwindcss.com/docs/cursor
         */
        cursor: [{
          cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryVariable, isArbitraryValue]
        }],
        /**
         * Field Sizing
         * @see https://tailwindcss.com/docs/field-sizing
         */
        "field-sizing": [{
          "field-sizing": ["fixed", "content"]
        }],
        /**
         * Pointer Events
         * @see https://tailwindcss.com/docs/pointer-events
         */
        "pointer-events": [{
          "pointer-events": ["auto", "none"]
        }],
        /**
         * Resize
         * @see https://tailwindcss.com/docs/resize
         */
        resize: [{
          resize: ["none", "", "y", "x"]
        }],
        /**
         * Scroll Behavior
         * @see https://tailwindcss.com/docs/scroll-behavior
         */
        "scroll-behavior": [{
          scroll: ["auto", "smooth"]
        }],
        /**
         * Scroll Margin
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-m": [{
          "scroll-m": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Margin X
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-mx": [{
          "scroll-mx": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Margin Y
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-my": [{
          "scroll-my": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Margin Start
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-ms": [{
          "scroll-ms": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Margin End
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-me": [{
          "scroll-me": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Margin Top
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-mt": [{
          "scroll-mt": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Margin Right
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-mr": [{
          "scroll-mr": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Margin Bottom
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-mb": [{
          "scroll-mb": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Margin Left
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-ml": [{
          "scroll-ml": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Padding
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-p": [{
          "scroll-p": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Padding X
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-px": [{
          "scroll-px": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Padding Y
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-py": [{
          "scroll-py": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Padding Start
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-ps": [{
          "scroll-ps": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Padding End
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-pe": [{
          "scroll-pe": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Padding Top
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-pt": [{
          "scroll-pt": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Padding Right
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-pr": [{
          "scroll-pr": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Padding Bottom
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-pb": [{
          "scroll-pb": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Padding Left
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-pl": [{
          "scroll-pl": scaleUnambiguousSpacing()
        }],
        /**
         * Scroll Snap Align
         * @see https://tailwindcss.com/docs/scroll-snap-align
         */
        "snap-align": [{
          snap: ["start", "end", "center", "align-none"]
        }],
        /**
         * Scroll Snap Stop
         * @see https://tailwindcss.com/docs/scroll-snap-stop
         */
        "snap-stop": [{
          snap: ["normal", "always"]
        }],
        /**
         * Scroll Snap Type
         * @see https://tailwindcss.com/docs/scroll-snap-type
         */
        "snap-type": [{
          snap: ["none", "x", "y", "both"]
        }],
        /**
         * Scroll Snap Type Strictness
         * @see https://tailwindcss.com/docs/scroll-snap-type
         */
        "snap-strictness": [{
          snap: ["mandatory", "proximity"]
        }],
        /**
         * Touch Action
         * @see https://tailwindcss.com/docs/touch-action
         */
        touch: [{
          touch: ["auto", "none", "manipulation"]
        }],
        /**
         * Touch Action X
         * @see https://tailwindcss.com/docs/touch-action
         */
        "touch-x": [{
          "touch-pan": ["x", "left", "right"]
        }],
        /**
         * Touch Action Y
         * @see https://tailwindcss.com/docs/touch-action
         */
        "touch-y": [{
          "touch-pan": ["y", "up", "down"]
        }],
        /**
         * Touch Action Pinch Zoom
         * @see https://tailwindcss.com/docs/touch-action
         */
        "touch-pz": ["touch-pinch-zoom"],
        /**
         * User Select
         * @see https://tailwindcss.com/docs/user-select
         */
        select: [{
          select: ["none", "text", "all", "auto"]
        }],
        /**
         * Will Change
         * @see https://tailwindcss.com/docs/will-change
         */
        "will-change": [{
          "will-change": ["auto", "scroll", "contents", "transform", isArbitraryVariable, isArbitraryValue]
        }],
        // -----------
        // --- SVG ---
        // -----------
        /**
         * Fill
         * @see https://tailwindcss.com/docs/fill
         */
        fill: [{
          fill: ["none", ...scaleColor()]
        }],
        /**
         * Stroke Width
         * @see https://tailwindcss.com/docs/stroke-width
         */
        "stroke-w": [{
          stroke: [isNumber, isArbitraryVariableLength, isArbitraryLength, isArbitraryNumber]
        }],
        /**
         * Stroke
         * @see https://tailwindcss.com/docs/stroke
         */
        stroke: [{
          stroke: ["none", ...scaleColor()]
        }],
        // ---------------------
        // --- Accessibility ---
        // ---------------------
        /**
         * Forced Color Adjust
         * @see https://tailwindcss.com/docs/forced-color-adjust
         */
        "forced-color-adjust": [{
          "forced-color-adjust": ["auto", "none"]
        }]
      },
      conflictingClassGroups: {
        overflow: ["overflow-x", "overflow-y"],
        overscroll: ["overscroll-x", "overscroll-y"],
        inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
        "inset-x": ["right", "left"],
        "inset-y": ["top", "bottom"],
        flex: ["basis", "grow", "shrink"],
        gap: ["gap-x", "gap-y"],
        p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
        px: ["pr", "pl"],
        py: ["pt", "pb"],
        m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
        mx: ["mr", "ml"],
        my: ["mt", "mb"],
        size: ["w", "h"],
        "font-size": ["leading"],
        "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
        "fvn-ordinal": ["fvn-normal"],
        "fvn-slashed-zero": ["fvn-normal"],
        "fvn-figure": ["fvn-normal"],
        "fvn-spacing": ["fvn-normal"],
        "fvn-fraction": ["fvn-normal"],
        "line-clamp": ["display", "overflow"],
        rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
        "rounded-s": ["rounded-ss", "rounded-es"],
        "rounded-e": ["rounded-se", "rounded-ee"],
        "rounded-t": ["rounded-tl", "rounded-tr"],
        "rounded-r": ["rounded-tr", "rounded-br"],
        "rounded-b": ["rounded-br", "rounded-bl"],
        "rounded-l": ["rounded-tl", "rounded-bl"],
        "border-spacing": ["border-spacing-x", "border-spacing-y"],
        "border-w": ["border-w-x", "border-w-y", "border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
        "border-w-x": ["border-w-r", "border-w-l"],
        "border-w-y": ["border-w-t", "border-w-b"],
        "border-color": ["border-color-x", "border-color-y", "border-color-s", "border-color-e", "border-color-t", "border-color-r", "border-color-b", "border-color-l"],
        "border-color-x": ["border-color-r", "border-color-l"],
        "border-color-y": ["border-color-t", "border-color-b"],
        translate: ["translate-x", "translate-y", "translate-none"],
        "translate-none": ["translate", "translate-x", "translate-y", "translate-z"],
        "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
        "scroll-mx": ["scroll-mr", "scroll-ml"],
        "scroll-my": ["scroll-mt", "scroll-mb"],
        "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
        "scroll-px": ["scroll-pr", "scroll-pl"],
        "scroll-py": ["scroll-pt", "scroll-pb"],
        touch: ["touch-x", "touch-y", "touch-pz"],
        "touch-x": ["touch"],
        "touch-y": ["touch"],
        "touch-pz": ["touch"]
      },
      conflictingClassGroupModifiers: {
        "font-size": ["leading"]
      },
      orderSensitiveModifiers: ["*", "**", "after", "backdrop", "before", "details-content", "file", "first-letter", "first-line", "marker", "placeholder", "selection"]
    };
  };
  var twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);

  // src/lib/utils.ts
  function cn(...inputs) {
    return twMerge(clsx(inputs));
  }

  // src/components/ui/button.tsx
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var buttonVariants = cva(
    "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
    {
      variants: {
        variant: {
          default: "bg-primary text-primary-foreground shadow hover:bg-primary/90",
          destructive: "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
          outline: "text-primary border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
          secondary: "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
          ghost: "text-primary hover:bg-accent hover:text-accent-foreground",
          link: "text-primary underline-offset-4 hover:underline"
        },
        size: {
          default: "h-9 px-4 py-2",
          sm: "h-8 rounded-md px-3 text-xs",
          lg: "h-10 rounded-md px-8",
          icon: "h-9 w-9"
        }
      },
      defaultVariants: {
        variant: "default",
        size: "default"
      }
    }
  );
  var Button = React14.forwardRef(
    ({ className, variant, size, asChild = false, ...props }, ref) => {
      const Comp = asChild ? Slot : "button";
      return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
        Comp,
        {
          className: cn(buttonVariants({ variant, size, className })),
          ref,
          ...props
        }
      );
    }
  );
  Button.displayName = "Button";

  // src/components/layout/Header.tsx
  var import_lucide_react = __toESM(require_lucide_react());

  // node_modules/zustand/esm/vanilla.mjs
  var createStoreImpl = (createState) => {
    let state;
    const listeners = /* @__PURE__ */ new Set();
    const setState = (partial, replace2) => {
      const nextState = typeof partial === "function" ? partial(state) : partial;
      if (!Object.is(nextState, state)) {
        const previousState = state;
        state = (replace2 != null ? replace2 : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
        listeners.forEach((listener) => listener(state, previousState));
      }
    };
    const getState2 = () => state;
    const getInitialState = () => initialState;
    const subscribe = (listener) => {
      listeners.add(listener);
      return () => listeners.delete(listener);
    };
    const api = { setState, getState: getState2, getInitialState, subscribe };
    const initialState = state = createState(setState, getState2, api);
    return api;
  };
  var createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;

  // node_modules/zustand/esm/react.mjs
  var import_react = __toESM(require_react(), 1);
  var identity = (arg) => arg;
  function useStore(api, selector = identity) {
    const slice = import_react.default.useSyncExternalStore(
      api.subscribe,
      import_react.default.useCallback(() => selector(api.getState()), [api, selector]),
      import_react.default.useCallback(() => selector(api.getInitialState()), [api, selector])
    );
    import_react.default.useDebugValue(slice);
    return slice;
  }
  var createImpl = (createState) => {
    const api = createStore(createState);
    const useBoundStore = (selector) => useStore(api, selector);
    Object.assign(useBoundStore, api);
    return useBoundStore;
  };
  var create = (createState) => createState ? createImpl(createState) : createImpl;

  // node_modules/@supabase/functions-js/dist/module/helper.js
  var resolveFetch = (customFetch) => {
    let _fetch;
    if (customFetch) {
      _fetch = customFetch;
    } else if (typeof fetch === "undefined") {
      _fetch = (...args) => Promise.resolve().then(() => (init_browser(), browser_exports)).then(({ default: fetch3 }) => fetch3(...args));
    } else {
      _fetch = fetch;
    }
    return (...args) => _fetch(...args);
  };

  // node_modules/@supabase/functions-js/dist/module/types.js
  var FunctionsError = class extends Error {
    constructor(message, name = "FunctionsError", context) {
      super(message);
      this.name = name;
      this.context = context;
    }
  };
  var FunctionsFetchError = class extends FunctionsError {
    constructor(context) {
      super("Failed to send a request to the Edge Function", "FunctionsFetchError", context);
    }
  };
  var FunctionsRelayError = class extends FunctionsError {
    constructor(context) {
      super("Relay Error invoking the Edge Function", "FunctionsRelayError", context);
    }
  };
  var FunctionsHttpError = class extends FunctionsError {
    constructor(context) {
      super("Edge Function returned a non-2xx status code", "FunctionsHttpError", context);
    }
  };
  var FunctionRegion;
  (function(FunctionRegion2) {
    FunctionRegion2["Any"] = "any";
    FunctionRegion2["ApNortheast1"] = "ap-northeast-1";
    FunctionRegion2["ApNortheast2"] = "ap-northeast-2";
    FunctionRegion2["ApSouth1"] = "ap-south-1";
    FunctionRegion2["ApSoutheast1"] = "ap-southeast-1";
    FunctionRegion2["ApSoutheast2"] = "ap-southeast-2";
    FunctionRegion2["CaCentral1"] = "ca-central-1";
    FunctionRegion2["EuCentral1"] = "eu-central-1";
    FunctionRegion2["EuWest1"] = "eu-west-1";
    FunctionRegion2["EuWest2"] = "eu-west-2";
    FunctionRegion2["EuWest3"] = "eu-west-3";
    FunctionRegion2["SaEast1"] = "sa-east-1";
    FunctionRegion2["UsEast1"] = "us-east-1";
    FunctionRegion2["UsWest1"] = "us-west-1";
    FunctionRegion2["UsWest2"] = "us-west-2";
  })(FunctionRegion || (FunctionRegion = {}));

  // node_modules/@supabase/functions-js/dist/module/FunctionsClient.js
  var __awaiter = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var FunctionsClient = class {
    constructor(url, { headers = {}, customFetch, region = FunctionRegion.Any } = {}) {
      this.url = url;
      this.headers = headers;
      this.region = region;
      this.fetch = resolveFetch(customFetch);
    }
    /**
     * Updates the authorization header
     * @param token - the new jwt token sent in the authorisation header
     */
    setAuth(token) {
      this.headers.Authorization = `Bearer ${token}`;
    }
    /**
     * Invokes a function
     * @param functionName - The name of the Function to invoke.
     * @param options - Options for invoking the Function.
     */
    invoke(functionName, options = {}) {
      var _a;
      return __awaiter(this, void 0, void 0, function* () {
        try {
          const { headers, method, body: functionArgs } = options;
          let _headers = {};
          let { region } = options;
          if (!region) {
            region = this.region;
          }
          const url = new URL(`${this.url}/${functionName}`);
          if (region && region !== "any") {
            _headers["x-region"] = region;
            url.searchParams.set("forceFunctionRegion", region);
          }
          let body;
          if (functionArgs && (headers && !Object.prototype.hasOwnProperty.call(headers, "Content-Type") || !headers)) {
            if (typeof Blob !== "undefined" && functionArgs instanceof Blob || functionArgs instanceof ArrayBuffer) {
              _headers["Content-Type"] = "application/octet-stream";
              body = functionArgs;
            } else if (typeof functionArgs === "string") {
              _headers["Content-Type"] = "text/plain";
              body = functionArgs;
            } else if (typeof FormData !== "undefined" && functionArgs instanceof FormData) {
              body = functionArgs;
            } else {
              _headers["Content-Type"] = "application/json";
              body = JSON.stringify(functionArgs);
            }
          }
          const response = yield this.fetch(url.toString(), {
            method: method || "POST",
            // headers priority is (high to low):
            // 1. invoke-level headers
            // 2. client-level headers
            // 3. default Content-Type header
            headers: Object.assign(Object.assign(Object.assign({}, _headers), this.headers), headers),
            body
          }).catch((fetchError) => {
            throw new FunctionsFetchError(fetchError);
          });
          const isRelayError = response.headers.get("x-relay-error");
          if (isRelayError && isRelayError === "true") {
            throw new FunctionsRelayError(response);
          }
          if (!response.ok) {
            throw new FunctionsHttpError(response);
          }
          let responseType = ((_a = response.headers.get("Content-Type")) !== null && _a !== void 0 ? _a : "text/plain").split(";")[0].trim();
          let data2;
          if (responseType === "application/json") {
            data2 = yield response.json();
          } else if (responseType === "application/octet-stream") {
            data2 = yield response.blob();
          } else if (responseType === "text/event-stream") {
            data2 = response;
          } else if (responseType === "multipart/form-data") {
            data2 = yield response.formData();
          } else {
            data2 = yield response.text();
          }
          return { data: data2, error: null, response };
        } catch (error) {
          return {
            data: null,
            error,
            response: error instanceof FunctionsHttpError || error instanceof FunctionsRelayError ? error.context : void 0
          };
        }
      });
    }
  };

  // node_modules/@supabase/postgrest-js/dist/esm/wrapper.mjs
  var import_cjs = __toESM(require_cjs(), 1);
  var {
    PostgrestClient,
    PostgrestQueryBuilder,
    PostgrestFilterBuilder,
    PostgrestTransformBuilder,
    PostgrestBuilder,
    PostgrestError
  } = import_cjs.default;

  // node_modules/@supabase/realtime-js/dist/module/lib/websocket-factory.js
  var WebSocketFactory = class {
    static detectEnvironment() {
      var _a;
      if (typeof WebSocket !== "undefined") {
        return { type: "native", constructor: WebSocket };
      }
      if (typeof globalThis !== "undefined" && typeof globalThis.WebSocket !== "undefined") {
        return { type: "native", constructor: globalThis.WebSocket };
      }
      if (typeof global !== "undefined" && typeof global.WebSocket !== "undefined") {
        return { type: "native", constructor: global.WebSocket };
      }
      if (typeof globalThis !== "undefined" && typeof globalThis.WebSocketPair !== "undefined" && typeof globalThis.WebSocket === "undefined") {
        return {
          type: "cloudflare",
          error: "Cloudflare Workers detected. WebSocket clients are not supported in Cloudflare Workers.",
          workaround: "Use Cloudflare Workers WebSocket API for server-side WebSocket handling, or deploy to a different runtime."
        };
      }
      if (typeof globalThis !== "undefined" && globalThis.EdgeRuntime || typeof navigator !== "undefined" && ((_a = navigator.userAgent) === null || _a === void 0 ? void 0 : _a.includes("Vercel-Edge"))) {
        return {
          type: "unsupported",
          error: "Edge runtime detected (Vercel Edge/Netlify Edge). WebSockets are not supported in edge functions.",
          workaround: "Use serverless functions or a different deployment target for WebSocket functionality."
        };
      }
      if (typeof process !== "undefined" && process.versions && process.versions.node) {
        const nodeVersion = parseInt(process.versions.node.split(".")[0]);
        if (nodeVersion >= 22) {
          if (typeof globalThis.WebSocket !== "undefined") {
            return { type: "native", constructor: globalThis.WebSocket };
          }
          return {
            type: "unsupported",
            error: `Node.js ${nodeVersion} detected but native WebSocket not found.`,
            workaround: "Provide a WebSocket implementation via the transport option."
          };
        }
        return {
          type: "unsupported",
          error: `Node.js ${nodeVersion} detected without native WebSocket support.`,
          workaround: 'For Node.js < 22, install "ws" package and provide it via the transport option:\nimport ws from "ws"\nnew RealtimeClient(url, { transport: ws })'
        };
      }
      return {
        type: "unsupported",
        error: "Unknown JavaScript runtime without WebSocket support.",
        workaround: "Ensure you're running in a supported environment (browser, Node.js, Deno) or provide a custom WebSocket implementation."
      };
    }
    static getWebSocketConstructor() {
      const env = this.detectEnvironment();
      if (env.constructor) {
        return env.constructor;
      }
      let errorMessage = env.error || "WebSocket not supported in this environment.";
      if (env.workaround) {
        errorMessage += `

Suggested solution: ${env.workaround}`;
      }
      throw new Error(errorMessage);
    }
    static createWebSocket(url, protocols) {
      const WS = this.getWebSocketConstructor();
      return new WS(url, protocols);
    }
    static isWebSocketSupported() {
      try {
        const env = this.detectEnvironment();
        return env.type === "native" || env.type === "ws";
      } catch (_a) {
        return false;
      }
    }
  };
  var websocket_factory_default = WebSocketFactory;

  // node_modules/@supabase/realtime-js/dist/module/lib/version.js
  var version = "2.15.1";

  // node_modules/@supabase/realtime-js/dist/module/lib/constants.js
  var DEFAULT_VERSION = `realtime-js/${version}`;
  var VSN = "1.0.0";
  var DEFAULT_TIMEOUT = 1e4;
  var WS_CLOSE_NORMAL = 1e3;
  var MAX_PUSH_BUFFER_SIZE = 100;
  var SOCKET_STATES;
  (function(SOCKET_STATES2) {
    SOCKET_STATES2[SOCKET_STATES2["connecting"] = 0] = "connecting";
    SOCKET_STATES2[SOCKET_STATES2["open"] = 1] = "open";
    SOCKET_STATES2[SOCKET_STATES2["closing"] = 2] = "closing";
    SOCKET_STATES2[SOCKET_STATES2["closed"] = 3] = "closed";
  })(SOCKET_STATES || (SOCKET_STATES = {}));
  var CHANNEL_STATES;
  (function(CHANNEL_STATES2) {
    CHANNEL_STATES2["closed"] = "closed";
    CHANNEL_STATES2["errored"] = "errored";
    CHANNEL_STATES2["joined"] = "joined";
    CHANNEL_STATES2["joining"] = "joining";
    CHANNEL_STATES2["leaving"] = "leaving";
  })(CHANNEL_STATES || (CHANNEL_STATES = {}));
  var CHANNEL_EVENTS;
  (function(CHANNEL_EVENTS2) {
    CHANNEL_EVENTS2["close"] = "phx_close";
    CHANNEL_EVENTS2["error"] = "phx_error";
    CHANNEL_EVENTS2["join"] = "phx_join";
    CHANNEL_EVENTS2["reply"] = "phx_reply";
    CHANNEL_EVENTS2["leave"] = "phx_leave";
    CHANNEL_EVENTS2["access_token"] = "access_token";
  })(CHANNEL_EVENTS || (CHANNEL_EVENTS = {}));
  var TRANSPORTS;
  (function(TRANSPORTS2) {
    TRANSPORTS2["websocket"] = "websocket";
  })(TRANSPORTS || (TRANSPORTS = {}));
  var CONNECTION_STATE;
  (function(CONNECTION_STATE2) {
    CONNECTION_STATE2["Connecting"] = "connecting";
    CONNECTION_STATE2["Open"] = "open";
    CONNECTION_STATE2["Closing"] = "closing";
    CONNECTION_STATE2["Closed"] = "closed";
  })(CONNECTION_STATE || (CONNECTION_STATE = {}));

  // node_modules/@supabase/realtime-js/dist/module/lib/serializer.js
  var Serializer = class {
    constructor() {
      this.HEADER_LENGTH = 1;
    }
    decode(rawPayload, callback) {
      if (rawPayload.constructor === ArrayBuffer) {
        return callback(this._binaryDecode(rawPayload));
      }
      if (typeof rawPayload === "string") {
        return callback(JSON.parse(rawPayload));
      }
      return callback({});
    }
    _binaryDecode(buffer) {
      const view = new DataView(buffer);
      const decoder = new TextDecoder();
      return this._decodeBroadcast(buffer, view, decoder);
    }
    _decodeBroadcast(buffer, view, decoder) {
      const topicSize = view.getUint8(1);
      const eventSize = view.getUint8(2);
      let offset = this.HEADER_LENGTH + 2;
      const topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      const event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      const data2 = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));
      return { ref: null, topic, event, payload: data2 };
    }
  };

  // node_modules/@supabase/realtime-js/dist/module/lib/timer.js
  var Timer = class {
    constructor(callback, timerCalc) {
      this.callback = callback;
      this.timerCalc = timerCalc;
      this.timer = void 0;
      this.tries = 0;
      this.callback = callback;
      this.timerCalc = timerCalc;
    }
    reset() {
      this.tries = 0;
      clearTimeout(this.timer);
      this.timer = void 0;
    }
    // Cancels any previous scheduleTimeout and schedules callback
    scheduleTimeout() {
      clearTimeout(this.timer);
      this.timer = setTimeout(() => {
        this.tries = this.tries + 1;
        this.callback();
      }, this.timerCalc(this.tries + 1));
    }
  };

  // node_modules/@supabase/realtime-js/dist/module/lib/transformers.js
  var PostgresTypes;
  (function(PostgresTypes2) {
    PostgresTypes2["abstime"] = "abstime";
    PostgresTypes2["bool"] = "bool";
    PostgresTypes2["date"] = "date";
    PostgresTypes2["daterange"] = "daterange";
    PostgresTypes2["float4"] = "float4";
    PostgresTypes2["float8"] = "float8";
    PostgresTypes2["int2"] = "int2";
    PostgresTypes2["int4"] = "int4";
    PostgresTypes2["int4range"] = "int4range";
    PostgresTypes2["int8"] = "int8";
    PostgresTypes2["int8range"] = "int8range";
    PostgresTypes2["json"] = "json";
    PostgresTypes2["jsonb"] = "jsonb";
    PostgresTypes2["money"] = "money";
    PostgresTypes2["numeric"] = "numeric";
    PostgresTypes2["oid"] = "oid";
    PostgresTypes2["reltime"] = "reltime";
    PostgresTypes2["text"] = "text";
    PostgresTypes2["time"] = "time";
    PostgresTypes2["timestamp"] = "timestamp";
    PostgresTypes2["timestamptz"] = "timestamptz";
    PostgresTypes2["timetz"] = "timetz";
    PostgresTypes2["tsrange"] = "tsrange";
    PostgresTypes2["tstzrange"] = "tstzrange";
  })(PostgresTypes || (PostgresTypes = {}));
  var convertChangeData = (columns, record, options = {}) => {
    var _a;
    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];
    return Object.keys(record).reduce((acc, rec_key) => {
      acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);
      return acc;
    }, {});
  };
  var convertColumn = (columnName, columns, record, skipTypes) => {
    const column = columns.find((x) => x.name === columnName);
    const colType = column === null || column === void 0 ? void 0 : column.type;
    const value = record[columnName];
    if (colType && !skipTypes.includes(colType)) {
      return convertCell(colType, value);
    }
    return noop(value);
  };
  var convertCell = (type, value) => {
    if (type.charAt(0) === "_") {
      const dataType = type.slice(1, type.length);
      return toArray(value, dataType);
    }
    switch (type) {
      case PostgresTypes.bool:
        return toBoolean(value);
      case PostgresTypes.float4:
      case PostgresTypes.float8:
      case PostgresTypes.int2:
      case PostgresTypes.int4:
      case PostgresTypes.int8:
      case PostgresTypes.numeric:
      case PostgresTypes.oid:
        return toNumber(value);
      case PostgresTypes.json:
      case PostgresTypes.jsonb:
        return toJson(value);
      case PostgresTypes.timestamp:
        return toTimestampString(value);
      // Format to be consistent with PostgREST
      case PostgresTypes.abstime:
      // To allow users to cast it based on Timezone
      case PostgresTypes.date:
      // To allow users to cast it based on Timezone
      case PostgresTypes.daterange:
      case PostgresTypes.int4range:
      case PostgresTypes.int8range:
      case PostgresTypes.money:
      case PostgresTypes.reltime:
      // To allow users to cast it based on Timezone
      case PostgresTypes.text:
      case PostgresTypes.time:
      // To allow users to cast it based on Timezone
      case PostgresTypes.timestamptz:
      // To allow users to cast it based on Timezone
      case PostgresTypes.timetz:
      // To allow users to cast it based on Timezone
      case PostgresTypes.tsrange:
      case PostgresTypes.tstzrange:
        return noop(value);
      default:
        return noop(value);
    }
  };
  var noop = (value) => {
    return value;
  };
  var toBoolean = (value) => {
    switch (value) {
      case "t":
        return true;
      case "f":
        return false;
      default:
        return value;
    }
  };
  var toNumber = (value) => {
    if (typeof value === "string") {
      const parsedValue = parseFloat(value);
      if (!Number.isNaN(parsedValue)) {
        return parsedValue;
      }
    }
    return value;
  };
  var toJson = (value) => {
    if (typeof value === "string") {
      try {
        return JSON.parse(value);
      } catch (error) {
        console.log(`JSON parse error: ${error}`);
        return value;
      }
    }
    return value;
  };
  var toArray = (value, type) => {
    if (typeof value !== "string") {
      return value;
    }
    const lastIdx = value.length - 1;
    const closeBrace = value[lastIdx];
    const openBrace = value[0];
    if (openBrace === "{" && closeBrace === "}") {
      let arr;
      const valTrim = value.slice(1, lastIdx);
      try {
        arr = JSON.parse("[" + valTrim + "]");
      } catch (_) {
        arr = valTrim ? valTrim.split(",") : [];
      }
      return arr.map((val) => convertCell(type, val));
    }
    return value;
  };
  var toTimestampString = (value) => {
    if (typeof value === "string") {
      return value.replace(" ", "T");
    }
    return value;
  };
  var httpEndpointURL = (socketUrl) => {
    let url = socketUrl;
    url = url.replace(/^ws/i, "http");
    url = url.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i, "");
    return url.replace(/\/+$/, "") + "/api/broadcast";
  };

  // node_modules/@supabase/realtime-js/dist/module/lib/push.js
  var Push = class {
    /**
     * Initializes the Push
     *
     * @param channel The Channel
     * @param event The event, for example `"phx_join"`
     * @param payload The payload, for example `{user_id: 123}`
     * @param timeout The push timeout in milliseconds
     */
    constructor(channel, event, payload = {}, timeout = DEFAULT_TIMEOUT) {
      this.channel = channel;
      this.event = event;
      this.payload = payload;
      this.timeout = timeout;
      this.sent = false;
      this.timeoutTimer = void 0;
      this.ref = "";
      this.receivedResp = null;
      this.recHooks = [];
      this.refEvent = null;
    }
    resend(timeout) {
      this.timeout = timeout;
      this._cancelRefEvent();
      this.ref = "";
      this.refEvent = null;
      this.receivedResp = null;
      this.sent = false;
      this.send();
    }
    send() {
      if (this._hasReceived("timeout")) {
        return;
      }
      this.startTimeout();
      this.sent = true;
      this.channel.socket.push({
        topic: this.channel.topic,
        event: this.event,
        payload: this.payload,
        ref: this.ref,
        join_ref: this.channel._joinRef()
      });
    }
    updatePayload(payload) {
      this.payload = Object.assign(Object.assign({}, this.payload), payload);
    }
    receive(status, callback) {
      var _a;
      if (this._hasReceived(status)) {
        callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);
      }
      this.recHooks.push({ status, callback });
      return this;
    }
    startTimeout() {
      if (this.timeoutTimer) {
        return;
      }
      this.ref = this.channel.socket._makeRef();
      this.refEvent = this.channel._replyEventName(this.ref);
      const callback = (payload) => {
        this._cancelRefEvent();
        this._cancelTimeout();
        this.receivedResp = payload;
        this._matchReceive(payload);
      };
      this.channel._on(this.refEvent, {}, callback);
      this.timeoutTimer = setTimeout(() => {
        this.trigger("timeout", {});
      }, this.timeout);
    }
    trigger(status, response) {
      if (this.refEvent)
        this.channel._trigger(this.refEvent, { status, response });
    }
    destroy() {
      this._cancelRefEvent();
      this._cancelTimeout();
    }
    _cancelRefEvent() {
      if (!this.refEvent) {
        return;
      }
      this.channel._off(this.refEvent, {});
    }
    _cancelTimeout() {
      clearTimeout(this.timeoutTimer);
      this.timeoutTimer = void 0;
    }
    _matchReceive({ status, response }) {
      this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response));
    }
    _hasReceived(status) {
      return this.receivedResp && this.receivedResp.status === status;
    }
  };

  // node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js
  var REALTIME_PRESENCE_LISTEN_EVENTS;
  (function(REALTIME_PRESENCE_LISTEN_EVENTS2) {
    REALTIME_PRESENCE_LISTEN_EVENTS2["SYNC"] = "sync";
    REALTIME_PRESENCE_LISTEN_EVENTS2["JOIN"] = "join";
    REALTIME_PRESENCE_LISTEN_EVENTS2["LEAVE"] = "leave";
  })(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));
  var RealtimePresence = class _RealtimePresence {
    /**
     * Initializes the Presence.
     *
     * @param channel - The RealtimeChannel
     * @param opts - The options,
     *        for example `{events: {state: 'state', diff: 'diff'}}`
     */
    constructor(channel, opts) {
      this.channel = channel;
      this.state = {};
      this.pendingDiffs = [];
      this.joinRef = null;
      this.enabled = false;
      this.caller = {
        onJoin: () => {
        },
        onLeave: () => {
        },
        onSync: () => {
        }
      };
      const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {
        state: "presence_state",
        diff: "presence_diff"
      };
      this.channel._on(events.state, {}, (newState) => {
        const { onJoin, onLeave, onSync } = this.caller;
        this.joinRef = this.channel._joinRef();
        this.state = _RealtimePresence.syncState(this.state, newState, onJoin, onLeave);
        this.pendingDiffs.forEach((diff) => {
          this.state = _RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);
        });
        this.pendingDiffs = [];
        onSync();
      });
      this.channel._on(events.diff, {}, (diff) => {
        const { onJoin, onLeave, onSync } = this.caller;
        if (this.inPendingSyncState()) {
          this.pendingDiffs.push(diff);
        } else {
          this.state = _RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);
          onSync();
        }
      });
      this.onJoin((key, currentPresences, newPresences) => {
        this.channel._trigger("presence", {
          event: "join",
          key,
          currentPresences,
          newPresences
        });
      });
      this.onLeave((key, currentPresences, leftPresences) => {
        this.channel._trigger("presence", {
          event: "leave",
          key,
          currentPresences,
          leftPresences
        });
      });
      this.onSync(() => {
        this.channel._trigger("presence", { event: "sync" });
      });
    }
    /**
     * Used to sync the list of presences on the server with the
     * client's state.
     *
     * An optional `onJoin` and `onLeave` callback can be provided to
     * react to changes in the client's local presences across
     * disconnects and reconnects with the server.
     *
     * @internal
     */
    static syncState(currentState, newState, onJoin, onLeave) {
      const state = this.cloneDeep(currentState);
      const transformedState = this.transformState(newState);
      const joins = {};
      const leaves = {};
      this.map(state, (key, presences) => {
        if (!transformedState[key]) {
          leaves[key] = presences;
        }
      });
      this.map(transformedState, (key, newPresences) => {
        const currentPresences = state[key];
        if (currentPresences) {
          const newPresenceRefs = newPresences.map((m) => m.presence_ref);
          const curPresenceRefs = currentPresences.map((m) => m.presence_ref);
          const joinedPresences = newPresences.filter((m) => curPresenceRefs.indexOf(m.presence_ref) < 0);
          const leftPresences = currentPresences.filter((m) => newPresenceRefs.indexOf(m.presence_ref) < 0);
          if (joinedPresences.length > 0) {
            joins[key] = joinedPresences;
          }
          if (leftPresences.length > 0) {
            leaves[key] = leftPresences;
          }
        } else {
          joins[key] = newPresences;
        }
      });
      return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);
    }
    /**
     * Used to sync a diff of presence join and leave events from the
     * server, as they happen.
     *
     * Like `syncState`, `syncDiff` accepts optional `onJoin` and
     * `onLeave` callbacks to react to a user joining or leaving from a
     * device.
     *
     * @internal
     */
    static syncDiff(state, diff, onJoin, onLeave) {
      const { joins, leaves } = {
        joins: this.transformState(diff.joins),
        leaves: this.transformState(diff.leaves)
      };
      if (!onJoin) {
        onJoin = () => {
        };
      }
      if (!onLeave) {
        onLeave = () => {
        };
      }
      this.map(joins, (key, newPresences) => {
        var _a;
        const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];
        state[key] = this.cloneDeep(newPresences);
        if (currentPresences.length > 0) {
          const joinedPresenceRefs = state[key].map((m) => m.presence_ref);
          const curPresences = currentPresences.filter((m) => joinedPresenceRefs.indexOf(m.presence_ref) < 0);
          state[key].unshift(...curPresences);
        }
        onJoin(key, currentPresences, newPresences);
      });
      this.map(leaves, (key, leftPresences) => {
        let currentPresences = state[key];
        if (!currentPresences)
          return;
        const presenceRefsToRemove = leftPresences.map((m) => m.presence_ref);
        currentPresences = currentPresences.filter((m) => presenceRefsToRemove.indexOf(m.presence_ref) < 0);
        state[key] = currentPresences;
        onLeave(key, currentPresences, leftPresences);
        if (currentPresences.length === 0)
          delete state[key];
      });
      return state;
    }
    /** @internal */
    static map(obj, func) {
      return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));
    }
    /**
     * Remove 'metas' key
     * Change 'phx_ref' to 'presence_ref'
     * Remove 'phx_ref' and 'phx_ref_prev'
     *
     * @example
     * // returns {
     *  abc123: [
     *    { presence_ref: '2', user_id: 1 },
     *    { presence_ref: '3', user_id: 2 }
     *  ]
     * }
     * RealtimePresence.transformState({
     *  abc123: {
     *    metas: [
     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },
     *      { phx_ref: '3', user_id: 2 }
     *    ]
     *  }
     * })
     *
     * @internal
     */
    static transformState(state) {
      state = this.cloneDeep(state);
      return Object.getOwnPropertyNames(state).reduce((newState, key) => {
        const presences = state[key];
        if ("metas" in presences) {
          newState[key] = presences.metas.map((presence) => {
            presence["presence_ref"] = presence["phx_ref"];
            delete presence["phx_ref"];
            delete presence["phx_ref_prev"];
            return presence;
          });
        } else {
          newState[key] = presences;
        }
        return newState;
      }, {});
    }
    /** @internal */
    static cloneDeep(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    /** @internal */
    onJoin(callback) {
      this.caller.onJoin = callback;
    }
    /** @internal */
    onLeave(callback) {
      this.caller.onLeave = callback;
    }
    /** @internal */
    onSync(callback) {
      this.caller.onSync = callback;
    }
    /** @internal */
    inPendingSyncState() {
      return !this.joinRef || this.joinRef !== this.channel._joinRef();
    }
  };

  // node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js
  var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;
  (function(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2) {
    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["ALL"] = "*";
    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["INSERT"] = "INSERT";
    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["UPDATE"] = "UPDATE";
    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT2["DELETE"] = "DELETE";
  })(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));
  var REALTIME_LISTEN_TYPES;
  (function(REALTIME_LISTEN_TYPES2) {
    REALTIME_LISTEN_TYPES2["BROADCAST"] = "broadcast";
    REALTIME_LISTEN_TYPES2["PRESENCE"] = "presence";
    REALTIME_LISTEN_TYPES2["POSTGRES_CHANGES"] = "postgres_changes";
    REALTIME_LISTEN_TYPES2["SYSTEM"] = "system";
  })(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));
  var REALTIME_SUBSCRIBE_STATES;
  (function(REALTIME_SUBSCRIBE_STATES2) {
    REALTIME_SUBSCRIBE_STATES2["SUBSCRIBED"] = "SUBSCRIBED";
    REALTIME_SUBSCRIBE_STATES2["TIMED_OUT"] = "TIMED_OUT";
    REALTIME_SUBSCRIBE_STATES2["CLOSED"] = "CLOSED";
    REALTIME_SUBSCRIBE_STATES2["CHANNEL_ERROR"] = "CHANNEL_ERROR";
  })(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));
  var RealtimeChannel = class _RealtimeChannel {
    constructor(topic, params = { config: {} }, socket) {
      this.topic = topic;
      this.params = params;
      this.socket = socket;
      this.bindings = {};
      this.state = CHANNEL_STATES.closed;
      this.joinedOnce = false;
      this.pushBuffer = [];
      this.subTopic = topic.replace(/^realtime:/i, "");
      this.params.config = Object.assign({
        broadcast: { ack: false, self: false },
        presence: { key: "", enabled: false },
        private: false
      }, params.config);
      this.timeout = this.socket.timeout;
      this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
      this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);
      this.joinPush.receive("ok", () => {
        this.state = CHANNEL_STATES.joined;
        this.rejoinTimer.reset();
        this.pushBuffer.forEach((pushEvent) => pushEvent.send());
        this.pushBuffer = [];
      });
      this._onClose(() => {
        this.rejoinTimer.reset();
        this.socket.log("channel", `close ${this.topic} ${this._joinRef()}`);
        this.state = CHANNEL_STATES.closed;
        this.socket._remove(this);
      });
      this._onError((reason) => {
        if (this._isLeaving() || this._isClosed()) {
          return;
        }
        this.socket.log("channel", `error ${this.topic}`, reason);
        this.state = CHANNEL_STATES.errored;
        this.rejoinTimer.scheduleTimeout();
      });
      this.joinPush.receive("timeout", () => {
        if (!this._isJoining()) {
          return;
        }
        this.socket.log("channel", `timeout ${this.topic}`, this.joinPush.timeout);
        this.state = CHANNEL_STATES.errored;
        this.rejoinTimer.scheduleTimeout();
      });
      this.joinPush.receive("error", (reason) => {
        if (this._isLeaving() || this._isClosed()) {
          return;
        }
        this.socket.log("channel", `error ${this.topic}`, reason);
        this.state = CHANNEL_STATES.errored;
        this.rejoinTimer.scheduleTimeout();
      });
      this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {
        this._trigger(this._replyEventName(ref), payload);
      });
      this.presence = new RealtimePresence(this);
      this.broadcastEndpointURL = httpEndpointURL(this.socket.endPoint);
      this.private = this.params.config.private || false;
    }
    /** Subscribe registers your client with the server */
    subscribe(callback, timeout = this.timeout) {
      var _a, _b;
      if (!this.socket.isConnected()) {
        this.socket.connect();
      }
      if (this.state == CHANNEL_STATES.closed) {
        const { config: { broadcast, presence, private: isPrivate } } = this.params;
        const postgres_changes = (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map((r3) => r3.filter)) !== null && _b !== void 0 ? _b : [];
        const presence_enabled = !!this.bindings[REALTIME_LISTEN_TYPES.PRESENCE] && this.bindings[REALTIME_LISTEN_TYPES.PRESENCE].length > 0;
        const accessTokenPayload = {};
        const config2 = {
          broadcast,
          presence: Object.assign(Object.assign({}, presence), { enabled: presence_enabled }),
          postgres_changes,
          private: isPrivate
        };
        if (this.socket.accessTokenValue) {
          accessTokenPayload.access_token = this.socket.accessTokenValue;
        }
        this._onError((e) => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, e));
        this._onClose(() => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CLOSED));
        this.updateJoinPayload(Object.assign({ config: config2 }, accessTokenPayload));
        this.joinedOnce = true;
        this._rejoin(timeout);
        this.joinPush.receive("ok", async ({ postgres_changes: postgres_changes2 }) => {
          var _a2;
          this.socket.setAuth();
          if (postgres_changes2 === void 0) {
            callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);
            return;
          } else {
            const clientPostgresBindings = this.bindings.postgres_changes;
            const bindingsLen = (_a2 = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a2 !== void 0 ? _a2 : 0;
            const newPostgresBindings = [];
            for (let i3 = 0; i3 < bindingsLen; i3++) {
              const clientPostgresBinding = clientPostgresBindings[i3];
              const { filter: { event, schema: schema2, table, filter } } = clientPostgresBinding;
              const serverPostgresFilter = postgres_changes2 && postgres_changes2[i3];
              if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema2 && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter) {
                newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), { id: serverPostgresFilter.id }));
              } else {
                this.unsubscribe();
                this.state = CHANNEL_STATES.errored;
                callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error("mismatch between server and client bindings for postgres changes"));
                return;
              }
            }
            this.bindings.postgres_changes = newPostgresBindings;
            callback && callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);
            return;
          }
        }).receive("error", (error) => {
          this.state = CHANNEL_STATES.errored;
          callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error(JSON.stringify(Object.values(error).join(", ") || "error")));
          return;
        }).receive("timeout", () => {
          callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.TIMED_OUT);
          return;
        });
      }
      return this;
    }
    presenceState() {
      return this.presence.state;
    }
    async track(payload, opts = {}) {
      return await this.send({
        type: "presence",
        event: "track",
        payload
      }, opts.timeout || this.timeout);
    }
    async untrack(opts = {}) {
      return await this.send({
        type: "presence",
        event: "untrack"
      }, opts);
    }
    on(type, filter, callback) {
      if (this.state === CHANNEL_STATES.joined && type === REALTIME_LISTEN_TYPES.PRESENCE) {
        this.socket.log("channel", `resubscribe to ${this.topic} due to change in presence callbacks on joined channel`);
        this.unsubscribe().then(() => this.subscribe());
      }
      return this._on(type, filter, callback);
    }
    /**
     * Sends a message into the channel.
     *
     * @param args Arguments to send to channel
     * @param args.type The type of event to send
     * @param args.event The name of the event being sent
     * @param args.payload Payload to be sent
     * @param opts Options to be used during the send process
     */
    async send(args, opts = {}) {
      var _a, _b;
      if (!this._canPush() && args.type === "broadcast") {
        const { event, payload: endpoint_payload } = args;
        const authorization = this.socket.accessTokenValue ? `Bearer ${this.socket.accessTokenValue}` : "";
        const options = {
          method: "POST",
          headers: {
            Authorization: authorization,
            apikey: this.socket.apiKey ? this.socket.apiKey : "",
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            messages: [
              {
                topic: this.subTopic,
                event,
                payload: endpoint_payload,
                private: this.private
              }
            ]
          })
        };
        try {
          const response = await this._fetchWithTimeout(this.broadcastEndpointURL, options, (_a = opts.timeout) !== null && _a !== void 0 ? _a : this.timeout);
          await ((_b = response.body) === null || _b === void 0 ? void 0 : _b.cancel());
          return response.ok ? "ok" : "error";
        } catch (error) {
          if (error.name === "AbortError") {
            return "timed out";
          } else {
            return "error";
          }
        }
      } else {
        return new Promise((resolve) => {
          var _a2, _b2, _c;
          const push = this._push(args.type, args, opts.timeout || this.timeout);
          if (args.type === "broadcast" && !((_c = (_b2 = (_a2 = this.params) === null || _a2 === void 0 ? void 0 : _a2.config) === null || _b2 === void 0 ? void 0 : _b2.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {
            resolve("ok");
          }
          push.receive("ok", () => resolve("ok"));
          push.receive("error", () => resolve("error"));
          push.receive("timeout", () => resolve("timed out"));
        });
      }
    }
    updateJoinPayload(payload) {
      this.joinPush.updatePayload(payload);
    }
    /**
     * Leaves the channel.
     *
     * Unsubscribes from server events, and instructs channel to terminate on server.
     * Triggers onClose() hooks.
     *
     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:
     * channel.unsubscribe().receive("ok", () => alert("left!") )
     */
    unsubscribe(timeout = this.timeout) {
      this.state = CHANNEL_STATES.leaving;
      const onClose = () => {
        this.socket.log("channel", `leave ${this.topic}`);
        this._trigger(CHANNEL_EVENTS.close, "leave", this._joinRef());
      };
      this.joinPush.destroy();
      let leavePush = null;
      return new Promise((resolve) => {
        leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);
        leavePush.receive("ok", () => {
          onClose();
          resolve("ok");
        }).receive("timeout", () => {
          onClose();
          resolve("timed out");
        }).receive("error", () => {
          resolve("error");
        });
        leavePush.send();
        if (!this._canPush()) {
          leavePush.trigger("ok", {});
        }
      }).finally(() => {
        leavePush === null || leavePush === void 0 ? void 0 : leavePush.destroy();
      });
    }
    /**
     * Teardown the channel.
     *
     * Destroys and stops related timers.
     */
    teardown() {
      this.pushBuffer.forEach((push) => push.destroy());
      this.pushBuffer = [];
      this.rejoinTimer.reset();
      this.joinPush.destroy();
      this.state = CHANNEL_STATES.closed;
      this.bindings = {};
    }
    /** @internal */
    async _fetchWithTimeout(url, options, timeout) {
      const controller = new AbortController();
      const id = setTimeout(() => controller.abort(), timeout);
      const response = await this.socket.fetch(url, Object.assign(Object.assign({}, options), { signal: controller.signal }));
      clearTimeout(id);
      return response;
    }
    /** @internal */
    _push(event, payload, timeout = this.timeout) {
      if (!this.joinedOnce) {
        throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;
      }
      let pushEvent = new Push(this, event, payload, timeout);
      if (this._canPush()) {
        pushEvent.send();
      } else {
        this._addToPushBuffer(pushEvent);
      }
      return pushEvent;
    }
    /** @internal */
    _addToPushBuffer(pushEvent) {
      pushEvent.startTimeout();
      this.pushBuffer.push(pushEvent);
      if (this.pushBuffer.length > MAX_PUSH_BUFFER_SIZE) {
        const removedPush = this.pushBuffer.shift();
        if (removedPush) {
          removedPush.destroy();
          this.socket.log("channel", `discarded push due to buffer overflow: ${removedPush.event}`, removedPush.payload);
        }
      }
    }
    /**
     * Overridable message hook
     *
     * Receives all events for specialized message handling before dispatching to the channel callbacks.
     * Must return the payload, modified or unmodified.
     *
     * @internal
     */
    _onMessage(_event, payload, _ref) {
      return payload;
    }
    /** @internal */
    _isMember(topic) {
      return this.topic === topic;
    }
    /** @internal */
    _joinRef() {
      return this.joinPush.ref;
    }
    /** @internal */
    _trigger(type, payload, ref) {
      var _a, _b;
      const typeLower = type.toLocaleLowerCase();
      const { close, error, leave, join } = CHANNEL_EVENTS;
      const events = [close, error, leave, join];
      if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {
        return;
      }
      let handledPayload = this._onMessage(typeLower, payload, ref);
      if (payload && !handledPayload) {
        throw "channel onMessage callbacks must return the payload, modified or unmodified";
      }
      if (["insert", "update", "delete"].includes(typeLower)) {
        (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter((bind) => {
          var _a2, _b2, _c;
          return ((_a2 = bind.filter) === null || _a2 === void 0 ? void 0 : _a2.event) === "*" || ((_c = (_b2 = bind.filter) === null || _b2 === void 0 ? void 0 : _b2.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;
        }).map((bind) => bind.callback(handledPayload, ref));
      } else {
        (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter((bind) => {
          var _a2, _b2, _c, _d, _e, _f;
          if (["broadcast", "presence", "postgres_changes"].includes(typeLower)) {
            if ("id" in bind) {
              const bindId = bind.id;
              const bindEvent = (_a2 = bind.filter) === null || _a2 === void 0 ? void 0 : _a2.event;
              return bindId && ((_b2 = payload.ids) === null || _b2 === void 0 ? void 0 : _b2.includes(bindId)) && (bindEvent === "*" || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase()));
            } else {
              const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();
              return bindEvent === "*" || bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());
            }
          } else {
            return bind.type.toLocaleLowerCase() === typeLower;
          }
        }).map((bind) => {
          if (typeof handledPayload === "object" && "ids" in handledPayload) {
            const postgresChanges = handledPayload.data;
            const { schema: schema2, table, commit_timestamp, type: type2, errors } = postgresChanges;
            const enrichedPayload = {
              schema: schema2,
              table,
              commit_timestamp,
              eventType: type2,
              new: {},
              old: {},
              errors
            };
            handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));
          }
          bind.callback(handledPayload, ref);
        });
      }
    }
    /** @internal */
    _isClosed() {
      return this.state === CHANNEL_STATES.closed;
    }
    /** @internal */
    _isJoined() {
      return this.state === CHANNEL_STATES.joined;
    }
    /** @internal */
    _isJoining() {
      return this.state === CHANNEL_STATES.joining;
    }
    /** @internal */
    _isLeaving() {
      return this.state === CHANNEL_STATES.leaving;
    }
    /** @internal */
    _replyEventName(ref) {
      return `chan_reply_${ref}`;
    }
    /** @internal */
    _on(type, filter, callback) {
      const typeLower = type.toLocaleLowerCase();
      const binding = {
        type: typeLower,
        filter,
        callback
      };
      if (this.bindings[typeLower]) {
        this.bindings[typeLower].push(binding);
      } else {
        this.bindings[typeLower] = [binding];
      }
      return this;
    }
    /** @internal */
    _off(type, filter) {
      const typeLower = type.toLocaleLowerCase();
      if (this.bindings[typeLower]) {
        this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {
          var _a;
          return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower && _RealtimeChannel.isEqual(bind.filter, filter));
        });
      }
      return this;
    }
    /** @internal */
    static isEqual(obj1, obj2) {
      if (Object.keys(obj1).length !== Object.keys(obj2).length) {
        return false;
      }
      for (const k in obj1) {
        if (obj1[k] !== obj2[k]) {
          return false;
        }
      }
      return true;
    }
    /** @internal */
    _rejoinUntilConnected() {
      this.rejoinTimer.scheduleTimeout();
      if (this.socket.isConnected()) {
        this._rejoin();
      }
    }
    /**
     * Registers a callback that will be executed when the channel closes.
     *
     * @internal
     */
    _onClose(callback) {
      this._on(CHANNEL_EVENTS.close, {}, callback);
    }
    /**
     * Registers a callback that will be executed when the channel encounteres an error.
     *
     * @internal
     */
    _onError(callback) {
      this._on(CHANNEL_EVENTS.error, {}, (reason) => callback(reason));
    }
    /**
     * Returns `true` if the socket is connected and the channel has been joined.
     *
     * @internal
     */
    _canPush() {
      return this.socket.isConnected() && this._isJoined();
    }
    /** @internal */
    _rejoin(timeout = this.timeout) {
      if (this._isLeaving()) {
        return;
      }
      this.socket._leaveOpenTopic(this.topic);
      this.state = CHANNEL_STATES.joining;
      this.joinPush.resend(timeout);
    }
    /** @internal */
    _getPayloadRecords(payload) {
      const records = {
        new: {},
        old: {}
      };
      if (payload.type === "INSERT" || payload.type === "UPDATE") {
        records.new = convertChangeData(payload.columns, payload.record);
      }
      if (payload.type === "UPDATE" || payload.type === "DELETE") {
        records.old = convertChangeData(payload.columns, payload.old_record);
      }
      return records;
    }
  };

  // node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js
  var noop2 = () => {
  };
  var CONNECTION_TIMEOUTS = {
    HEARTBEAT_INTERVAL: 25e3,
    RECONNECT_DELAY: 10,
    HEARTBEAT_TIMEOUT_FALLBACK: 100
  };
  var RECONNECT_INTERVALS = [1e3, 2e3, 5e3, 1e4];
  var DEFAULT_RECONNECT_FALLBACK = 1e4;
  var WORKER_SCRIPT = `
  addEventListener("message", (e) => {
    if (e.data.event === "start") {
      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);
    }
  });`;
  var RealtimeClient = class {
    /**
     * Initializes the Socket.
     *
     * @param endPoint The string WebSocket endpoint, ie, "ws://example.com/socket", "wss://example.com", "/socket" (inherited host & protocol)
     * @param httpEndpoint The string HTTP endpoint, ie, "https://example.com", "/" (inherited host & protocol)
     * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation
     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.
     * @param options.params The optional params to pass when connecting.
     * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.
     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.
     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }
     * @param options.logLevel Sets the log level for Realtime
     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))
     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.
     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.
     * @param options.worker Use Web Worker to set a side flow. Defaults to false.
     * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.
     */
    constructor(endPoint, options) {
      var _a;
      this.accessTokenValue = null;
      this.apiKey = null;
      this.channels = new Array();
      this.endPoint = "";
      this.httpEndpoint = "";
      this.headers = {};
      this.params = {};
      this.timeout = DEFAULT_TIMEOUT;
      this.transport = null;
      this.heartbeatIntervalMs = CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;
      this.heartbeatTimer = void 0;
      this.pendingHeartbeatRef = null;
      this.heartbeatCallback = noop2;
      this.ref = 0;
      this.reconnectTimer = null;
      this.logger = noop2;
      this.conn = null;
      this.sendBuffer = [];
      this.serializer = new Serializer();
      this.stateChangeCallbacks = {
        open: [],
        close: [],
        error: [],
        message: []
      };
      this.accessToken = null;
      this._connectionState = "disconnected";
      this._wasManualDisconnect = false;
      this._authPromise = null;
      this._resolveFetch = (customFetch) => {
        let _fetch;
        if (customFetch) {
          _fetch = customFetch;
        } else if (typeof fetch === "undefined") {
          _fetch = (...args) => Promise.resolve().then(() => (init_browser(), browser_exports)).then(({ default: fetch3 }) => fetch3(...args)).catch((error) => {
            throw new Error(`Failed to load @supabase/node-fetch: ${error.message}. This is required for HTTP requests in Node.js environments without native fetch.`);
          });
        } else {
          _fetch = fetch;
        }
        return (...args) => _fetch(...args);
      };
      if (!((_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey)) {
        throw new Error("API key is required to connect to Realtime");
      }
      this.apiKey = options.params.apikey;
      this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
      this.httpEndpoint = httpEndpointURL(endPoint);
      this._initializeOptions(options);
      this._setupReconnectionTimer();
      this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);
    }
    /**
     * Connects the socket, unless already connected.
     */
    connect() {
      if (this.isConnecting() || this.isDisconnecting() || this.conn !== null && this.isConnected()) {
        return;
      }
      this._setConnectionState("connecting");
      this._setAuthSafely("connect");
      if (this.transport) {
        this.conn = new this.transport(this.endpointURL());
      } else {
        try {
          this.conn = websocket_factory_default.createWebSocket(this.endpointURL());
        } catch (error) {
          this._setConnectionState("disconnected");
          const errorMessage = error.message;
          if (errorMessage.includes("Node.js")) {
            throw new Error(`${errorMessage}

To use Realtime in Node.js, you need to provide a WebSocket implementation:

Option 1: Use Node.js 22+ which has native WebSocket support
Option 2: Install and provide the "ws" package:

  npm install ws

  import ws from "ws"
  const client = new RealtimeClient(url, {
    ...options,
    transport: ws
  })`);
          }
          throw new Error(`WebSocket not available: ${errorMessage}`);
        }
      }
      this._setupConnectionHandlers();
    }
    /**
     * Returns the URL of the websocket.
     * @returns string The URL of the websocket.
     */
    endpointURL() {
      return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));
    }
    /**
     * Disconnects the socket.
     *
     * @param code A numeric status code to send on disconnect.
     * @param reason A custom reason for the disconnect.
     */
    disconnect(code, reason) {
      if (this.isDisconnecting()) {
        return;
      }
      this._setConnectionState("disconnecting", true);
      if (this.conn) {
        const fallbackTimer = setTimeout(() => {
          this._setConnectionState("disconnected");
        }, 100);
        this.conn.onclose = () => {
          clearTimeout(fallbackTimer);
          this._setConnectionState("disconnected");
        };
        if (code) {
          this.conn.close(code, reason !== null && reason !== void 0 ? reason : "");
        } else {
          this.conn.close();
        }
        this._teardownConnection();
      } else {
        this._setConnectionState("disconnected");
      }
    }
    /**
     * Returns all created channels
     */
    getChannels() {
      return this.channels;
    }
    /**
     * Unsubscribes and removes a single channel
     * @param channel A RealtimeChannel instance
     */
    async removeChannel(channel) {
      const status = await channel.unsubscribe();
      if (this.channels.length === 0) {
        this.disconnect();
      }
      return status;
    }
    /**
     * Unsubscribes and removes all channels
     */
    async removeAllChannels() {
      const values_1 = await Promise.all(this.channels.map((channel) => channel.unsubscribe()));
      this.channels = [];
      this.disconnect();
      return values_1;
    }
    /**
     * Logs the message.
     *
     * For customized logging, `this.logger` can be overridden.
     */
    log(kind, msg, data2) {
      this.logger(kind, msg, data2);
    }
    /**
     * Returns the current state of the socket.
     */
    connectionState() {
      switch (this.conn && this.conn.readyState) {
        case SOCKET_STATES.connecting:
          return CONNECTION_STATE.Connecting;
        case SOCKET_STATES.open:
          return CONNECTION_STATE.Open;
        case SOCKET_STATES.closing:
          return CONNECTION_STATE.Closing;
        default:
          return CONNECTION_STATE.Closed;
      }
    }
    /**
     * Returns `true` is the connection is open.
     */
    isConnected() {
      return this.connectionState() === CONNECTION_STATE.Open;
    }
    /**
     * Returns `true` if the connection is currently connecting.
     */
    isConnecting() {
      return this._connectionState === "connecting";
    }
    /**
     * Returns `true` if the connection is currently disconnecting.
     */
    isDisconnecting() {
      return this._connectionState === "disconnecting";
    }
    channel(topic, params = { config: {} }) {
      const realtimeTopic = `realtime:${topic}`;
      const exists = this.getChannels().find((c) => c.topic === realtimeTopic);
      if (!exists) {
        const chan = new RealtimeChannel(`realtime:${topic}`, params, this);
        this.channels.push(chan);
        return chan;
      } else {
        return exists;
      }
    }
    /**
     * Push out a message if the socket is connected.
     *
     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.
     */
    push(data2) {
      const { topic, event, payload, ref } = data2;
      const callback = () => {
        this.encode(data2, (result) => {
          var _a;
          (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);
        });
      };
      this.log("push", `${topic} ${event} (${ref})`, payload);
      if (this.isConnected()) {
        callback();
      } else {
        this.sendBuffer.push(callback);
      }
    }
    /**
     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.
     *
     * If param is null it will use the `accessToken` callback function or the token set on the client.
     *
     * On callback used, it will set the value of the token internal to the client.
     *
     * @param token A JWT string to override the token set on the client.
     */
    async setAuth(token = null) {
      this._authPromise = this._performAuth(token);
      try {
        await this._authPromise;
      } finally {
        this._authPromise = null;
      }
    }
    /**
     * Sends a heartbeat message if the socket is connected.
     */
    async sendHeartbeat() {
      var _a;
      if (!this.isConnected()) {
        this.heartbeatCallback("disconnected");
        return;
      }
      if (this.pendingHeartbeatRef) {
        this.pendingHeartbeatRef = null;
        this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
        this.heartbeatCallback("timeout");
        this._wasManualDisconnect = false;
        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, "heartbeat timeout");
        setTimeout(() => {
          var _a2;
          if (!this.isConnected()) {
            (_a2 = this.reconnectTimer) === null || _a2 === void 0 ? void 0 : _a2.scheduleTimeout();
          }
        }, CONNECTION_TIMEOUTS.HEARTBEAT_TIMEOUT_FALLBACK);
        return;
      }
      this.pendingHeartbeatRef = this._makeRef();
      this.push({
        topic: "phoenix",
        event: "heartbeat",
        payload: {},
        ref: this.pendingHeartbeatRef
      });
      this.heartbeatCallback("sent");
      this._setAuthSafely("heartbeat");
    }
    onHeartbeat(callback) {
      this.heartbeatCallback = callback;
    }
    /**
     * Flushes send buffer
     */
    flushSendBuffer() {
      if (this.isConnected() && this.sendBuffer.length > 0) {
        this.sendBuffer.forEach((callback) => callback());
        this.sendBuffer = [];
      }
    }
    /**
     * Return the next message ref, accounting for overflows
     *
     * @internal
     */
    _makeRef() {
      let newRef = this.ref + 1;
      if (newRef === this.ref) {
        this.ref = 0;
      } else {
        this.ref = newRef;
      }
      return this.ref.toString();
    }
    /**
     * Unsubscribe from channels with the specified topic.
     *
     * @internal
     */
    _leaveOpenTopic(topic) {
      let dupChannel = this.channels.find((c) => c.topic === topic && (c._isJoined() || c._isJoining()));
      if (dupChannel) {
        this.log("transport", `leaving duplicate topic "${topic}"`);
        dupChannel.unsubscribe();
      }
    }
    /**
     * Removes a subscription from the socket.
     *
     * @param channel An open subscription.
     *
     * @internal
     */
    _remove(channel) {
      this.channels = this.channels.filter((c) => c.topic !== channel.topic);
    }
    /** @internal */
    _onConnMessage(rawMessage) {
      this.decode(rawMessage.data, (msg) => {
        if (msg.topic === "phoenix" && msg.event === "phx_reply") {
          this.heartbeatCallback(msg.payload.status === "ok" ? "ok" : "error");
        }
        if (msg.ref && msg.ref === this.pendingHeartbeatRef) {
          this.pendingHeartbeatRef = null;
        }
        const { topic, event, payload, ref } = msg;
        const refString = ref ? `(${ref})` : "";
        const status = payload.status || "";
        this.log("receive", `${status} ${topic} ${event} ${refString}`.trim(), payload);
        this.channels.filter((channel) => channel._isMember(topic)).forEach((channel) => channel._trigger(event, payload, ref));
        this._triggerStateCallbacks("message", msg);
      });
    }
    /**
     * Clear specific timer
     * @internal
     */
    _clearTimer(timer) {
      var _a;
      if (timer === "heartbeat" && this.heartbeatTimer) {
        clearInterval(this.heartbeatTimer);
        this.heartbeatTimer = void 0;
      } else if (timer === "reconnect") {
        (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.reset();
      }
    }
    /**
     * Clear all timers
     * @internal
     */
    _clearAllTimers() {
      this._clearTimer("heartbeat");
      this._clearTimer("reconnect");
    }
    /**
     * Setup connection handlers for WebSocket events
     * @internal
     */
    _setupConnectionHandlers() {
      if (!this.conn)
        return;
      if ("binaryType" in this.conn) {
        ;
        this.conn.binaryType = "arraybuffer";
      }
      this.conn.onopen = () => this._onConnOpen();
      this.conn.onerror = (error) => this._onConnError(error);
      this.conn.onmessage = (event) => this._onConnMessage(event);
      this.conn.onclose = (event) => this._onConnClose(event);
    }
    /**
     * Teardown connection and cleanup resources
     * @internal
     */
    _teardownConnection() {
      if (this.conn) {
        this.conn.onopen = null;
        this.conn.onerror = null;
        this.conn.onmessage = null;
        this.conn.onclose = null;
        this.conn = null;
      }
      this._clearAllTimers();
      this.channels.forEach((channel) => channel.teardown());
    }
    /** @internal */
    _onConnOpen() {
      this._setConnectionState("connected");
      this.log("transport", `connected to ${this.endpointURL()}`);
      this.flushSendBuffer();
      this._clearTimer("reconnect");
      if (!this.worker) {
        this._startHeartbeat();
      } else {
        if (!this.workerRef) {
          this._startWorkerHeartbeat();
        }
      }
      this._triggerStateCallbacks("open");
    }
    /** @internal */
    _startHeartbeat() {
      this.heartbeatTimer && clearInterval(this.heartbeatTimer);
      this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
    }
    /** @internal */
    _startWorkerHeartbeat() {
      if (this.workerUrl) {
        this.log("worker", `starting worker for from ${this.workerUrl}`);
      } else {
        this.log("worker", `starting default worker`);
      }
      const objectUrl = this._workerObjectUrl(this.workerUrl);
      this.workerRef = new Worker(objectUrl);
      this.workerRef.onerror = (error) => {
        this.log("worker", "worker error", error.message);
        this.workerRef.terminate();
      };
      this.workerRef.onmessage = (event) => {
        if (event.data.event === "keepAlive") {
          this.sendHeartbeat();
        }
      };
      this.workerRef.postMessage({
        event: "start",
        interval: this.heartbeatIntervalMs
      });
    }
    /** @internal */
    _onConnClose(event) {
      var _a;
      this._setConnectionState("disconnected");
      this.log("transport", "close", event);
      this._triggerChanError();
      this._clearTimer("heartbeat");
      if (!this._wasManualDisconnect) {
        (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();
      }
      this._triggerStateCallbacks("close", event);
    }
    /** @internal */
    _onConnError(error) {
      this._setConnectionState("disconnected");
      this.log("transport", `${error}`);
      this._triggerChanError();
      this._triggerStateCallbacks("error", error);
    }
    /** @internal */
    _triggerChanError() {
      this.channels.forEach((channel) => channel._trigger(CHANNEL_EVENTS.error));
    }
    /** @internal */
    _appendParams(url, params) {
      if (Object.keys(params).length === 0) {
        return url;
      }
      const prefix = url.match(/\?/) ? "&" : "?";
      const query = new URLSearchParams(params);
      return `${url}${prefix}${query}`;
    }
    _workerObjectUrl(url) {
      let result_url;
      if (url) {
        result_url = url;
      } else {
        const blob = new Blob([WORKER_SCRIPT], { type: "application/javascript" });
        result_url = URL.createObjectURL(blob);
      }
      return result_url;
    }
    /**
     * Set connection state with proper state management
     * @internal
     */
    _setConnectionState(state, manual = false) {
      this._connectionState = state;
      if (state === "connecting") {
        this._wasManualDisconnect = false;
      } else if (state === "disconnecting") {
        this._wasManualDisconnect = manual;
      }
    }
    /**
     * Perform the actual auth operation
     * @internal
     */
    async _performAuth(token = null) {
      let tokenToSend;
      if (token) {
        tokenToSend = token;
      } else if (this.accessToken) {
        tokenToSend = await this.accessToken();
      } else {
        tokenToSend = this.accessTokenValue;
      }
      if (this.accessTokenValue != tokenToSend) {
        this.accessTokenValue = tokenToSend;
        this.channels.forEach((channel) => {
          const payload = {
            access_token: tokenToSend,
            version: DEFAULT_VERSION
          };
          tokenToSend && channel.updateJoinPayload(payload);
          if (channel.joinedOnce && channel._isJoined()) {
            channel._push(CHANNEL_EVENTS.access_token, {
              access_token: tokenToSend
            });
          }
        });
      }
    }
    /**
     * Wait for any in-flight auth operations to complete
     * @internal
     */
    async _waitForAuthIfNeeded() {
      if (this._authPromise) {
        await this._authPromise;
      }
    }
    /**
     * Safely call setAuth with standardized error handling
     * @internal
     */
    _setAuthSafely(context = "general") {
      this.setAuth().catch((e) => {
        this.log("error", `error setting auth in ${context}`, e);
      });
    }
    /**
     * Trigger state change callbacks with proper error handling
     * @internal
     */
    _triggerStateCallbacks(event, data2) {
      try {
        this.stateChangeCallbacks[event].forEach((callback) => {
          try {
            callback(data2);
          } catch (e) {
            this.log("error", `error in ${event} callback`, e);
          }
        });
      } catch (e) {
        this.log("error", `error triggering ${event} callbacks`, e);
      }
    }
    /**
     * Setup reconnection timer with proper configuration
     * @internal
     */
    _setupReconnectionTimer() {
      this.reconnectTimer = new Timer(async () => {
        setTimeout(async () => {
          await this._waitForAuthIfNeeded();
          if (!this.isConnected()) {
            this.connect();
          }
        }, CONNECTION_TIMEOUTS.RECONNECT_DELAY);
      }, this.reconnectAfterMs);
    }
    /**
     * Initialize client options with defaults
     * @internal
     */
    _initializeOptions(options) {
      var _a, _b, _c, _d, _e, _f, _g, _h;
      this.transport = (_a = options === null || options === void 0 ? void 0 : options.transport) !== null && _a !== void 0 ? _a : null;
      this.timeout = (_b = options === null || options === void 0 ? void 0 : options.timeout) !== null && _b !== void 0 ? _b : DEFAULT_TIMEOUT;
      this.heartbeatIntervalMs = (_c = options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) !== null && _c !== void 0 ? _c : CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;
      this.worker = (_d = options === null || options === void 0 ? void 0 : options.worker) !== null && _d !== void 0 ? _d : false;
      this.accessToken = (_e = options === null || options === void 0 ? void 0 : options.accessToken) !== null && _e !== void 0 ? _e : null;
      if (options === null || options === void 0 ? void 0 : options.params)
        this.params = options.params;
      if (options === null || options === void 0 ? void 0 : options.logger)
        this.logger = options.logger;
      if ((options === null || options === void 0 ? void 0 : options.logLevel) || (options === null || options === void 0 ? void 0 : options.log_level)) {
        this.logLevel = options.logLevel || options.log_level;
        this.params = Object.assign(Object.assign({}, this.params), { log_level: this.logLevel });
      }
      this.reconnectAfterMs = (_f = options === null || options === void 0 ? void 0 : options.reconnectAfterMs) !== null && _f !== void 0 ? _f : (tries) => {
        return RECONNECT_INTERVALS[tries - 1] || DEFAULT_RECONNECT_FALLBACK;
      };
      this.encode = (_g = options === null || options === void 0 ? void 0 : options.encode) !== null && _g !== void 0 ? _g : (payload, callback) => {
        return callback(JSON.stringify(payload));
      };
      this.decode = (_h = options === null || options === void 0 ? void 0 : options.decode) !== null && _h !== void 0 ? _h : this.serializer.decode.bind(this.serializer);
      if (this.worker) {
        if (typeof window !== "undefined" && !window.Worker) {
          throw new Error("Web Worker is not supported");
        }
        this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;
      }
    }
  };

  // node_modules/@supabase/storage-js/dist/module/lib/errors.js
  var StorageError = class extends Error {
    constructor(message) {
      super(message);
      this.__isStorageError = true;
      this.name = "StorageError";
    }
  };
  function isStorageError(error) {
    return typeof error === "object" && error !== null && "__isStorageError" in error;
  }
  var StorageApiError = class extends StorageError {
    constructor(message, status, statusCode) {
      super(message);
      this.name = "StorageApiError";
      this.status = status;
      this.statusCode = statusCode;
    }
    toJSON() {
      return {
        name: this.name,
        message: this.message,
        status: this.status,
        statusCode: this.statusCode
      };
    }
  };
  var StorageUnknownError = class extends StorageError {
    constructor(message, originalError) {
      super(message);
      this.name = "StorageUnknownError";
      this.originalError = originalError;
    }
  };

  // node_modules/@supabase/storage-js/dist/module/lib/helpers.js
  var __awaiter2 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var resolveFetch2 = (customFetch) => {
    let _fetch;
    if (customFetch) {
      _fetch = customFetch;
    } else if (typeof fetch === "undefined") {
      _fetch = (...args) => Promise.resolve().then(() => (init_browser(), browser_exports)).then(({ default: fetch3 }) => fetch3(...args));
    } else {
      _fetch = fetch;
    }
    return (...args) => _fetch(...args);
  };
  var resolveResponse = () => __awaiter2(void 0, void 0, void 0, function* () {
    if (typeof Response === "undefined") {
      return (yield Promise.resolve().then(() => (init_browser(), browser_exports))).Response;
    }
    return Response;
  });
  var recursiveToCamel = (item) => {
    if (Array.isArray(item)) {
      return item.map((el) => recursiveToCamel(el));
    } else if (typeof item === "function" || item !== Object(item)) {
      return item;
    }
    const result = {};
    Object.entries(item).forEach(([key, value]) => {
      const newKey = key.replace(/([-_][a-z])/gi, (c) => c.toUpperCase().replace(/[-_]/g, ""));
      result[newKey] = recursiveToCamel(value);
    });
    return result;
  };
  var isPlainObject = (value) => {
    if (typeof value !== "object" || value === null) {
      return false;
    }
    const prototype = Object.getPrototypeOf(value);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
  };

  // node_modules/@supabase/storage-js/dist/module/lib/fetch.js
  var __awaiter3 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var _getErrorMessage = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);
  var handleError = (error, reject, options) => __awaiter3(void 0, void 0, void 0, function* () {
    const Res = yield resolveResponse();
    if (error instanceof Res && !(options === null || options === void 0 ? void 0 : options.noResolveJson)) {
      error.json().then((err) => {
        const status = error.status || 500;
        const statusCode = (err === null || err === void 0 ? void 0 : err.statusCode) || status + "";
        reject(new StorageApiError(_getErrorMessage(err), status, statusCode));
      }).catch((err) => {
        reject(new StorageUnknownError(_getErrorMessage(err), err));
      });
    } else {
      reject(new StorageUnknownError(_getErrorMessage(error), error));
    }
  });
  var _getRequestParams = (method, options, parameters, body) => {
    const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };
    if (method === "GET" || !body) {
      return params;
    }
    if (isPlainObject(body)) {
      params.headers = Object.assign({ "Content-Type": "application/json" }, options === null || options === void 0 ? void 0 : options.headers);
      params.body = JSON.stringify(body);
    } else {
      params.body = body;
    }
    if (options === null || options === void 0 ? void 0 : options.duplex) {
      params.duplex = options.duplex;
    }
    return Object.assign(Object.assign({}, params), parameters);
  };
  function _handleRequest(fetcher, method, url, options, parameters, body) {
    return __awaiter3(this, void 0, void 0, function* () {
      return new Promise((resolve, reject) => {
        fetcher(url, _getRequestParams(method, options, parameters, body)).then((result) => {
          if (!result.ok)
            throw result;
          if (options === null || options === void 0 ? void 0 : options.noResolveJson)
            return result;
          return result.json();
        }).then((data2) => resolve(data2)).catch((error) => handleError(error, reject, options));
      });
    });
  }
  function get(fetcher, url, options, parameters) {
    return __awaiter3(this, void 0, void 0, function* () {
      return _handleRequest(fetcher, "GET", url, options, parameters);
    });
  }
  function post(fetcher, url, body, options, parameters) {
    return __awaiter3(this, void 0, void 0, function* () {
      return _handleRequest(fetcher, "POST", url, options, parameters, body);
    });
  }
  function put(fetcher, url, body, options, parameters) {
    return __awaiter3(this, void 0, void 0, function* () {
      return _handleRequest(fetcher, "PUT", url, options, parameters, body);
    });
  }
  function head(fetcher, url, options, parameters) {
    return __awaiter3(this, void 0, void 0, function* () {
      return _handleRequest(fetcher, "HEAD", url, Object.assign(Object.assign({}, options), { noResolveJson: true }), parameters);
    });
  }
  function remove(fetcher, url, body, options, parameters) {
    return __awaiter3(this, void 0, void 0, function* () {
      return _handleRequest(fetcher, "DELETE", url, options, parameters, body);
    });
  }

  // node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js
  var __awaiter4 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var DEFAULT_SEARCH_OPTIONS = {
    limit: 100,
    offset: 0,
    sortBy: {
      column: "name",
      order: "asc"
    }
  };
  var DEFAULT_FILE_OPTIONS = {
    cacheControl: "3600",
    contentType: "text/plain;charset=UTF-8",
    upsert: false
  };
  var StorageFileApi = class {
    constructor(url, headers = {}, bucketId, fetch3) {
      this.url = url;
      this.headers = headers;
      this.bucketId = bucketId;
      this.fetch = resolveFetch2(fetch3);
    }
    /**
     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.
     *
     * @param method HTTP method.
     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
     * @param fileBody The body of the file to be stored in the bucket.
     */
    uploadOrUpdate(method, path, fileBody, fileOptions) {
      return __awaiter4(this, void 0, void 0, function* () {
        try {
          let body;
          const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);
          let headers = Object.assign(Object.assign({}, this.headers), method === "POST" && { "x-upsert": String(options.upsert) });
          const metadata = options.metadata;
          if (typeof Blob !== "undefined" && fileBody instanceof Blob) {
            body = new FormData();
            body.append("cacheControl", options.cacheControl);
            if (metadata) {
              body.append("metadata", this.encodeMetadata(metadata));
            }
            body.append("", fileBody);
          } else if (typeof FormData !== "undefined" && fileBody instanceof FormData) {
            body = fileBody;
            body.append("cacheControl", options.cacheControl);
            if (metadata) {
              body.append("metadata", this.encodeMetadata(metadata));
            }
          } else {
            body = fileBody;
            headers["cache-control"] = `max-age=${options.cacheControl}`;
            headers["content-type"] = options.contentType;
            if (metadata) {
              headers["x-metadata"] = this.toBase64(this.encodeMetadata(metadata));
            }
          }
          if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {
            headers = Object.assign(Object.assign({}, headers), fileOptions.headers);
          }
          const cleanPath = this._removeEmptyFolders(path);
          const _path = this._getFinalPath(cleanPath);
          const data2 = yield (method == "PUT" ? put : post)(this.fetch, `${this.url}/object/${_path}`, body, Object.assign({ headers }, (options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {}));
          return {
            data: { path: cleanPath, id: data2.Id, fullPath: data2.Key },
            error: null
          };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Uploads a file to an existing bucket.
     *
     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
     * @param fileBody The body of the file to be stored in the bucket.
     */
    upload(path, fileBody, fileOptions) {
      return __awaiter4(this, void 0, void 0, function* () {
        return this.uploadOrUpdate("POST", path, fileBody, fileOptions);
      });
    }
    /**
     * Upload a file with a token generated from `createSignedUploadUrl`.
     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
     * @param token The token generated from `createSignedUploadUrl`
     * @param fileBody The body of the file to be stored in the bucket.
     */
    uploadToSignedUrl(path, token, fileBody, fileOptions) {
      return __awaiter4(this, void 0, void 0, function* () {
        const cleanPath = this._removeEmptyFolders(path);
        const _path = this._getFinalPath(cleanPath);
        const url = new URL(this.url + `/object/upload/sign/${_path}`);
        url.searchParams.set("token", token);
        try {
          let body;
          const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);
          const headers = Object.assign(Object.assign({}, this.headers), { "x-upsert": String(options.upsert) });
          if (typeof Blob !== "undefined" && fileBody instanceof Blob) {
            body = new FormData();
            body.append("cacheControl", options.cacheControl);
            body.append("", fileBody);
          } else if (typeof FormData !== "undefined" && fileBody instanceof FormData) {
            body = fileBody;
            body.append("cacheControl", options.cacheControl);
          } else {
            body = fileBody;
            headers["cache-control"] = `max-age=${options.cacheControl}`;
            headers["content-type"] = options.contentType;
          }
          const data2 = yield put(this.fetch, url.toString(), body, { headers });
          return {
            data: { path: cleanPath, fullPath: data2.Key },
            error: null
          };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Creates a signed upload URL.
     * Signed upload URLs can be used to upload files to the bucket without further authentication.
     * They are valid for 2 hours.
     * @param path The file path, including the current file name. For example `folder/image.png`.
     * @param options.upsert If set to true, allows the file to be overwritten if it already exists.
     */
    createSignedUploadUrl(path, options) {
      return __awaiter4(this, void 0, void 0, function* () {
        try {
          let _path = this._getFinalPath(path);
          const headers = Object.assign({}, this.headers);
          if (options === null || options === void 0 ? void 0 : options.upsert) {
            headers["x-upsert"] = "true";
          }
          const data2 = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers });
          const url = new URL(this.url + data2.url);
          const token = url.searchParams.get("token");
          if (!token) {
            throw new StorageError("No token returned by API");
          }
          return { data: { signedUrl: url.toString(), path, token }, error: null };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Replaces an existing file at the specified path with a new one.
     *
     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.
     * @param fileBody The body of the file to be stored in the bucket.
     */
    update(path, fileBody, fileOptions) {
      return __awaiter4(this, void 0, void 0, function* () {
        return this.uploadOrUpdate("PUT", path, fileBody, fileOptions);
      });
    }
    /**
     * Moves an existing file to a new path in the same bucket.
     *
     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.
     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.
     * @param options The destination options.
     */
    move(fromPath, toPath, options) {
      return __awaiter4(this, void 0, void 0, function* () {
        try {
          const data2 = yield post(this.fetch, `${this.url}/object/move`, {
            bucketId: this.bucketId,
            sourceKey: fromPath,
            destinationKey: toPath,
            destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket
          }, { headers: this.headers });
          return { data: data2, error: null };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Copies an existing file to a new path in the same bucket.
     *
     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.
     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.
     * @param options The destination options.
     */
    copy(fromPath, toPath, options) {
      return __awaiter4(this, void 0, void 0, function* () {
        try {
          const data2 = yield post(this.fetch, `${this.url}/object/copy`, {
            bucketId: this.bucketId,
            sourceKey: fromPath,
            destinationKey: toPath,
            destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket
          }, { headers: this.headers });
          return { data: { path: data2.Key }, error: null };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.
     *
     * @param path The file path, including the current file name. For example `folder/image.png`.
     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.
     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
     * @param options.transform Transform the asset before serving it to the client.
     */
    createSignedUrl(path, expiresIn, options) {
      return __awaiter4(this, void 0, void 0, function* () {
        try {
          let _path = this._getFinalPath(path);
          let data2 = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, (options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {}), { headers: this.headers });
          const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? "" : options.download}` : "";
          const signedUrl = encodeURI(`${this.url}${data2.signedURL}${downloadQueryParam}`);
          data2 = { signedUrl };
          return { data: data2, error: null };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.
     *
     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.
     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.
     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
     */
    createSignedUrls(paths, expiresIn, options) {
      return __awaiter4(this, void 0, void 0, function* () {
        try {
          const data2 = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });
          const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? "" : options.download}` : "";
          return {
            data: data2.map((datum) => Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null })),
            error: null
          };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.
     *
     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.
     * @param options.transform Transform the asset before serving it to the client.
     */
    download(path, options) {
      return __awaiter4(this, void 0, void 0, function* () {
        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== "undefined";
        const renderPath = wantsTransformation ? "render/image/authenticated" : "object";
        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});
        const queryString = transformationQuery ? `?${transformationQuery}` : "";
        try {
          const _path = this._getFinalPath(path);
          const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {
            headers: this.headers,
            noResolveJson: true
          });
          const data2 = yield res.blob();
          return { data: data2, error: null };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Retrieves the details of an existing file.
     * @param path
     */
    info(path) {
      return __awaiter4(this, void 0, void 0, function* () {
        const _path = this._getFinalPath(path);
        try {
          const data2 = yield get(this.fetch, `${this.url}/object/info/${_path}`, {
            headers: this.headers
          });
          return { data: recursiveToCamel(data2), error: null };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Checks the existence of a file.
     * @param path
     */
    exists(path) {
      return __awaiter4(this, void 0, void 0, function* () {
        const _path = this._getFinalPath(path);
        try {
          yield head(this.fetch, `${this.url}/object/${_path}`, {
            headers: this.headers
          });
          return { data: true, error: null };
        } catch (error) {
          if (isStorageError(error) && error instanceof StorageUnknownError) {
            const originalError = error.originalError;
            if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {
              return { data: false, error };
            }
          }
          throw error;
        }
      });
    }
    /**
     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.
     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.
     *
     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.
     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
     * @param options.transform Transform the asset before serving it to the client.
     */
    getPublicUrl(path, options) {
      const _path = this._getFinalPath(path);
      const _queryString = [];
      const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? "" : options.download}` : "";
      if (downloadQueryParam !== "") {
        _queryString.push(downloadQueryParam);
      }
      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== "undefined";
      const renderPath = wantsTransformation ? "render/image" : "object";
      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});
      if (transformationQuery !== "") {
        _queryString.push(transformationQuery);
      }
      let queryString = _queryString.join("&");
      if (queryString !== "") {
        queryString = `?${queryString}`;
      }
      return {
        data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) }
      };
    }
    /**
     * Deletes files within the same bucket
     *
     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].
     */
    remove(paths) {
      return __awaiter4(this, void 0, void 0, function* () {
        try {
          const data2 = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });
          return { data: data2, error: null };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Get file metadata
     * @param id the file id to retrieve metadata
     */
    // async getMetadata(
    //   id: string
    // ): Promise<
    //   | {
    //       data: Metadata
    //       error: null
    //     }
    //   | {
    //       data: null
    //       error: StorageError
    //     }
    // > {
    //   try {
    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })
    //     return { data, error: null }
    //   } catch (error) {
    //     if (isStorageError(error)) {
    //       return { data: null, error }
    //     }
    //     throw error
    //   }
    // }
    /**
     * Update file metadata
     * @param id the file id to update metadata
     * @param meta the new file metadata
     */
    // async updateMetadata(
    //   id: string,
    //   meta: Metadata
    // ): Promise<
    //   | {
    //       data: Metadata
    //       error: null
    //     }
    //   | {
    //       data: null
    //       error: StorageError
    //     }
    // > {
    //   try {
    //     const data = await post(
    //       this.fetch,
    //       `${this.url}/metadata/${id}`,
    //       { ...meta },
    //       { headers: this.headers }
    //     )
    //     return { data, error: null }
    //   } catch (error) {
    //     if (isStorageError(error)) {
    //       return { data: null, error }
    //     }
    //     throw error
    //   }
    // }
    /**
     * Lists all the files within a bucket.
     * @param path The folder path.
     * @param options Search options including limit (defaults to 100), offset, sortBy, and search
     */
    list(path, options, parameters) {
      return __awaiter4(this, void 0, void 0, function* () {
        try {
          const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || "" });
          const data2 = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);
          return { data: data2, error: null };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * @experimental this method signature might change in the future
     * @param options search options
     * @param parameters
     */
    listV2(options, parameters) {
      return __awaiter4(this, void 0, void 0, function* () {
        try {
          const body = Object.assign({}, options);
          const data2 = yield post(this.fetch, `${this.url}/object/list-v2/${this.bucketId}`, body, { headers: this.headers }, parameters);
          return { data: data2, error: null };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    encodeMetadata(metadata) {
      return JSON.stringify(metadata);
    }
    toBase64(data2) {
      if (typeof Buffer !== "undefined") {
        return Buffer.from(data2).toString("base64");
      }
      return btoa(data2);
    }
    _getFinalPath(path) {
      return `${this.bucketId}/${path.replace(/^\/+/, "")}`;
    }
    _removeEmptyFolders(path) {
      return path.replace(/^\/|\/$/g, "").replace(/\/+/g, "/");
    }
    transformOptsToQueryString(transform) {
      const params = [];
      if (transform.width) {
        params.push(`width=${transform.width}`);
      }
      if (transform.height) {
        params.push(`height=${transform.height}`);
      }
      if (transform.resize) {
        params.push(`resize=${transform.resize}`);
      }
      if (transform.format) {
        params.push(`format=${transform.format}`);
      }
      if (transform.quality) {
        params.push(`quality=${transform.quality}`);
      }
      return params.join("&");
    }
  };

  // node_modules/@supabase/storage-js/dist/module/lib/version.js
  var version2 = "2.11.0";

  // node_modules/@supabase/storage-js/dist/module/lib/constants.js
  var DEFAULT_HEADERS = { "X-Client-Info": `storage-js/${version2}` };

  // node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js
  var __awaiter5 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var StorageBucketApi = class {
    constructor(url, headers = {}, fetch3, opts) {
      const baseUrl = new URL(url);
      if (opts === null || opts === void 0 ? void 0 : opts.useNewHostname) {
        const isSupabaseHost = /supabase\.(co|in|red)$/.test(baseUrl.hostname);
        if (isSupabaseHost && !baseUrl.hostname.includes("storage.supabase.")) {
          baseUrl.hostname = baseUrl.hostname.replace("supabase.", "storage.supabase.");
        }
      }
      this.url = baseUrl.href;
      this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);
      this.fetch = resolveFetch2(fetch3);
    }
    /**
     * Retrieves the details of all Storage buckets within an existing project.
     */
    listBuckets() {
      return __awaiter5(this, void 0, void 0, function* () {
        try {
          const data2 = yield get(this.fetch, `${this.url}/bucket`, { headers: this.headers });
          return { data: data2, error: null };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Retrieves the details of an existing Storage bucket.
     *
     * @param id The unique identifier of the bucket you would like to retrieve.
     */
    getBucket(id) {
      return __awaiter5(this, void 0, void 0, function* () {
        try {
          const data2 = yield get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers });
          return { data: data2, error: null };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Creates a new Storage bucket
     *
     * @param id A unique identifier for the bucket you are creating.
     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.
     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.
     * The global file size limit takes precedence over this value.
     * The default value is null, which doesn't set a per bucket file size limit.
     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.
     * The default value is null, which allows files with all mime types to be uploaded.
     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.
     * @returns newly created bucket id
     * @param options.type (private-beta) specifies the bucket type. see `BucketType` for more details.
     *   - default bucket type is `STANDARD`
     */
    createBucket(id, options = {
      public: false
    }) {
      return __awaiter5(this, void 0, void 0, function* () {
        try {
          const data2 = yield post(this.fetch, `${this.url}/bucket`, {
            id,
            name: id,
            type: options.type,
            public: options.public,
            file_size_limit: options.fileSizeLimit,
            allowed_mime_types: options.allowedMimeTypes
          }, { headers: this.headers });
          return { data: data2, error: null };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Updates a Storage bucket
     *
     * @param id A unique identifier for the bucket you are updating.
     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.
     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.
     * The global file size limit takes precedence over this value.
     * The default value is null, which doesn't set a per bucket file size limit.
     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.
     * The default value is null, which allows files with all mime types to be uploaded.
     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.
     */
    updateBucket(id, options) {
      return __awaiter5(this, void 0, void 0, function* () {
        try {
          const data2 = yield put(this.fetch, `${this.url}/bucket/${id}`, {
            id,
            name: id,
            public: options.public,
            file_size_limit: options.fileSizeLimit,
            allowed_mime_types: options.allowedMimeTypes
          }, { headers: this.headers });
          return { data: data2, error: null };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Removes all objects inside a single bucket.
     *
     * @param id The unique identifier of the bucket you would like to empty.
     */
    emptyBucket(id) {
      return __awaiter5(this, void 0, void 0, function* () {
        try {
          const data2 = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, { headers: this.headers });
          return { data: data2, error: null };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.
     * You must first `empty()` the bucket.
     *
     * @param id The unique identifier of the bucket you would like to delete.
     */
    deleteBucket(id) {
      return __awaiter5(this, void 0, void 0, function* () {
        try {
          const data2 = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, { headers: this.headers });
          return { data: data2, error: null };
        } catch (error) {
          if (isStorageError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
  };

  // node_modules/@supabase/storage-js/dist/module/StorageClient.js
  var StorageClient = class extends StorageBucketApi {
    constructor(url, headers = {}, fetch3, opts) {
      super(url, headers, fetch3, opts);
    }
    /**
     * Perform file operation in a bucket.
     *
     * @param id The bucket id to operate on.
     */
    from(id) {
      return new StorageFileApi(this.url, this.headers, id, this.fetch);
    }
  };

  // node_modules/@supabase/supabase-js/dist/module/lib/version.js
  var version3 = "2.56.0";

  // node_modules/@supabase/supabase-js/dist/module/lib/constants.js
  var JS_ENV = "";
  if (typeof Deno !== "undefined") {
    JS_ENV = "deno";
  } else if (typeof document !== "undefined") {
    JS_ENV = "web";
  } else if (typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    JS_ENV = "react-native";
  } else {
    JS_ENV = "node";
  }
  var DEFAULT_HEADERS2 = { "X-Client-Info": `supabase-js-${JS_ENV}/${version3}` };
  var DEFAULT_GLOBAL_OPTIONS = {
    headers: DEFAULT_HEADERS2
  };
  var DEFAULT_DB_OPTIONS = {
    schema: "public"
  };
  var DEFAULT_AUTH_OPTIONS = {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: "implicit"
  };
  var DEFAULT_REALTIME_OPTIONS = {};

  // node_modules/@supabase/supabase-js/dist/module/lib/fetch.js
  init_browser();
  var __awaiter6 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var resolveFetch3 = (customFetch) => {
    let _fetch;
    if (customFetch) {
      _fetch = customFetch;
    } else if (typeof fetch === "undefined") {
      _fetch = browser_default;
    } else {
      _fetch = fetch;
    }
    return (...args) => _fetch(...args);
  };
  var resolveHeadersConstructor = () => {
    if (typeof Headers === "undefined") {
      return Headers2;
    }
    return Headers;
  };
  var fetchWithAuth = (supabaseKey, getAccessToken, customFetch) => {
    const fetch3 = resolveFetch3(customFetch);
    const HeadersConstructor = resolveHeadersConstructor();
    return (input, init) => __awaiter6(void 0, void 0, void 0, function* () {
      var _a;
      const accessToken = (_a = yield getAccessToken()) !== null && _a !== void 0 ? _a : supabaseKey;
      let headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);
      if (!headers.has("apikey")) {
        headers.set("apikey", supabaseKey);
      }
      if (!headers.has("Authorization")) {
        headers.set("Authorization", `Bearer ${accessToken}`);
      }
      return fetch3(input, Object.assign(Object.assign({}, init), { headers }));
    });
  };

  // node_modules/@supabase/supabase-js/dist/module/lib/helpers.js
  var __awaiter7 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  function ensureTrailingSlash(url) {
    return url.endsWith("/") ? url : url + "/";
  }
  function applySettingDefaults(options, defaults) {
    var _a, _b;
    const { db: dbOptions, auth: authOptions, realtime: realtimeOptions, global: globalOptions } = options;
    const { db: DEFAULT_DB_OPTIONS2, auth: DEFAULT_AUTH_OPTIONS2, realtime: DEFAULT_REALTIME_OPTIONS2, global: DEFAULT_GLOBAL_OPTIONS2 } = defaults;
    const result = {
      db: Object.assign(Object.assign({}, DEFAULT_DB_OPTIONS2), dbOptions),
      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS2), authOptions),
      realtime: Object.assign(Object.assign({}, DEFAULT_REALTIME_OPTIONS2), realtimeOptions),
      storage: {},
      global: Object.assign(Object.assign(Object.assign({}, DEFAULT_GLOBAL_OPTIONS2), globalOptions), { headers: Object.assign(Object.assign({}, (_a = DEFAULT_GLOBAL_OPTIONS2 === null || DEFAULT_GLOBAL_OPTIONS2 === void 0 ? void 0 : DEFAULT_GLOBAL_OPTIONS2.headers) !== null && _a !== void 0 ? _a : {}), (_b = globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.headers) !== null && _b !== void 0 ? _b : {}) }),
      accessToken: () => __awaiter7(this, void 0, void 0, function* () {
        return "";
      })
    };
    if (options.accessToken) {
      result.accessToken = options.accessToken;
    } else {
      delete result.accessToken;
    }
    return result;
  }

  // node_modules/@supabase/auth-js/dist/module/lib/version.js
  var version4 = "2.71.1";

  // node_modules/@supabase/auth-js/dist/module/lib/constants.js
  var AUTO_REFRESH_TICK_DURATION_MS = 30 * 1e3;
  var AUTO_REFRESH_TICK_THRESHOLD = 3;
  var EXPIRY_MARGIN_MS = AUTO_REFRESH_TICK_THRESHOLD * AUTO_REFRESH_TICK_DURATION_MS;
  var GOTRUE_URL = "http://localhost:9999";
  var STORAGE_KEY = "supabase.auth.token";
  var DEFAULT_HEADERS3 = { "X-Client-Info": `gotrue-js/${version4}` };
  var API_VERSION_HEADER_NAME = "X-Supabase-Api-Version";
  var API_VERSIONS = {
    "2024-01-01": {
      timestamp: Date.parse("2024-01-01T00:00:00.0Z"),
      name: "2024-01-01"
    }
  };
  var BASE64URL_REGEX = /^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i;
  var JWKS_TTL = 10 * 60 * 1e3;

  // node_modules/@supabase/auth-js/dist/module/lib/errors.js
  var AuthError = class extends Error {
    constructor(message, status, code) {
      super(message);
      this.__isAuthError = true;
      this.name = "AuthError";
      this.status = status;
      this.code = code;
    }
  };
  function isAuthError(error) {
    return typeof error === "object" && error !== null && "__isAuthError" in error;
  }
  var AuthApiError = class extends AuthError {
    constructor(message, status, code) {
      super(message, status, code);
      this.name = "AuthApiError";
      this.status = status;
      this.code = code;
    }
  };
  function isAuthApiError(error) {
    return isAuthError(error) && error.name === "AuthApiError";
  }
  var AuthUnknownError = class extends AuthError {
    constructor(message, originalError) {
      super(message);
      this.name = "AuthUnknownError";
      this.originalError = originalError;
    }
  };
  var CustomAuthError = class extends AuthError {
    constructor(message, name, status, code) {
      super(message, status, code);
      this.name = name;
      this.status = status;
    }
  };
  var AuthSessionMissingError = class extends CustomAuthError {
    constructor() {
      super("Auth session missing!", "AuthSessionMissingError", 400, void 0);
    }
  };
  function isAuthSessionMissingError(error) {
    return isAuthError(error) && error.name === "AuthSessionMissingError";
  }
  var AuthInvalidTokenResponseError = class extends CustomAuthError {
    constructor() {
      super("Auth session or user missing", "AuthInvalidTokenResponseError", 500, void 0);
    }
  };
  var AuthInvalidCredentialsError = class extends CustomAuthError {
    constructor(message) {
      super(message, "AuthInvalidCredentialsError", 400, void 0);
    }
  };
  var AuthImplicitGrantRedirectError = class extends CustomAuthError {
    constructor(message, details = null) {
      super(message, "AuthImplicitGrantRedirectError", 500, void 0);
      this.details = null;
      this.details = details;
    }
    toJSON() {
      return {
        name: this.name,
        message: this.message,
        status: this.status,
        details: this.details
      };
    }
  };
  function isAuthImplicitGrantRedirectError(error) {
    return isAuthError(error) && error.name === "AuthImplicitGrantRedirectError";
  }
  var AuthPKCEGrantCodeExchangeError = class extends CustomAuthError {
    constructor(message, details = null) {
      super(message, "AuthPKCEGrantCodeExchangeError", 500, void 0);
      this.details = null;
      this.details = details;
    }
    toJSON() {
      return {
        name: this.name,
        message: this.message,
        status: this.status,
        details: this.details
      };
    }
  };
  var AuthRetryableFetchError = class extends CustomAuthError {
    constructor(message, status) {
      super(message, "AuthRetryableFetchError", status, void 0);
    }
  };
  function isAuthRetryableFetchError(error) {
    return isAuthError(error) && error.name === "AuthRetryableFetchError";
  }
  var AuthWeakPasswordError = class extends CustomAuthError {
    constructor(message, status, reasons) {
      super(message, "AuthWeakPasswordError", status, "weak_password");
      this.reasons = reasons;
    }
  };
  var AuthInvalidJwtError = class extends CustomAuthError {
    constructor(message) {
      super(message, "AuthInvalidJwtError", 400, "invalid_jwt");
    }
  };

  // node_modules/@supabase/auth-js/dist/module/lib/base64url.js
  var TO_BASE64URL = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".split("");
  var IGNORE_BASE64URL = " 	\n\r=".split("");
  var FROM_BASE64URL = (() => {
    const charMap = new Array(128);
    for (let i3 = 0; i3 < charMap.length; i3 += 1) {
      charMap[i3] = -1;
    }
    for (let i3 = 0; i3 < IGNORE_BASE64URL.length; i3 += 1) {
      charMap[IGNORE_BASE64URL[i3].charCodeAt(0)] = -2;
    }
    for (let i3 = 0; i3 < TO_BASE64URL.length; i3 += 1) {
      charMap[TO_BASE64URL[i3].charCodeAt(0)] = i3;
    }
    return charMap;
  })();
  function byteToBase64URL(byte, state, emit) {
    if (byte !== null) {
      state.queue = state.queue << 8 | byte;
      state.queuedBits += 8;
      while (state.queuedBits >= 6) {
        const pos = state.queue >> state.queuedBits - 6 & 63;
        emit(TO_BASE64URL[pos]);
        state.queuedBits -= 6;
      }
    } else if (state.queuedBits > 0) {
      state.queue = state.queue << 6 - state.queuedBits;
      state.queuedBits = 6;
      while (state.queuedBits >= 6) {
        const pos = state.queue >> state.queuedBits - 6 & 63;
        emit(TO_BASE64URL[pos]);
        state.queuedBits -= 6;
      }
    }
  }
  function byteFromBase64URL(charCode, state, emit) {
    const bits = FROM_BASE64URL[charCode];
    if (bits > -1) {
      state.queue = state.queue << 6 | bits;
      state.queuedBits += 6;
      while (state.queuedBits >= 8) {
        emit(state.queue >> state.queuedBits - 8 & 255);
        state.queuedBits -= 8;
      }
    } else if (bits === -2) {
      return;
    } else {
      throw new Error(`Invalid Base64-URL character "${String.fromCharCode(charCode)}"`);
    }
  }
  function stringFromBase64URL(str) {
    const conv = [];
    const utf8Emit = (codepoint) => {
      conv.push(String.fromCodePoint(codepoint));
    };
    const utf8State = {
      utf8seq: 0,
      codepoint: 0
    };
    const b64State = { queue: 0, queuedBits: 0 };
    const byteEmit = (byte) => {
      stringFromUTF8(byte, utf8State, utf8Emit);
    };
    for (let i3 = 0; i3 < str.length; i3 += 1) {
      byteFromBase64URL(str.charCodeAt(i3), b64State, byteEmit);
    }
    return conv.join("");
  }
  function codepointToUTF8(codepoint, emit) {
    if (codepoint <= 127) {
      emit(codepoint);
      return;
    } else if (codepoint <= 2047) {
      emit(192 | codepoint >> 6);
      emit(128 | codepoint & 63);
      return;
    } else if (codepoint <= 65535) {
      emit(224 | codepoint >> 12);
      emit(128 | codepoint >> 6 & 63);
      emit(128 | codepoint & 63);
      return;
    } else if (codepoint <= 1114111) {
      emit(240 | codepoint >> 18);
      emit(128 | codepoint >> 12 & 63);
      emit(128 | codepoint >> 6 & 63);
      emit(128 | codepoint & 63);
      return;
    }
    throw new Error(`Unrecognized Unicode codepoint: ${codepoint.toString(16)}`);
  }
  function stringToUTF8(str, emit) {
    for (let i3 = 0; i3 < str.length; i3 += 1) {
      let codepoint = str.charCodeAt(i3);
      if (codepoint > 55295 && codepoint <= 56319) {
        const highSurrogate = (codepoint - 55296) * 1024 & 65535;
        const lowSurrogate = str.charCodeAt(i3 + 1) - 56320 & 65535;
        codepoint = (lowSurrogate | highSurrogate) + 65536;
        i3 += 1;
      }
      codepointToUTF8(codepoint, emit);
    }
  }
  function stringFromUTF8(byte, state, emit) {
    if (state.utf8seq === 0) {
      if (byte <= 127) {
        emit(byte);
        return;
      }
      for (let leadingBit = 1; leadingBit < 6; leadingBit += 1) {
        if ((byte >> 7 - leadingBit & 1) === 0) {
          state.utf8seq = leadingBit;
          break;
        }
      }
      if (state.utf8seq === 2) {
        state.codepoint = byte & 31;
      } else if (state.utf8seq === 3) {
        state.codepoint = byte & 15;
      } else if (state.utf8seq === 4) {
        state.codepoint = byte & 7;
      } else {
        throw new Error("Invalid UTF-8 sequence");
      }
      state.utf8seq -= 1;
    } else if (state.utf8seq > 0) {
      if (byte <= 127) {
        throw new Error("Invalid UTF-8 sequence");
      }
      state.codepoint = state.codepoint << 6 | byte & 63;
      state.utf8seq -= 1;
      if (state.utf8seq === 0) {
        emit(state.codepoint);
      }
    }
  }
  function base64UrlToUint8Array(str) {
    const result = [];
    const state = { queue: 0, queuedBits: 0 };
    const onByte = (byte) => {
      result.push(byte);
    };
    for (let i3 = 0; i3 < str.length; i3 += 1) {
      byteFromBase64URL(str.charCodeAt(i3), state, onByte);
    }
    return new Uint8Array(result);
  }
  function stringToUint8Array(str) {
    const result = [];
    stringToUTF8(str, (byte) => result.push(byte));
    return new Uint8Array(result);
  }
  function bytesToBase64URL(bytes) {
    const result = [];
    const state = { queue: 0, queuedBits: 0 };
    const onChar = (char) => {
      result.push(char);
    };
    bytes.forEach((byte) => byteToBase64URL(byte, state, onChar));
    byteToBase64URL(null, state, onChar);
    return result.join("");
  }

  // node_modules/@supabase/auth-js/dist/module/lib/helpers.js
  function expiresAt(expiresIn) {
    const timeNow = Math.round(Date.now() / 1e3);
    return timeNow + expiresIn;
  }
  function uuid() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
      const r3 = Math.random() * 16 | 0, v = c == "x" ? r3 : r3 & 3 | 8;
      return v.toString(16);
    });
  }
  var isBrowser2 = () => typeof window !== "undefined" && typeof document !== "undefined";
  var localStorageWriteTests = {
    tested: false,
    writable: false
  };
  var supportsLocalStorage = () => {
    if (!isBrowser2()) {
      return false;
    }
    try {
      if (typeof globalThis.localStorage !== "object") {
        return false;
      }
    } catch (e) {
      return false;
    }
    if (localStorageWriteTests.tested) {
      return localStorageWriteTests.writable;
    }
    const randomKey = `lswt-${Math.random()}${Math.random()}`;
    try {
      globalThis.localStorage.setItem(randomKey, randomKey);
      globalThis.localStorage.removeItem(randomKey);
      localStorageWriteTests.tested = true;
      localStorageWriteTests.writable = true;
    } catch (e) {
      localStorageWriteTests.tested = true;
      localStorageWriteTests.writable = false;
    }
    return localStorageWriteTests.writable;
  };
  function parseParametersFromURL(href) {
    const result = {};
    const url = new URL(href);
    if (url.hash && url.hash[0] === "#") {
      try {
        const hashSearchParams = new URLSearchParams(url.hash.substring(1));
        hashSearchParams.forEach((value, key) => {
          result[key] = value;
        });
      } catch (e) {
      }
    }
    url.searchParams.forEach((value, key) => {
      result[key] = value;
    });
    return result;
  }
  var resolveFetch4 = (customFetch) => {
    let _fetch;
    if (customFetch) {
      _fetch = customFetch;
    } else if (typeof fetch === "undefined") {
      _fetch = (...args) => Promise.resolve().then(() => (init_browser(), browser_exports)).then(({ default: fetch3 }) => fetch3(...args));
    } else {
      _fetch = fetch;
    }
    return (...args) => _fetch(...args);
  };
  var looksLikeFetchResponse = (maybeResponse) => {
    return typeof maybeResponse === "object" && maybeResponse !== null && "status" in maybeResponse && "ok" in maybeResponse && "json" in maybeResponse && typeof maybeResponse.json === "function";
  };
  var setItemAsync = async (storage, key, data2) => {
    await storage.setItem(key, JSON.stringify(data2));
  };
  var getItemAsync = async (storage, key) => {
    const value = await storage.getItem(key);
    if (!value) {
      return null;
    }
    try {
      return JSON.parse(value);
    } catch (_a) {
      return value;
    }
  };
  var removeItemAsync = async (storage, key) => {
    await storage.removeItem(key);
  };
  var Deferred = class _Deferred {
    constructor() {
      ;
      this.promise = new _Deferred.promiseConstructor((res, rej) => {
        ;
        this.resolve = res;
        this.reject = rej;
      });
    }
  };
  Deferred.promiseConstructor = Promise;
  function decodeJWT(token) {
    const parts = token.split(".");
    if (parts.length !== 3) {
      throw new AuthInvalidJwtError("Invalid JWT structure");
    }
    for (let i3 = 0; i3 < parts.length; i3++) {
      if (!BASE64URL_REGEX.test(parts[i3])) {
        throw new AuthInvalidJwtError("JWT not in base64url format");
      }
    }
    const data2 = {
      // using base64url lib
      header: JSON.parse(stringFromBase64URL(parts[0])),
      payload: JSON.parse(stringFromBase64URL(parts[1])),
      signature: base64UrlToUint8Array(parts[2]),
      raw: {
        header: parts[0],
        payload: parts[1]
      }
    };
    return data2;
  }
  async function sleep(time) {
    return await new Promise((accept) => {
      setTimeout(() => accept(null), time);
    });
  }
  function retryable(fn, isRetryable) {
    const promise = new Promise((accept, reject) => {
      ;
      (async () => {
        for (let attempt = 0; attempt < Infinity; attempt++) {
          try {
            const result = await fn(attempt);
            if (!isRetryable(attempt, null, result)) {
              accept(result);
              return;
            }
          } catch (e) {
            if (!isRetryable(attempt, e)) {
              reject(e);
              return;
            }
          }
        }
      })();
    });
    return promise;
  }
  function dec2hex(dec) {
    return ("0" + dec.toString(16)).substr(-2);
  }
  function generatePKCEVerifier() {
    const verifierLength = 56;
    const array = new Uint32Array(verifierLength);
    if (typeof crypto === "undefined") {
      const charSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";
      const charSetLen = charSet.length;
      let verifier = "";
      for (let i3 = 0; i3 < verifierLength; i3++) {
        verifier += charSet.charAt(Math.floor(Math.random() * charSetLen));
      }
      return verifier;
    }
    crypto.getRandomValues(array);
    return Array.from(array, dec2hex).join("");
  }
  async function sha256(randomString) {
    const encoder = new TextEncoder();
    const encodedData = encoder.encode(randomString);
    const hash = await crypto.subtle.digest("SHA-256", encodedData);
    const bytes = new Uint8Array(hash);
    return Array.from(bytes).map((c) => String.fromCharCode(c)).join("");
  }
  async function generatePKCEChallenge(verifier) {
    const hasCryptoSupport = typeof crypto !== "undefined" && typeof crypto.subtle !== "undefined" && typeof TextEncoder !== "undefined";
    if (!hasCryptoSupport) {
      console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256.");
      return verifier;
    }
    const hashed = await sha256(verifier);
    return btoa(hashed).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
  }
  async function getCodeChallengeAndMethod(storage, storageKey3, isPasswordRecovery = false) {
    const codeVerifier = generatePKCEVerifier();
    let storedCodeVerifier = codeVerifier;
    if (isPasswordRecovery) {
      storedCodeVerifier += "/PASSWORD_RECOVERY";
    }
    await setItemAsync(storage, `${storageKey3}-code-verifier`, storedCodeVerifier);
    const codeChallenge = await generatePKCEChallenge(codeVerifier);
    const codeChallengeMethod = codeVerifier === codeChallenge ? "plain" : "s256";
    return [codeChallenge, codeChallengeMethod];
  }
  var API_VERSION_REGEX = /^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i;
  function parseResponseAPIVersion(response) {
    const apiVersion = response.headers.get(API_VERSION_HEADER_NAME);
    if (!apiVersion) {
      return null;
    }
    if (!apiVersion.match(API_VERSION_REGEX)) {
      return null;
    }
    try {
      const date = /* @__PURE__ */ new Date(`${apiVersion}T00:00:00.0Z`);
      return date;
    } catch (e) {
      return null;
    }
  }
  function validateExp(exp) {
    if (!exp) {
      throw new Error("Missing exp claim");
    }
    const timeNow = Math.floor(Date.now() / 1e3);
    if (exp <= timeNow) {
      throw new Error("JWT has expired");
    }
  }
  function getAlgorithm(alg) {
    switch (alg) {
      case "RS256":
        return {
          name: "RSASSA-PKCS1-v1_5",
          hash: { name: "SHA-256" }
        };
      case "ES256":
        return {
          name: "ECDSA",
          namedCurve: "P-256",
          hash: { name: "SHA-256" }
        };
      default:
        throw new Error("Invalid alg claim");
    }
  }
  var UUID_REGEX = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;
  function validateUUID(str) {
    if (!UUID_REGEX.test(str)) {
      throw new Error("@supabase/auth-js: Expected parameter to be UUID but is not");
    }
  }
  function userNotAvailableProxy() {
    const proxyTarget = {};
    return new Proxy(proxyTarget, {
      get: (target, prop) => {
        if (prop === "__isUserNotAvailableProxy") {
          return true;
        }
        if (typeof prop === "symbol") {
          const sProp = prop.toString();
          if (sProp === "Symbol(Symbol.toPrimitive)" || sProp === "Symbol(Symbol.toStringTag)" || sProp === "Symbol(util.inspect.custom)") {
            return void 0;
          }
        }
        throw new Error(`@supabase/auth-js: client was created with userStorage option and there was no user stored in the user storage. Accessing the "${prop}" property of the session object is not supported. Please use getUser() instead.`);
      },
      set: (_target, prop) => {
        throw new Error(`@supabase/auth-js: client was created with userStorage option and there was no user stored in the user storage. Setting the "${prop}" property of the session object is not supported. Please use getUser() to fetch a user object you can manipulate.`);
      },
      deleteProperty: (_target, prop) => {
        throw new Error(`@supabase/auth-js: client was created with userStorage option and there was no user stored in the user storage. Deleting the "${prop}" property of the session object is not supported. Please use getUser() to fetch a user object you can manipulate.`);
      }
    });
  }
  function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
  }

  // node_modules/@supabase/auth-js/dist/module/lib/fetch.js
  var __rest = function(s3, e) {
    var t2 = {};
    for (var p in s3) if (Object.prototype.hasOwnProperty.call(s3, p) && e.indexOf(p) < 0)
      t2[p] = s3[p];
    if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p = Object.getOwnPropertySymbols(s3); i3 < p.length; i3++) {
        if (e.indexOf(p[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p[i3]))
          t2[p[i3]] = s3[p[i3]];
      }
    return t2;
  };
  var _getErrorMessage2 = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);
  var NETWORK_ERROR_CODES = [502, 503, 504];
  async function handleError2(error) {
    var _a;
    if (!looksLikeFetchResponse(error)) {
      throw new AuthRetryableFetchError(_getErrorMessage2(error), 0);
    }
    if (NETWORK_ERROR_CODES.includes(error.status)) {
      throw new AuthRetryableFetchError(_getErrorMessage2(error), error.status);
    }
    let data2;
    try {
      data2 = await error.json();
    } catch (e) {
      throw new AuthUnknownError(_getErrorMessage2(e), e);
    }
    let errorCode = void 0;
    const responseAPIVersion = parseResponseAPIVersion(error);
    if (responseAPIVersion && responseAPIVersion.getTime() >= API_VERSIONS["2024-01-01"].timestamp && typeof data2 === "object" && data2 && typeof data2.code === "string") {
      errorCode = data2.code;
    } else if (typeof data2 === "object" && data2 && typeof data2.error_code === "string") {
      errorCode = data2.error_code;
    }
    if (!errorCode) {
      if (typeof data2 === "object" && data2 && typeof data2.weak_password === "object" && data2.weak_password && Array.isArray(data2.weak_password.reasons) && data2.weak_password.reasons.length && data2.weak_password.reasons.reduce((a2, i3) => a2 && typeof i3 === "string", true)) {
        throw new AuthWeakPasswordError(_getErrorMessage2(data2), error.status, data2.weak_password.reasons);
      }
    } else if (errorCode === "weak_password") {
      throw new AuthWeakPasswordError(_getErrorMessage2(data2), error.status, ((_a = data2.weak_password) === null || _a === void 0 ? void 0 : _a.reasons) || []);
    } else if (errorCode === "session_not_found") {
      throw new AuthSessionMissingError();
    }
    throw new AuthApiError(_getErrorMessage2(data2), error.status || 500, errorCode);
  }
  var _getRequestParams2 = (method, options, parameters, body) => {
    const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };
    if (method === "GET") {
      return params;
    }
    params.headers = Object.assign({ "Content-Type": "application/json;charset=UTF-8" }, options === null || options === void 0 ? void 0 : options.headers);
    params.body = JSON.stringify(body);
    return Object.assign(Object.assign({}, params), parameters);
  };
  async function _request(fetcher, method, url, options) {
    var _a;
    const headers = Object.assign({}, options === null || options === void 0 ? void 0 : options.headers);
    if (!headers[API_VERSION_HEADER_NAME]) {
      headers[API_VERSION_HEADER_NAME] = API_VERSIONS["2024-01-01"].name;
    }
    if (options === null || options === void 0 ? void 0 : options.jwt) {
      headers["Authorization"] = `Bearer ${options.jwt}`;
    }
    const qs = (_a = options === null || options === void 0 ? void 0 : options.query) !== null && _a !== void 0 ? _a : {};
    if (options === null || options === void 0 ? void 0 : options.redirectTo) {
      qs["redirect_to"] = options.redirectTo;
    }
    const queryString = Object.keys(qs).length ? "?" + new URLSearchParams(qs).toString() : "";
    const data2 = await _handleRequest2(fetcher, method, url + queryString, {
      headers,
      noResolveJson: options === null || options === void 0 ? void 0 : options.noResolveJson
    }, {}, options === null || options === void 0 ? void 0 : options.body);
    return (options === null || options === void 0 ? void 0 : options.xform) ? options === null || options === void 0 ? void 0 : options.xform(data2) : { data: Object.assign({}, data2), error: null };
  }
  async function _handleRequest2(fetcher, method, url, options, parameters, body) {
    const requestParams = _getRequestParams2(method, options, parameters, body);
    let result;
    try {
      result = await fetcher(url, Object.assign({}, requestParams));
    } catch (e) {
      console.error(e);
      throw new AuthRetryableFetchError(_getErrorMessage2(e), 0);
    }
    if (!result.ok) {
      await handleError2(result);
    }
    if (options === null || options === void 0 ? void 0 : options.noResolveJson) {
      return result;
    }
    try {
      return await result.json();
    } catch (e) {
      await handleError2(e);
    }
  }
  function _sessionResponse(data2) {
    var _a;
    let session = null;
    if (hasSession(data2)) {
      session = Object.assign({}, data2);
      if (!data2.expires_at) {
        session.expires_at = expiresAt(data2.expires_in);
      }
    }
    const user = (_a = data2.user) !== null && _a !== void 0 ? _a : data2;
    return { data: { session, user }, error: null };
  }
  function _sessionResponsePassword(data2) {
    const response = _sessionResponse(data2);
    if (!response.error && data2.weak_password && typeof data2.weak_password === "object" && Array.isArray(data2.weak_password.reasons) && data2.weak_password.reasons.length && data2.weak_password.message && typeof data2.weak_password.message === "string" && data2.weak_password.reasons.reduce((a2, i3) => a2 && typeof i3 === "string", true)) {
      response.data.weak_password = data2.weak_password;
    }
    return response;
  }
  function _userResponse(data2) {
    var _a;
    const user = (_a = data2.user) !== null && _a !== void 0 ? _a : data2;
    return { data: { user }, error: null };
  }
  function _ssoResponse(data2) {
    return { data: data2, error: null };
  }
  function _generateLinkResponse(data2) {
    const { action_link, email_otp, hashed_token, redirect_to, verification_type } = data2, rest = __rest(data2, ["action_link", "email_otp", "hashed_token", "redirect_to", "verification_type"]);
    const properties = {
      action_link,
      email_otp,
      hashed_token,
      redirect_to,
      verification_type
    };
    const user = Object.assign({}, rest);
    return {
      data: {
        properties,
        user
      },
      error: null
    };
  }
  function _noResolveJsonResponse(data2) {
    return data2;
  }
  function hasSession(data2) {
    return data2.access_token && data2.refresh_token && data2.expires_in;
  }

  // node_modules/@supabase/auth-js/dist/module/lib/types.js
  var SIGN_OUT_SCOPES = ["global", "local", "others"];

  // node_modules/@supabase/auth-js/dist/module/GoTrueAdminApi.js
  var __rest2 = function(s3, e) {
    var t2 = {};
    for (var p in s3) if (Object.prototype.hasOwnProperty.call(s3, p) && e.indexOf(p) < 0)
      t2[p] = s3[p];
    if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p = Object.getOwnPropertySymbols(s3); i3 < p.length; i3++) {
        if (e.indexOf(p[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p[i3]))
          t2[p[i3]] = s3[p[i3]];
      }
    return t2;
  };
  var GoTrueAdminApi = class {
    constructor({ url = "", headers = {}, fetch: fetch3 }) {
      this.url = url;
      this.headers = headers;
      this.fetch = resolveFetch4(fetch3);
      this.mfa = {
        listFactors: this._listFactors.bind(this),
        deleteFactor: this._deleteFactor.bind(this)
      };
    }
    /**
     * Removes a logged-in session.
     * @param jwt A valid, logged-in JWT.
     * @param scope The logout sope.
     */
    async signOut(jwt, scope = SIGN_OUT_SCOPES[0]) {
      if (SIGN_OUT_SCOPES.indexOf(scope) < 0) {
        throw new Error(`@supabase/auth-js: Parameter scope must be one of ${SIGN_OUT_SCOPES.join(", ")}`);
      }
      try {
        await _request(this.fetch, "POST", `${this.url}/logout?scope=${scope}`, {
          headers: this.headers,
          jwt,
          noResolveJson: true
        });
        return { data: null, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    /**
     * Sends an invite link to an email address.
     * @param email The email address of the user.
     * @param options Additional options to be included when inviting.
     */
    async inviteUserByEmail(email, options = {}) {
      try {
        return await _request(this.fetch, "POST", `${this.url}/invite`, {
          body: { email, data: options.data },
          headers: this.headers,
          redirectTo: options.redirectTo,
          xform: _userResponse
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null }, error };
        }
        throw error;
      }
    }
    /**
     * Generates email links and OTPs to be sent via a custom email provider.
     * @param email The user's email.
     * @param options.password User password. For signup only.
     * @param options.data Optional user metadata. For signup only.
     * @param options.redirectTo The redirect url which should be appended to the generated link
     */
    async generateLink(params) {
      try {
        const { options } = params, rest = __rest2(params, ["options"]);
        const body = Object.assign(Object.assign({}, rest), options);
        if ("newEmail" in rest) {
          body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;
          delete body["newEmail"];
        }
        return await _request(this.fetch, "POST", `${this.url}/admin/generate_link`, {
          body,
          headers: this.headers,
          xform: _generateLinkResponse,
          redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo
        });
      } catch (error) {
        if (isAuthError(error)) {
          return {
            data: {
              properties: null,
              user: null
            },
            error
          };
        }
        throw error;
      }
    }
    // User Admin API
    /**
     * Creates a new user.
     * This function should only be called on a server. Never expose your `service_role` key in the browser.
     */
    async createUser(attributes) {
      try {
        return await _request(this.fetch, "POST", `${this.url}/admin/users`, {
          body: attributes,
          headers: this.headers,
          xform: _userResponse
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null }, error };
        }
        throw error;
      }
    }
    /**
     * Get a list of users.
     *
     * This function should only be called on a server. Never expose your `service_role` key in the browser.
     * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.
     */
    async listUsers(params) {
      var _a, _b, _c, _d, _e, _f, _g;
      try {
        const pagination = { nextPage: null, lastPage: 0, total: 0 };
        const response = await _request(this.fetch, "GET", `${this.url}/admin/users`, {
          headers: this.headers,
          noResolveJson: true,
          query: {
            page: (_b = (_a = params === null || params === void 0 ? void 0 : params.page) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : "",
            per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ""
          },
          xform: _noResolveJsonResponse
        });
        if (response.error)
          throw response.error;
        const users = await response.json();
        const total = (_e = response.headers.get("x-total-count")) !== null && _e !== void 0 ? _e : 0;
        const links = (_g = (_f = response.headers.get("link")) === null || _f === void 0 ? void 0 : _f.split(",")) !== null && _g !== void 0 ? _g : [];
        if (links.length > 0) {
          links.forEach((link) => {
            const page = parseInt(link.split(";")[0].split("=")[1].substring(0, 1));
            const rel = JSON.parse(link.split(";")[1].split("=")[1]);
            pagination[`${rel}Page`] = page;
          });
          pagination.total = parseInt(total);
        }
        return { data: Object.assign(Object.assign({}, users), pagination), error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { users: [] }, error };
        }
        throw error;
      }
    }
    /**
     * Get user by id.
     *
     * @param uid The user's unique identifier
     *
     * This function should only be called on a server. Never expose your `service_role` key in the browser.
     */
    async getUserById(uid2) {
      validateUUID(uid2);
      try {
        return await _request(this.fetch, "GET", `${this.url}/admin/users/${uid2}`, {
          headers: this.headers,
          xform: _userResponse
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null }, error };
        }
        throw error;
      }
    }
    /**
     * Updates the user data.
     *
     * @param attributes The data you want to update.
     *
     * This function should only be called on a server. Never expose your `service_role` key in the browser.
     */
    async updateUserById(uid2, attributes) {
      validateUUID(uid2);
      try {
        return await _request(this.fetch, "PUT", `${this.url}/admin/users/${uid2}`, {
          body: attributes,
          headers: this.headers,
          xform: _userResponse
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null }, error };
        }
        throw error;
      }
    }
    /**
     * Delete a user. Requires a `service_role` key.
     *
     * @param id The user id you want to remove.
     * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema. Soft deletion allows user identification from the hashed user ID but is not reversible.
     * Defaults to false for backward compatibility.
     *
     * This function should only be called on a server. Never expose your `service_role` key in the browser.
     */
    async deleteUser(id, shouldSoftDelete = false) {
      validateUUID(id);
      try {
        return await _request(this.fetch, "DELETE", `${this.url}/admin/users/${id}`, {
          headers: this.headers,
          body: {
            should_soft_delete: shouldSoftDelete
          },
          xform: _userResponse
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null }, error };
        }
        throw error;
      }
    }
    async _listFactors(params) {
      validateUUID(params.userId);
      try {
        const { data: data2, error } = await _request(this.fetch, "GET", `${this.url}/admin/users/${params.userId}/factors`, {
          headers: this.headers,
          xform: (factors) => {
            return { data: { factors }, error: null };
          }
        });
        return { data: data2, error };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    async _deleteFactor(params) {
      validateUUID(params.userId);
      validateUUID(params.id);
      try {
        const data2 = await _request(this.fetch, "DELETE", `${this.url}/admin/users/${params.userId}/factors/${params.id}`, {
          headers: this.headers
        });
        return { data: data2, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
  };

  // node_modules/@supabase/auth-js/dist/module/lib/local-storage.js
  function memoryLocalStorageAdapter(store = {}) {
    return {
      getItem: (key) => {
        return store[key] || null;
      },
      setItem: (key, value) => {
        store[key] = value;
      },
      removeItem: (key) => {
        delete store[key];
      }
    };
  }

  // node_modules/@supabase/auth-js/dist/module/lib/polyfills.js
  function polyfillGlobalThis() {
    if (typeof globalThis === "object")
      return;
    try {
      Object.defineProperty(Object.prototype, "__magic__", {
        get: function() {
          return this;
        },
        configurable: true
      });
      __magic__.globalThis = __magic__;
      delete Object.prototype.__magic__;
    } catch (e) {
      if (typeof self !== "undefined") {
        self.globalThis = self;
      }
    }
  }

  // node_modules/@supabase/auth-js/dist/module/lib/locks.js
  var internals = {
    /**
     * @experimental
     */
    debug: !!(globalThis && supportsLocalStorage() && globalThis.localStorage && globalThis.localStorage.getItem("supabase.gotrue-js.locks.debug") === "true")
  };
  var LockAcquireTimeoutError = class extends Error {
    constructor(message) {
      super(message);
      this.isAcquireTimeout = true;
    }
  };
  var NavigatorLockAcquireTimeoutError = class extends LockAcquireTimeoutError {
  };
  async function navigatorLock(name, acquireTimeout, fn) {
    if (internals.debug) {
      console.log("@supabase/gotrue-js: navigatorLock: acquire lock", name, acquireTimeout);
    }
    const abortController = new globalThis.AbortController();
    if (acquireTimeout > 0) {
      setTimeout(() => {
        abortController.abort();
        if (internals.debug) {
          console.log("@supabase/gotrue-js: navigatorLock acquire timed out", name);
        }
      }, acquireTimeout);
    }
    return await Promise.resolve().then(() => globalThis.navigator.locks.request(name, acquireTimeout === 0 ? {
      mode: "exclusive",
      ifAvailable: true
    } : {
      mode: "exclusive",
      signal: abortController.signal
    }, async (lock) => {
      if (lock) {
        if (internals.debug) {
          console.log("@supabase/gotrue-js: navigatorLock: acquired", name, lock.name);
        }
        try {
          return await fn();
        } finally {
          if (internals.debug) {
            console.log("@supabase/gotrue-js: navigatorLock: released", name, lock.name);
          }
        }
      } else {
        if (acquireTimeout === 0) {
          if (internals.debug) {
            console.log("@supabase/gotrue-js: navigatorLock: not immediately available", name);
          }
          throw new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock "${name}" immediately failed`);
        } else {
          if (internals.debug) {
            try {
              const result = await globalThis.navigator.locks.query();
              console.log("@supabase/gotrue-js: Navigator LockManager state", JSON.stringify(result, null, "  "));
            } catch (e) {
              console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state", e);
            }
          }
          console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request");
          return await fn();
        }
      }
    }));
  }

  // node_modules/@supabase/auth-js/dist/module/GoTrueClient.js
  polyfillGlobalThis();
  var DEFAULT_OPTIONS = {
    url: GOTRUE_URL,
    storageKey: STORAGE_KEY,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    headers: DEFAULT_HEADERS3,
    flowType: "implicit",
    debug: false,
    hasCustomAuthorizationHeader: false
  };
  async function lockNoOp(name, acquireTimeout, fn) {
    return await fn();
  }
  var GLOBAL_JWKS = {};
  var GoTrueClient = class _GoTrueClient {
    /**
     * Create a new client for use in the browser.
     */
    constructor(options) {
      var _a, _b;
      this.userStorage = null;
      this.memoryStorage = null;
      this.stateChangeEmitters = /* @__PURE__ */ new Map();
      this.autoRefreshTicker = null;
      this.visibilityChangedCallback = null;
      this.refreshingDeferred = null;
      this.initializePromise = null;
      this.detectSessionInUrl = true;
      this.hasCustomAuthorizationHeader = false;
      this.suppressGetSessionWarning = false;
      this.lockAcquired = false;
      this.pendingInLock = [];
      this.broadcastChannel = null;
      this.logger = console.log;
      this.instanceID = _GoTrueClient.nextInstanceID;
      _GoTrueClient.nextInstanceID += 1;
      if (this.instanceID > 0 && isBrowser2()) {
        console.warn("Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.");
      }
      const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);
      this.logDebugMessages = !!settings.debug;
      if (typeof settings.debug === "function") {
        this.logger = settings.debug;
      }
      this.persistSession = settings.persistSession;
      this.storageKey = settings.storageKey;
      this.autoRefreshToken = settings.autoRefreshToken;
      this.admin = new GoTrueAdminApi({
        url: settings.url,
        headers: settings.headers,
        fetch: settings.fetch
      });
      this.url = settings.url;
      this.headers = settings.headers;
      this.fetch = resolveFetch4(settings.fetch);
      this.lock = settings.lock || lockNoOp;
      this.detectSessionInUrl = settings.detectSessionInUrl;
      this.flowType = settings.flowType;
      this.hasCustomAuthorizationHeader = settings.hasCustomAuthorizationHeader;
      if (settings.lock) {
        this.lock = settings.lock;
      } else if (isBrowser2() && ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.navigator) === null || _a === void 0 ? void 0 : _a.locks)) {
        this.lock = navigatorLock;
      } else {
        this.lock = lockNoOp;
      }
      if (!this.jwks) {
        this.jwks = { keys: [] };
        this.jwks_cached_at = Number.MIN_SAFE_INTEGER;
      }
      this.mfa = {
        verify: this._verify.bind(this),
        enroll: this._enroll.bind(this),
        unenroll: this._unenroll.bind(this),
        challenge: this._challenge.bind(this),
        listFactors: this._listFactors.bind(this),
        challengeAndVerify: this._challengeAndVerify.bind(this),
        getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this)
      };
      if (this.persistSession) {
        if (settings.storage) {
          this.storage = settings.storage;
        } else {
          if (supportsLocalStorage()) {
            this.storage = globalThis.localStorage;
          } else {
            this.memoryStorage = {};
            this.storage = memoryLocalStorageAdapter(this.memoryStorage);
          }
        }
        if (settings.userStorage) {
          this.userStorage = settings.userStorage;
        }
      } else {
        this.memoryStorage = {};
        this.storage = memoryLocalStorageAdapter(this.memoryStorage);
      }
      if (isBrowser2() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {
        try {
          this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey);
        } catch (e) {
          console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available", e);
        }
        (_b = this.broadcastChannel) === null || _b === void 0 ? void 0 : _b.addEventListener("message", async (event) => {
          this._debug("received broadcast notification from other tab or client", event);
          await this._notifyAllSubscribers(event.data.event, event.data.session, false);
        });
      }
      this.initialize();
    }
    /**
     * The JWKS used for verifying asymmetric JWTs
     */
    get jwks() {
      var _a, _b;
      return (_b = (_a = GLOBAL_JWKS[this.storageKey]) === null || _a === void 0 ? void 0 : _a.jwks) !== null && _b !== void 0 ? _b : { keys: [] };
    }
    set jwks(value) {
      GLOBAL_JWKS[this.storageKey] = Object.assign(Object.assign({}, GLOBAL_JWKS[this.storageKey]), { jwks: value });
    }
    get jwks_cached_at() {
      var _a, _b;
      return (_b = (_a = GLOBAL_JWKS[this.storageKey]) === null || _a === void 0 ? void 0 : _a.cachedAt) !== null && _b !== void 0 ? _b : Number.MIN_SAFE_INTEGER;
    }
    set jwks_cached_at(value) {
      GLOBAL_JWKS[this.storageKey] = Object.assign(Object.assign({}, GLOBAL_JWKS[this.storageKey]), { cachedAt: value });
    }
    _debug(...args) {
      if (this.logDebugMessages) {
        this.logger(`GoTrueClient@${this.instanceID} (${version4}) ${(/* @__PURE__ */ new Date()).toISOString()}`, ...args);
      }
      return this;
    }
    /**
     * Initializes the client session either from the url or from storage.
     * This method is automatically called when instantiating the client, but should also be called
     * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).
     */
    async initialize() {
      if (this.initializePromise) {
        return await this.initializePromise;
      }
      this.initializePromise = (async () => {
        return await this._acquireLock(-1, async () => {
          return await this._initialize();
        });
      })();
      return await this.initializePromise;
    }
    /**
     * IMPORTANT:
     * 1. Never throw in this method, as it is called from the constructor
     * 2. Never return a session from this method as it would be cached over
     *    the whole lifetime of the client
     */
    async _initialize() {
      var _a;
      try {
        const params = parseParametersFromURL(window.location.href);
        let callbackUrlType = "none";
        if (this._isImplicitGrantCallback(params)) {
          callbackUrlType = "implicit";
        } else if (await this._isPKCECallback(params)) {
          callbackUrlType = "pkce";
        }
        if (isBrowser2() && this.detectSessionInUrl && callbackUrlType !== "none") {
          const { data: data2, error } = await this._getSessionFromURL(params, callbackUrlType);
          if (error) {
            this._debug("#_initialize()", "error detecting session from URL", error);
            if (isAuthImplicitGrantRedirectError(error)) {
              const errorCode = (_a = error.details) === null || _a === void 0 ? void 0 : _a.code;
              if (errorCode === "identity_already_exists" || errorCode === "identity_not_found" || errorCode === "single_identity_not_deletable") {
                return { error };
              }
            }
            await this._removeSession();
            return { error };
          }
          const { session, redirectType } = data2;
          this._debug("#_initialize()", "detected session in URL", session, "redirect type", redirectType);
          await this._saveSession(session);
          setTimeout(async () => {
            if (redirectType === "recovery") {
              await this._notifyAllSubscribers("PASSWORD_RECOVERY", session);
            } else {
              await this._notifyAllSubscribers("SIGNED_IN", session);
            }
          }, 0);
          return { error: null };
        }
        await this._recoverAndRefresh();
        return { error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { error };
        }
        return {
          error: new AuthUnknownError("Unexpected error during initialization", error)
        };
      } finally {
        await this._handleVisibilityChange();
        this._debug("#_initialize()", "end");
      }
    }
    /**
     * Creates a new anonymous user.
     *
     * @returns A session where the is_anonymous claim in the access token JWT set to true
     */
    async signInAnonymously(credentials) {
      var _a, _b, _c;
      try {
        const res = await _request(this.fetch, "POST", `${this.url}/signup`, {
          headers: this.headers,
          body: {
            data: (_b = (_a = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _a === void 0 ? void 0 : _a.data) !== null && _b !== void 0 ? _b : {},
            gotrue_meta_security: { captcha_token: (_c = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _c === void 0 ? void 0 : _c.captchaToken }
          },
          xform: _sessionResponse
        });
        const { data: data2, error } = res;
        if (error || !data2) {
          return { data: { user: null, session: null }, error };
        }
        const session = data2.session;
        const user = data2.user;
        if (data2.session) {
          await this._saveSession(data2.session);
          await this._notifyAllSubscribers("SIGNED_IN", session);
        }
        return { data: { user, session }, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Creates a new user.
     *
     * Be aware that if a user account exists in the system you may get back an
     * error message that attempts to hide this information from the user.
     * This method has support for PKCE via email signups. The PKCE flow cannot be used when autoconfirm is enabled.
     *
     * @returns A logged-in session if the server has "autoconfirm" ON
     * @returns A user if the server has "autoconfirm" OFF
     */
    async signUp(credentials) {
      var _a, _b, _c;
      try {
        let res;
        if ("email" in credentials) {
          const { email, password, options } = credentials;
          let codeChallenge = null;
          let codeChallengeMethod = null;
          if (this.flowType === "pkce") {
            ;
            [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
          }
          res = await _request(this.fetch, "POST", `${this.url}/signup`, {
            headers: this.headers,
            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,
            body: {
              email,
              password,
              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
              code_challenge: codeChallenge,
              code_challenge_method: codeChallengeMethod
            },
            xform: _sessionResponse
          });
        } else if ("phone" in credentials) {
          const { phone, password, options } = credentials;
          res = await _request(this.fetch, "POST", `${this.url}/signup`, {
            headers: this.headers,
            body: {
              phone,
              password,
              data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},
              channel: (_c = options === null || options === void 0 ? void 0 : options.channel) !== null && _c !== void 0 ? _c : "sms",
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
            },
            xform: _sessionResponse
          });
        } else {
          throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
        }
        const { data: data2, error } = res;
        if (error || !data2) {
          return { data: { user: null, session: null }, error };
        }
        const session = data2.session;
        const user = data2.user;
        if (data2.session) {
          await this._saveSession(data2.session);
          await this._notifyAllSubscribers("SIGNED_IN", session);
        }
        return { data: { user, session }, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Log in an existing user with an email and password or phone and password.
     *
     * Be aware that you may get back an error message that will not distinguish
     * between the cases where the account does not exist or that the
     * email/phone and password combination is wrong or that the account can only
     * be accessed via social login.
     */
    async signInWithPassword(credentials) {
      try {
        let res;
        if ("email" in credentials) {
          const { email, password, options } = credentials;
          res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
            headers: this.headers,
            body: {
              email,
              password,
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
            },
            xform: _sessionResponsePassword
          });
        } else if ("phone" in credentials) {
          const { phone, password, options } = credentials;
          res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=password`, {
            headers: this.headers,
            body: {
              phone,
              password,
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
            },
            xform: _sessionResponsePassword
          });
        } else {
          throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a password");
        }
        const { data: data2, error } = res;
        if (error) {
          return { data: { user: null, session: null }, error };
        } else if (!data2 || !data2.session || !data2.user) {
          return { data: { user: null, session: null }, error: new AuthInvalidTokenResponseError() };
        }
        if (data2.session) {
          await this._saveSession(data2.session);
          await this._notifyAllSubscribers("SIGNED_IN", data2.session);
        }
        return {
          data: Object.assign({ user: data2.user, session: data2.session }, data2.weak_password ? { weakPassword: data2.weak_password } : null),
          error
        };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Log in an existing user via a third-party provider.
     * This method supports the PKCE flow.
     */
    async signInWithOAuth(credentials) {
      var _a, _b, _c, _d;
      return await this._handleProviderSignIn(credentials.provider, {
        redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,
        scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,
        queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,
        skipBrowserRedirect: (_d = credentials.options) === null || _d === void 0 ? void 0 : _d.skipBrowserRedirect
      });
    }
    /**
     * Log in an existing user by exchanging an Auth Code issued during the PKCE flow.
     */
    async exchangeCodeForSession(authCode) {
      await this.initializePromise;
      return this._acquireLock(-1, async () => {
        return this._exchangeCodeForSession(authCode);
      });
    }
    /**
     * Signs in a user by verifying a message signed by the user's private key.
     * Only Solana supported at this time, using the Sign in with Solana standard.
     */
    async signInWithWeb3(credentials) {
      const { chain } = credentials;
      if (chain === "solana") {
        return await this.signInWithSolana(credentials);
      }
      throw new Error(`@supabase/auth-js: Unsupported chain "${chain}"`);
    }
    async signInWithSolana(credentials) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
      let message;
      let signature;
      if ("message" in credentials) {
        message = credentials.message;
        signature = credentials.signature;
      } else {
        const { chain, wallet, statement, options } = credentials;
        let resolvedWallet;
        if (!isBrowser2()) {
          if (typeof wallet !== "object" || !(options === null || options === void 0 ? void 0 : options.url)) {
            throw new Error("@supabase/auth-js: Both wallet and url must be specified in non-browser environments.");
          }
          resolvedWallet = wallet;
        } else if (typeof wallet === "object") {
          resolvedWallet = wallet;
        } else {
          const windowAny = window;
          if ("solana" in windowAny && typeof windowAny.solana === "object" && ("signIn" in windowAny.solana && typeof windowAny.solana.signIn === "function" || "signMessage" in windowAny.solana && typeof windowAny.solana.signMessage === "function")) {
            resolvedWallet = windowAny.solana;
          } else {
            throw new Error(`@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.`);
          }
        }
        const url = new URL((_a = options === null || options === void 0 ? void 0 : options.url) !== null && _a !== void 0 ? _a : window.location.href);
        if ("signIn" in resolvedWallet && resolvedWallet.signIn) {
          const output = await resolvedWallet.signIn(Object.assign(Object.assign(Object.assign({ issuedAt: (/* @__PURE__ */ new Date()).toISOString() }, options === null || options === void 0 ? void 0 : options.signInWithSolana), {
            // non-overridable properties
            version: "1",
            domain: url.host,
            uri: url.href
          }), statement ? { statement } : null));
          let outputToProcess;
          if (Array.isArray(output) && output[0] && typeof output[0] === "object") {
            outputToProcess = output[0];
          } else if (output && typeof output === "object" && "signedMessage" in output && "signature" in output) {
            outputToProcess = output;
          } else {
            throw new Error("@supabase/auth-js: Wallet method signIn() returned unrecognized value");
          }
          if ("signedMessage" in outputToProcess && "signature" in outputToProcess && (typeof outputToProcess.signedMessage === "string" || outputToProcess.signedMessage instanceof Uint8Array) && outputToProcess.signature instanceof Uint8Array) {
            message = typeof outputToProcess.signedMessage === "string" ? outputToProcess.signedMessage : new TextDecoder().decode(outputToProcess.signedMessage);
            signature = outputToProcess.signature;
          } else {
            throw new Error("@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields");
          }
        } else {
          if (!("signMessage" in resolvedWallet) || typeof resolvedWallet.signMessage !== "function" || !("publicKey" in resolvedWallet) || typeof resolvedWallet !== "object" || !resolvedWallet.publicKey || !("toBase58" in resolvedWallet.publicKey) || typeof resolvedWallet.publicKey.toBase58 !== "function") {
            throw new Error("@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API");
          }
          message = [
            `${url.host} wants you to sign in with your Solana account:`,
            resolvedWallet.publicKey.toBase58(),
            ...statement ? ["", statement, ""] : [""],
            "Version: 1",
            `URI: ${url.href}`,
            `Issued At: ${(_c = (_b = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _b === void 0 ? void 0 : _b.issuedAt) !== null && _c !== void 0 ? _c : (/* @__PURE__ */ new Date()).toISOString()}`,
            ...((_d = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _d === void 0 ? void 0 : _d.notBefore) ? [`Not Before: ${options.signInWithSolana.notBefore}`] : [],
            ...((_e = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _e === void 0 ? void 0 : _e.expirationTime) ? [`Expiration Time: ${options.signInWithSolana.expirationTime}`] : [],
            ...((_f = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _f === void 0 ? void 0 : _f.chainId) ? [`Chain ID: ${options.signInWithSolana.chainId}`] : [],
            ...((_g = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _g === void 0 ? void 0 : _g.nonce) ? [`Nonce: ${options.signInWithSolana.nonce}`] : [],
            ...((_h = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _h === void 0 ? void 0 : _h.requestId) ? [`Request ID: ${options.signInWithSolana.requestId}`] : [],
            ...((_k = (_j = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _j === void 0 ? void 0 : _j.resources) === null || _k === void 0 ? void 0 : _k.length) ? [
              "Resources",
              ...options.signInWithSolana.resources.map((resource) => `- ${resource}`)
            ] : []
          ].join("\n");
          const maybeSignature = await resolvedWallet.signMessage(new TextEncoder().encode(message), "utf8");
          if (!maybeSignature || !(maybeSignature instanceof Uint8Array)) {
            throw new Error("@supabase/auth-js: Wallet signMessage() API returned an recognized value");
          }
          signature = maybeSignature;
        }
      }
      try {
        const { data: data2, error } = await _request(this.fetch, "POST", `${this.url}/token?grant_type=web3`, {
          headers: this.headers,
          body: Object.assign({ chain: "solana", message, signature: bytesToBase64URL(signature) }, ((_l = credentials.options) === null || _l === void 0 ? void 0 : _l.captchaToken) ? { gotrue_meta_security: { captcha_token: (_m = credentials.options) === null || _m === void 0 ? void 0 : _m.captchaToken } } : null),
          xform: _sessionResponse
        });
        if (error) {
          throw error;
        }
        if (!data2 || !data2.session || !data2.user) {
          return {
            data: { user: null, session: null },
            error: new AuthInvalidTokenResponseError()
          };
        }
        if (data2.session) {
          await this._saveSession(data2.session);
          await this._notifyAllSubscribers("SIGNED_IN", data2.session);
        }
        return { data: Object.assign({}, data2), error };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    async _exchangeCodeForSession(authCode) {
      const storageItem = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`);
      const [codeVerifier, redirectType] = (storageItem !== null && storageItem !== void 0 ? storageItem : "").split("/");
      try {
        const { data: data2, error } = await _request(this.fetch, "POST", `${this.url}/token?grant_type=pkce`, {
          headers: this.headers,
          body: {
            auth_code: authCode,
            code_verifier: codeVerifier
          },
          xform: _sessionResponse
        });
        await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
        if (error) {
          throw error;
        }
        if (!data2 || !data2.session || !data2.user) {
          return {
            data: { user: null, session: null, redirectType: null },
            error: new AuthInvalidTokenResponseError()
          };
        }
        if (data2.session) {
          await this._saveSession(data2.session);
          await this._notifyAllSubscribers("SIGNED_IN", data2.session);
        }
        return { data: Object.assign(Object.assign({}, data2), { redirectType: redirectType !== null && redirectType !== void 0 ? redirectType : null }), error };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null, redirectType: null }, error };
        }
        throw error;
      }
    }
    /**
     * Allows signing in with an OIDC ID token. The authentication provider used
     * should be enabled and configured.
     */
    async signInWithIdToken(credentials) {
      try {
        const { options, provider, token, access_token, nonce } = credentials;
        const res = await _request(this.fetch, "POST", `${this.url}/token?grant_type=id_token`, {
          headers: this.headers,
          body: {
            provider,
            id_token: token,
            access_token,
            nonce,
            gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
          },
          xform: _sessionResponse
        });
        const { data: data2, error } = res;
        if (error) {
          return { data: { user: null, session: null }, error };
        } else if (!data2 || !data2.session || !data2.user) {
          return {
            data: { user: null, session: null },
            error: new AuthInvalidTokenResponseError()
          };
        }
        if (data2.session) {
          await this._saveSession(data2.session);
          await this._notifyAllSubscribers("SIGNED_IN", data2.session);
        }
        return { data: data2, error };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Log in a user using magiclink or a one-time password (OTP).
     *
     * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.
     * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.
     * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.
     *
     * Be aware that you may get back an error message that will not distinguish
     * between the cases where the account does not exist or, that the account
     * can only be accessed via social login.
     *
     * Do note that you will need to configure a Whatsapp sender on Twilio
     * if you are using phone sign in with the 'whatsapp' channel. The whatsapp
     * channel is not supported on other providers
     * at this time.
     * This method supports PKCE when an email is passed.
     */
    async signInWithOtp(credentials) {
      var _a, _b, _c, _d, _e;
      try {
        if ("email" in credentials) {
          const { email, options } = credentials;
          let codeChallenge = null;
          let codeChallengeMethod = null;
          if (this.flowType === "pkce") {
            ;
            [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
          }
          const { error } = await _request(this.fetch, "POST", `${this.url}/otp`, {
            headers: this.headers,
            body: {
              email,
              data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},
              create_user: (_b = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _b !== void 0 ? _b : true,
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
              code_challenge: codeChallenge,
              code_challenge_method: codeChallengeMethod
            },
            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo
          });
          return { data: { user: null, session: null }, error };
        }
        if ("phone" in credentials) {
          const { phone, options } = credentials;
          const { data: data2, error } = await _request(this.fetch, "POST", `${this.url}/otp`, {
            headers: this.headers,
            body: {
              phone,
              data: (_c = options === null || options === void 0 ? void 0 : options.data) !== null && _c !== void 0 ? _c : {},
              create_user: (_d = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _d !== void 0 ? _d : true,
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },
              channel: (_e = options === null || options === void 0 ? void 0 : options.channel) !== null && _e !== void 0 ? _e : "sms"
            }
          });
          return { data: { user: null, session: null, messageId: data2 === null || data2 === void 0 ? void 0 : data2.message_id }, error };
        }
        throw new AuthInvalidCredentialsError("You must provide either an email or phone number.");
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Log in a user given a User supplied OTP or TokenHash received through mobile or email.
     */
    async verifyOtp(params) {
      var _a, _b;
      try {
        let redirectTo = void 0;
        let captchaToken = void 0;
        if ("options" in params) {
          redirectTo = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo;
          captchaToken = (_b = params.options) === null || _b === void 0 ? void 0 : _b.captchaToken;
        }
        const { data: data2, error } = await _request(this.fetch, "POST", `${this.url}/verify`, {
          headers: this.headers,
          body: Object.assign(Object.assign({}, params), { gotrue_meta_security: { captcha_token: captchaToken } }),
          redirectTo,
          xform: _sessionResponse
        });
        if (error) {
          throw error;
        }
        if (!data2) {
          throw new Error("An error occurred on token verification.");
        }
        const session = data2.session;
        const user = data2.user;
        if (session === null || session === void 0 ? void 0 : session.access_token) {
          await this._saveSession(session);
          await this._notifyAllSubscribers(params.type == "recovery" ? "PASSWORD_RECOVERY" : "SIGNED_IN", session);
        }
        return { data: { user, session }, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Attempts a single-sign on using an enterprise Identity Provider. A
     * successful SSO attempt will redirect the current page to the identity
     * provider authorization page. The redirect URL is implementation and SSO
     * protocol specific.
     *
     * You can use it by providing a SSO domain. Typically you can extract this
     * domain by asking users for their email address. If this domain is
     * registered on the Auth instance the redirect will use that organization's
     * currently active SSO Identity Provider for the login.
     *
     * If you have built an organization-specific login page, you can use the
     * organization's SSO Identity Provider UUID directly instead.
     */
    async signInWithSSO(params) {
      var _a, _b, _c;
      try {
        let codeChallenge = null;
        let codeChallengeMethod = null;
        if (this.flowType === "pkce") {
          ;
          [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
        }
        return await _request(this.fetch, "POST", `${this.url}/sso`, {
          body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, "providerId" in params ? { provider_id: params.providerId } : null), "domain" in params ? { domain: params.domain } : null), { redirect_to: (_b = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo) !== null && _b !== void 0 ? _b : void 0 }), ((_c = params === null || params === void 0 ? void 0 : params.options) === null || _c === void 0 ? void 0 : _c.captchaToken) ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } } : null), { skip_http_redirect: true, code_challenge: codeChallenge, code_challenge_method: codeChallengeMethod }),
          headers: this.headers,
          xform: _ssoResponse
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    /**
     * Sends a reauthentication OTP to the user's email or phone number.
     * Requires the user to be signed-in.
     */
    async reauthenticate() {
      await this.initializePromise;
      return await this._acquireLock(-1, async () => {
        return await this._reauthenticate();
      });
    }
    async _reauthenticate() {
      try {
        return await this._useSession(async (result) => {
          const { data: { session }, error: sessionError } = result;
          if (sessionError)
            throw sessionError;
          if (!session)
            throw new AuthSessionMissingError();
          const { error } = await _request(this.fetch, "GET", `${this.url}/reauthenticate`, {
            headers: this.headers,
            jwt: session.access_token
          });
          return { data: { user: null, session: null }, error };
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Resends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.
     */
    async resend(credentials) {
      try {
        const endpoint = `${this.url}/resend`;
        if ("email" in credentials) {
          const { email, type, options } = credentials;
          const { error } = await _request(this.fetch, "POST", endpoint, {
            headers: this.headers,
            body: {
              email,
              type,
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
            },
            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo
          });
          return { data: { user: null, session: null }, error };
        } else if ("phone" in credentials) {
          const { phone, type, options } = credentials;
          const { data: data2, error } = await _request(this.fetch, "POST", endpoint, {
            headers: this.headers,
            body: {
              phone,
              type,
              gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken }
            }
          });
          return { data: { user: null, session: null, messageId: data2 === null || data2 === void 0 ? void 0 : data2.message_id }, error };
        }
        throw new AuthInvalidCredentialsError("You must provide either an email or phone number and a type");
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Returns the session, refreshing it if necessary.
     *
     * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.
     *
     * **IMPORTANT:** This method loads values directly from the storage attached
     * to the client. If that storage is based on request cookies for example,
     * the values in it may not be authentic and therefore it's strongly advised
     * against using this method and its results in such circumstances. A warning
     * will be emitted if this is detected. Use {@link #getUser()} instead.
     */
    async getSession() {
      await this.initializePromise;
      const result = await this._acquireLock(-1, async () => {
        return this._useSession(async (result2) => {
          return result2;
        });
      });
      return result;
    }
    /**
     * Acquires a global lock based on the storage key.
     */
    async _acquireLock(acquireTimeout, fn) {
      this._debug("#_acquireLock", "begin", acquireTimeout);
      try {
        if (this.lockAcquired) {
          const last = this.pendingInLock.length ? this.pendingInLock[this.pendingInLock.length - 1] : Promise.resolve();
          const result = (async () => {
            await last;
            return await fn();
          })();
          this.pendingInLock.push((async () => {
            try {
              await result;
            } catch (e) {
            }
          })());
          return result;
        }
        return await this.lock(`lock:${this.storageKey}`, acquireTimeout, async () => {
          this._debug("#_acquireLock", "lock acquired for storage key", this.storageKey);
          try {
            this.lockAcquired = true;
            const result = fn();
            this.pendingInLock.push((async () => {
              try {
                await result;
              } catch (e) {
              }
            })());
            await result;
            while (this.pendingInLock.length) {
              const waitOn = [...this.pendingInLock];
              await Promise.all(waitOn);
              this.pendingInLock.splice(0, waitOn.length);
            }
            return await result;
          } finally {
            this._debug("#_acquireLock", "lock released for storage key", this.storageKey);
            this.lockAcquired = false;
          }
        });
      } finally {
        this._debug("#_acquireLock", "end");
      }
    }
    /**
     * Use instead of {@link #getSession} inside the library. It is
     * semantically usually what you want, as getting a session involves some
     * processing afterwards that requires only one client operating on the
     * session at once across multiple tabs or processes.
     */
    async _useSession(fn) {
      this._debug("#_useSession", "begin");
      try {
        const result = await this.__loadSession();
        return await fn(result);
      } finally {
        this._debug("#_useSession", "end");
      }
    }
    /**
     * NEVER USE DIRECTLY!
     *
     * Always use {@link #_useSession}.
     */
    async __loadSession() {
      this._debug("#__loadSession()", "begin");
      if (!this.lockAcquired) {
        this._debug("#__loadSession()", "used outside of an acquired lock!", new Error().stack);
      }
      try {
        let currentSession = null;
        const maybeSession = await getItemAsync(this.storage, this.storageKey);
        this._debug("#getSession()", "session from storage", maybeSession);
        if (maybeSession !== null) {
          if (this._isValidSession(maybeSession)) {
            currentSession = maybeSession;
          } else {
            this._debug("#getSession()", "session from storage is not valid");
            await this._removeSession();
          }
        }
        if (!currentSession) {
          return { data: { session: null }, error: null };
        }
        const hasExpired = currentSession.expires_at ? currentSession.expires_at * 1e3 - Date.now() < EXPIRY_MARGIN_MS : false;
        this._debug("#__loadSession()", `session has${hasExpired ? "" : " not"} expired`, "expires_at", currentSession.expires_at);
        if (!hasExpired) {
          if (this.userStorage) {
            const maybeUser = await getItemAsync(this.userStorage, this.storageKey + "-user");
            if (maybeUser === null || maybeUser === void 0 ? void 0 : maybeUser.user) {
              currentSession.user = maybeUser.user;
            } else {
              currentSession.user = userNotAvailableProxy();
            }
          }
          if (this.storage.isServer && currentSession.user) {
            let suppressWarning = this.suppressGetSessionWarning;
            const proxySession = new Proxy(currentSession, {
              get: (target, prop, receiver) => {
                if (!suppressWarning && prop === "user") {
                  console.warn("Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.");
                  suppressWarning = true;
                  this.suppressGetSessionWarning = true;
                }
                return Reflect.get(target, prop, receiver);
              }
            });
            currentSession = proxySession;
          }
          return { data: { session: currentSession }, error: null };
        }
        const { session, error } = await this._callRefreshToken(currentSession.refresh_token);
        if (error) {
          return { data: { session: null }, error };
        }
        return { data: { session }, error: null };
      } finally {
        this._debug("#__loadSession()", "end");
      }
    }
    /**
     * Gets the current user details if there is an existing session. This method
     * performs a network request to the Supabase Auth server, so the returned
     * value is authentic and can be used to base authorization rules on.
     *
     * @param jwt Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.
     */
    async getUser(jwt) {
      if (jwt) {
        return await this._getUser(jwt);
      }
      await this.initializePromise;
      const result = await this._acquireLock(-1, async () => {
        return await this._getUser();
      });
      return result;
    }
    async _getUser(jwt) {
      try {
        if (jwt) {
          return await _request(this.fetch, "GET", `${this.url}/user`, {
            headers: this.headers,
            jwt,
            xform: _userResponse
          });
        }
        return await this._useSession(async (result) => {
          var _a, _b, _c;
          const { data: data2, error } = result;
          if (error) {
            throw error;
          }
          if (!((_a = data2.session) === null || _a === void 0 ? void 0 : _a.access_token) && !this.hasCustomAuthorizationHeader) {
            return { data: { user: null }, error: new AuthSessionMissingError() };
          }
          return await _request(this.fetch, "GET", `${this.url}/user`, {
            headers: this.headers,
            jwt: (_c = (_b = data2.session) === null || _b === void 0 ? void 0 : _b.access_token) !== null && _c !== void 0 ? _c : void 0,
            xform: _userResponse
          });
        });
      } catch (error) {
        if (isAuthError(error)) {
          if (isAuthSessionMissingError(error)) {
            await this._removeSession();
            await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
          }
          return { data: { user: null }, error };
        }
        throw error;
      }
    }
    /**
     * Updates user data for a logged in user.
     */
    async updateUser(attributes, options = {}) {
      await this.initializePromise;
      return await this._acquireLock(-1, async () => {
        return await this._updateUser(attributes, options);
      });
    }
    async _updateUser(attributes, options = {}) {
      try {
        return await this._useSession(async (result) => {
          const { data: sessionData, error: sessionError } = result;
          if (sessionError) {
            throw sessionError;
          }
          if (!sessionData.session) {
            throw new AuthSessionMissingError();
          }
          const session = sessionData.session;
          let codeChallenge = null;
          let codeChallengeMethod = null;
          if (this.flowType === "pkce" && attributes.email != null) {
            ;
            [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
          }
          const { data: data2, error: userError } = await _request(this.fetch, "PUT", `${this.url}/user`, {
            headers: this.headers,
            redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,
            body: Object.assign(Object.assign({}, attributes), { code_challenge: codeChallenge, code_challenge_method: codeChallengeMethod }),
            jwt: session.access_token,
            xform: _userResponse
          });
          if (userError)
            throw userError;
          session.user = data2.user;
          await this._saveSession(session);
          await this._notifyAllSubscribers("USER_UPDATED", session);
          return { data: { user: session.user }, error: null };
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null }, error };
        }
        throw error;
      }
    }
    /**
     * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.
     * If the refresh token or access token in the current session is invalid, an error will be thrown.
     * @param currentSession The current session that minimally contains an access token and refresh token.
     */
    async setSession(currentSession) {
      await this.initializePromise;
      return await this._acquireLock(-1, async () => {
        return await this._setSession(currentSession);
      });
    }
    async _setSession(currentSession) {
      try {
        if (!currentSession.access_token || !currentSession.refresh_token) {
          throw new AuthSessionMissingError();
        }
        const timeNow = Date.now() / 1e3;
        let expiresAt2 = timeNow;
        let hasExpired = true;
        let session = null;
        const { payload } = decodeJWT(currentSession.access_token);
        if (payload.exp) {
          expiresAt2 = payload.exp;
          hasExpired = expiresAt2 <= timeNow;
        }
        if (hasExpired) {
          const { session: refreshedSession, error } = await this._callRefreshToken(currentSession.refresh_token);
          if (error) {
            return { data: { user: null, session: null }, error };
          }
          if (!refreshedSession) {
            return { data: { user: null, session: null }, error: null };
          }
          session = refreshedSession;
        } else {
          const { data: data2, error } = await this._getUser(currentSession.access_token);
          if (error) {
            throw error;
          }
          session = {
            access_token: currentSession.access_token,
            refresh_token: currentSession.refresh_token,
            user: data2.user,
            token_type: "bearer",
            expires_in: expiresAt2 - timeNow,
            expires_at: expiresAt2
          };
          await this._saveSession(session);
          await this._notifyAllSubscribers("SIGNED_IN", session);
        }
        return { data: { user: session.user, session }, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { session: null, user: null }, error };
        }
        throw error;
      }
    }
    /**
     * Returns a new session, regardless of expiry status.
     * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().
     * If the current session's refresh token is invalid, an error will be thrown.
     * @param currentSession The current session. If passed in, it must contain a refresh token.
     */
    async refreshSession(currentSession) {
      await this.initializePromise;
      return await this._acquireLock(-1, async () => {
        return await this._refreshSession(currentSession);
      });
    }
    async _refreshSession(currentSession) {
      try {
        return await this._useSession(async (result) => {
          var _a;
          if (!currentSession) {
            const { data: data2, error: error2 } = result;
            if (error2) {
              throw error2;
            }
            currentSession = (_a = data2.session) !== null && _a !== void 0 ? _a : void 0;
          }
          if (!(currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token)) {
            throw new AuthSessionMissingError();
          }
          const { session, error } = await this._callRefreshToken(currentSession.refresh_token);
          if (error) {
            return { data: { user: null, session: null }, error };
          }
          if (!session) {
            return { data: { user: null, session: null }, error: null };
          }
          return { data: { user: session.user, session }, error: null };
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { user: null, session: null }, error };
        }
        throw error;
      }
    }
    /**
     * Gets the session data from a URL string
     */
    async _getSessionFromURL(params, callbackUrlType) {
      try {
        if (!isBrowser2())
          throw new AuthImplicitGrantRedirectError("No browser detected.");
        if (params.error || params.error_description || params.error_code) {
          throw new AuthImplicitGrantRedirectError(params.error_description || "Error in URL with unspecified error_description", {
            error: params.error || "unspecified_error",
            code: params.error_code || "unspecified_code"
          });
        }
        switch (callbackUrlType) {
          case "implicit":
            if (this.flowType === "pkce") {
              throw new AuthPKCEGrantCodeExchangeError("Not a valid PKCE flow url.");
            }
            break;
          case "pkce":
            if (this.flowType === "implicit") {
              throw new AuthImplicitGrantRedirectError("Not a valid implicit grant flow url.");
            }
            break;
          default:
        }
        if (callbackUrlType === "pkce") {
          this._debug("#_initialize()", "begin", "is PKCE flow", true);
          if (!params.code)
            throw new AuthPKCEGrantCodeExchangeError("No code detected.");
          const { data: data3, error: error2 } = await this._exchangeCodeForSession(params.code);
          if (error2)
            throw error2;
          const url = new URL(window.location.href);
          url.searchParams.delete("code");
          window.history.replaceState(window.history.state, "", url.toString());
          return { data: { session: data3.session, redirectType: null }, error: null };
        }
        const { provider_token, provider_refresh_token, access_token, refresh_token, expires_in, expires_at, token_type } = params;
        if (!access_token || !expires_in || !refresh_token || !token_type) {
          throw new AuthImplicitGrantRedirectError("No session defined in URL");
        }
        const timeNow = Math.round(Date.now() / 1e3);
        const expiresIn = parseInt(expires_in);
        let expiresAt2 = timeNow + expiresIn;
        if (expires_at) {
          expiresAt2 = parseInt(expires_at);
        }
        const actuallyExpiresIn = expiresAt2 - timeNow;
        if (actuallyExpiresIn * 1e3 <= AUTO_REFRESH_TICK_DURATION_MS) {
          console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${actuallyExpiresIn}s, should have been closer to ${expiresIn}s`);
        }
        const issuedAt = expiresAt2 - expiresIn;
        if (timeNow - issuedAt >= 120) {
          console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale", issuedAt, expiresAt2, timeNow);
        } else if (timeNow - issuedAt < 0) {
          console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew", issuedAt, expiresAt2, timeNow);
        }
        const { data: data2, error } = await this._getUser(access_token);
        if (error)
          throw error;
        const session = {
          provider_token,
          provider_refresh_token,
          access_token,
          expires_in: expiresIn,
          expires_at: expiresAt2,
          refresh_token,
          token_type,
          user: data2.user
        };
        window.location.hash = "";
        this._debug("#_getSessionFromURL()", "clearing window.location.hash");
        return { data: { session, redirectType: params.type }, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { session: null, redirectType: null }, error };
        }
        throw error;
      }
    }
    /**
     * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)
     */
    _isImplicitGrantCallback(params) {
      return Boolean(params.access_token || params.error_description);
    }
    /**
     * Checks if the current URL and backing storage contain parameters given by a PKCE flow
     */
    async _isPKCECallback(params) {
      const currentStorageContent = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`);
      return !!(params.code && currentStorageContent);
    }
    /**
     * Inside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `"SIGNED_OUT"` event.
     *
     * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.
     * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.
     *
     * If using `others` scope, no `SIGNED_OUT` event is fired!
     */
    async signOut(options = { scope: "global" }) {
      await this.initializePromise;
      return await this._acquireLock(-1, async () => {
        return await this._signOut(options);
      });
    }
    async _signOut({ scope } = { scope: "global" }) {
      return await this._useSession(async (result) => {
        var _a;
        const { data: data2, error: sessionError } = result;
        if (sessionError) {
          return { error: sessionError };
        }
        const accessToken = (_a = data2.session) === null || _a === void 0 ? void 0 : _a.access_token;
        if (accessToken) {
          const { error } = await this.admin.signOut(accessToken, scope);
          if (error) {
            if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401 || error.status === 403))) {
              return { error };
            }
          }
        }
        if (scope !== "others") {
          await this._removeSession();
          await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);
        }
        return { error: null };
      });
    }
    /**
     * Receive a notification every time an auth event happens.
     * @param callback A callback function to be invoked when an auth event happens.
     */
    onAuthStateChange(callback) {
      const id = uuid();
      const subscription = {
        id,
        callback,
        unsubscribe: () => {
          this._debug("#unsubscribe()", "state change callback with id removed", id);
          this.stateChangeEmitters.delete(id);
        }
      };
      this._debug("#onAuthStateChange()", "registered callback with id", id);
      this.stateChangeEmitters.set(id, subscription);
      (async () => {
        await this.initializePromise;
        await this._acquireLock(-1, async () => {
          this._emitInitialSession(id);
        });
      })();
      return { data: { subscription } };
    }
    async _emitInitialSession(id) {
      return await this._useSession(async (result) => {
        var _a, _b;
        try {
          const { data: { session }, error } = result;
          if (error)
            throw error;
          await ((_a = this.stateChangeEmitters.get(id)) === null || _a === void 0 ? void 0 : _a.callback("INITIAL_SESSION", session));
          this._debug("INITIAL_SESSION", "callback id", id, "session", session);
        } catch (err) {
          await ((_b = this.stateChangeEmitters.get(id)) === null || _b === void 0 ? void 0 : _b.callback("INITIAL_SESSION", null));
          this._debug("INITIAL_SESSION", "callback id", id, "error", err);
          console.error(err);
        }
      });
    }
    /**
     * Sends a password reset request to an email address. This method supports the PKCE flow.
     *
     * @param email The email address of the user.
     * @param options.redirectTo The URL to send the user to after they click the password reset link.
     * @param options.captchaToken Verification token received when the user completes the captcha on the site.
     */
    async resetPasswordForEmail(email, options = {}) {
      let codeChallenge = null;
      let codeChallengeMethod = null;
      if (this.flowType === "pkce") {
        ;
        [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(
          this.storage,
          this.storageKey,
          true
          // isPasswordRecovery
        );
      }
      try {
        return await _request(this.fetch, "POST", `${this.url}/recover`, {
          body: {
            email,
            code_challenge: codeChallenge,
            code_challenge_method: codeChallengeMethod,
            gotrue_meta_security: { captcha_token: options.captchaToken }
          },
          headers: this.headers,
          redirectTo: options.redirectTo
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    /**
     * Gets all the identities linked to a user.
     */
    async getUserIdentities() {
      var _a;
      try {
        const { data: data2, error } = await this.getUser();
        if (error)
          throw error;
        return { data: { identities: (_a = data2.user.identities) !== null && _a !== void 0 ? _a : [] }, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    /**
     * Links an oauth identity to an existing user.
     * This method supports the PKCE flow.
     */
    async linkIdentity(credentials) {
      var _a;
      try {
        const { data: data2, error } = await this._useSession(async (result) => {
          var _a2, _b, _c, _d, _e;
          const { data: data3, error: error2 } = result;
          if (error2)
            throw error2;
          const url = await this._getUrlForProvider(`${this.url}/user/identities/authorize`, credentials.provider, {
            redirectTo: (_a2 = credentials.options) === null || _a2 === void 0 ? void 0 : _a2.redirectTo,
            scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,
            queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,
            skipBrowserRedirect: true
          });
          return await _request(this.fetch, "GET", url, {
            headers: this.headers,
            jwt: (_e = (_d = data3.session) === null || _d === void 0 ? void 0 : _d.access_token) !== null && _e !== void 0 ? _e : void 0
          });
        });
        if (error)
          throw error;
        if (isBrowser2() && !((_a = credentials.options) === null || _a === void 0 ? void 0 : _a.skipBrowserRedirect)) {
          window.location.assign(data2 === null || data2 === void 0 ? void 0 : data2.url);
        }
        return { data: { provider: credentials.provider, url: data2 === null || data2 === void 0 ? void 0 : data2.url }, error: null };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: { provider: credentials.provider, url: null }, error };
        }
        throw error;
      }
    }
    /**
     * Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.
     */
    async unlinkIdentity(identity2) {
      try {
        return await this._useSession(async (result) => {
          var _a, _b;
          const { data: data2, error } = result;
          if (error) {
            throw error;
          }
          return await _request(this.fetch, "DELETE", `${this.url}/user/identities/${identity2.identity_id}`, {
            headers: this.headers,
            jwt: (_b = (_a = data2.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : void 0
          });
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    /**
     * Generates a new JWT.
     * @param refreshToken A valid refresh token that was returned on login.
     */
    async _refreshAccessToken(refreshToken) {
      const debugName = `#_refreshAccessToken(${refreshToken.substring(0, 5)}...)`;
      this._debug(debugName, "begin");
      try {
        const startedAt = Date.now();
        return await retryable(async (attempt) => {
          if (attempt > 0) {
            await sleep(200 * Math.pow(2, attempt - 1));
          }
          this._debug(debugName, "refreshing attempt", attempt);
          return await _request(this.fetch, "POST", `${this.url}/token?grant_type=refresh_token`, {
            body: { refresh_token: refreshToken },
            headers: this.headers,
            xform: _sessionResponse
          });
        }, (attempt, error) => {
          const nextBackOffInterval = 200 * Math.pow(2, attempt);
          return error && isAuthRetryableFetchError(error) && // retryable only if the request can be sent before the backoff overflows the tick duration
          Date.now() + nextBackOffInterval - startedAt < AUTO_REFRESH_TICK_DURATION_MS;
        });
      } catch (error) {
        this._debug(debugName, "error", error);
        if (isAuthError(error)) {
          return { data: { session: null, user: null }, error };
        }
        throw error;
      } finally {
        this._debug(debugName, "end");
      }
    }
    _isValidSession(maybeSession) {
      const isValidSession = typeof maybeSession === "object" && maybeSession !== null && "access_token" in maybeSession && "refresh_token" in maybeSession && "expires_at" in maybeSession;
      return isValidSession;
    }
    async _handleProviderSignIn(provider, options) {
      const url = await this._getUrlForProvider(`${this.url}/authorize`, provider, {
        redirectTo: options.redirectTo,
        scopes: options.scopes,
        queryParams: options.queryParams
      });
      this._debug("#_handleProviderSignIn()", "provider", provider, "options", options, "url", url);
      if (isBrowser2() && !options.skipBrowserRedirect) {
        window.location.assign(url);
      }
      return { data: { provider, url }, error: null };
    }
    /**
     * Recovers the session from LocalStorage and refreshes the token
     * Note: this method is async to accommodate for AsyncStorage e.g. in React native.
     */
    async _recoverAndRefresh() {
      var _a, _b;
      const debugName = "#_recoverAndRefresh()";
      this._debug(debugName, "begin");
      try {
        const currentSession = await getItemAsync(this.storage, this.storageKey);
        if (currentSession && this.userStorage) {
          let maybeUser = await getItemAsync(this.userStorage, this.storageKey + "-user");
          if (!this.storage.isServer && Object.is(this.storage, this.userStorage) && !maybeUser) {
            maybeUser = { user: currentSession.user };
            await setItemAsync(this.userStorage, this.storageKey + "-user", maybeUser);
          }
          currentSession.user = (_a = maybeUser === null || maybeUser === void 0 ? void 0 : maybeUser.user) !== null && _a !== void 0 ? _a : userNotAvailableProxy();
        } else if (currentSession && !currentSession.user) {
          if (!currentSession.user) {
            const separateUser = await getItemAsync(this.storage, this.storageKey + "-user");
            if (separateUser && (separateUser === null || separateUser === void 0 ? void 0 : separateUser.user)) {
              currentSession.user = separateUser.user;
              await removeItemAsync(this.storage, this.storageKey + "-user");
              await setItemAsync(this.storage, this.storageKey, currentSession);
            } else {
              currentSession.user = userNotAvailableProxy();
            }
          }
        }
        this._debug(debugName, "session from storage", currentSession);
        if (!this._isValidSession(currentSession)) {
          this._debug(debugName, "session is not valid");
          if (currentSession !== null) {
            await this._removeSession();
          }
          return;
        }
        const expiresWithMargin = ((_b = currentSession.expires_at) !== null && _b !== void 0 ? _b : Infinity) * 1e3 - Date.now() < EXPIRY_MARGIN_MS;
        this._debug(debugName, `session has${expiresWithMargin ? "" : " not"} expired with margin of ${EXPIRY_MARGIN_MS}s`);
        if (expiresWithMargin) {
          if (this.autoRefreshToken && currentSession.refresh_token) {
            const { error } = await this._callRefreshToken(currentSession.refresh_token);
            if (error) {
              console.error(error);
              if (!isAuthRetryableFetchError(error)) {
                this._debug(debugName, "refresh failed with a non-retryable error, removing the session", error);
                await this._removeSession();
              }
            }
          }
        } else if (currentSession.user && currentSession.user.__isUserNotAvailableProxy === true) {
          try {
            const { data: data2, error: userError } = await this._getUser(currentSession.access_token);
            if (!userError && (data2 === null || data2 === void 0 ? void 0 : data2.user)) {
              currentSession.user = data2.user;
              await this._saveSession(currentSession);
              await this._notifyAllSubscribers("SIGNED_IN", currentSession);
            } else {
              this._debug(debugName, "could not get user data, skipping SIGNED_IN notification");
            }
          } catch (getUserError) {
            console.error("Error getting user data:", getUserError);
            this._debug(debugName, "error getting user data, skipping SIGNED_IN notification", getUserError);
          }
        } else {
          await this._notifyAllSubscribers("SIGNED_IN", currentSession);
        }
      } catch (err) {
        this._debug(debugName, "error", err);
        console.error(err);
        return;
      } finally {
        this._debug(debugName, "end");
      }
    }
    async _callRefreshToken(refreshToken) {
      var _a, _b;
      if (!refreshToken) {
        throw new AuthSessionMissingError();
      }
      if (this.refreshingDeferred) {
        return this.refreshingDeferred.promise;
      }
      const debugName = `#_callRefreshToken(${refreshToken.substring(0, 5)}...)`;
      this._debug(debugName, "begin");
      try {
        this.refreshingDeferred = new Deferred();
        const { data: data2, error } = await this._refreshAccessToken(refreshToken);
        if (error)
          throw error;
        if (!data2.session)
          throw new AuthSessionMissingError();
        await this._saveSession(data2.session);
        await this._notifyAllSubscribers("TOKEN_REFRESHED", data2.session);
        const result = { session: data2.session, error: null };
        this.refreshingDeferred.resolve(result);
        return result;
      } catch (error) {
        this._debug(debugName, "error", error);
        if (isAuthError(error)) {
          const result = { session: null, error };
          if (!isAuthRetryableFetchError(error)) {
            await this._removeSession();
          }
          (_a = this.refreshingDeferred) === null || _a === void 0 ? void 0 : _a.resolve(result);
          return result;
        }
        (_b = this.refreshingDeferred) === null || _b === void 0 ? void 0 : _b.reject(error);
        throw error;
      } finally {
        this.refreshingDeferred = null;
        this._debug(debugName, "end");
      }
    }
    async _notifyAllSubscribers(event, session, broadcast = true) {
      const debugName = `#_notifyAllSubscribers(${event})`;
      this._debug(debugName, "begin", session, `broadcast = ${broadcast}`);
      try {
        if (this.broadcastChannel && broadcast) {
          this.broadcastChannel.postMessage({ event, session });
        }
        const errors = [];
        const promises = Array.from(this.stateChangeEmitters.values()).map(async (x) => {
          try {
            await x.callback(event, session);
          } catch (e) {
            errors.push(e);
          }
        });
        await Promise.all(promises);
        if (errors.length > 0) {
          for (let i3 = 0; i3 < errors.length; i3 += 1) {
            console.error(errors[i3]);
          }
          throw errors[0];
        }
      } finally {
        this._debug(debugName, "end");
      }
    }
    /**
     * set currentSession and currentUser
     * process to _startAutoRefreshToken if possible
     */
    async _saveSession(session) {
      this._debug("#_saveSession()", session);
      this.suppressGetSessionWarning = true;
      const sessionToProcess = Object.assign({}, session);
      const userIsProxy = sessionToProcess.user && sessionToProcess.user.__isUserNotAvailableProxy === true;
      if (this.userStorage) {
        if (!userIsProxy && sessionToProcess.user) {
          await setItemAsync(this.userStorage, this.storageKey + "-user", {
            user: sessionToProcess.user
          });
        } else if (userIsProxy) {
        }
        const mainSessionData = Object.assign({}, sessionToProcess);
        delete mainSessionData.user;
        const clonedMainSessionData = deepClone(mainSessionData);
        await setItemAsync(this.storage, this.storageKey, clonedMainSessionData);
      } else {
        const clonedSession = deepClone(sessionToProcess);
        await setItemAsync(this.storage, this.storageKey, clonedSession);
      }
    }
    async _removeSession() {
      this._debug("#_removeSession()");
      await removeItemAsync(this.storage, this.storageKey);
      await removeItemAsync(this.storage, this.storageKey + "-code-verifier");
      await removeItemAsync(this.storage, this.storageKey + "-user");
      if (this.userStorage) {
        await removeItemAsync(this.userStorage, this.storageKey + "-user");
      }
      await this._notifyAllSubscribers("SIGNED_OUT", null);
    }
    /**
     * Removes any registered visibilitychange callback.
     *
     * {@see #startAutoRefresh}
     * {@see #stopAutoRefresh}
     */
    _removeVisibilityChangedCallback() {
      this._debug("#_removeVisibilityChangedCallback()");
      const callback = this.visibilityChangedCallback;
      this.visibilityChangedCallback = null;
      try {
        if (callback && isBrowser2() && (window === null || window === void 0 ? void 0 : window.removeEventListener)) {
          window.removeEventListener("visibilitychange", callback);
        }
      } catch (e) {
        console.error("removing visibilitychange callback failed", e);
      }
    }
    /**
     * This is the private implementation of {@link #startAutoRefresh}. Use this
     * within the library.
     */
    async _startAutoRefresh() {
      await this._stopAutoRefresh();
      this._debug("#_startAutoRefresh()");
      const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION_MS);
      this.autoRefreshTicker = ticker;
      if (ticker && typeof ticker === "object" && typeof ticker.unref === "function") {
        ticker.unref();
      } else if (typeof Deno !== "undefined" && typeof Deno.unrefTimer === "function") {
        Deno.unrefTimer(ticker);
      }
      setTimeout(async () => {
        await this.initializePromise;
        await this._autoRefreshTokenTick();
      }, 0);
    }
    /**
     * This is the private implementation of {@link #stopAutoRefresh}. Use this
     * within the library.
     */
    async _stopAutoRefresh() {
      this._debug("#_stopAutoRefresh()");
      const ticker = this.autoRefreshTicker;
      this.autoRefreshTicker = null;
      if (ticker) {
        clearInterval(ticker);
      }
    }
    /**
     * Starts an auto-refresh process in the background. The session is checked
     * every few seconds. Close to the time of expiration a process is started to
     * refresh the session. If refreshing fails it will be retried for as long as
     * necessary.
     *
     * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need
     * to call this function, it will be called for you.
     *
     * On browsers the refresh process works only when the tab/window is in the
     * foreground to conserve resources as well as prevent race conditions and
     * flooding auth with requests. If you call this method any managed
     * visibility change callback will be removed and you must manage visibility
     * changes on your own.
     *
     * On non-browser platforms the refresh process works *continuously* in the
     * background, which may not be desirable. You should hook into your
     * platform's foreground indication mechanism and call these methods
     * appropriately to conserve resources.
     *
     * {@see #stopAutoRefresh}
     */
    async startAutoRefresh() {
      this._removeVisibilityChangedCallback();
      await this._startAutoRefresh();
    }
    /**
     * Stops an active auto refresh process running in the background (if any).
     *
     * If you call this method any managed visibility change callback will be
     * removed and you must manage visibility changes on your own.
     *
     * See {@link #startAutoRefresh} for more details.
     */
    async stopAutoRefresh() {
      this._removeVisibilityChangedCallback();
      await this._stopAutoRefresh();
    }
    /**
     * Runs the auto refresh token tick.
     */
    async _autoRefreshTokenTick() {
      this._debug("#_autoRefreshTokenTick()", "begin");
      try {
        await this._acquireLock(0, async () => {
          try {
            const now = Date.now();
            try {
              return await this._useSession(async (result) => {
                const { data: { session } } = result;
                if (!session || !session.refresh_token || !session.expires_at) {
                  this._debug("#_autoRefreshTokenTick()", "no session");
                  return;
                }
                const expiresInTicks = Math.floor((session.expires_at * 1e3 - now) / AUTO_REFRESH_TICK_DURATION_MS);
                this._debug("#_autoRefreshTokenTick()", `access token expires in ${expiresInTicks} ticks, a tick lasts ${AUTO_REFRESH_TICK_DURATION_MS}ms, refresh threshold is ${AUTO_REFRESH_TICK_THRESHOLD} ticks`);
                if (expiresInTicks <= AUTO_REFRESH_TICK_THRESHOLD) {
                  await this._callRefreshToken(session.refresh_token);
                }
              });
            } catch (e) {
              console.error("Auto refresh tick failed with error. This is likely a transient error.", e);
            }
          } finally {
            this._debug("#_autoRefreshTokenTick()", "end");
          }
        });
      } catch (e) {
        if (e.isAcquireTimeout || e instanceof LockAcquireTimeoutError) {
          this._debug("auto refresh token tick lock not available");
        } else {
          throw e;
        }
      }
    }
    /**
     * Registers callbacks on the browser / platform, which in-turn run
     * algorithms when the browser window/tab are in foreground. On non-browser
     * platforms it assumes always foreground.
     */
    async _handleVisibilityChange() {
      this._debug("#_handleVisibilityChange()");
      if (!isBrowser2() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {
        if (this.autoRefreshToken) {
          this.startAutoRefresh();
        }
        return false;
      }
      try {
        this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false);
        window === null || window === void 0 ? void 0 : window.addEventListener("visibilitychange", this.visibilityChangedCallback);
        await this._onVisibilityChanged(true);
      } catch (error) {
        console.error("_handleVisibilityChange", error);
      }
    }
    /**
     * Callback registered with `window.addEventListener('visibilitychange')`.
     */
    async _onVisibilityChanged(calledFromInitialize) {
      const methodName = `#_onVisibilityChanged(${calledFromInitialize})`;
      this._debug(methodName, "visibilityState", document.visibilityState);
      if (document.visibilityState === "visible") {
        if (this.autoRefreshToken) {
          this._startAutoRefresh();
        }
        if (!calledFromInitialize) {
          await this.initializePromise;
          await this._acquireLock(-1, async () => {
            if (document.visibilityState !== "visible") {
              this._debug(methodName, "acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting");
              return;
            }
            await this._recoverAndRefresh();
          });
        }
      } else if (document.visibilityState === "hidden") {
        if (this.autoRefreshToken) {
          this._stopAutoRefresh();
        }
      }
    }
    /**
     * Generates the relevant login URL for a third-party provider.
     * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.
     * @param options.scopes A space-separated list of scopes granted to the OAuth application.
     * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.
     */
    async _getUrlForProvider(url, provider, options) {
      const urlParams = [`provider=${encodeURIComponent(provider)}`];
      if (options === null || options === void 0 ? void 0 : options.redirectTo) {
        urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);
      }
      if (options === null || options === void 0 ? void 0 : options.scopes) {
        urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);
      }
      if (this.flowType === "pkce") {
        const [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);
        const flowParams = new URLSearchParams({
          code_challenge: `${encodeURIComponent(codeChallenge)}`,
          code_challenge_method: `${encodeURIComponent(codeChallengeMethod)}`
        });
        urlParams.push(flowParams.toString());
      }
      if (options === null || options === void 0 ? void 0 : options.queryParams) {
        const query = new URLSearchParams(options.queryParams);
        urlParams.push(query.toString());
      }
      if (options === null || options === void 0 ? void 0 : options.skipBrowserRedirect) {
        urlParams.push(`skip_http_redirect=${options.skipBrowserRedirect}`);
      }
      return `${url}?${urlParams.join("&")}`;
    }
    async _unenroll(params) {
      try {
        return await this._useSession(async (result) => {
          var _a;
          const { data: sessionData, error: sessionError } = result;
          if (sessionError) {
            return { data: null, error: sessionError };
          }
          return await _request(this.fetch, "DELETE", `${this.url}/factors/${params.factorId}`, {
            headers: this.headers,
            jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
          });
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    async _enroll(params) {
      try {
        return await this._useSession(async (result) => {
          var _a, _b;
          const { data: sessionData, error: sessionError } = result;
          if (sessionError) {
            return { data: null, error: sessionError };
          }
          const body = Object.assign({ friendly_name: params.friendlyName, factor_type: params.factorType }, params.factorType === "phone" ? { phone: params.phone } : { issuer: params.issuer });
          const { data: data2, error } = await _request(this.fetch, "POST", `${this.url}/factors`, {
            body,
            headers: this.headers,
            jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
          });
          if (error) {
            return { data: null, error };
          }
          if (params.factorType === "totp" && ((_b = data2 === null || data2 === void 0 ? void 0 : data2.totp) === null || _b === void 0 ? void 0 : _b.qr_code)) {
            data2.totp.qr_code = `data:image/svg+xml;utf-8,${data2.totp.qr_code}`;
          }
          return { data: data2, error: null };
        });
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
    /**
     * {@see GoTrueMFAApi#verify}
     */
    async _verify(params) {
      return this._acquireLock(-1, async () => {
        try {
          return await this._useSession(async (result) => {
            var _a;
            const { data: sessionData, error: sessionError } = result;
            if (sessionError) {
              return { data: null, error: sessionError };
            }
            const { data: data2, error } = await _request(this.fetch, "POST", `${this.url}/factors/${params.factorId}/verify`, {
              body: { code: params.code, challenge_id: params.challengeId },
              headers: this.headers,
              jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
            });
            if (error) {
              return { data: null, error };
            }
            await this._saveSession(Object.assign({ expires_at: Math.round(Date.now() / 1e3) + data2.expires_in }, data2));
            await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED", data2);
            return { data: data2, error };
          });
        } catch (error) {
          if (isAuthError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * {@see GoTrueMFAApi#challenge}
     */
    async _challenge(params) {
      return this._acquireLock(-1, async () => {
        try {
          return await this._useSession(async (result) => {
            var _a;
            const { data: sessionData, error: sessionError } = result;
            if (sessionError) {
              return { data: null, error: sessionError };
            }
            return await _request(this.fetch, "POST", `${this.url}/factors/${params.factorId}/challenge`, {
              body: { channel: params.channel },
              headers: this.headers,
              jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token
            });
          });
        } catch (error) {
          if (isAuthError(error)) {
            return { data: null, error };
          }
          throw error;
        }
      });
    }
    /**
     * {@see GoTrueMFAApi#challengeAndVerify}
     */
    async _challengeAndVerify(params) {
      const { data: challengeData, error: challengeError } = await this._challenge({
        factorId: params.factorId
      });
      if (challengeError) {
        return { data: null, error: challengeError };
      }
      return await this._verify({
        factorId: params.factorId,
        challengeId: challengeData.id,
        code: params.code
      });
    }
    /**
     * {@see GoTrueMFAApi#listFactors}
     */
    async _listFactors() {
      const { data: { user }, error: userError } = await this.getUser();
      if (userError) {
        return { data: null, error: userError };
      }
      const factors = (user === null || user === void 0 ? void 0 : user.factors) || [];
      const totp = factors.filter((factor) => factor.factor_type === "totp" && factor.status === "verified");
      const phone = factors.filter((factor) => factor.factor_type === "phone" && factor.status === "verified");
      return {
        data: {
          all: factors,
          totp,
          phone
        },
        error: null
      };
    }
    /**
     * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}
     */
    async _getAuthenticatorAssuranceLevel() {
      return this._acquireLock(-1, async () => {
        return await this._useSession(async (result) => {
          var _a, _b;
          const { data: { session }, error: sessionError } = result;
          if (sessionError) {
            return { data: null, error: sessionError };
          }
          if (!session) {
            return {
              data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },
              error: null
            };
          }
          const { payload } = decodeJWT(session.access_token);
          let currentLevel = null;
          if (payload.aal) {
            currentLevel = payload.aal;
          }
          let nextLevel = currentLevel;
          const verifiedFactors = (_b = (_a = session.user.factors) === null || _a === void 0 ? void 0 : _a.filter((factor) => factor.status === "verified")) !== null && _b !== void 0 ? _b : [];
          if (verifiedFactors.length > 0) {
            nextLevel = "aal2";
          }
          const currentAuthenticationMethods = payload.amr || [];
          return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null };
        });
      });
    }
    async fetchJwk(kid, jwks = { keys: [] }) {
      let jwk = jwks.keys.find((key) => key.kid === kid);
      if (jwk) {
        return jwk;
      }
      const now = Date.now();
      jwk = this.jwks.keys.find((key) => key.kid === kid);
      if (jwk && this.jwks_cached_at + JWKS_TTL > now) {
        return jwk;
      }
      const { data: data2, error } = await _request(this.fetch, "GET", `${this.url}/.well-known/jwks.json`, {
        headers: this.headers
      });
      if (error) {
        throw error;
      }
      if (!data2.keys || data2.keys.length === 0) {
        return null;
      }
      this.jwks = data2;
      this.jwks_cached_at = now;
      jwk = data2.keys.find((key) => key.kid === kid);
      if (!jwk) {
        return null;
      }
      return jwk;
    }
    /**
     * Extracts the JWT claims present in the access token by first verifying the
     * JWT against the server's JSON Web Key Set endpoint
     * `/.well-known/jwks.json` which is often cached, resulting in significantly
     * faster responses. Prefer this method over {@link #getUser} which always
     * sends a request to the Auth server for each JWT.
     *
     * If the project is not using an asymmetric JWT signing key (like ECC or
     * RSA) it always sends a request to the Auth server (similar to {@link
     * #getUser}) to verify the JWT.
     *
     * @param jwt An optional specific JWT you wish to verify, not the one you
     *            can obtain from {@link #getSession}.
     * @param options Various additional options that allow you to customize the
     *                behavior of this method.
     */
    async getClaims(jwt, options = {}) {
      try {
        let token = jwt;
        if (!token) {
          const { data: data2, error } = await this.getSession();
          if (error || !data2.session) {
            return { data: null, error };
          }
          token = data2.session.access_token;
        }
        const { header, payload, signature, raw: { header: rawHeader, payload: rawPayload } } = decodeJWT(token);
        if (!(options === null || options === void 0 ? void 0 : options.allowExpired)) {
          validateExp(payload.exp);
        }
        const signingKey = !header.alg || header.alg.startsWith("HS") || !header.kid || !("crypto" in globalThis && "subtle" in globalThis.crypto) ? null : await this.fetchJwk(header.kid, (options === null || options === void 0 ? void 0 : options.keys) ? { keys: options.keys } : options === null || options === void 0 ? void 0 : options.jwks);
        if (!signingKey) {
          const { error } = await this.getUser(token);
          if (error) {
            throw error;
          }
          return {
            data: {
              claims: payload,
              header,
              signature
            },
            error: null
          };
        }
        const algorithm = getAlgorithm(header.alg);
        const publicKey = await crypto.subtle.importKey("jwk", signingKey, algorithm, true, [
          "verify"
        ]);
        const isValid2 = await crypto.subtle.verify(algorithm, publicKey, signature, stringToUint8Array(`${rawHeader}.${rawPayload}`));
        if (!isValid2) {
          throw new AuthInvalidJwtError("Invalid JWT signature");
        }
        return {
          data: {
            claims: payload,
            header,
            signature
          },
          error: null
        };
      } catch (error) {
        if (isAuthError(error)) {
          return { data: null, error };
        }
        throw error;
      }
    }
  };
  GoTrueClient.nextInstanceID = 0;

  // node_modules/@supabase/auth-js/dist/module/AuthClient.js
  var AuthClient = GoTrueClient;
  var AuthClient_default = AuthClient;

  // node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js
  var SupabaseAuthClient = class extends AuthClient_default {
    constructor(options) {
      super(options);
    }
  };

  // node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js
  var __awaiter8 = function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var SupabaseClient = class {
    /**
     * Create a new client for use in the browser.
     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.
     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.
     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.
     * @param options.auth.autoRefreshToken Set to "true" if you want to automatically refresh the token before expiring.
     * @param options.auth.persistSession Set to "true" if you want to automatically save the user session into local storage.
     * @param options.auth.detectSessionInUrl Set to "true" if you want to automatically detects OAuth grants in the URL and signs in the user.
     * @param options.realtime Options passed along to realtime-js constructor.
     * @param options.storage Options passed along to the storage-js constructor.
     * @param options.global.fetch A custom fetch implementation.
     * @param options.global.headers Any additional headers to send with each network request.
     */
    constructor(supabaseUrl, supabaseKey, options) {
      var _a, _b, _c;
      this.supabaseUrl = supabaseUrl;
      this.supabaseKey = supabaseKey;
      if (!supabaseUrl)
        throw new Error("supabaseUrl is required.");
      if (!supabaseKey)
        throw new Error("supabaseKey is required.");
      const _supabaseUrl = ensureTrailingSlash(supabaseUrl);
      const baseUrl = new URL(_supabaseUrl);
      this.realtimeUrl = new URL("realtime/v1", baseUrl);
      this.realtimeUrl.protocol = this.realtimeUrl.protocol.replace("http", "ws");
      this.authUrl = new URL("auth/v1", baseUrl);
      this.storageUrl = new URL("storage/v1", baseUrl);
      this.functionsUrl = new URL("functions/v1", baseUrl);
      const defaultStorageKey = `sb-${baseUrl.hostname.split(".")[0]}-auth-token`;
      const DEFAULTS = {
        db: DEFAULT_DB_OPTIONS,
        realtime: DEFAULT_REALTIME_OPTIONS,
        auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),
        global: DEFAULT_GLOBAL_OPTIONS
      };
      const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);
      this.storageKey = (_a = settings.auth.storageKey) !== null && _a !== void 0 ? _a : "";
      this.headers = (_b = settings.global.headers) !== null && _b !== void 0 ? _b : {};
      if (!settings.accessToken) {
        this.auth = this._initSupabaseAuthClient((_c = settings.auth) !== null && _c !== void 0 ? _c : {}, this.headers, settings.global.fetch);
      } else {
        this.accessToken = settings.accessToken;
        this.auth = new Proxy({}, {
          get: (_, prop) => {
            throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(prop)} is not possible`);
          }
        });
      }
      this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global.fetch);
      this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers, accessToken: this._getAccessToken.bind(this) }, settings.realtime));
      this.rest = new PostgrestClient(new URL("rest/v1", baseUrl).href, {
        headers: this.headers,
        schema: settings.db.schema,
        fetch: this.fetch
      });
      this.storage = new StorageClient(this.storageUrl.href, this.headers, this.fetch, options === null || options === void 0 ? void 0 : options.storage);
      if (!settings.accessToken) {
        this._listenForAuthEvents();
      }
    }
    /**
     * Supabase Functions allows you to deploy and invoke edge functions.
     */
    get functions() {
      return new FunctionsClient(this.functionsUrl.href, {
        headers: this.headers,
        customFetch: this.fetch
      });
    }
    /**
     * Perform a query on a table or a view.
     *
     * @param relation - The table or view name to query
     */
    from(relation) {
      return this.rest.from(relation);
    }
    // NOTE: signatures must be kept in sync with PostgrestClient.schema
    /**
     * Select a schema to query or perform an function (rpc) call.
     *
     * The schema needs to be on the list of exposed schemas inside Supabase.
     *
     * @param schema - The schema to query
     */
    schema(schema2) {
      return this.rest.schema(schema2);
    }
    // NOTE: signatures must be kept in sync with PostgrestClient.rpc
    /**
     * Perform a function call.
     *
     * @param fn - The function name to call
     * @param args - The arguments to pass to the function call
     * @param options - Named parameters
     * @param options.head - When set to `true`, `data` will not be returned.
     * Useful if you only need the count.
     * @param options.get - When set to `true`, the function will be called with
     * read-only access mode.
     * @param options.count - Count algorithm to use to count rows returned by the
     * function. Only applicable for [set-returning
     * functions](https://www.postgresql.org/docs/current/functions-srf.html).
     *
     * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
     * hood.
     *
     * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
     * statistics under the hood.
     *
     * `"estimated"`: Uses exact count for low numbers and planned count for high
     * numbers.
     */
    rpc(fn, args = {}, options = {}) {
      return this.rest.rpc(fn, args, options);
    }
    /**
     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.
     *
     * @param {string} name - The name of the Realtime channel.
     * @param {Object} opts - The options to pass to the Realtime channel.
     *
     */
    channel(name, opts = { config: {} }) {
      return this.realtime.channel(name, opts);
    }
    /**
     * Returns all Realtime channels.
     */
    getChannels() {
      return this.realtime.getChannels();
    }
    /**
     * Unsubscribes and removes Realtime channel from Realtime client.
     *
     * @param {RealtimeChannel} channel - The name of the Realtime channel.
     *
     */
    removeChannel(channel) {
      return this.realtime.removeChannel(channel);
    }
    /**
     * Unsubscribes and removes all Realtime channels from Realtime client.
     */
    removeAllChannels() {
      return this.realtime.removeAllChannels();
    }
    _getAccessToken() {
      var _a, _b;
      return __awaiter8(this, void 0, void 0, function* () {
        if (this.accessToken) {
          return yield this.accessToken();
        }
        const { data: data2 } = yield this.auth.getSession();
        return (_b = (_a = data2.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : this.supabaseKey;
      });
    }
    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey: storageKey3, flowType, lock, debug }, headers, fetch3) {
      const authHeaders = {
        Authorization: `Bearer ${this.supabaseKey}`,
        apikey: `${this.supabaseKey}`
      };
      return new SupabaseAuthClient({
        url: this.authUrl.href,
        headers: Object.assign(Object.assign({}, authHeaders), headers),
        storageKey: storageKey3,
        autoRefreshToken,
        persistSession,
        detectSessionInUrl,
        storage,
        flowType,
        lock,
        debug,
        fetch: fetch3,
        // auth checks if there is a custom authorizaiton header using this flag
        // so it knows whether to return an error when getUser is called with no session
        hasCustomAuthorizationHeader: "Authorization" in this.headers
      });
    }
    _initRealtimeClient(options) {
      return new RealtimeClient(this.realtimeUrl.href, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));
    }
    _listenForAuthEvents() {
      let data2 = this.auth.onAuthStateChange((event, session) => {
        this._handleTokenChanged(event, "CLIENT", session === null || session === void 0 ? void 0 : session.access_token);
      });
      return data2;
    }
    _handleTokenChanged(event, source, token) {
      if ((event === "TOKEN_REFRESHED" || event === "SIGNED_IN") && this.changedAccessToken !== token) {
        this.changedAccessToken = token;
      } else if (event === "SIGNED_OUT") {
        this.realtime.setAuth();
        if (source == "STORAGE")
          this.auth.signOut();
        this.changedAccessToken = void 0;
      }
    }
  };

  // node_modules/@supabase/supabase-js/dist/module/index.js
  var createClient = (supabaseUrl, supabaseKey, options) => {
    return new SupabaseClient(supabaseUrl, supabaseKey, options);
  };
  function shouldShowDeprecationWarning() {
    if (typeof window !== "undefined") {
      return false;
    }
    if (typeof process === "undefined") {
      return false;
    }
    const processVersion = process["version"];
    if (processVersion === void 0 || processVersion === null) {
      return false;
    }
    const versionMatch = processVersion.match(/^v(\d+)\./);
    if (!versionMatch) {
      return false;
    }
    const majorVersion = parseInt(versionMatch[1], 10);
    return majorVersion <= 18;
  }
  if (shouldShowDeprecationWarning()) {
    console.warn(`\u26A0\uFE0F  Node.js 18 and below are deprecated and will no longer be supported in future versions of @supabase/supabase-js. Please upgrade to Node.js 20 or later. For more information, visit: https://github.com/orgs/supabase/discussions/37217`);
  }

  // src/config/supabaseConfig.ts
  var import_meta2 = {};
  var DEFAULT_SUPABASE_URL = "https://xeyfhlmflsibxzjsirav.supabase.co";
  var DEFAULT_SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhleWZobG1mbHNpYnh6anNpcmF2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5Mjg5ODQsImV4cCI6MjA2OTUwNDk4NH0._wwYVbBmqX26WpbBnPMuuSmUTGG-XhxDwg8vkUS_n8Y";
  function readLocalStorage(key) {
    try {
      if (typeof window === "undefined") return "";
      const v = window.localStorage.getItem(key);
      return v ? v : "";
    } catch {
      return "";
    }
  }
  function getSupabaseUrl() {
    const envUrl = import_meta2?.env?.VITE_SUPABASE_URL;
    const lsUrl = readLocalStorage("SUPABASE_URL");
    const url = envUrl && envUrl.trim() || lsUrl && lsUrl.trim() || DEFAULT_SUPABASE_URL;
    return url.replace(/\/*$/, "");
  }
  function getSupabaseAnonKey() {
    const envKey = import_meta2?.env?.VITE_SUPABASE_ANON_KEY;
    const lsKey = readLocalStorage("SUPABASE_ANON_KEY");
    return envKey && envKey.trim() || lsKey && lsKey.trim() || DEFAULT_SUPABASE_ANON_KEY;
  }

  // src/services/supabase.ts
  var SUPABASE_URL = getSupabaseUrl();
  var SUPABASE_ANON_KEY = getSupabaseAnonKey();
  if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
    console.warn(
      "[Supabase] Missing configuration. Ensure VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY are set (or localStorage overrides SUPABASE_URL / SUPABASE_ANON_KEY)."
    );
  }
  var supabase = createClient(
    SUPABASE_URL || "",
    SUPABASE_ANON_KEY || "",
    {
      auth: {
        persistSession: true,
        storage: typeof window !== "undefined" ? window.localStorage : {
          getItem: () => null,
          setItem: () => {
          },
          removeItem: () => {
          }
        },
        autoRefreshToken: true,
        detectSessionInUrl: true
      }
    }
  );

  // src/stores/authStore.ts
  function mapRowToAccount(row) {
    return {
      id: row.id,
      email: row.email,
      pharmacyName: row.pharmacy_name,
      pharmacyPhone: row.pharmacy_phone ?? null,
      subscriptionStatus: row.subscription_status || "inactive",
      createdAt: row.created_at,
      updatedAt: row.updated_at ?? null,
      address1: row.address1 ?? null,
      city: row.city ?? null,
      state: row.state ?? null,
      zipcode: row.zipcode ?? null
    };
  }
  async function findAccountRow(user) {
    try {
      const { data: byId, error: byIdErr } = await supabase.from("accounts").select("*").eq("id", user.id).limit(1);
      if (!byIdErr && byId && byId.length > 0) {
        return byId[0];
      }
      const { data: byUserId, error: byUserIdErr } = await supabase.from("accounts").select("*").eq("user_id", user.id).limit(1);
      if (!byUserIdErr && byUserId && byUserId.length > 0) {
        return byUserId[0];
      }
      if (user.email) {
        const { data: byEmail, error: byEmailErr } = await supabase.from("accounts").select("*").eq("email", user.email).limit(1);
        if (!byEmailErr && byEmail && byEmail.length > 0) {
          return byEmail[0];
        }
      }
    } catch {
    }
    return null;
  }
  var useAuthStore = create((set2, get3) => ({
    // --- Initial State ---
    session: null,
    user: null,
    account: null,
    isAuthenticated: false,
    /**
     * checkSession
     * Hydrates store from current Supabase session.
     * - Sets isAuthenticated true if a session exists (independent of accounts).
     * - Enriches 'account' best-effort if visible under RLS.
     */
    checkSession: async () => {
      const {
        data: { session }
      } = await supabase.auth.getSession();
      if (!session) {
        set2({
          session: null,
          user: null,
          account: null,
          isAuthenticated: false
        });
        return;
      }
      let accountRow = null;
      accountRow = await findAccountRow(session.user);
      set2({
        session,
        user: session.user,
        account: accountRow ? mapRowToAccount(accountRow) : null,
        isAuthenticated: true
        // Auth is based on Supabase session
      });
    },
    /**
     * login
     * Signs in the user with email and password using Supabase Auth.
     * Returns:
     * - true if a Supabase session is established, regardless of accounts row presence.
     * - false only if there is no session (unexpected success case) after calling signInWithPassword.
     */
    login: async (email, password) => {
      const { data: data2, error } = await supabase.auth.signInWithPassword({ email, password });
      if (error) throw error;
      if (!data2.session) {
        set2({ session: null, user: null, account: null, isAuthenticated: false });
        return false;
      }
      let accountRow = null;
      accountRow = await findAccountRow(data2.user);
      set2({
        session: data2.session,
        user: data2.user,
        account: accountRow ? mapRowToAccount(accountRow) : null,
        isAuthenticated: true
        // Auth is based on Supabase session
      });
      return true;
    },
    /**
     * logout
     * Signs out the current user and clears auth-related state.
     */
    logout: async () => {
      await supabase.auth.signOut();
      set2({
        session: null,
        user: null,
        account: null,
        isAuthenticated: false
      });
    },
    /**
     * updateAccount
     * Updates the current user's account data in the 'accounts' table.
     * Note: Requires that an account row is currently loaded; not tied to auth.
     */
    updateAccount: async (changes) => {
      const { user, account } = get3();
      if (!user) throw new Error("Not authenticated");
      if (!account) throw new Error("Account not loaded");
      const patch = {
        pharmacy_name: changes.pharmacyName,
        pharmacy_phone: changes.pharmacyPhone,
        subscription_status: changes.subscriptionStatus,
        address1: changes.address1,
        city: changes.city,
        state: changes.state,
        zipcode: changes.zipcode,
        email: changes.email
        // allow email updates if your schema permits
      };
      let query = supabase.from("accounts").update(patch);
      if (account?.id) {
        query = query.eq("id", account.id);
      } else if (user?.id) {
        query = query.eq("id", user.id);
      } else if (user?.email) {
        query = query.eq("email", user.email);
      }
      const { data: data2, error } = await query.select().single();
      if (error) throw error;
      const mappedAccount = mapRowToAccount(data2);
      set2({ account: mappedAccount });
      return mappedAccount;
    }
  }));

  // src/lib/cellValue.ts
  function toReadableString(value, opts = {}) {
    const maxLen = typeof opts.maxLen === "number" ? Math.max(0, opts.maxLen) : void 0;
    if (value === null || value === void 0) return null;
    const t2 = typeof value;
    if (t2 === "string") return applyLimit(value, maxLen);
    if (t2 === "number" || t2 === "boolean" || t2 === "bigint") return String(value);
    if (value instanceof Date) {
      return value.toLocaleString();
    }
    if (Array.isArray(value)) {
      const parts = [];
      for (const v of value) {
        const s3 = toReadableString(v, opts);
        if (s3 !== null && s3 !== void 0) parts.push(s3);
      }
      return parts.length ? applyLimit(parts.join(", "), maxLen) : null;
    }
    if (isProbablyReactElement(value)) {
      return null;
    }
    if (isPlainObject2(value)) {
      const obj = value;
      for (const key of ["title", "name", "label", "value"]) {
        const v = obj[key];
        if (typeof v === "string" && v.trim().length > 0) return applyLimit(v, maxLen);
        if (typeof v === "number" || typeof v === "boolean") return String(v);
      }
      try {
        const seen = /* @__PURE__ */ new WeakSet();
        const json = JSON.stringify(
          obj,
          (k, v) => {
            if (typeof v === "object" && v !== null) {
              if (seen.has(v)) return "[Circular]";
              seen.add(v);
            }
            return v;
          },
          0
        );
        return json ? applyLimit(json, maxLen) : null;
      } catch {
        try {
          return Object.prototype.toString.call(value);
        } catch {
          return null;
        }
      }
    }
    try {
      return applyLimit(String(value), maxLen);
    } catch {
      return null;
    }
  }
  function isPlainObject2(v) {
    if (Object.prototype.toString.call(v) !== "[object Object]") return false;
    const proto = Object.getPrototypeOf(v);
    return proto === null || proto === Object.prototype;
  }
  function isProbablyReactElement(v) {
    return !!(v && typeof v === "object" && v.$$typeof && v.props);
  }
  function applyLimit(s3, maxLen) {
    if (!maxLen || s3.length <= maxLen) return s3;
    if (maxLen <= 1) return "\u2026";
    return s3.slice(0, Math.max(0, maxLen - 1)) + "\u2026";
  }

  // src/components/common/SafeText.tsx
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  function SafeText({ value, fallback = "\u2014" }) {
    const text = toReadableString(value);
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_jsx_runtime3.Fragment, { children: text ?? fallback });
  }

  // src/components/layout/Header.tsx
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  function Header() {
    const [isMenuOpen, setIsMenuOpen] = (0, import_react2.useState)(false);
    const { user, isAuthenticated, logout } = useAuthStore();
    const location = useLocation();
    const publicNavItems = (0, import_react2.useMemo)(
      () => [
        { href: "/", label: "Home" },
        { href: "/contact", label: "Contact" }
      ],
      []
    );
    const navItems = publicNavItems;
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("header", { className: "bg-white/95 backdrop-blur-sm shadow-sm border-b border-gray-200 sticky top-0 z-50", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "flex justify-between items-center h-16", children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(Link, { to: "/", className: "flex items-center space-x-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "w-10 h-10 bg-gradient-to-br from-blue-700 via-cyan-400 to-teal-300 rounded-full flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "w-8 h-8 bg-white rounded-full flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            "img",
            {
              src: "https://pub-cdn.sider.ai/u/U03VH4NVNOE/web-coder/687655a5b1dac45b18db4f5c/resource/0fb3f1b8-e6cd-4575-806d-018bad3c9e1a.png",
              alt: "ClinicalRxQ Logo",
              className: "w-6 h-6"
            }
          ) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "text-2xl font-bold", children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { className: "text-gray-800", children: "Clinical" }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { className: "bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300 bg-clip-text text-transparent", children: "RxQ" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("nav", { className: "hidden md:flex space-x-8", children: navItems.map((item) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          Link,
          {
            to: item.href,
            className: `text-sm font-medium transition-colors hover:text-blue-500 ${location.pathname === item.href ? "text-blue-600" : "text-gray-700"}`,
            children: item.label
          },
          item.href
        )) }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "hidden md:flex items-center space-x-4", children: isAuthenticated ? /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "flex items-center space-x-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "flex items-center space-x-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_lucide_react.User, { className: "h-4 w-4 text-gray-500" }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("span", { className: "text-sm text-gray-700", children: [
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(SafeText, { value: user?.["firstName"] }),
              " ",
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(SafeText, { value: user?.["lastName"] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Link, { to: "/dashboard", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            Button,
            {
              size: "sm",
              className: "uppercase tracking-wide bg-gradient-to-r from-blue-800 via-cyan-700 to-cyan-600 hover:from-blue-900 hover:via-cyan-800 hover:to-cyan-700 text-white",
              children: "DASHBOARD"
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
            Button,
            {
              variant: "outline",
              size: "sm",
              onClick: logout,
              className: "bg-transparent flex items-center space-x-2 border-gray-300 hover:border-cyan-400 hover:text-cyan-400",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_lucide_react.LogOut, { className: "h-4 w-4" }),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { children: "Logout" })
              ]
            }
          )
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "flex items-center space-x-4", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Link, { to: "/login", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          Button,
          {
            variant: "outline",
            size: "sm",
            className: "bg-transparent border-gray-300 hover:border-cyan-400 hover:text-cyan-400",
            children: "Member Login"
          }
        ) }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "md:hidden", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Button, { variant: "ghost", size: "sm", onClick: () => setIsMenuOpen(!isMenuOpen), children: isMenuOpen ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_lucide_react.X, { className: "h-6 w-6" }) : /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_lucide_react.Menu, { className: "h-6 w-6" }) }) })
      ] }),
      isMenuOpen && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "md:hidden border-t border-gray-200", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "px-2 pt-2 pb-3 space-y-1 sm:px-3", children: [
        navItems.map((item) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          Link,
          {
            to: item.href,
            className: `block px-3 py-2 text-base font-medium transition-colors hover:text-cyan-400 ${location.pathname === item.href ? "text-cyan-400" : "text-gray-700"}`,
            onClick: () => setIsMenuOpen(false),
            children: item.label
          },
          item.href
        )),
        isAuthenticated ? /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "border-t border-gray-200 pt-3 mt-3 space-y-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "flex items-center px-3 py-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_lucide_react.User, { className: "h-4 w-4 text-gray-500 mr-2" }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("span", { className: "text-sm text-gray-700", children: [
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(SafeText, { value: user?.["firstName"] }),
              " ",
              /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(SafeText, { value: user?.["lastName"] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Link, { to: "/dashboard", onClick: () => setIsMenuOpen(false), children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Button, { className: "w-full bg-gradient-to-r from-blue-800 via-cyan-700 to-cyan-600 hover:from-blue-900 hover:via-cyan-800 hover:to-cyan-700 text-white uppercase tracking-wide", children: "DASHBOARD" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
            Button,
            {
              variant: "outline",
              size: "sm",
              onClick: logout,
              className: "bg-transparent w-full flex items-center justify-center space-x-2",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_lucide_react.LogOut, { className: "h-4 w-4" }),
                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { children: "Logout" })
              ]
            }
          )
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "border-t border-gray-200 pt-3 mt-3 space-y-2", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Link, { to: "/login", onClick: () => setIsMenuOpen(false), children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Button, { variant: "outline", size: "sm", className: "bg-transparent w-full", children: "Member Login" }) }) })
      ] }) })
    ] }) });
  }

  // src/components/ui/card.tsx
  var React16 = __toESM(require_react());
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var Card = React16.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    "div",
    {
      ref,
      className: cn(
        "rounded-xl border bg-card text-card-foreground shadow",
        className
      ),
      ...props
    }
  ));
  Card.displayName = "Card";
  var CardHeader = React16.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    "div",
    {
      ref,
      className: cn("flex flex-col space-y-1.5 p-6", className),
      ...props
    }
  ));
  CardHeader.displayName = "CardHeader";
  var CardTitle = React16.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    "div",
    {
      ref,
      className: cn("font-semibold leading-none tracking-tight", className),
      ...props
    }
  ));
  CardTitle.displayName = "CardTitle";
  var CardDescription = React16.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    "div",
    {
      ref,
      className: cn("text-sm text-muted-foreground", className),
      ...props
    }
  ));
  CardDescription.displayName = "CardDescription";
  var CardContent = React16.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { ref, className: cn("p-6 pt-0", className), ...props }));
  CardContent.displayName = "CardContent";
  var CardFooter = React16.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    "div",
    {
      ref,
      className: cn("flex items-center p-6 pt-0", className),
      ...props
    }
  ));
  CardFooter.displayName = "CardFooter";

  // src/components/ui/badge.tsx
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var badgeVariants = cva(
    "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
    {
      variants: {
        variant: {
          default: "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
          secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
          destructive: "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
          outline: "text-foreground"
        }
      },
      defaultVariants: {
        variant: "default"
      }
    }
  );
  function Badge({ className, variant, ...props }) {
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: cn(badgeVariants({ variant }), className), ...props });
  }

  // src/pages/Home.tsx
  var import_lucide_react2 = __toESM(require_lucide_react());
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var SafeText2 = ({ value, className }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className, children: value ?? "" });
  };
  function ProgramCard({ item }) {
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Card, { className: "bg-gray-800/70 border-gray-700 hover:bg-gray-800 transition-colors", children: [
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-center gap-3 mb-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "w-10 h-10 rounded-lg bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(item.icon, { className: "h-5 w-5 text-white" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardTitle, { className: "text-white text-lg", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(SafeText2, { value: item.title }) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(CardContent, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-300 text-sm mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(SafeText2, { value: item.description }) }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("ul", { className: "space-y-2", children: item.features.map((feature, idx) => /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("li", { className: "flex items-center text-sm text-gray-400", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.CheckCircle, { className: "h-3 w-3 text-green-400 mr-2" }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(SafeText2, { value: feature })
        ] }, idx)) })
      ] })
    ] });
  }
  var HomePage = () => {
    const [activeFeature, setActiveFeature] = (0, import_react3.useState)(0);
    const features = [
      {
        title: "Operational Flywheel",
        description: "Transform from reactive dispensing to proactive, appointment-based care with TimeMyMeds synchronization",
        icon: import_lucide_react2.Target,
        color: "from-green-300 to-teal-400"
      },
      {
        title: "Technician Force Multiplier",
        description: "Empower your pharmacy technicians to handle operational tasks, freeing pharmacists for clinical excellence",
        icon: import_lucide_react2.Users,
        color: "from-teal-500 to-cyan-300"
      },
      {
        title: "Turnkey Clinical Infrastructure",
        description: "Complete business-in-a-box solution with protocols, forms, billing codes, and implementation guides",
        icon: import_lucide_react2.Shield,
        color: "from-cyan-400 to-blue-700"
      }
    ];
    const programs = [
      {
        title: "TimeMyMeds",
        description: "Create predictable appointment schedules that enable clinical service delivery",
        icon: import_lucide_react2.Clock,
        features: ["Comprehensive Reviews", "Billing Expertise", "Patient Outcomes"]
      },
      {
        title: "MTM The Future Today",
        description: "Team-based Medication Therapy Management with proven protocols and technician workflows",
        icon: import_lucide_react2.FileText,
        features: ["Comprehensive Reviews", "Billing Expertise", "Patient Outcomes"]
      },
      {
        title: "Test & Treat Services",
        description: "Point-of-care testing and treatment for Flu, Strep, and COVID-19",
        icon: import_lucide_react2.Zap,
        features: ["CLIA-Waived Testing", "State Protocols", "Medical Billing"]
      },
      {
        title: "HbA1c Testing",
        description: "Diabetes management with point-of-care A1c testing and clinical integration",
        icon: import_lucide_react2.Award,
        features: ["Quality Metrics", "Provider Communication", "Value-Based Care"]
      },
      {
        title: "Pharmacist-Initiated Oral Contraceptives",
        description: "From patient intake to medical billing, our protocols are here for your team and patients",
        icon: import_lucide_react2.Heart,
        features: [
          "Practice-Based Clinical Skills",
          "Pharmacy Tech Training",
          "Prescribing with Confidence"
        ]
      }
    ];
    const preservedPrograms = (0, import_react3.useMemo)(() => [], []);
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "min-h-screen bg-white", children: [
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Header, {}),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("section", { className: "relative min-h-screen flex items-center justify-center overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "absolute inset-0 bg-gradient-to-br from-blue-300 via-cyan-200 to-Teal-200 opacity-10" }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "absolute inset-0 bg-[url('https://pub-cdn.sider.ai/u/U03VH4NVNOE/web-coder/687655a5b1dac45b18db4f5c/resource/cd53336d-d6e2-4c6b-bf62-bba9d1f359ba.png')] bg-center bg-cover opacity-20" }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-12 items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Badge, { className: "bg-gradient-to-r from-blue-600 to-teal-400 text-white border-0", children: "Where Dispensing Meets Direct Patient Care" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("h1", { className: "text-5xl lg:text-6xl font-bold mb-6", children: [
              "Transform Your",
              " ",
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "bg-gradient-to-r from-blue-600 via-cyan-400 to-teal-300 bg-clip-text text-transparent", children: "Pharmacy Practice" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-xl text-gray-600 mb-8 leading-relaxed", children: "The complete ecosystem for community pharmacy teams to deliver profitable, patient-centered clinical services with proven protocols and turnkey infrastructure." }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex flex-col sm:flex-row gap-4 mb-8", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Link, { to: "/contact", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(
                Button,
                {
                  size: "lg",
                  className: "bg-gradient-to-r from-blue-500 to-teal-300 hover:from-cyan-500 hover:to-teal-300 hover-border-2 border-gradient-blue-500 to-teal-300 text-white shadow-lg",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Play, { className: "mr-2 h-5 w-5" }),
                    "Learn More"
                  ]
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Link, { to: "/login", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(
                Button,
                {
                  size: "lg",
                  variant: "outline",
                  className: "bg-transparent border-blue-600 text-blue-700 hover: hover:bg-blue-200",
                  children: [
                    "Get Started Today",
                    /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.ArrowRight, { className: "ml-2 h-5 w-5" })
                  ]
                }
              ) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-center gap-6 text-sm text-gray-600", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-center", children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.CheckCircle, { className: "h-4 w-4 text-green-500 mr-1" }),
                "No long-term contracts"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-center", children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.CheckCircle, { className: "h-4 w-4 text-green-500 mr-1" }),
                "30-day money-back guarantee"
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "relative", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "relative z-10", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
              "img",
              {
                src: "https://pub-cdn.sider.ai/u/U03VH4NVNOE/web-coder/687655a5b1dac45b18db4f5c/resource/586a328a-c576-4a4b-ab52-e4c62129d105.png",
                alt: "Pharmacist providing clinical care",
                className: "rounded-2xl shadow-2xl"
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "absolute -top-4 -right-4 w-full h-full bg-gradient-to-br from-cyan-500 to-cyan-500 rounded-2xl opacity-20" })
          ] })
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("section", { className: "py-20 bg-gray-50", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "text-center mb-16", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Badge, { className: "bg-gradient-to-r from-blue-400 to-cyan-500 text-white border-0 mb-4", children: "THE CLINICALRXQ ADVANTAGE" }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("h2", { className: "text-4xl font-bold mb-4", children: [
            "A better way to build your",
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "bg-gradient-to-r from-cyan-500 to-teal-600 bg-clip-text text-transparent", children: "clinical practice" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-xl text-gray-600 max-w-3xl mx-auto", children: "Our integrated ecosystem addresses the primary barriers\u2014time, workflow, and profitability\u2014that have historically hindered widespread adoption of advanced clinical services." })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-8", children: features.map((feature, index2) => /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(
          Card,
          {
            className: `relative overflow-hidden transition-all duration-300 hover:shadow-xl cursor-pointer ${activeFeature === index2 ? "ring-2 ring-cyan-500" : ""}`,
            onClick: () => setActiveFeature(index2),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: `absolute inset-0 bg-gradient-to-br ${feature.color} opacity-5` }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(CardHeader, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
                  "div",
                  {
                    className: `w-12 h-12 rounded-lg bg-gradient-to-br ${feature.color} flex items-center justify-center mb-4`,
                    children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(feature.icon, { className: "h-6 w-6 text-white" })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardTitle, { className: "text-xl", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(SafeText2, { value: feature.title }) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(SafeText2, { value: feature.description }) }) })
            ]
          },
          index2
        )) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("section", { className: "py-20 bg-gradient-to-br from-gray-900 to-gray-800 text-white", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "mb-14 text-left", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-2xl sm:text-3xl font-semibold text-white/90", children: "Comprehensive, Team-Based" }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h2", { className: "text-4xl sm:text-5xl font-extrabold mt-1", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "bg-gradient-to-r from-blue-500 to-cyan-400 bg-clip-text text-transparent", children: "Training & Resources" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-lg sm:text-xl text-gray-300 mt-6 max-w-3xl", children: "Practice-based training modules, step-by-step implementation protocols, and specialized documentation forms and resources built for community pharmacy teams, by community pharmacy teams." }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-sm sm:text-base text-gray-400 mt-4", children: "Tested. Refined. Shared. Transform the profession by transforming our practice." })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 items-start", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(ProgramCard, { item: programs[0] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(ProgramCard, { item: programs[1] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(ProgramCard, { item: programs[2] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "hidden md:block relative rounded-2xl overflow-hidden bg-gradient-to-br from-gray-800/60 to-gray-900/60 border border-gray-700 shadow-xl", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
              "img",
              {
                src: "https://pub-cdn.sider.ai/u/U03VH4NVNOE/web-coder/687655a5b1dac45b18db4f5c/resource/f91471b8-97b6-486e-b92b-c30c929298d4.png",
                alt: "Pharmacist gesturing to programs",
                className: "w-full h-full object-cover"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "absolute inset-0 bg-gradient-to-t from-gray-900/20 to-transparent" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(ProgramCard, { item: programs[3] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(ProgramCard, { item: programs[4] })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("section", { className: "mx-auto max-w-[1200px] px-4 py-8", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "grid grid-cols-1 gap-4 md:grid-cols-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "rounded-lg border bg-white p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "text-sm font-semibold", children: "Documentation Standardization" }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "text-sm text-slate-600", children: "Legally compliant, professionally designed forms" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "rounded-lg border bg-white p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "text-sm font-semibold", children: "Workflow Optimization" }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "text-sm text-slate-600", children: "Step-by-step implementation guides and training" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "rounded-lg border bg-white p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "text-sm font-semibold", children: "Revenue Diversification" }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "text-sm text-slate-600", children: "Medical billing capabilities and reimbursable services" })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("section", { className: "py-20 bg-gray-50", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "text-center mb-16", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Badge, { className: "bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300 text-white border-0 mb-4", children: "THE CLINICALRXQ FOUNDATION" }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("h2", { className: "text-4xl font-bold mb-4", children: [
            "The Three",
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300 bg-clip-text text-transparent", children: "Pillars" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-xl text-gray-600 max-w-3xl mx-auto", children: "Three foundational principles that work in concert to overcome the most significant barriers to practice transformation" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Card, { className: "relative overflow-hidden hover:shadow-xl transition-all duration-300", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "absolute inset-0 bg-gradient-to-br from-blue-600 to-cyan-500 opacity-5" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(CardHeader, { className: "relative z-10", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "w-16 h-16 rounded-xl bg-gradient-to-br from-blue-600 to-cyan-500 flex items-center justify-center mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Target, { className: "h-8 w-8 text-white" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardTitle, { className: "text-2xl mb-2", children: "The Operational Flywheel" }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600 font-medium", children: "A self-reinforcing cycle of care and revenue" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardContent, { className: "relative z-10", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("ul", { className: "space-y-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("li", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.CheckCircle, { className: "h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "text-gray-700", children: "TimeMyMeds creates predictable monthly appointments" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("li", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.CheckCircle, { className: "h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "text-gray-700", children: "Protected time enables billable clinical services" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("li", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.CheckCircle, { className: "h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "text-gray-700", children: "Revenue funds program expansion" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("li", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.CheckCircle, { className: "h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "text-gray-700", children: "More patients = more clinical opportunities" })
              ] })
            ] }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Card, { className: "relative overflow-hidden hover:shadow-xl transition-all duration-300", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "absolute inset-0 bg-gradient-to-br from-cyan-500 to-teal-400 opacity-5" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(CardHeader, { className: "relative z-10", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "w-16 h-16 rounded-xl bg-gradient-to-br from-cyan-500 to-teal-400 flex items-center justify-center mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Users, { className: "h-8 w-8 text-white" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardTitle, { className: "text-2xl mb-2", children: "Technician as Force Multiplier" }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600 font-medium", children: "Strategic elevation of the pharmacy technician" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardContent, { className: "relative z-10", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("ul", { className: "space-y-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("li", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.CheckCircle, { className: "h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "text-gray-700", children: "Technicians manage MTM platforms and scheduling" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("li", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.CheckCircle, { className: "h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "text-gray-700", children: "Handle all paperwork and documentation" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("li", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.CheckCircle, { className: "h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "text-gray-700", children: "Process billing and claims submission" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("li", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.CheckCircle, { className: "h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "text-gray-700", children: "Pharmacists focus exclusively on clinical care" })
              ] })
            ] }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Card, { className: "relative overflow-hidden hover:shadow-xl transition-all duration-300", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "absolute inset-0 bg-gradient-to-br from-teal-400 to-green-400 opacity-5" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(CardHeader, { className: "relative z-10", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "w-16 h-16 rounded-xl bg-gradient-to-br from-teal-400 to-green-400 flex items-center justify-center mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Shield, { className: "h-8 w-8 text-white" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardTitle, { className: "text-2xl mb-2", children: "Turnkey Clinical Infrastructure" }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600 font-medium", children: "Complete 'business-in-a-box' solution" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardContent, { className: "relative z-10", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("ul", { className: "space-y-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("li", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.CheckCircle, { className: "h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "text-gray-700", children: "Step-by-step Standard Operating Procedures" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("li", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.CheckCircle, { className: "h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "text-gray-700", children: "All necessary forms and worksheets" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("li", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.CheckCircle, { className: "h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "text-gray-700", children: "Specific CPT, HCPCS, and ICD-10 codes" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("li", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.CheckCircle, { className: "h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "text-gray-700", children: "Software platform navigation guides" })
              ] })
            ] }) })
          ] })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("section", { className: "py-20 bg-white", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "text-center mb-16", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("h2", { className: "text-4xl font-bold mb-4", children: [
            "The ClinicalRxQ",
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300 bg-clip-text text-transparent", children: "Difference" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-xl text-gray-600 max-w-3xl mx-auto", children: "We don't just teach clinical knowledge\u2014we provide the complete infrastructure for successful implementation" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Card, { className: "hover:shadow-lg transition-shadow", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-center gap-4 mb-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "w-12 h-12 rounded-lg bg-gradient-to-br from-blue-600 via-cyan-500 to-teal-300 flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Stethoscope, { className: "h-6 w-6 text-white" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardTitle, { className: "text-lg", children: "Designed by Community Pharmacists" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600", children: "Every protocol was created and tested in real community pharmacy settings by practicing pharmacists who understand your daily challenges." }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Card, { className: "hover:shadow-lg transition-shadow", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-center gap-4 mb-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "w-12 h-12 rounded-lg bg-gradient-to-br from-blue-600 via-cyan-500 to-teal-300 flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.BookOpen, { className: "h-6 w-6 text-white" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardTitle, { className: "text-lg", children: "Implementation, Not Just Education" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600", children: "We teach the 'how,' not just the 'what.' Complete operational toolkits ensure you can launch services immediately and correctly." }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Card, { className: "hover:shadow-lg transition-shadow", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-center gap-4 mb-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "w-12 h-12 rounded-lg bg-gradient-to-br from-blue-600 via-cyan-500 to-teal-300 flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.TrendingUp, { className: "h-6 w-6 text-white" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardTitle, { className: "text-lg", children: "Proven Financial Models" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600", children: "Each service includes detailed billing protocols and proven revenue models. TimeMyMeds alone generates $75,000 per 100 patients enrolled." }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Card, { className: "hover:shadow-lg transition-shadow", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-center gap-4 mb-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "w-12 h-12 rounded-lg bg-gradient-to-br from-blue-600 via-cyan-500 to-teal-300 flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Heart, { className: "h-6 w-6 text-white" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardTitle, { className: "text-lg", children: "Patient-Centered Approach" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600", children: "Transform from product-centric dispensing to patient-centered care that improves outcomes and builds lasting relationships." }) })
          ] })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("section", { className: "py-20 bg-gray-50", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "text-center mb-12", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("h2", { className: "text-3xl font-bold mb-4", children: [
          "Who We",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300 bg-clip-text text-transparent", children: "Serve" })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Card, { className: "text-center", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(CardContent, { className: "p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Lightbulb, { className: "h-12 w-12 text-cyan-500 mx-auto mb-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h3", { className: "font-semibold mb-2", children: "Licensed Pharmacists" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600 text-sm", children: "Community-based practitioners ready to expand their clinical services and practice at the top of their license" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Card, { className: "text-center", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(CardContent, { className: "p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Users, { className: "h-12 w-12 text-cyan-500 mx-auto mb-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h3", { className: "font-semibold mb-2", children: "Certified Pharmacy Technicians" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600 text-sm", children: "Essential team members who multiply pharmacist effectiveness through operational excellence" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Card, { className: "text-center", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(CardContent, { className: "p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Heart, { className: "h-12 w-12 text-cyan-500 mx-auto mb-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h3", { className: "font-semibold mb-2", children: "All Practice Settings" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600 text-sm", children: "From independent single-store pharmacies to large multi-site enterprises seeking transformation" })
          ] }) })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("section", { className: "py-20 bg-gray-50", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "text-center mb-16", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("h2", { className: "text-4xl font-bold mb-6", children: [
          "Our",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("span", { className: "bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300 bg-clip-text text-transparent", children: "Philosophy" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "max-w-4xl mx-auto", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Card, { className: "bg-white shadow-xl", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(CardContent, { className: "p-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Quote, { className: "h-8 w-8 text-cyan-400 mb-4 mx-auto" }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-2xl font-bold text-gray-800 mb-6 leading-relaxed", children: '"Retail is a FOUR-LETTER Word. We are COMMUNITY PHARMACISTS."' }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-lg text-gray-700 mb-4", children: "Retailers sell product. Community Pharmacists deliver medical treatments. We provide counseling and clinical services to accompany the medical treatments we deliver to our patients." }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600 leading-relaxed", children: "Our program emphasizes the important role the Community Pharmacist plays on the healthcare team and trains Community Pharmacists on how to utilize their clinical training inside the community pharmacy workflow." })
        ] }) }) })
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("section", { className: "py-16", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "mx-auto max-w-[1200px] px-4", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-12 items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Badge, { className: "bg-gradient-to-r from-blue-600 to-cyan-500 text-white border-0 mb-4", children: "OUR MISSION" }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h2", { className: "text-3xl font-bold mb-6", children: "Empowering Community Pharmacists" }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-lg text-gray-700 mb-6 leading-relaxed", children: "ClinicalRxQ was founded to address the critical need for standardized, evidence-based clinical pharmacy services in community settings. We provide comprehensive training, protocols, and documentation systems that enable pharmacies to deliver enhanced patient care services." }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-start gap-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Target, { className: "h-5 w-5 text-blue-600 mt-1 flex-shrink-0" }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "font-semibold", children: "Evidence-Based Protocols" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600 text-sm", children: "All resources developed using current clinical guidelines and best practices" })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-start gap-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Users, { className: "h-5 w-5 text-blue-600 mt-1 flex-shrink-0" }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "font-semibold", children: "Team-Based Approach" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600 text-sm", children: "Comprehensive training for both pharmacists and pharmacy technicians" })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex items-start gap-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Heart, { className: "h-5 w-5 text-blue-600 mt-1 flex-shrink-0" }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "font-semibold", children: "Patient-Centered Care" }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600 text-sm", children: "Focus on improving patient outcomes through enhanced pharmacy services" })
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "relative", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
            "img",
            {
              src: "https://pub-cdn.sider.ai/u/U0X7H845ROR/web-coder/689cc75ea616cfbf06746dc2/resource/b497dbb6-85a1-4546-9fda-3e4492cb21d6.jpg",
              alt: "Pharmacy team collaboration",
              className: "rounded-2xl shadow-2xl object-cover w-full h-full"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "absolute -top-4 -right-4 w-full h-full bg-gradient-to-br from-blue-600 via-cyan-500 to-teal-300 rounded-2xl opacity-20" })
        ] })
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("section", { className: "py-16 bg-gray-50", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "mx-auto max-w-[1200px] px-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "text-center mb-12", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h2", { className: "text-3xl font-bold mb-4", children: "Our Values" }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-lg text-gray-600 max-w-2xl mx-auto", children: "The principles that guide everything we do at ClinicalRxQ" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Card, { className: "text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(CardHeader, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "w-16 h-16 rounded-full bg-blue-100 flex items-center justify-center mx-auto mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Award, { className: "h-8 w-8 text-blue-600" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardTitle, { children: "Excellence" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600", children: "We maintain the highest standards in clinical content, training materials, and customer support." }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Card, { className: "text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(CardHeader, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "w-16 h-16 rounded-full bg-cyan-100 flex items-center justify-center mx-auto mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Users, { className: "h-8 w-8 text-cyan-600" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardTitle, { children: "Collaboration" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600", children: "We believe in the power of teamwork and work closely with pharmacy professionals to develop practical solutions." }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Card, { className: "text-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(CardHeader, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "w-16 h-16 rounded-full bg-teal-100 flex items-center justify-center mx-auto mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Heart, { className: "h-8 w-8 text-teal-600" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardTitle, { children: "Compassion" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-gray-600", children: "We are driven by a genuine desire to improve patient care and support community pharmacists in their vital role." }) })
          ] })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("section", { className: "py-20 bg-gradient-to-br from-blue-800 via-cyan-500 to-teal-300", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h2", { className: "text-4xl font-bold text-white mb-6", children: "Ready to Transform Your Practice?" }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "text-xl text-white/90 mb-8", children: "Join thousands of pharmacy professionals who have revolutionized their practice with ClinicalRxQ" }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex flex-col sm:flex-row gap-4 justify-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Link, { to: "/join", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(Button, { size: "lg", className: "bg-blue-800 text-white hover:bg-teal-500 shadow-lg", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.Play, { className: "mr-2 h-5 w-5" }),
            "Start Your Transformation"
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Link, { to: "/contact", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(
            Button,
            {
              size: "lg",
              variant: "outline",
              className: "bg-transparent border-teal-400 text-teal-100 hover:bg-white hover:text-cyan-600",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_lucide_react2.BookOpen, { className: "mr-2 h-5 w-5" }),
                "Get in Touch!"
              ]
            }
          ) })
        ] })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("footer", { className: "bg-[#1A2332] py-10 text-white", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "mx-auto max-w-[1200px] px-4", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h2", { className: "text-2xl font-semibold", children: "Ready to Transform Your Practice?" }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "mx-auto mt-4 flex max-w-md gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
            "input",
            {
              className: "flex-1 rounded-md border border-white/20 bg-white/10 px-3 py-2 text-sm text-white placeholder-white/60 outline-none",
              placeholder: "Enter your email"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Button, { children: "Get Started" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "mt-3 text-xs text-white/70", children: "By subscribing you agree to our Privacy Policy and Terms." })
      ] }) }) })
    ] });
  };
  var Home_default = HomePage;

  // src/components/layout/Footer.tsx
  var import_lucide_react3 = __toESM(require_lucide_react());
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  function Footer() {
    const footerLinks = {
      "Company": [
        { href: "/contact", label: "Contact Us" },
        { href: "/privacy", label: "Privacy Policy" },
        { href: "/terms", label: "Terms of Service" }
      ]
    };
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("footer", { className: "bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-white", children: /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "lg:col-span-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "flex items-center space-x-3 mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("div", { className: "w-10 h-10 bg-gradient-to-br from-blue-600 via-cyan-500 to-teal-300 rounded-full flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("div", { className: "w-8 h-8 bg-white rounded-full flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
              "img",
              {
                src: "https://pub-cdn.sider.ai/u/U03VH4NVNOE/web-coder/687655a5b1dac45b18db4f5c/resource/0fb3f1b8-e6cd-4575-806d-018bad3c9e1a.png",
                alt: "ClinicalRxQ Logo",
                className: "w-6 h-6"
              }
            ) }) }),
            /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "text-xl font-bold", children: [
              /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", { className: "text-white", children: "Clinical" }),
              /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", { className: "bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300 bg-clip-text text-transparent", children: "RxQ" })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("p", { className: "text-gray-300 mb-6 leading-relaxed", children: "Where dispensing meets direct patient care. Empowering community pharmacy professionals with comprehensive training and resources to enhance patient care and business success." }),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("div", { className: "italic text-cyan-400 mb-6", children: '"Retail is a FOUR-LETTER Word. We are COMMUNITY PHARMACISTS."' }),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "space-y-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "flex items-center space-x-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_lucide_react3.Phone, { className: "h-4 w-4 text-cyan-400" }),
              /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", { className: "text-sm text-gray-300", children: "1-800-CLINICAL" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "flex items-center space-x-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_lucide_react3.Mail, { className: "h-4 w-4 text-cyan-400" }),
              /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", { className: "text-sm text-gray-300", children: "info@clinicalrxq.com" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "flex items-center space-x-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_lucide_react3.MapPin, { className: "h-4 w-4 text-cyan-400" }),
              /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", { className: "text-sm text-gray-300", children: "Serving Community Pharmacies Nationwide" })
            ] })
          ] })
        ] }),
        Object.entries(footerLinks).map(([title, links]) => /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("h3", { className: "text-lg font-semibold mb-4 text-white", children: title }),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("ul", { className: "space-y-2", children: links.map((link) => /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
            Link,
            {
              to: link.href,
              className: "text-gray-300 hover:text-cyan-400 transition-colors text-sm",
              children: link.label
            }
          ) }, link.href)) })
        ] }, title))
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("div", { className: "border-t border-gray-700 mt-12 pt-8", children: /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "flex flex-col md:flex-row justify-between items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "text-sm text-gray-400 mb-4 md:mb-0 flex items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", { children: "\xA9 2025 ClinicalRxQ. All rights reserved." }),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", { className: "mx-2", children: "\u2022" }),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("span", { className: "flex items-center", children: [
            "Made with ",
            /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_lucide_react3.Heart, { className: "h-3 w-3 text-red-500 mx-1" }),
            " for Community Pharmacists"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "flex space-x-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("a", { href: "#", className: "text-gray-400 hover:text-cyan-400 transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_lucide_react3.Facebook, { className: "h-5 w-5" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("a", { href: "#", className: "text-gray-400 hover:text-cyan-400 transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_lucide_react3.Twitter, { className: "h-5 w-5" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("a", { href: "#", className: "text-gray-400 hover:text-cyan-400 transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_lucide_react3.Linkedin, { className: "h-5 w-5" }) })
        ] })
      ] }) })
    ] }) });
  }

  // src/components/ui/input.tsx
  var React18 = __toESM(require_react());
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  var Input = React18.forwardRef(
    ({ className, type, ...props }, ref) => {
      return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
        "input",
        {
          type,
          className: cn(
            "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
            className
          ),
          ref,
          ...props
        }
      );
    }
  );
  Input.displayName = "Input";

  // src/components/ui/textarea.tsx
  var React19 = __toESM(require_react());
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  var Textarea = React19.forwardRef(
    ({ className, ...props }, ref) => {
      return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        "textarea",
        {
          className: cn(
            "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
            className
          ),
          ref,
          ...props
        }
      );
    }
  );
  Textarea.displayName = "Textarea";

  // src/pages/Contact.tsx
  var import_lucide_react4 = __toESM(require_lucide_react());
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  function Contact() {
    const supportTypes = [
      {
        icon: import_lucide_react4.Users,
        title: "Implementation Support",
        description: "Expert guidance for launching your clinical programs",
        features: [
          "Setup assistance for all protocols",
          "Workflow integration strategies",
          "Team training coordination"
        ]
      },
      {
        icon: import_lucide_react4.BookOpen,
        title: "Educational Resources",
        description: "Comprehensive training materials and documentation",
        features: [
          "Video training modules",
          "Step-by-step protocol manuals",
          "Downloadable forms and worksheets"
        ]
      },
      {
        icon: import_lucide_react4.Award,
        title: "Billing & Coding Support",
        description: "Navigate medical billing with confidence",
        features: [
          "CPT and ICD-10 coding guidance",
          "Claim submission protocols",
          "Reimbursement optimization"
        ]
      },
      {
        icon: import_lucide_react4.Video,
        title: "Ongoing Training",
        description: "Continuous education and updates",
        features: [
          "Regular webinars and updates",
          "Best practice sharing",
          "Clinical case discussions"
        ]
      }
    ];
    const programHighlights = [
      {
        icon: import_lucide_react4.FileText,
        title: "Complete Protocol Manuals",
        description: "Detailed SOPs for pharmacists and technicians ready for immediate implementation"
      },
      {
        icon: import_lucide_react4.Lightbulb,
        title: "Proven Methodologies",
        description: "Field-tested by community pharmacists in real practice settings"
      },
      {
        icon: import_lucide_react4.Clock,
        title: "Time-Efficient Training",
        description: "Structured modules designed to fit into your busy schedule"
      }
    ];
    const handleSubmit = (e) => {
      e.preventDefault();
      console.log("Form submitted");
    };
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "min-h-screen bg-white", children: [
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Header, {}),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("section", { className: "relative min-h-[60vh] flex items-center justify-center overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "absolute inset-0 bg-gradient-to-br from-blue-600 via-cyan-500 to-teal-300" }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "absolute inset-0 bg-[url('https://pub-cdn.sider.ai/u/U03VH4NVNOE/web-coder/687655a5b1dac45b18db4f5c/resource/cd53336d-d6e2-4c6b-bf62-bba9d1f359ba.png')] bg-center bg-cover opacity-20" }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "relative z-10 max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center text-white", children: [
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Badge, { className: "bg-white/20 text-white border-white/30", children: "Your Success is Our Mission" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("h1", { className: "text-5xl lg:text-6xl font-bold mb-6", children: "Contact ClinicalRxQ" }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "text-xl text-white/90 mb-8 max-w-3xl mx-auto leading-relaxed", children: "Ready to transform your pharmacy practice? Our team is here to guide you through implementing clinical services that improve patient outcomes and practice profitability." })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("section", { className: "py-20 bg-gray-50", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(Card, { className: "shadow-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(CardHeader, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "flex items-center gap-2 mb-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(import_lucide_react4.MessageCircle, { className: "h-5 w-5 text-cyan-500" }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(CardTitle, { children: "Get Started Today" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "text-gray-600", children: "Tell us about your pharmacy and goals for clinical service expansion" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("label", { className: "block text-sm font-medium mb-2", children: "First Name *" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Input, { placeholder: "John", required: true })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("label", { className: "block text-sm font-medium mb-2", children: "Last Name *" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Input, { placeholder: "Doe", required: true })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("label", { className: "block text-sm font-medium mb-2", children: "Email *" }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Input, { type: "email", placeholder: "john@pharmacy.com", required: true })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("label", { className: "block text-sm font-medium mb-2", children: "Phone" }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Input, { type: "tel", placeholder: "(555) 123-4567" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("label", { className: "block text-sm font-medium mb-2", children: "Pharmacy Name" }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Input, { placeholder: "Community Care Pharmacy" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("label", { className: "block text-sm font-medium mb-2", children: "Practice Setting" }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("select", { className: "w-full p-3 border border-gray-300 rounded-lg", children: [
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("option", { children: "Independent Community Pharmacy" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("option", { children: "Chain Community Pharmacy" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("option", { children: "Health System Outpatient Pharmacy" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("option", { children: "Specialty Pharmacy" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("option", { children: "Other" })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("label", { className: "block text-sm font-medium mb-2", children: "Programs of Interest" }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("select", { className: "w-full p-3 border border-gray-300 rounded-lg", children: [
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("option", { children: "All Programs - Complete Ecosystem" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("option", { children: "MTM The Future Today" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("option", { children: "TimeMyMeds Synchronization" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("option", { children: "Test & Treat Services" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("option", { children: "HbA1c Testing" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("option", { children: "Pharmacist-Initiated Contraceptives" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("option", { children: "Medical Billing & Coding Training" })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("label", { className: "block text-sm font-medium mb-2", children: "Message" }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
                Textarea,
                {
                  placeholder: "Tell us about your current practice challenges and goals for implementing clinical services...",
                  rows: 5,
                  required: true
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(
              Button,
              {
                type: "submit",
                className: "w-full bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300 hover:from-blue-700 hover:via-cyan-600 hover:to-teal-400",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(import_lucide_react4.MessageCircle, { className: "mr-2 h-4 w-4" }),
                  "Submit Inquiry"
                ]
              }
            )
          ] }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "space-y-8", children: [
          /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "flex items-center gap-2 mb-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(import_lucide_react4.Mail, { className: "h-5 w-5 text-cyan-500" }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(CardTitle, { children: "Direct Contact" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "space-y-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "font-semibold mb-1", children: "Email" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "text-gray-600", children: "info@clinicalrxq.com" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "font-semibold mb-1", children: "Phone" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "text-gray-600", children: "Contact us via email for phone consultation" })
              ] })
            ] }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(Card, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "flex items-center gap-2 mb-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(import_lucide_react4.Headphones, { className: "h-5 w-5 text-cyan-500" }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(CardTitle, { children: "What to Expect" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "space-y-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(import_lucide_react4.CheckCircle, { className: "h-5 w-5 text-green-500 mt-1 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "font-semibold", children: "Personalized Consultation" }),
                  /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "text-sm text-gray-600", children: "Discuss your specific practice needs and goals" })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(import_lucide_react4.CheckCircle, { className: "h-5 w-5 text-green-500 mt-1 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "font-semibold", children: "Program Recommendations" }),
                  /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "text-sm text-gray-600", children: "Customized implementation roadmap for your pharmacy" })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(import_lucide_react4.CheckCircle, { className: "h-5 w-5 text-green-500 mt-1 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "font-semibold", children: "Financial Analysis" }),
                  /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "text-sm text-gray-600", children: "Revenue projections based on proven models" })
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "flex items-start gap-3", children: [
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(import_lucide_react4.CheckCircle, { className: "h-5 w-5 text-green-500 mt-1 flex-shrink-0" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "font-semibold", children: "Implementation Timeline" }),
                  /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "text-sm text-gray-600", children: "Step-by-step plan for service launch" })
                ] })
              ] })
            ] }) })
          ] })
        ] })
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("section", { className: "py-20 bg-white", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "text-center mb-16", children: [
          /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("h2", { className: "text-3xl font-bold mb-4", children: [
            "Comprehensive",
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300 bg-clip-text text-transparent", children: "Support System" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "text-lg text-gray-600 max-w-2xl mx-auto", children: "From initial implementation to ongoing optimization, we provide the resources and guidance you need for success" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8", children: supportTypes.map((support, index2) => /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(Card, { className: "hover:shadow-lg transition-shadow", children: [
          /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(CardHeader, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "flex items-center justify-center w-12 h-12 bg-gradient-to-br from-blue-600 via-cyan-500 to-teal-300 rounded-lg mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(support.icon, { className: "h-6 w-6 text-white" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(CardTitle, { className: "text-lg", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(SafeText, { value: support.title }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(CardContent, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "text-gray-600 mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(SafeText, { value: support.description }) }),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("ul", { className: "space-y-2", children: support.features.map((feature, i3) => /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("li", { className: "flex items-center gap-2 text-sm", children: [
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(import_lucide_react4.CheckCircle, { className: "h-3 w-3 text-green-500 flex-shrink-0" }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(SafeText, { value: feature }) })
            ] }, i3)) })
          ] })
        ] }, index2)) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("section", { className: "py-20 bg-gray-50", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "text-center mb-12", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("h2", { className: "text-3xl font-bold mb-4", children: [
          "Why Choose",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300 bg-clip-text text-transparent", children: "ClinicalRxQ" })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-8", children: programHighlights.map((highlight, index2) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Card, { className: "text-center", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(CardContent, { className: "p-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "flex items-center justify-center w-16 h-16 bg-gradient-to-br from-blue-600 via-cyan-500 to-teal-300 rounded-xl mx-auto mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(highlight.icon, { className: "h-8 w-8 text-white" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("h3", { className: "font-semibold text-lg mb-2", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(SafeText, { value: highlight.title }) }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "text-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(SafeText, { value: highlight.description }) })
        ] }) }, index2)) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("section", { className: "py-20 bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("div", { className: "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("h2", { className: "text-4xl font-bold text-white mb-6", children: "Transform Your Practice Today" }),
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("p", { className: "text-xl text-white/90 mb-8", children: "Don't let another day pass with missed clinical opportunities. Start building the patient-centered practice you've always envisioned." })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Footer, {})
    ] });
  }

  // src/pages/Login.tsx
  var import_react4 = __toESM(require_react());
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  function Login() {
    const navigate = useNavigate();
    const { login } = useAuthStore();
    const [form, setForm] = (0, import_react4.useState)({ email: "", password: "" });
    const [submitting, setSubmitting] = (0, import_react4.useState)(false);
    const [error, setError] = (0, import_react4.useState)(null);
    async function handleSubmit(e) {
      e.preventDefault();
      setSubmitting(true);
      setError(null);
      try {
        const ok = await login(form.email.trim(), form.password);
        if (ok) {
          navigate("/dashboard");
        } else {
          setError("Login succeeded but no matching account was found. Contact support.");
        }
      } catch {
        setError("Invalid email or password, or account not found.");
      } finally {
        setSubmitting(false);
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "min-h-[calc(100vh-4rem)] w-full flex items-start justify-center py-10 px-4", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "w-full max-w-md", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(Card, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(CardTitle, { children: "Account Login" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("form", { className: "space-y-4", onSubmit: handleSubmit, children: [
        /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "grid gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("label", { className: "text-sm font-medium", children: "Email address" }),
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            Input,
            {
              type: "email",
              placeholder: "you@example.com",
              value: form.email,
              onChange: (e) => setForm((s3) => ({ ...s3, email: e.target.value })),
              required: true
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "grid gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("label", { className: "text-sm font-medium", children: "Password" }),
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            Input,
            {
              type: "password",
              placeholder: "\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022",
              value: form.password,
              onChange: (e) => setForm((s3) => ({ ...s3, password: e.target.value })),
              required: true
            }
          )
        ] }),
        error ? /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "text-xs text-red-600", children: error }) : null,
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Button, { type: "submit", disabled: submitting, children: submitting ? "Signing in\u2026" : "Sign in" })
      ] }) })
    ] }) }) });
  }

  // src/pages/Dashboard.tsx
  var import_react7 = __toESM(require_react());

  // node_modules/zustand/esm/middleware.mjs
  function createJSONStorage(getStorage, options) {
    let storage;
    try {
      storage = getStorage();
    } catch (e) {
      return;
    }
    const persistStorage = {
      getItem: (name) => {
        var _a;
        const parse3 = (str2) => {
          if (str2 === null) {
            return null;
          }
          return JSON.parse(str2, options == null ? void 0 : options.reviver);
        };
        const str = (_a = storage.getItem(name)) != null ? _a : null;
        if (str instanceof Promise) {
          return str.then(parse3);
        }
        return parse3(str);
      },
      setItem: (name, newValue) => storage.setItem(name, JSON.stringify(newValue, options == null ? void 0 : options.replacer)),
      removeItem: (name) => storage.removeItem(name)
    };
    return persistStorage;
  }
  var toThenable = (fn) => (input) => {
    try {
      const result = fn(input);
      if (result instanceof Promise) {
        return result;
      }
      return {
        then(onFulfilled) {
          return toThenable(onFulfilled)(result);
        },
        catch(_onRejected) {
          return this;
        }
      };
    } catch (e) {
      return {
        then(_onFulfilled) {
          return this;
        },
        catch(onRejected) {
          return toThenable(onRejected)(e);
        }
      };
    }
  };
  var persistImpl = (config2, baseOptions) => (set2, get3, api) => {
    let options = {
      storage: createJSONStorage(() => localStorage),
      partialize: (state) => state,
      version: 0,
      merge: (persistedState, currentState) => ({
        ...currentState,
        ...persistedState
      }),
      ...baseOptions
    };
    let hasHydrated = false;
    const hydrationListeners = /* @__PURE__ */ new Set();
    const finishHydrationListeners = /* @__PURE__ */ new Set();
    let storage = options.storage;
    if (!storage) {
      return config2(
        (...args) => {
          console.warn(
            `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`
          );
          set2(...args);
        },
        get3,
        api
      );
    }
    const setItem = () => {
      const state = options.partialize({ ...get3() });
      return storage.setItem(options.name, {
        state,
        version: options.version
      });
    };
    const savedSetState = api.setState;
    api.setState = (state, replace2) => {
      savedSetState(state, replace2);
      return setItem();
    };
    const configResult = config2(
      (...args) => {
        set2(...args);
        return setItem();
      },
      get3,
      api
    );
    api.getInitialState = () => configResult;
    let stateFromStorage;
    const hydrate = () => {
      var _a, _b;
      if (!storage) return;
      hasHydrated = false;
      hydrationListeners.forEach((cb) => {
        var _a2;
        return cb((_a2 = get3()) != null ? _a2 : configResult);
      });
      const postRehydrationCallback = ((_b = options.onRehydrateStorage) == null ? void 0 : _b.call(options, (_a = get3()) != null ? _a : configResult)) || void 0;
      return toThenable(storage.getItem.bind(storage))(options.name).then((deserializedStorageValue) => {
        if (deserializedStorageValue) {
          if (typeof deserializedStorageValue.version === "number" && deserializedStorageValue.version !== options.version) {
            if (options.migrate) {
              const migration = options.migrate(
                deserializedStorageValue.state,
                deserializedStorageValue.version
              );
              if (migration instanceof Promise) {
                return migration.then((result) => [true, result]);
              }
              return [true, migration];
            }
            console.error(
              `State loaded from storage couldn't be migrated since no migrate function was provided`
            );
          } else {
            return [false, deserializedStorageValue.state];
          }
        }
        return [false, void 0];
      }).then((migrationResult) => {
        var _a2;
        const [migrated, migratedState] = migrationResult;
        stateFromStorage = options.merge(
          migratedState,
          (_a2 = get3()) != null ? _a2 : configResult
        );
        set2(stateFromStorage, true);
        if (migrated) {
          return setItem();
        }
      }).then(() => {
        postRehydrationCallback == null ? void 0 : postRehydrationCallback(stateFromStorage, void 0);
        stateFromStorage = get3();
        hasHydrated = true;
        finishHydrationListeners.forEach((cb) => cb(stateFromStorage));
      }).catch((e) => {
        postRehydrationCallback == null ? void 0 : postRehydrationCallback(void 0, e);
      });
    };
    api.persist = {
      setOptions: (newOptions) => {
        options = {
          ...options,
          ...newOptions
        };
        if (newOptions.storage) {
          storage = newOptions.storage;
        }
      },
      clearStorage: () => {
        storage == null ? void 0 : storage.removeItem(options.name);
      },
      getOptions: () => options,
      rehydrate: () => hydrate(),
      hasHydrated: () => hasHydrated,
      onHydrate: (cb) => {
        hydrationListeners.add(cb);
        return () => {
          hydrationListeners.delete(cb);
        };
      },
      onFinishHydration: (cb) => {
        finishHydrationListeners.add(cb);
        return () => {
          finishHydrationListeners.delete(cb);
        };
      }
    };
    if (!options.skipHydration) {
      hydrate();
    }
    return stateFromStorage || configResult;
  };
  var persist = persistImpl;

  // src/stores/uiStore.ts
  var SIDEBAR_WIDTH_EXPANDED = 256;
  var SIDEBAR_WIDTH_COLLAPSED = 72;
  var useUiStore = create()(
    persist(
      (set2) => ({
        sidebarCollapsed: false,
        toggleSidebar: () => set2((s3) => ({ sidebarCollapsed: !s3.sidebarCollapsed })),
        setSidebarCollapsed: (collapsed) => set2({ sidebarCollapsed: collapsed })
      }),
      { name: "ui:state" }
    )
  );

  // src/components/layout/AppShell.tsx
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  function AppShell({ sidebar, header, children }) {
    const { sidebarCollapsed } = useUiStore();
    const sidebarWidth = sidebar ? sidebarCollapsed ? SIDEBAR_WIDTH_COLLAPSED : SIDEBAR_WIDTH_EXPANDED : 0;
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "min-h-screen bg-slate-50 text-slate-900", children: [
      sidebar ? /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
        "aside",
        {
          className: "fixed inset-y-0 left-0 z-40 border-r border-slate-800 bg-slate-900 transition-[width] duration-300 ease-in-out",
          "aria-label": "Primary member navigation",
          style: { width: `${sidebarWidth}px` },
          children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "h-full overflow-y-auto", children: sidebar })
        }
      ) : null,
      /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(
        "div",
        {
          className: "min-h-screen transition-[padding-left] duration-300 ease-in-out",
          style: { paddingLeft: sidebar ? `${sidebarWidth}px` : void 0 },
          children: [
            header ? /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "sticky top-0 z-30 border-b border-slate-200 bg-white/80 backdrop-blur supports-[backdrop-filter]:bg-white/60", children: header }) : null,
            /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("main", { className: "mx-auto w-full max-w-[1440px] px-3 py-4 text-[13px]", children })
          ]
        }
      )
    ] });
  }

  // src/components/auth/AuthContext.tsx
  var import_react5 = __toESM(require_react());
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var AuthContext = (0, import_react5.createContext)({ account: null, member: null });
  function AuthProvider({ children }) {
    const { account, isAuthenticated, checkSession } = useAuthStore();
    (0, import_react5.useEffect)(() => {
      checkSession().catch(() => {
      });
    }, []);
    const member = (0, import_react5.useMemo)(() => {
      if (!isAuthenticated || !account) return null;
      return {
        pharmacyName: account.pharmacyName,
        subscriptionStatus: account.subscriptionStatus,
        email: account.email,
        lastLoginISO: account.createdAt
      };
    }, [isAuthenticated, account]);
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(AuthContext.Provider, { value: { account: account ?? null, member }, children });
  }
  function useAuth() {
    return (0, import_react5.useContext)(AuthContext);
  }

  // src/services/supabaseStorage.ts
  var SUPABASE_BUCKET = "clinicalrxqfiles";
  function stripOneExtension(filename) {
    const lastDot = filename.lastIndexOf(".");
    if (lastDot <= 0) return filename;
    return filename.slice(0, lastDot);
  }
  function buildPublicUrl(path) {
    const base = getSupabaseUrl();
    if (!base) return "";
    const cleanPath = path.replace(/^\/+/, "");
    return `${base}/storage/v1/object/public/${SUPABASE_BUCKET}/${encodeURI(cleanPath)}`;
  }
  async function listPrefix(prefix, opts) {
    const base = getSupabaseUrl();
    const anon = getSupabaseAnonKey();
    if (!base || !anon) {
      throw new Error("Supabase is not configured. Set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY.");
    }
    const url = `${base}/storage/v1/object/list/${encodeURIComponent(SUPABASE_BUCKET)}`;
    const body = {
      prefix: prefix.replace(/^\/+/, "").replace(/\/+$/, ""),
      // no leading/trailing slash
      limit: opts?.limit ?? 100,
      offset: opts?.offset ?? 0,
      sortBy: { column: "name", order: "asc" }
    };
    const res = await fetch(url, {
      method: "POST",
      headers: {
        apikey: anon,
        Authorization: `Bearer ${anon}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(body)
    });
    if (!res.ok) {
      const text = await res.text().catch(() => "");
      throw new Error(`Supabase list failed (${res.status}): ${text || res.statusText}`);
    }
    const data2 = await res.json();
    if (!Array.isArray(data2)) {
      throw new Error("Unexpected Supabase list response.");
    }
    return data2;
  }
  async function listFilesDeep(prefix) {
    const visited = /* @__PURE__ */ new Set();
    const results = [];
    async function walk(pfx) {
      const key = pfx.replace(/\/+$/, "");
      if (visited.has(key)) return;
      visited.add(key);
      const rows = await listPrefix(key);
      for (const row of rows) {
        const name = row.name;
        const isFolder = !row.metadata || typeof row.metadata?.size !== "number";
        if (isFolder) {
          await walk(`${key}/${name}`);
        } else {
          const path = `${key}/${name}`;
          results.push({
            path,
            url: buildPublicUrl(path),
            filename: name,
            title: stripOneExtension(name),
            mimeType: row.metadata?.mimetype || void 0,
            size: typeof row.metadata?.size === "number" ? row.metadata?.size : void 0
          });
        }
      }
    }
    const clean = prefix.replace(/^\/+/, "").replace(/\/+$/, "");
    await walk(clean);
    return results;
  }
  async function listProgramCategory(programSlug, category) {
    const candidates = category === "forms" ? ["forms", "Forms"] : [category];
    const out = [];
    for (const c of candidates) {
      try {
        const prefix = `${programSlug}/${c}`;
        const items = await listFilesDeep(prefix);
        out.push(...items);
      } catch {
      }
    }
    return out;
  }
  async function listGlobalHandouts() {
    return listFilesDeep("patienthandouts");
  }
  async function listGlobalGuidelines() {
    return listFilesDeep("clinicalguidelines");
  }
  async function listGlobalBilling() {
    return listFilesDeep("medicalbilling");
  }
  async function listAllForProgram(programSlug) {
    const [forms, protocols, resources, training] = await Promise.all([
      listProgramCategory(programSlug, "forms"),
      listProgramCategory(programSlug, "protocols"),
      listProgramCategory(programSlug, "resources"),
      listProgramCategory(programSlug, "training")
    ]);
    return { forms, protocols, resources, training };
  }
  function isVideo(item) {
    if (item.mimeType && item.mimeType.startsWith("video/")) return true;
    const lower = item.filename.toLowerCase();
    return lower.endsWith(".mp4") || lower.endsWith(".mov") || lower.endsWith(".m4v") || lower.endsWith(".webm");
  }
  function isPdf(item) {
    return item.filename.toLowerCase().endsWith(".pdf");
  }
  function isSpreadsheet(item) {
    const lower = item.filename.toLowerCase();
    return lower.endsWith(".xls") || lower.endsWith(".xlsx") || lower.endsWith(".csv");
  }
  function isDoc(item) {
    const lower = item.filename.toLowerCase();
    return lower.endsWith(".doc") || lower.endsWith(".docx");
  }

  // src/services/api/index.ts
  function wait(ms) {
    return new Promise((res) => setTimeout(res, ms));
  }
  var Api = {
    /** Get Clinical Programs
     * Normalized to canonical ProgramSlugs used by routes and storage:
     * - mtmthefuturetoday
     * - timemymeds
     * - testandtreat
     * - hba1c
     * - oralcontraceptives
     */
    async getPrograms() {
      await wait(200);
      return [
        {
          slug: "mtmthefuturetoday",
          name: "MTM The Future Today",
          description: "Team-based Medication Therapy Management with proven protocols and technician workflows.",
          icon: "ClipboardCheck",
          resourceCount: 18,
          lastUpdatedISO: new Date(Date.now() - 86400 * 1e3 * 3).toISOString()
        },
        {
          slug: "timemymeds",
          name: "TimeMyMeds",
          description: "Appointment-based care via synchronization workflows that unlock clinical service delivery.",
          icon: "CalendarCheck",
          resourceCount: 12,
          lastUpdatedISO: new Date(Date.now() - 86400 * 1e3 * 10).toISOString()
        },
        {
          slug: "testandtreat",
          name: "Test & Treat Services",
          description: "CLIA-waived testing and treatment plans for Flu, Strep, and COVID-19.",
          icon: "Stethoscope",
          resourceCount: 15,
          lastUpdatedISO: new Date(Date.now() - 86400 * 1e3 * 6).toISOString()
        },
        {
          slug: "hba1c",
          name: "HbA1c Testing",
          description: "POC A1c testing integrated with diabetes care and MTM workflows.",
          icon: "Activity",
          resourceCount: 9,
          lastUpdatedISO: new Date(Date.now() - 86400 * 1e3 * 18).toISOString()
        },
        {
          slug: "oralcontraceptives",
          name: "Oral Contraceptives",
          description: "From patient intake to billing\u2014simplified, step-by-step service workflows.",
          icon: "TestTubes",
          resourceCount: 11,
          lastUpdatedISO: new Date(Date.now() - 86400 * 1e3 * 12).toISOString()
        }
      ];
    },
    /** Get Quick Access tiles */
    async getQuickAccess() {
      await wait(150);
      return [
        {
          id: "qa-1",
          title: "CMR Pharmacist Protocol",
          subtitle: "MTM Protocols",
          cta: "Download",
          icon: "FileText",
          url: buildPublicUrl("mtmthefuturetoday/protocols/MTMTFT%20Pharmacist%20Protocol.pdf"),
          external: true
        },
        {
          id: "qa-2",
          title: "Technician Training Module 1",
          subtitle: "Onboarding",
          cta: "Watch",
          icon: "PlayCircle",
          url: buildPublicUrl("mtmthefuturetoday/training/1%20Introduction%20to%20MTM.mp4"),
          external: true
        },
        {
          id: "qa-3",
          title: "A1c Patient Handout",
          subtitle: "Diabetes Care",
          cta: "Download",
          icon: "FileText",
          url: buildPublicUrl("patienthandouts/Diabetes/Checking%20your%20Blood%20Sugar.pdf"),
          external: true
        },
        {
          id: "qa-4",
          title: "Flu Test Workflow",
          subtitle: "Test & Treat",
          cta: "Download",
          icon: "TestTubes",
          url: buildPublicUrl("testandtreat/protocols/Test%20and%20Treat%20Protocol%20Manual.pdf"),
          external: true
        }
      ];
    },
    /** Get Bookmarked resources for current user */
    async getBookmarkedResources() {
      await wait(120);
      return [
        {
          id: "bm-1",
          name: "Pharmacist CMR Worksheet",
          program: "MTM",
          url: buildPublicUrl("mtmthefuturetoday/Forms/utilityforms/Pharmacist%20CMR%20Worksheet.pdf")
        },
        {
          id: "bm-2",
          name: "TimeMyMeds Protocol",
          program: "TMM",
          url: buildPublicUrl("timemymeds/protocols/TimeMyMeds%20Protocol.pdf")
        },
        {
          id: "bm-3",
          name: "A1c Result CPT Code Billing",
          program: "A1C",
          url: buildPublicUrl("hba1c/resources/A1c%20Result%20CPT%20Code%20Billing.pdf")
        },
        {
          id: "bm-4",
          name: "Strep Treatment \u2013 Peds",
          program: "TNT",
          url: buildPublicUrl("testandtreat/forms/Flu/Flu%20Treatment-Peds.pdf")
        }
      ];
    },
    /** Get recent activity list */
    async getRecentActivity() {
      await wait(160);
      const now = Date.now();
      return [
        {
          id: "ra-1",
          name: "CMR Interview Guide",
          program: "MTM",
          accessedAtISO: new Date(now - 1e3 * 60 * 60).toISOString(),
          url: buildPublicUrl("mtmthefuturetoday/resources/MTMTFT%20Pharmacist%20Form%20Explanations.pdf")
        },
        {
          id: "ra-2",
          name: "Sync Schedule Template",
          program: "TMM",
          accessedAtISO: new Date(now - 1e3 * 60 * 60 * 5).toISOString(),
          url: buildPublicUrl("timemymeds/forms/Enrollment%20Form.pdf")
        },
        {
          id: "ra-3",
          name: "A1c Tech Checklist",
          program: "A1C",
          accessedAtISO: new Date(now - 1e3 * 60 * 60 * 22).toISOString(),
          url: buildPublicUrl("hba1c/protocols/Hemoglobin%20A1c%20Testing%20Protocol.pdf")
        }
      ];
    },
    /** Get announcements */
    async getAnnouncements() {
      await wait(100);
      return [
        { id: "an-1", title: "New: Prescriber Communication Forms", body: "Standardized outreach templates now available in all MTM programs.", dateISO: (/* @__PURE__ */ new Date()).toISOString() },
        { id: "an-2", title: "Sync Workflow Update", body: "Checklist updated for latest payer guidance. Please review by month end.", dateISO: new Date(Date.now() - 86400 * 1e3 * 4).toISOString() }
      ];
    }
  };

  // src/pages/Dashboard.tsx
  var import_lucide_react6 = __toESM(require_lucide_react());

  // src/components/layout/MemberSidebar.tsx
  var import_react6 = __toESM(require_react());
  var import_lucide_react5 = __toESM(require_lucide_react());

  // src/components/common/BrandLogo.tsx
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var LOGO_URL = "https://pub-cdn.sider.ai/u/U03VH4NVNOE/web-coder/687655a5b1dac45b18db4f5c/resource/e6cc61e0-3903-48b8-a88f-6e22f5b73e5b.png";
  function BrandLogo({ size = 28, alt = "ClinicalRxQ logo", className }) {
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
      "img",
      {
        src: LOGO_URL,
        alt,
        style: { width: size, height: size },
        className: ["rounded-md object-contain", className || ""].join(" "),
        draggable: false
      }
    );
  }

  // src/components/layout/MemberSidebar.tsx
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  var PROGRAM_ITEMS = [
    { slug: "timemymeds", label: "TimeMyMeds", Icon: import_lucide_react5.CalendarCheck },
    { slug: "mtmthefuturetoday", label: "MTM The Future Today", Icon: import_lucide_react5.ClipboardCheck },
    { slug: "testandtreat", label: "Test and Treat: Strep, Flu, COVID", Icon: import_lucide_react5.Stethoscope },
    { slug: "hba1c", label: "HbA1c Testing", Icon: import_lucide_react5.Activity },
    { slug: "oralcontraceptives", label: "Oral Contraceptives", Icon: import_lucide_react5.TestTubes }
  ];
  function MemberSidebar() {
    const location = useLocation();
    const { account } = useAuth();
    const { logout } = useAuthStore();
    const { sidebarCollapsed, toggleSidebar } = useUiStore();
    const [openPrograms, setOpenPrograms] = (0, import_react6.useState)(false);
    const [openResources, setOpenResources] = (0, import_react6.useState)(false);
    const isDashboard = location.pathname === "/dashboard";
    const isResources = location.pathname.startsWith("/resources");
    const isAccount = location.pathname.startsWith("/account");
    const activeProgramSlug = (location.pathname.match(/^\/program\/([^/]+)/) || [])[1];
    const activeResourceCat = (0, import_react6.useMemo)(() => {
      const qs = new URLSearchParams(location.search);
      const cat = (qs.get("cat") || "").toLowerCase();
      return cat === "handouts" || cat === "billing" || cat === "clinical" ? cat : null;
    }, [location.search]);
    const itemBase = "flex w-full items-center gap-2 rounded-md px-2.5 py-1.5 text-[13px] transition-colors";
    const itemIdle = "text-slate-300 hover:bg-slate-800 hover:text-white";
    const itemActive = "bg-slate-800 text-white";
    const programGroupActive = openPrograms || Boolean(activeProgramSlug);
    (0, import_react6.useEffect)(() => {
      if (activeProgramSlug && !openPrograms) {
        setOpenPrograms(true);
      }
    }, [activeProgramSlug, openPrograms]);
    (0, import_react6.useEffect)(() => {
      if (isResources && !openResources) {
        setOpenResources(true);
      }
    }, [isResources, openResources]);
    const showLabels = !sidebarCollapsed;
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
      "nav",
      {
        "aria-label": "Member navigation",
        className: "flex h-full flex-col p-2 text-slate-100 text-[13px]",
        "aria-expanded": !sidebarCollapsed,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "mb-2 flex items-center justify-between px-1.5", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(BrandLogo, {}),
              showLabels ? /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "min-w-0", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "text-[13px] font-semibold leading-5", children: "ClinicalRxQ" }),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "truncate text-[11px] text-slate-400", children: account?.pharmacyName ?? "Member" })
              ] }) : null
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
              "button",
              {
                type: "button",
                onClick: toggleSidebar,
                className: "inline-flex h-7 w-7 items-center justify-center rounded-md bg-slate-800/60 text-slate-200 hover:bg-slate-800",
                "aria-label": sidebarCollapsed ? "Expand sidebar" : "Collapse sidebar",
                title: sidebarCollapsed ? "Expand sidebar" : "Collapse sidebar",
                children: sidebarCollapsed ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_lucide_react5.PanelRightOpen, { className: "h-4 w-4" }) : /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_lucide_react5.PanelLeftClose, { className: "h-4 w-4" })
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "flex-1 overflow-y-auto", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
              Link,
              {
                to: "/dashboard",
                className: [itemBase, isDashboard ? itemActive : itemIdle, "mb-1", sidebarCollapsed ? "justify-center" : ""].join(" "),
                title: "Dashboard",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_lucide_react5.LayoutDashboard, { className: "h-3.5 w-3.5" }),
                  showLabels ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { children: "Dashboard" }) : /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "sr-only", children: "Dashboard" })
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "mt-1", children: [
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
                "button",
                {
                  type: "button",
                  className: [
                    itemBase,
                    "w-full",
                    sidebarCollapsed ? "justify-center" : "justify-between",
                    programGroupActive ? itemActive : itemIdle
                  ].join(" "),
                  onClick: () => setOpenPrograms((v) => !v),
                  "aria-expanded": openPrograms,
                  "aria-controls": "programs-group",
                  title: "Clinical Programs",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("span", { className: "inline-flex items-center gap-2", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_lucide_react5.LibraryBig, { className: "h-3.5 w-3.5" }),
                      showLabels ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { children: "Clinical Programs" }) : /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "sr-only", children: "Clinical Programs" })
                    ] }),
                    showLabels ? openPrograms ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_lucide_react5.ChevronDown, { className: "h-3.5 w-3.5" }) : /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_lucide_react5.ChevronRight, { className: "h-3.5 w-3.5" }) : null
                  ]
                }
              ),
              showLabels && openPrograms && /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { id: "programs-group", className: "mt-1 space-y-0.5 pl-2", children: PROGRAM_ITEMS.map(({ slug, label, Icon }) => {
                const active = activeProgramSlug === slug;
                return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  Link,
                  {
                    to: `/program/${slug}`,
                    className: [itemBase, active ? itemActive : itemIdle, "justify-between"].join(" "),
                    title: label,
                    children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("span", { className: "inline-flex items-center gap-2", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Icon, { className: "h-3.5 w-3.5" }),
                      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "truncate", children: label })
                    ] })
                  },
                  slug
                );
              }) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "mt-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
                "button",
                {
                  type: "button",
                  className: [
                    itemBase,
                    "w-full",
                    sidebarCollapsed ? "justify-center" : "justify-between",
                    isResources || openResources ? itemActive : itemIdle
                  ].join(" "),
                  onClick: () => setOpenResources((v) => !v),
                  "aria-expanded": openResources,
                  "aria-controls": "resources-group",
                  title: "Resource Library",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("span", { className: "inline-flex items-center gap-2", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_lucide_react5.LibraryBig, { className: "h-3.5 w-3.5" }),
                      showLabels ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { children: "Resource Library" }) : /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "sr-only", children: "Resource Library" })
                    ] }),
                    showLabels ? openResources ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_lucide_react5.ChevronDown, { className: "h-3.5 w-3.5" }) : /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_lucide_react5.ChevronRight, { className: "h-3.5 w-3.5" }) : null
                  ]
                }
              ),
              showLabels && openResources && /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { id: "resources-group", className: "mt-1 space-y-0.5 pl-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  Link,
                  {
                    to: "/resources?cat=handouts",
                    className: [itemBase, activeResourceCat === "handouts" ? itemActive : itemIdle, "justify-between"].join(" "),
                    title: "Patient Handouts",
                    children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("span", { className: "inline-flex items-center gap-2", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_lucide_react5.FileText, { className: "h-3.5 w-3.5" }),
                      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "truncate", children: "Patient Handouts" })
                    ] })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  Link,
                  {
                    to: "/resources?cat=billing",
                    className: [itemBase, activeResourceCat === "billing" ? itemActive : itemIdle, "justify-between"].join(" "),
                    title: "Medical Billing",
                    children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("span", { className: "inline-flex items-center gap-2", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_lucide_react5.FileSpreadsheet, { className: "h-3.5 w-3.5" }),
                      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "truncate", children: "Medical Billing" })
                    ] })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  Link,
                  {
                    to: "/resources?cat=clinical",
                    className: [itemBase, activeResourceCat === "clinical" ? itemActive : itemIdle, "justify-between"].join(" "),
                    title: "Clinical Resources",
                    children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("span", { className: "inline-flex items-center gap-2", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_lucide_react5.BookText, { className: "h-3.5 w-3.5" }),
                      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "truncate", children: "Clinical Resources" })
                    ] })
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
                  Link,
                  {
                    to: "/resources",
                    className: [itemBase, activeResourceCat === null ? itemActive : itemIdle, "justify-between"].join(" "),
                    title: "All Resources",
                    children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("span", { className: "inline-flex items-center gap-2", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_lucide_react5.ChevronRight, { className: "h-3.5 w-3.5" }),
                      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "truncate", children: "All Resources" })
                    ] })
                  }
                )
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
              Link,
              {
                to: "/account",
                className: [itemBase, isAccount ? itemActive : itemIdle, "mt-0.5", sidebarCollapsed ? "justify-center" : ""].join(" "),
                title: "Account Settings",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_lucide_react5.Settings, { className: "h-3.5 w-3.5" }),
                  showLabels ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { children: "Account Settings" }) : /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "sr-only", children: "Account Settings" })
                ]
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "border-t border-slate-800 pt-2", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(
            "button",
            {
              type: "button",
              onClick: logout,
              className: [
                "flex w-full items-center rounded-md bg-slate-800/60 px-3 py-1.5 text-[12px] text-slate-200 hover:bg-slate-800",
                sidebarCollapsed ? "justify-center gap-0" : "justify-center gap-2"
              ].join(" "),
              title: "Sign Out",
              "aria-label": "Sign Out",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_lucide_react5.LogOut, { className: "h-3.5 w-3.5" }),
                showLabels ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { children: "Sign Out" }) : /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "sr-only", children: "Sign Out" })
              ]
            }
          ) })
        ]
      }
    );
  }

  // src/pages/Dashboard.tsx
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  function iconByName(name) {
    switch ((name || "").trim()) {
      case "ClipboardCheck":
        return require_lucide_react().ClipboardCheck;
      case "CalendarCheck":
        return require_lucide_react().CalendarCheck;
      case "Stethoscope":
        return require_lucide_react().Stethoscope;
      case "Activity":
        return require_lucide_react().Activity;
      case "FileText":
        return require_lucide_react().FileText;
      case "FileSpreadsheet":
        return require_lucide_react().FileSpreadsheet;
      case "TestTubes":
        return require_lucide_react().TestTubes;
      case "PlayCircle":
        return require_lucide_react().PlayCircle;
      case "Star":
        return require_lucide_react().Star;
      default:
        return import_lucide_react6.ArrowRight;
    }
  }
  var StatChip = ({ label }) => /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "rounded-full bg-slate-100 px-2 py-0.5 text-[11px] text-slate-700", children: label });
  var QuickCard = ({ item }) => {
    const Icon = iconByName(item.icon);
    const isVideo3 = item?.mediaType === "video" || item.cta === "Watch";
    const duration = item?.duration;
    const content = isVideo3 ? /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(import_jsx_runtime17.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(import_lucide_react6.PlayCircle, { className: "mr-2 h-3.5 w-3.5" }),
      "Watch"
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(import_jsx_runtime17.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(import_lucide_react6.Download, { className: "mr-2 h-3.5 w-3.5" }),
      "Download"
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Card, { className: "hover:shadow-md", children: [
      /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(CardHeader, { className: "pb-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Icon, { className: "h-4 w-4 text-slate-600" }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardTitle, { className: "text-sm", children: item.title })
        ] }),
        isVideo3 && duration ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "text-[11px] text-slate-500", children: duration }) : null
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardContent, { children: item.url ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("a", { href: item.url, target: "_blank", rel: "noreferrer", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "secondary", className: "h-8 w-full px-3", children: content }) }) : /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Link, { to: "/resources", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "secondary", className: "h-8 w-full px-3", children: content }) }) })
    ] });
  };
  function Dashboard() {
    const { account } = useAuth();
    const [programs, setPrograms] = (0, import_react7.useState)([]);
    const [quick, setQuick] = (0, import_react7.useState)([]);
    const [bookmarks, setBookmarks] = (0, import_react7.useState)([]);
    const [activity, setActivity] = (0, import_react7.useState)([]);
    const [ann, setAnn] = (0, import_react7.useState)([]);
    (0, import_react7.useEffect)(() => {
      let mounted = true;
      async function load() {
        try {
          const [p, q, b, a2, an] = await Promise.all([
            Api.getPrograms(),
            Api.getQuickAccess(),
            Api.getBookmarkedResources(),
            Api.getRecentActivity(),
            Api.getAnnouncements()
          ]);
          if (!mounted) return;
          setPrograms(p);
          setQuick(q);
          setBookmarks(b);
          setActivity(a2);
          setAnn(an);
        } catch (e) {
          console.error("Error loading dashboard data:", e);
        }
      }
      load();
      return () => {
        mounted = false;
      };
    }, []);
    const subColor = (0, import_react7.useMemo)(() => {
      switch (account?.subscriptionStatus) {
        case "active":
          return "bg-green-100 text-green-700";
        case "inactive":
        default:
          return "bg-red-100 text-red-700";
      }
    }, [account?.subscriptionStatus]);
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
      AppShell,
      {
        header: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "mx-auto flex max-w-[1440px] items-center justify-between px-3 py-3 text-[13px]", children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "text-lg font-semibold", children: [
              "Welcome back, ",
              account?.pharmacyName ?? "Member"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "mt-1 flex flex-wrap items-center gap-2 text-[12px] text-slate-600", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("span", { className: `rounded-full px-2 py-0.5 text-[11px] ${subColor}`, children: (account?.subscriptionStatus ?? "inactive").replace(/^\w/, (c) => c.toUpperCase()) }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Link, { to: "/resources", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Button, { variant: "outline", className: "bg-transparent h-8 px-3", children: "Browse Resources" }) })
        ] }),
        sidebar: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(MemberSidebar, {}),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("section", { className: "mb-6 grid grid-cols-1 gap-3 xl:grid-cols-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "xl:col-span-2", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Card, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardHeader, { className: "pb-1.5", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardTitle, { className: "text-sm", children: "Recently Accessed" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "divide-y", children: activity.map((a2) => /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center justify-between py-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "text-[13px] font-medium", children: a2.name }),
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "text-[12px] text-slate-500", children: [
                    a2.program?.toUpperCase(),
                    " \u2022 ",
                    new Date(a2.accessedAtISO).toLocaleString()
                  ] })
                ] }),
                a2.url ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("a", { href: a2.url, target: "_blank", rel: "noreferrer", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Button, { size: "sm", variant: "outline", className: "bg-transparent h-8 px-3", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(import_lucide_react6.Download, { className: "mr-2 h-3.5 w-3.5" }),
                  "Re-download"
                ] }) }) : /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Link, { to: "/resources", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Button, { size: "sm", variant: "outline", className: "bg-transparent h-8 px-3", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(import_lucide_react6.Download, { className: "mr-2 h-3.5 w-3.5" }),
                  "View in Library"
                ] }) })
              ] }, a2.id)) }) })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Card, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardHeader, { className: "pb-1.5", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardTitle, { className: "text-sm", children: "Announcements" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "space-y-3", children: ann.map((an) => /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "rounded-md border p-2.5", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "text-[13px] font-semibold", children: an.title }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "text-[12px] text-slate-500", children: new Date(an.dateISO).toLocaleDateString() }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "mt-0.5 text-[13px] text-slate-700", children: an.body })
              ] }, an.id)) }) })
            ] }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("section", { className: "mb-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "mb-2.5 flex flex-wrap items-center justify-between gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("h2", { className: "text-base font-semibold", children: "Clinical Programs" }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-1.5", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(StatChip, { label: "49+ Active Pharmacies" }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(StatChip, { label: "HIPAA Compliant" }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(StatChip, { label: "Updated Monthly" })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "grid grid-cols-1 gap-3 md:grid-cols-2 xl:grid-cols-3", children: programs.map((p) => {
              const Icon = iconByName(p.icon);
              return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Link, { to: `/program/${p.slug}`, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Card, { className: "group border-blue-50 hover:border-blue-200 hover:shadow-md", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(CardHeader, { className: "pb-1.5", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center justify-between", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-2", children: [
                      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Icon, { className: "h-4 w-4 text-blue-600" }),
                      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardTitle, { className: "text-sm", children: p.name })
                    ] }),
                    /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Badge, { variant: "secondary", className: "text-[11px]", children: [
                      p.resourceCount,
                      " resources"
                    ] })
                  ] }),
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "text-[12px] text-slate-500", children: [
                    "Updated ",
                    p.lastUpdatedISO ? new Date(p.lastUpdatedISO).toLocaleDateString() : "\u2014"
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("p", { className: "text-[13px] text-slate-600", children: p.description }) })
              ] }) }, p.slug);
            }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("section", { className: "mb-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("h2", { className: "mb-2.5 text-base font-semibold", children: "Quick Access" }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "grid grid-cols-1 gap-3 md:grid-cols-2 xl:grid-cols-4", children: quick.map((q) => /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(QuickCard, { item: q }, q.id)) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("section", { className: "mb-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "mb-2.5 flex items-center justify-between", children: [
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("h2", { className: "text-base font-semibold", children: "Your Bookmarked Resources" }),
              /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Link, { to: "/resources", className: "text-[12px] text-blue-700 hover:underline", children: "View All" })
            ] }),
            bookmarks.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "rounded-md border border-dashed p-4 text-[13px] text-slate-600", children: "No bookmarks yet. Explore the Resource Library and add bookmarks for quick access." }) : /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "grid grid-cols-1 gap-3 md:grid-cols-2 xl:grid-cols-4", children: bookmarks.map((b) => {
              const isVideo3 = b?.mediaType === "video" || typeof b?.duration === "string" || String(b?.type || "").toLowerCase() === "video" || (b.url || "").toLowerCase().match(/\.(mp4|mov|m4v|webm)$/) != null;
              const duration = b?.duration;
              return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Card, { className: "hover:shadow-sm", children: [
                /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(CardHeader, { className: "pb-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "flex items-center gap-2", children: [
                    isVideo3 ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(import_lucide_react6.PlayCircle, { className: "h-4 w-4 text-slate-600" }) : /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(import_lucide_react6.FileText, { className: "h-4 w-4 text-slate-600" }),
                    /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardTitle, { className: "text-[13px]", children: b.name })
                  ] }),
                  isVideo3 && duration ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "text-[11px] text-slate-500", children: duration }) : null
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(CardContent, { children: b.url ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("a", { href: b.url, target: "_blank", rel: "noreferrer", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Button, { size: "sm", variant: "secondary", className: "h-8 w-full px-3", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(import_lucide_react6.Download, { className: "mr-2 h-3.5 w-3.5" }),
                  "Download"
                ] }) }) : /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Link, { to: "/resources", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(Button, { size: "sm", variant: "secondary", className: "h-8 w-full px-3", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(import_lucide_react6.Download, { className: "mr-2 h-3.5 w-3.5" }),
                  "View in Library"
                ] }) }) })
              ] }, b.id);
            }) })
          ] })
        ]
      }
    );
  }

  // src/pages/Resources.tsx
  var import_react8 = __toESM(require_react());
  var import_lucide_react7 = __toESM(require_lucide_react());

  // src/services/storageCatalog.ts
  var ProgramSlugs = [
    "mtmthefuturetoday",
    "timemymeds",
    "testandtreat",
    "hba1c",
    "oralcontraceptives"
  ];
  async function pgSelect(pathAndQuery) {
    const base = getSupabaseUrl();
    const anon = getSupabaseAnonKey();
    if (!base) {
      throw new Error("Supabase URL is not configured. Set VITE_SUPABASE_URL or localStorage SUPABASE_URL.");
    }
    const url = `${base}/rest/v1${pathAndQuery}`;
    const res = await fetch(url, {
      method: "GET",
      headers: {
        apikey: anon,
        Authorization: `Bearer ${anon}`,
        Accept: "application/json"
      }
    });
    if (!res.ok) {
      const text = await res.text().catch(() => "");
      throw new Error(text || `PostgREST error: ${res.status}`);
    }
    if (res.status === 204) return [];
    return await res.json();
  }
  function mapRowToItem(row) {
    const filename = row.file_name;
    const title = stripOneExtension(filename);
    const path = row.file_path.replace(/^\/+/, "");
    const url = row.file_url && row.file_url.trim().length > 0 ? row.file_url : buildPublicUrl(path);
    return {
      path,
      url,
      filename,
      title,
      mimeType: row.mime_type || void 0,
      size: typeof row.file_size === "number" ? row.file_size : void 0
    };
  }
  async function listCatalogByPrefixes(prefixes) {
    if (!prefixes.length) return [];
    const bucket = "clinicalrxqfiles";
    const results = {};
    for (const p of prefixes) {
      const encoded = encodeURIComponent(`${p}%`);
      const path = `/storage_files_catalog?select=*&bucket_name=eq.${encodeURIComponent(
        bucket
      )}&file_path=ilike.${encoded}&order=file_path.asc`;
      const rows = await pgSelect(path);
      for (const r3 of rows) {
        const item = mapRowToItem(r3);
        results[item.path] = item;
      }
    }
    return Object.values(results);
  }
  async function catalogGlobalHandouts() {
    return listCatalogByPrefixes(["patienthandouts/"]);
  }
  async function catalogGlobalGuidelines() {
    return listCatalogByPrefixes(["clinicalguidelines/"]);
  }
  async function catalogGlobalBilling() {
    return listCatalogByPrefixes(["medicalbilling/"]);
  }
  async function catalogProgramCategory(programSlug, category) {
    const candidates = category === "forms" ? ["forms", "Forms"] : [category];
    const prefixes = candidates.map((c) => `${programSlug}/${c}/`);
    return listCatalogByPrefixes(prefixes);
  }
  async function getGlobalCategory(cat) {
    try {
      switch (cat) {
        case "handouts":
          return catalogGlobalHandouts();
        case "guidelines":
          return catalogGlobalGuidelines();
        case "billing":
          return catalogGlobalBilling();
        default:
          return [];
      }
    } catch {
      switch (cat) {
        case "handouts":
          return listGlobalHandouts();
        case "guidelines":
          return listGlobalGuidelines();
        case "billing":
          return listGlobalBilling();
        default:
          return [];
      }
    }
  }
  async function getProgramResourcesGrouped(slug) {
    try {
      const [forms, protocols, resources, training] = await Promise.all([
        catalogProgramCategory(slug, "forms"),
        catalogProgramCategory(slug, "protocols"),
        catalogProgramCategory(slug, "resources"),
        catalogProgramCategory(slug, "training")
      ]);
      return { forms, protocols, resources, training };
    } catch {
      return listAllForProgram(slug);
    }
  }
  var ProgramMeta = {
    mtmthefuturetoday: {
      name: "MTM The Future Today",
      description: "Team-based Medication Therapy Management program with proven protocols and scalable results."
    },
    timemymeds: {
      name: "TimeMyMeds",
      description: "Appointment-based synchronization to enable consistent clinical service delivery."
    },
    testandtreat: {
      name: "Test & Treat Services",
      description: "Patient assessments, CLIA-waived testing, and treatment guidance for flu, strep, and COVID-19."
    },
    hba1c: {
      name: "HbA1c Testing",
      description: "Training and resources for A1c point-of-care testing and quality metrics."
    },
    oralcontraceptives: {
      name: "Pharmacist-Initiated Oral Contraceptives",
      description: "From patient intake to billing and documentation\u2014simplified, step-by-step service workflows."
    }
  };
  async function listProgramsFromStorage() {
    return ProgramSlugs.map((slug) => {
      const meta = ProgramMeta[slug];
      return {
        slug,
        name: meta?.name ?? slug,
        description: meta?.description ?? "Open to view training modules and resources."
      };
    });
  }

  // src/pages/Resources.tsx
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  var CONDITION_OPTIONS = [
    { key: "diabetes", label: "Diabetes", keywords: ["diabetes", "glycemic", "blood sugar", "a1c", "hba1c"] },
    { key: "hypertension", label: "Hypertension", keywords: ["hypertension", "blood pressure"] },
    { key: "heart-failure", label: "Heart Failure", keywords: ["heart failure", "chf"] },
    { key: "asthma-copd", label: "Asthma/COPD", keywords: ["asthma", "copd"] },
    { key: "lipids", label: "Lipids/Cholesterol", keywords: ["cholesterol", "lipid", "statin"] },
    {
      key: "infections",
      label: "Infections (Flu/Strep/COVID/UTI)",
      keywords: ["flu", "influenza", "strep", "covid", "covid-19", "uti", "urinary tract"]
    },
    { key: "contraceptives", label: "Contraceptives", keywords: ["contraceptive", "us mec", "us spr"] },
    {
      key: "pain-opioids",
      label: "Pain & Opioids",
      keywords: ["opioid", "opioids", "low back pain", "opioid taper", "tapering"]
    }
  ];
  function isVideo2({ url, mimeType }) {
    const mime = (mimeType || "").toLowerCase();
    if (mime.startsWith("video/")) return true;
    const u = (url || "").toLowerCase();
    return [".mp4", ".mov", ".m4v", ".webm", ".avi", ".mkv"].some((ext) => u.endsWith(ext));
  }
  function FileKindIcon({ isVid }) {
    return isVid ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "flex h-8 w-8 items-center justify-center rounded-md bg-gradient-to-br from-blue-600 via-cyan-500 to-teal-300", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(import_lucide_react7.Play, { className: "h-4 w-4 text-white" }) }) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "flex h-8 w-8 items-center justify-center rounded-md bg-gradient-to-br from-blue-600 via-cyan-500 to-teal-300", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(import_lucide_react7.FileText, { className: "h-4 w-4 text-white" }) });
  }
  function SidebarCheckboxFilters({
    value,
    onChange,
    condition,
    onSelectCondition
  }) {
    function Row({
      label,
      checked,
      onClick
    }) {
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("label", { className: "flex cursor-pointer items-center gap-2 rounded-md px-1 py-1 hover:bg-slate-50", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          "input",
          {
            type: "checkbox",
            className: "h-4 w-4 rounded border-slate-300 text-blue-600",
            checked,
            onChange: onClick,
            "aria-checked": checked
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { className: "text-sm text-slate-700", children: label })
      ] });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "space-y-4", "aria-label": "Content filters", children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "text-xs font-semibold uppercase tracking-wide text-slate-500", children: "Filters" }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          "button",
          {
            type: "button",
            onClick: () => onChange("all"),
            className: "rounded px-2 py-1 text-xs text-blue-700 hover:bg-blue-50",
            "aria-label": "Clear all filters",
            children: "Clear Filters"
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "mb-1 text-xs font-semibold uppercase tracking-wide text-slate-500", children: "Global categories" }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "space-y-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
            Row,
            {
              label: "Patient handouts",
              checked: value === "handouts",
              onClick: () => onChange("handouts")
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
            Row,
            {
              label: "Clinical guidelines",
              checked: value === "clinical",
              onClick: () => onChange("clinical")
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
            Row,
            {
              label: "Medical billing",
              checked: value === "billing",
              onClick: () => onChange("billing")
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "mb-1 text-xs font-semibold uppercase tracking-wide text-slate-500", children: "Content types" }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "space-y-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
            Row,
            {
              label: "Program files",
              checked: value === "program",
              onClick: () => onChange("program")
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Row, { label: "Videos", checked: value === "videos", onClick: () => onChange("videos") })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "mb-1 text-xs font-semibold uppercase tracking-wide text-slate-500", children: "Medical conditions" }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "space-y-1", children: CONDITION_OPTIONS.map((opt) => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          Row,
          {
            label: opt.label,
            checked: value === "conditions" && condition === opt.key,
            onClick: () => onSelectCondition(opt.key)
          },
          opt.key
        )) })
      ] })
    ] });
  }
  function QuickFilterCard({
    title,
    subtitle,
    Icon,
    active,
    onClick
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
      "button",
      {
        type: "button",
        onClick,
        "aria-pressed": active,
        className: [
          "aspect-square w-full rounded-xl border transition-shadow hover:shadow-md",
          active ? "border-blue-300 bg-blue-50" : "border-slate-200 bg-white"
        ].join(" "),
        children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex h-full w-full flex-col items-center justify-center p-4 text-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "mb-3 flex h-12 w-12 items-center justify-center rounded-lg bg-gradient-to-br from-blue-600 via-cyan-500 to-teal-300", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Icon, { className: "h-6 w-6 text-white" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "text-sm font-semibold text-slate-900", children: title }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "mt-1 text-xs text-slate-600", children: subtitle })
        ] })
      }
    );
  }
  function useFilterFromQuery() {
    const location = useLocation();
    const current = (() => {
      const cat = new URLSearchParams(location.search).get("cat")?.toLowerCase();
      if (cat === "handouts" || cat === "clinical" || cat === "billing") return cat;
      return "all";
    })();
    function set2(next, nav) {
      if (next === "handouts" || next === "clinical" || next === "billing") {
        nav?.(`/resources?cat=${next}`);
      } else {
        nav?.("/resources");
      }
    }
    return [current, set2];
  }
  function itemMatchesCondition(item, cond) {
    if (!cond) return false;
    const opt = CONDITION_OPTIONS.find((o2) => o2.key === cond);
    if (!opt) return false;
    const hay = `${item.name} ${item.id}`.toLowerCase();
    return opt.keywords.some((kw) => hay.includes(kw.toLowerCase()));
  }
  function Resources() {
    const navigate = useNavigate();
    const [filterFromQuery, setFilterFromQuery] = useFilterFromQuery();
    const [filter, setFilter] = (0, import_react8.useState)(filterFromQuery);
    const [selectedCondition, setSelectedCondition] = (0, import_react8.useState)(null);
    (0, import_react8.useEffect)(() => {
      if (filter === "program" || filter === "videos" || filter === "conditions") return;
      setFilter(filterFromQuery);
    }, [filterFromQuery]);
    const [q, setQ] = (0, import_react8.useState)("");
    const [loading, setLoading] = (0, import_react8.useState)(false);
    const [error, setError] = (0, import_react8.useState)(null);
    const [globalHandouts, setGlobalHandouts] = (0, import_react8.useState)([]);
    const [globalClinical, setGlobalClinical] = (0, import_react8.useState)([]);
    const [globalBilling, setGlobalBilling] = (0, import_react8.useState)([]);
    const [programFiles, setProgramFiles] = (0, import_react8.useState)([]);
    const [programLoaded, setProgramLoaded] = (0, import_react8.useState)(false);
    function mapGlobal(items2) {
      return items2.map((i3) => ({
        id: i3.path,
        name: i3.title,
        url: i3.url,
        mimeType: i3.mimeType,
        source: "global"
      }));
    }
    (0, import_react8.useEffect)(() => {
      let cancelled = false;
      async function ensure(cat) {
        try {
          setLoading(true);
          setError(null);
          if (cat === "handouts" && globalHandouts.length === 0) {
            const items2 = await getGlobalCategory("handouts");
            if (!cancelled) setGlobalHandouts(mapGlobal(items2));
          }
          if (cat === "clinical" && globalClinical.length === 0) {
            const items2 = await getGlobalCategory("guidelines");
            if (!cancelled) setGlobalClinical(mapGlobal(items2));
          }
          if (cat === "billing" && globalBilling.length === 0) {
            const items2 = await getGlobalCategory("billing");
            if (!cancelled) setGlobalBilling(mapGlobal(items2));
          }
        } catch (e) {
          if (!cancelled) setError(e?.message || "Failed to load resources");
        } finally {
          if (!cancelled) setLoading(false);
        }
      }
      if (filter === "handouts") ensure("handouts");
      if (filter === "clinical") ensure("clinical");
      if (filter === "billing") ensure("billing");
      return () => {
        cancelled = true;
      };
    }, [filter]);
    (0, import_react8.useEffect)(() => {
      if (filter !== "conditions") return;
      let cancelled = false;
      async function loadAllGlobals() {
        try {
          setLoading(true);
          setError(null);
          const promises = [];
          if (globalHandouts.length === 0) {
            promises.push(
              getGlobalCategory("handouts").then((items2) => {
                if (!cancelled) setGlobalHandouts(mapGlobal(items2));
              })
            );
          }
          if (globalClinical.length === 0) {
            promises.push(
              getGlobalCategory("guidelines").then((items2) => {
                if (!cancelled) setGlobalClinical(mapGlobal(items2));
              })
            );
          }
          if (globalBilling.length === 0) {
            promises.push(
              getGlobalCategory("billing").then((items2) => {
                if (!cancelled) setGlobalBilling(mapGlobal(items2));
              })
            );
          }
          await Promise.all(promises);
        } catch (e) {
          if (!cancelled) setError(e?.message || "Failed to load resources");
        } finally {
          if (!cancelled) setLoading(false);
        }
      }
      loadAllGlobals();
      return () => {
        cancelled = true;
      };
    }, [filter]);
    (0, import_react8.useEffect)(() => {
      let cancelled = false;
      async function loadAllProgramFiles() {
        try {
          setLoading(true);
          setError(null);
          const all = [];
          await Promise.all(ProgramSlugs.map(async (slug) => {
            const grouped = await getProgramResourcesGrouped(slug);
            const append = (items2) => {
              for (const it of items2) {
                all.push({
                  id: it.path,
                  name: it.title,
                  url: it.url,
                  mimeType: it.mimeType,
                  source: "program"
                });
              }
            };
            append(grouped.forms);
            append(grouped.protocols);
            append(grouped.resources);
            append(grouped.training);
          }));
          if (cancelled) return;
          const map = /* @__PURE__ */ new Map();
          all.forEach((r3) => map.set(r3.id, r3));
          setProgramFiles(Array.from(map.values()));
          setProgramLoaded(true);
        } catch (e) {
          if (!cancelled) setError(e?.message || "Failed to load program files");
        } finally {
          if (!cancelled) setLoading(false);
        }
      }
      if ((filter === "program" || filter === "videos" || filter === "conditions") && !programLoaded) {
        loadAllProgramFiles();
      }
      return () => {
        cancelled = true;
      };
    }, [filter, programLoaded]);
    const items = (0, import_react8.useMemo)(() => {
      if (filter === "handouts") return globalHandouts;
      if (filter === "clinical") return globalClinical;
      if (filter === "billing") return globalBilling;
      if (filter === "program") return programFiles;
      if (filter === "videos") {
        const merged = [...globalHandouts, ...globalClinical, ...globalBilling, ...programFiles];
        const seen2 = /* @__PURE__ */ new Set();
        const deduped = merged.filter((r3) => {
          const k = `${r3.id}::${r3.url || ""}`;
          if (seen2.has(k)) return false;
          seen2.add(k);
          return true;
        });
        return deduped.filter((r3) => isVideo2({ url: r3.url, mimeType: r3.mimeType }));
      }
      if (filter === "conditions") {
        const merged = [...globalHandouts, ...globalClinical, ...globalBilling, ...programFiles];
        const seen2 = /* @__PURE__ */ new Set();
        const deduped = merged.filter((r3) => {
          if (seen2.has(r3.id)) return false;
          seen2.add(r3.id);
          return true;
        });
        return deduped.filter((r3) => itemMatchesCondition(r3, selectedCondition));
      }
      const base = [...globalHandouts, ...globalClinical, ...globalBilling];
      const seen = /* @__PURE__ */ new Set();
      return base.filter((r3) => {
        const k = r3.id;
        if (seen.has(k)) return false;
        seen.add(k);
        return true;
      });
    }, [filter, globalBilling, globalClinical, globalHandouts, programFiles, selectedCondition]);
    const filtered = (0, import_react8.useMemo)(() => {
      const term = q.trim().toLowerCase();
      if (!term) return items;
      return items.filter((r3) => r3.name.toLowerCase().includes(term));
    }, [items, q]);
    function go(next) {
      setFilter(next);
      if (next === "all") setSelectedCondition(null);
      if (next === "handouts" || next === "clinical" || next === "billing") {
        setFilterFromQuery(next, (url) => navigate(url));
      } else {
        setFilterFromQuery("all", (url) => navigate(url));
      }
    }
    function chooseCondition(cond) {
      setSelectedCondition(cond);
      setFilter("conditions");
      setFilterFromQuery("all", (url) => navigate(url));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AppShell, { sidebar: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(MemberSidebar, {}), children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mx-auto w-full max-w-[1200px] px-4 py-8", children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mb-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h1", { className: "text-2xl font-bold tracking-tight text-slate-900", children: "Resource Library" }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("p", { className: "mt-1 text-sm text-slate-600", children: "Search and filter patient handouts, guidelines, billing tools, and program files." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "mb-6", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "relative", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(import_lucide_react7.Search, { className: "pointer-events-none absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-slate-400" }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          Input,
          {
            placeholder: "Search resources by name\u2026",
            className: "pl-9",
            value: q,
            onChange: (e) => setQ(e.target.value)
          }
        )
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mb-8 grid grid-cols-2 gap-3 sm:grid-cols-3 md:grid-cols-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          QuickFilterCard,
          {
            title: "All Resources",
            subtitle: "Browse everything",
            Icon: import_lucide_react7.Grid2x2,
            active: filter === "all",
            onClick: () => go("all")
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          QuickFilterCard,
          {
            title: "Patient Handouts",
            subtitle: "Patient-facing PDFs",
            Icon: import_lucide_react7.FileText,
            active: filter === "handouts",
            onClick: () => go("handouts")
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          QuickFilterCard,
          {
            title: "Clinical Guidelines",
            subtitle: "Reference docs",
            Icon: import_lucide_react7.BookText,
            active: filter === "clinical",
            onClick: () => go("clinical")
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          QuickFilterCard,
          {
            title: "Medical Billing",
            subtitle: "Codes & forms",
            Icon: import_lucide_react7.FileSpreadsheet,
            active: filter === "billing",
            onClick: () => go("billing")
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          QuickFilterCard,
          {
            title: "Program Files",
            subtitle: "All training assets",
            Icon: import_lucide_react7.LibraryBig,
            active: filter === "program",
            onClick: () => go("program")
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          QuickFilterCard,
          {
            title: "Videos",
            subtitle: "Watch training",
            Icon: import_lucide_react7.Play,
            active: filter === "videos",
            onClick: () => go("videos")
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "grid grid-cols-1 gap-6 md:grid-cols-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("aside", { className: "md:col-span-1", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
          SidebarCheckboxFilters,
          {
            value: filter,
            onChange: go,
            condition: selectedCondition,
            onSelectCondition: chooseCondition
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("section", { className: "md:col-span-3", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Card, { children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CardContent, { className: "p-0", children: loading ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "p-6 text-sm text-slate-600", children: "Loading\u2026" }) : error ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "p-6 text-sm text-red-600", children: error }) : filtered.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "p-6 text-sm text-slate-600", children: "No results." }) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "divide-y divide-slate-200", children: filtered.map((item) => {
          const isVid = isVideo2({ url: item.url, mimeType: item.mimeType });
          return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center justify-between px-4 py-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex min-w-0 items-center gap-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(FileKindIcon, { isVid }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "truncate text-sm font-medium text-slate-800", children: item.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "shrink-0", children: item.url ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("a", { href: item.url, target: "_blank", rel: "noreferrer", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Button, { size: "sm", variant: "outline", className: "bg-transparent", children: isVid ? /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_jsx_runtime18.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(import_lucide_react7.Play, { className: "mr-2 h-4 w-4" }),
              "Play"
            ] }) : /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_jsx_runtime18.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(import_lucide_react7.Download, { className: "mr-2 h-4 w-4" }),
              "Download"
            ] }) }) }) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Button, { size: "sm", variant: "outline", disabled: true, className: "bg-transparent", children: "Unavailable" }) })
          ] }, `${item.source}:${item.id}`);
        }) }) }) }) })
      ] })
    ] }) });
  }

  // src/pages/ProgramDetail.tsx
  var import_react12 = __toESM(require_react());

  // src/components/ui/tabs.tsx
  var React34 = __toESM(require_react());

  // node_modules/@radix-ui/react-tabs/dist/index.mjs
  var React33 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/primitive/dist/index.mjs
  var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
  function composeEventHandlers2(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
    return function handleEvent(event) {
      originalEventHandler?.(event);
      if (checkForDefaultPrevented === false || !event.defaultPrevented) {
        return ourEventHandler?.(event);
      }
    };
  }

  // node_modules/@radix-ui/react-context/dist/index.mjs
  var React22 = __toESM(require_react(), 1);
  var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
  function createContext22(rootComponentName, defaultContext) {
    const Context = React22.createContext(defaultContext);
    const Provider = (props) => {
      const { children, ...context } = props;
      const value = React22.useMemo(() => context, Object.values(context));
      return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Context.Provider, { value, children });
    };
    Provider.displayName = rootComponentName + "Provider";
    function useContext22(consumerName) {
      const context = React22.useContext(Context);
      if (context) return context;
      if (defaultContext !== void 0) return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    return [Provider, useContext22];
  }
  function createContextScope(scopeName, createContextScopeDeps = []) {
    let defaultContexts = [];
    function createContext32(rootComponentName, defaultContext) {
      const BaseContext = React22.createContext(defaultContext);
      const index2 = defaultContexts.length;
      defaultContexts = [...defaultContexts, defaultContext];
      const Provider = (props) => {
        const { scope, children, ...context } = props;
        const Context = scope?.[scopeName]?.[index2] || BaseContext;
        const value = React22.useMemo(() => context, Object.values(context));
        return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Context.Provider, { value, children });
      };
      Provider.displayName = rootComponentName + "Provider";
      function useContext22(consumerName, scope) {
        const Context = scope?.[scopeName]?.[index2] || BaseContext;
        const context = React22.useContext(Context);
        if (context) return context;
        if (defaultContext !== void 0) return defaultContext;
        throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
      }
      return [Provider, useContext22];
    }
    const createScope = () => {
      const scopeContexts = defaultContexts.map((defaultContext) => {
        return React22.createContext(defaultContext);
      });
      return function useScope(scope) {
        const contexts = scope?.[scopeName] || scopeContexts;
        return React22.useMemo(
          () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),
          [scope, contexts]
        );
      };
    };
    createScope.scopeName = scopeName;
    return [createContext32, composeContextScopes(createScope, ...createContextScopeDeps)];
  }
  function composeContextScopes(...scopes) {
    const baseScope = scopes[0];
    if (scopes.length === 1) return baseScope;
    const createScope = () => {
      const scopeHooks = scopes.map((createScope2) => ({
        useScope: createScope2(),
        scopeName: createScope2.scopeName
      }));
      return function useComposedScopes(overrideScopes) {
        const nextScopes = scopeHooks.reduce((nextScopes2, { useScope, scopeName }) => {
          const scopeProps = useScope(overrideScopes);
          const currentScope = scopeProps[`__scope${scopeName}`];
          return { ...nextScopes2, ...currentScope };
        }, {});
        return React22.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);
      };
    };
    createScope.scopeName = baseScope.scopeName;
    return createScope;
  }

  // node_modules/@radix-ui/react-roving-focus/dist/index.mjs
  var React31 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-collection/dist/index.mjs
  var import_react9 = __toESM(require_react(), 1);
  var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
  var import_react10 = __toESM(require_react(), 1);
  var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
  function createCollection(name) {
    const PROVIDER_NAME = name + "CollectionProvider";
    const [createCollectionContext, createCollectionScope2] = createContextScope(PROVIDER_NAME);
    const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(
      PROVIDER_NAME,
      { collectionRef: { current: null }, itemMap: /* @__PURE__ */ new Map() }
    );
    const CollectionProvider = (props) => {
      const { scope, children } = props;
      const ref = import_react9.default.useRef(null);
      const itemMap = import_react9.default.useRef(/* @__PURE__ */ new Map()).current;
      return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(CollectionProviderImpl, { scope, itemMap, collectionRef: ref, children });
    };
    CollectionProvider.displayName = PROVIDER_NAME;
    const COLLECTION_SLOT_NAME = name + "CollectionSlot";
    const CollectionSlotImpl = createSlot(COLLECTION_SLOT_NAME);
    const CollectionSlot = import_react9.default.forwardRef(
      (props, forwardedRef) => {
        const { scope, children } = props;
        const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
        const composedRefs = useComposedRefs(forwardedRef, context.collectionRef);
        return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(CollectionSlotImpl, { ref: composedRefs, children });
      }
    );
    CollectionSlot.displayName = COLLECTION_SLOT_NAME;
    const ITEM_SLOT_NAME = name + "CollectionItemSlot";
    const ITEM_DATA_ATTR = "data-radix-collection-item";
    const CollectionItemSlotImpl = createSlot(ITEM_SLOT_NAME);
    const CollectionItemSlot = import_react9.default.forwardRef(
      (props, forwardedRef) => {
        const { scope, children, ...itemData } = props;
        const ref = import_react9.default.useRef(null);
        const composedRefs = useComposedRefs(forwardedRef, ref);
        const context = useCollectionContext(ITEM_SLOT_NAME, scope);
        import_react9.default.useEffect(() => {
          context.itemMap.set(ref, { ref, ...itemData });
          return () => void context.itemMap.delete(ref);
        });
        return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(CollectionItemSlotImpl, { ...{ [ITEM_DATA_ATTR]: "" }, ref: composedRefs, children });
      }
    );
    CollectionItemSlot.displayName = ITEM_SLOT_NAME;
    function useCollection2(scope) {
      const context = useCollectionContext(name + "CollectionConsumer", scope);
      const getItems = import_react9.default.useCallback(() => {
        const collectionNode = context.collectionRef.current;
        if (!collectionNode) return [];
        const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
        const items = Array.from(context.itemMap.values());
        const orderedItems = items.sort(
          (a2, b) => orderedNodes.indexOf(a2.ref.current) - orderedNodes.indexOf(b.ref.current)
        );
        return orderedItems;
      }, [context.collectionRef, context.itemMap]);
      return getItems;
    }
    return [
      { Provider: CollectionProvider, Slot: CollectionSlot, ItemSlot: CollectionItemSlot },
      useCollection2,
      createCollectionScope2
    ];
  }

  // node_modules/@radix-ui/react-id/dist/index.mjs
  var React26 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs
  var React25 = __toESM(require_react(), 1);
  var useLayoutEffect22 = globalThis?.document ? React25.useLayoutEffect : () => {
  };

  // node_modules/@radix-ui/react-id/dist/index.mjs
  var useReactId = React26[" useId ".trim().toString()] || (() => void 0);
  var count = 0;
  function useId2(deterministicId) {
    const [id, setId] = React26.useState(useReactId());
    useLayoutEffect22(() => {
      if (!deterministicId) setId((reactId) => reactId ?? String(count++));
    }, [deterministicId]);
    return deterministicId || (id ? `radix-${id}` : "");
  }

  // node_modules/@radix-ui/react-primitive/dist/index.mjs
  var React27 = __toESM(require_react(), 1);
  var ReactDOM = __toESM(require_react_dom(), 1);
  var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
  var NODES = [
    "a",
    "button",
    "div",
    "form",
    "h2",
    "h3",
    "img",
    "input",
    "label",
    "li",
    "nav",
    "ol",
    "p",
    "select",
    "span",
    "svg",
    "ul"
  ];
  var Primitive = NODES.reduce((primitive, node) => {
    const Slot3 = createSlot(`Primitive.${node}`);
    const Node2 = React27.forwardRef((props, forwardedRef) => {
      const { asChild, ...primitiveProps } = props;
      const Comp = asChild ? Slot3 : node;
      if (typeof window !== "undefined") {
        window[Symbol.for("radix-ui")] = true;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Comp, { ...primitiveProps, ref: forwardedRef });
    });
    Node2.displayName = `Primitive.${node}`;
    return { ...primitive, [node]: Node2 };
  }, {});
  function dispatchDiscreteCustomEvent(target, event) {
    if (target) ReactDOM.flushSync(() => target.dispatchEvent(event));
  }

  // node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs
  var React28 = __toESM(require_react(), 1);
  function useCallbackRef(callback) {
    const callbackRef = React28.useRef(callback);
    React28.useEffect(() => {
      callbackRef.current = callback;
    });
    return React28.useMemo(() => (...args) => callbackRef.current?.(...args), []);
  }

  // node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs
  var React29 = __toESM(require_react(), 1);
  var React210 = __toESM(require_react(), 1);
  var useInsertionEffect = React29[" useInsertionEffect ".trim().toString()] || useLayoutEffect22;
  function useControllableState({
    prop,
    defaultProp,
    onChange = () => {
    },
    caller
  }) {
    const [uncontrolledProp, setUncontrolledProp, onChangeRef] = useUncontrolledState({
      defaultProp,
      onChange
    });
    const isControlled = prop !== void 0;
    const value = isControlled ? prop : uncontrolledProp;
    if (true) {
      const isControlledRef = React29.useRef(prop !== void 0);
      React29.useEffect(() => {
        const wasControlled = isControlledRef.current;
        if (wasControlled !== isControlled) {
          const from = wasControlled ? "controlled" : "uncontrolled";
          const to = isControlled ? "controlled" : "uncontrolled";
          console.warn(
            `${caller} is changing from ${from} to ${to}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`
          );
        }
        isControlledRef.current = isControlled;
      }, [isControlled, caller]);
    }
    const setValue = React29.useCallback(
      (nextValue) => {
        if (isControlled) {
          const value2 = isFunction(nextValue) ? nextValue(prop) : nextValue;
          if (value2 !== prop) {
            onChangeRef.current?.(value2);
          }
        } else {
          setUncontrolledProp(nextValue);
        }
      },
      [isControlled, prop, setUncontrolledProp, onChangeRef]
    );
    return [value, setValue];
  }
  function useUncontrolledState({
    defaultProp,
    onChange
  }) {
    const [value, setValue] = React29.useState(defaultProp);
    const prevValueRef = React29.useRef(value);
    const onChangeRef = React29.useRef(onChange);
    useInsertionEffect(() => {
      onChangeRef.current = onChange;
    }, [onChange]);
    React29.useEffect(() => {
      if (prevValueRef.current !== value) {
        onChangeRef.current?.(value);
        prevValueRef.current = value;
      }
    }, [value, prevValueRef]);
    return [value, setValue, onChangeRef];
  }
  function isFunction(value) {
    return typeof value === "function";
  }
  var SYNC_STATE = Symbol("RADIX:SYNC_STATE");

  // node_modules/@radix-ui/react-direction/dist/index.mjs
  var React30 = __toESM(require_react(), 1);
  var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
  var DirectionContext = React30.createContext(void 0);
  function useDirection(localDir) {
    const globalDir = React30.useContext(DirectionContext);
    return localDir || globalDir || "ltr";
  }

  // node_modules/@radix-ui/react-roving-focus/dist/index.mjs
  var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
  var ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
  var EVENT_OPTIONS = { bubbles: false, cancelable: true };
  var GROUP_NAME = "RovingFocusGroup";
  var [Collection, useCollection, createCollectionScope] = createCollection(GROUP_NAME);
  var [createRovingFocusGroupContext, createRovingFocusGroupScope] = createContextScope(
    GROUP_NAME,
    [createCollectionScope]
  );
  var [RovingFocusProvider, useRovingFocusContext] = createRovingFocusGroupContext(GROUP_NAME);
  var RovingFocusGroup = React31.forwardRef(
    (props, forwardedRef) => {
      return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Collection.Provider, { scope: props.__scopeRovingFocusGroup, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Collection.Slot, { scope: props.__scopeRovingFocusGroup, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(RovingFocusGroupImpl, { ...props, ref: forwardedRef }) }) });
    }
  );
  RovingFocusGroup.displayName = GROUP_NAME;
  var RovingFocusGroupImpl = React31.forwardRef((props, forwardedRef) => {
    const {
      __scopeRovingFocusGroup,
      orientation,
      loop = false,
      dir,
      currentTabStopId: currentTabStopIdProp,
      defaultCurrentTabStopId,
      onCurrentTabStopIdChange,
      onEntryFocus,
      preventScrollOnEntryFocus = false,
      ...groupProps
    } = props;
    const ref = React31.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const direction = useDirection(dir);
    const [currentTabStopId, setCurrentTabStopId] = useControllableState({
      prop: currentTabStopIdProp,
      defaultProp: defaultCurrentTabStopId ?? null,
      onChange: onCurrentTabStopIdChange,
      caller: GROUP_NAME
    });
    const [isTabbingBackOut, setIsTabbingBackOut] = React31.useState(false);
    const handleEntryFocus = useCallbackRef(onEntryFocus);
    const getItems = useCollection(__scopeRovingFocusGroup);
    const isClickFocusRef = React31.useRef(false);
    const [focusableItemsCount, setFocusableItemsCount] = React31.useState(0);
    React31.useEffect(() => {
      const node = ref.current;
      if (node) {
        node.addEventListener(ENTRY_FOCUS, handleEntryFocus);
        return () => node.removeEventListener(ENTRY_FOCUS, handleEntryFocus);
      }
    }, [handleEntryFocus]);
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
      RovingFocusProvider,
      {
        scope: __scopeRovingFocusGroup,
        orientation,
        dir: direction,
        loop,
        currentTabStopId,
        onItemFocus: React31.useCallback(
          (tabStopId) => setCurrentTabStopId(tabStopId),
          [setCurrentTabStopId]
        ),
        onItemShiftTab: React31.useCallback(() => setIsTabbingBackOut(true), []),
        onFocusableItemAdd: React31.useCallback(
          () => setFocusableItemsCount((prevCount) => prevCount + 1),
          []
        ),
        onFocusableItemRemove: React31.useCallback(
          () => setFocusableItemsCount((prevCount) => prevCount - 1),
          []
        ),
        children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
          Primitive.div,
          {
            tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
            "data-orientation": orientation,
            ...groupProps,
            ref: composedRefs,
            style: { outline: "none", ...props.style },
            onMouseDown: composeEventHandlers2(props.onMouseDown, () => {
              isClickFocusRef.current = true;
            }),
            onFocus: composeEventHandlers2(props.onFocus, (event) => {
              const isKeyboardFocus = !isClickFocusRef.current;
              if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
                const entryFocusEvent = new CustomEvent(ENTRY_FOCUS, EVENT_OPTIONS);
                event.currentTarget.dispatchEvent(entryFocusEvent);
                if (!entryFocusEvent.defaultPrevented) {
                  const items = getItems().filter((item) => item.focusable);
                  const activeItem = items.find((item) => item.active);
                  const currentItem = items.find((item) => item.id === currentTabStopId);
                  const candidateItems = [activeItem, currentItem, ...items].filter(
                    Boolean
                  );
                  const candidateNodes = candidateItems.map((item) => item.ref.current);
                  focusFirst(candidateNodes, preventScrollOnEntryFocus);
                }
              }
              isClickFocusRef.current = false;
            }),
            onBlur: composeEventHandlers2(props.onBlur, () => setIsTabbingBackOut(false))
          }
        )
      }
    );
  });
  var ITEM_NAME = "RovingFocusGroupItem";
  var RovingFocusGroupItem = React31.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeRovingFocusGroup,
        focusable = true,
        active = false,
        tabStopId,
        children,
        ...itemProps
      } = props;
      const autoId = useId2();
      const id = tabStopId || autoId;
      const context = useRovingFocusContext(ITEM_NAME, __scopeRovingFocusGroup);
      const isCurrentTabStop = context.currentTabStopId === id;
      const getItems = useCollection(__scopeRovingFocusGroup);
      const { onFocusableItemAdd, onFocusableItemRemove, currentTabStopId } = context;
      React31.useEffect(() => {
        if (focusable) {
          onFocusableItemAdd();
          return () => onFocusableItemRemove();
        }
      }, [focusable, onFocusableItemAdd, onFocusableItemRemove]);
      return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
        Collection.ItemSlot,
        {
          scope: __scopeRovingFocusGroup,
          id,
          focusable,
          active,
          children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
            Primitive.span,
            {
              tabIndex: isCurrentTabStop ? 0 : -1,
              "data-orientation": context.orientation,
              ...itemProps,
              ref: forwardedRef,
              onMouseDown: composeEventHandlers2(props.onMouseDown, (event) => {
                if (!focusable) event.preventDefault();
                else context.onItemFocus(id);
              }),
              onFocus: composeEventHandlers2(props.onFocus, () => context.onItemFocus(id)),
              onKeyDown: composeEventHandlers2(props.onKeyDown, (event) => {
                if (event.key === "Tab" && event.shiftKey) {
                  context.onItemShiftTab();
                  return;
                }
                if (event.target !== event.currentTarget) return;
                const focusIntent = getFocusIntent(event, context.orientation, context.dir);
                if (focusIntent !== void 0) {
                  if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) return;
                  event.preventDefault();
                  const items = getItems().filter((item) => item.focusable);
                  let candidateNodes = items.map((item) => item.ref.current);
                  if (focusIntent === "last") candidateNodes.reverse();
                  else if (focusIntent === "prev" || focusIntent === "next") {
                    if (focusIntent === "prev") candidateNodes.reverse();
                    const currentIndex = candidateNodes.indexOf(event.currentTarget);
                    candidateNodes = context.loop ? wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
                  }
                  setTimeout(() => focusFirst(candidateNodes));
                }
              }),
              children: typeof children === "function" ? children({ isCurrentTabStop, hasTabStop: currentTabStopId != null }) : children
            }
          )
        }
      );
    }
  );
  RovingFocusGroupItem.displayName = ITEM_NAME;
  var MAP_KEY_TO_FOCUS_INTENT = {
    ArrowLeft: "prev",
    ArrowUp: "prev",
    ArrowRight: "next",
    ArrowDown: "next",
    PageUp: "first",
    Home: "first",
    PageDown: "last",
    End: "last"
  };
  function getDirectionAwareKey(key, dir) {
    if (dir !== "rtl") return key;
    return key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
  }
  function getFocusIntent(event, orientation, dir) {
    const key = getDirectionAwareKey(event.key, dir);
    if (orientation === "vertical" && ["ArrowLeft", "ArrowRight"].includes(key)) return void 0;
    if (orientation === "horizontal" && ["ArrowUp", "ArrowDown"].includes(key)) return void 0;
    return MAP_KEY_TO_FOCUS_INTENT[key];
  }
  function focusFirst(candidates, preventScroll = false) {
    const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
    for (const candidate of candidates) {
      if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
      candidate.focus({ preventScroll });
      if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
    }
  }
  function wrapArray(array, startIndex) {
    return array.map((_, index2) => array[(startIndex + index2) % array.length]);
  }
  var Root = RovingFocusGroup;
  var Item = RovingFocusGroupItem;

  // node_modules/@radix-ui/react-presence/dist/index.mjs
  var React211 = __toESM(require_react(), 1);
  var React32 = __toESM(require_react(), 1);
  function useStateMachine(initialState, machine) {
    return React32.useReducer((state, event) => {
      const nextState = machine[state][event];
      return nextState ?? state;
    }, initialState);
  }
  var Presence = (props) => {
    const { present, children } = props;
    const presence = usePresence(present);
    const child = typeof children === "function" ? children({ present: presence.isPresent }) : React211.Children.only(children);
    const ref = useComposedRefs(presence.ref, getElementRef2(child));
    const forceMount = typeof children === "function";
    return forceMount || presence.isPresent ? React211.cloneElement(child, { ref }) : null;
  };
  Presence.displayName = "Presence";
  function usePresence(present) {
    const [node, setNode] = React211.useState();
    const stylesRef = React211.useRef(null);
    const prevPresentRef = React211.useRef(present);
    const prevAnimationNameRef = React211.useRef("none");
    const initialState = present ? "mounted" : "unmounted";
    const [state, send] = useStateMachine(initialState, {
      mounted: {
        UNMOUNT: "unmounted",
        ANIMATION_OUT: "unmountSuspended"
      },
      unmountSuspended: {
        MOUNT: "mounted",
        ANIMATION_END: "unmounted"
      },
      unmounted: {
        MOUNT: "mounted"
      }
    });
    React211.useEffect(() => {
      const currentAnimationName = getAnimationName(stylesRef.current);
      prevAnimationNameRef.current = state === "mounted" ? currentAnimationName : "none";
    }, [state]);
    useLayoutEffect22(() => {
      const styles = stylesRef.current;
      const wasPresent = prevPresentRef.current;
      const hasPresentChanged = wasPresent !== present;
      if (hasPresentChanged) {
        const prevAnimationName = prevAnimationNameRef.current;
        const currentAnimationName = getAnimationName(styles);
        if (present) {
          send("MOUNT");
        } else if (currentAnimationName === "none" || styles?.display === "none") {
          send("UNMOUNT");
        } else {
          const isAnimating = prevAnimationName !== currentAnimationName;
          if (wasPresent && isAnimating) {
            send("ANIMATION_OUT");
          } else {
            send("UNMOUNT");
          }
        }
        prevPresentRef.current = present;
      }
    }, [present, send]);
    useLayoutEffect22(() => {
      if (node) {
        let timeoutId;
        const ownerWindow = node.ownerDocument.defaultView ?? window;
        const handleAnimationEnd = (event) => {
          const currentAnimationName = getAnimationName(stylesRef.current);
          const isCurrentAnimation = currentAnimationName.includes(CSS.escape(event.animationName));
          if (event.target === node && isCurrentAnimation) {
            send("ANIMATION_END");
            if (!prevPresentRef.current) {
              const currentFillMode = node.style.animationFillMode;
              node.style.animationFillMode = "forwards";
              timeoutId = ownerWindow.setTimeout(() => {
                if (node.style.animationFillMode === "forwards") {
                  node.style.animationFillMode = currentFillMode;
                }
              });
            }
          }
        };
        const handleAnimationStart = (event) => {
          if (event.target === node) {
            prevAnimationNameRef.current = getAnimationName(stylesRef.current);
          }
        };
        node.addEventListener("animationstart", handleAnimationStart);
        node.addEventListener("animationcancel", handleAnimationEnd);
        node.addEventListener("animationend", handleAnimationEnd);
        return () => {
          ownerWindow.clearTimeout(timeoutId);
          node.removeEventListener("animationstart", handleAnimationStart);
          node.removeEventListener("animationcancel", handleAnimationEnd);
          node.removeEventListener("animationend", handleAnimationEnd);
        };
      } else {
        send("ANIMATION_END");
      }
    }, [node, send]);
    return {
      isPresent: ["mounted", "unmountSuspended"].includes(state),
      ref: React211.useCallback((node2) => {
        stylesRef.current = node2 ? getComputedStyle(node2) : null;
        setNode(node2);
      }, [])
    };
  }
  function getAnimationName(styles) {
    return styles?.animationName || "none";
  }
  function getElementRef2(element) {
    let getter = Object.getOwnPropertyDescriptor(element.props, "ref")?.get;
    let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
      return element.ref;
    }
    getter = Object.getOwnPropertyDescriptor(element, "ref")?.get;
    mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
      return element.props.ref;
    }
    return element.props.ref || element.ref;
  }

  // node_modules/@radix-ui/react-tabs/dist/index.mjs
  var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
  var TABS_NAME = "Tabs";
  var [createTabsContext, createTabsScope] = createContextScope(TABS_NAME, [
    createRovingFocusGroupScope
  ]);
  var useRovingFocusGroupScope = createRovingFocusGroupScope();
  var [TabsProvider, useTabsContext] = createTabsContext(TABS_NAME);
  var Tabs = React33.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeTabs,
        value: valueProp,
        onValueChange,
        defaultValue,
        orientation = "horizontal",
        dir,
        activationMode = "automatic",
        ...tabsProps
      } = props;
      const direction = useDirection(dir);
      const [value, setValue] = useControllableState({
        prop: valueProp,
        onChange: onValueChange,
        defaultProp: defaultValue ?? "",
        caller: TABS_NAME
      });
      return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
        TabsProvider,
        {
          scope: __scopeTabs,
          baseId: useId2(),
          value,
          onValueChange: setValue,
          orientation,
          dir: direction,
          activationMode,
          children: /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
            Primitive.div,
            {
              dir: direction,
              "data-orientation": orientation,
              ...tabsProps,
              ref: forwardedRef
            }
          )
        }
      );
    }
  );
  Tabs.displayName = TABS_NAME;
  var TAB_LIST_NAME = "TabsList";
  var TabsList = React33.forwardRef(
    (props, forwardedRef) => {
      const { __scopeTabs, loop = true, ...listProps } = props;
      const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);
      const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
      return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
        Root,
        {
          asChild: true,
          ...rovingFocusGroupScope,
          orientation: context.orientation,
          dir: context.dir,
          loop,
          children: /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
            Primitive.div,
            {
              role: "tablist",
              "aria-orientation": context.orientation,
              ...listProps,
              ref: forwardedRef
            }
          )
        }
      );
    }
  );
  TabsList.displayName = TAB_LIST_NAME;
  var TRIGGER_NAME = "TabsTrigger";
  var TabsTrigger = React33.forwardRef(
    (props, forwardedRef) => {
      const { __scopeTabs, value, disabled = false, ...triggerProps } = props;
      const context = useTabsContext(TRIGGER_NAME, __scopeTabs);
      const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
      const triggerId = makeTriggerId(context.baseId, value);
      const contentId = makeContentId(context.baseId, value);
      const isSelected = value === context.value;
      return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
        Item,
        {
          asChild: true,
          ...rovingFocusGroupScope,
          focusable: !disabled,
          active: isSelected,
          children: /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
            Primitive.button,
            {
              type: "button",
              role: "tab",
              "aria-selected": isSelected,
              "aria-controls": contentId,
              "data-state": isSelected ? "active" : "inactive",
              "data-disabled": disabled ? "" : void 0,
              disabled,
              id: triggerId,
              ...triggerProps,
              ref: forwardedRef,
              onMouseDown: composeEventHandlers2(props.onMouseDown, (event) => {
                if (!disabled && event.button === 0 && event.ctrlKey === false) {
                  context.onValueChange(value);
                } else {
                  event.preventDefault();
                }
              }),
              onKeyDown: composeEventHandlers2(props.onKeyDown, (event) => {
                if ([" ", "Enter"].includes(event.key)) context.onValueChange(value);
              }),
              onFocus: composeEventHandlers2(props.onFocus, () => {
                const isAutomaticActivation = context.activationMode !== "manual";
                if (!isSelected && !disabled && isAutomaticActivation) {
                  context.onValueChange(value);
                }
              })
            }
          )
        }
      );
    }
  );
  TabsTrigger.displayName = TRIGGER_NAME;
  var CONTENT_NAME = "TabsContent";
  var TabsContent = React33.forwardRef(
    (props, forwardedRef) => {
      const { __scopeTabs, value, forceMount, children, ...contentProps } = props;
      const context = useTabsContext(CONTENT_NAME, __scopeTabs);
      const triggerId = makeTriggerId(context.baseId, value);
      const contentId = makeContentId(context.baseId, value);
      const isSelected = value === context.value;
      const isMountAnimationPreventedRef = React33.useRef(isSelected);
      React33.useEffect(() => {
        const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);
        return () => cancelAnimationFrame(rAF);
      }, []);
      return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(Presence, { present: forceMount || isSelected, children: ({ present }) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
        Primitive.div,
        {
          "data-state": isSelected ? "active" : "inactive",
          "data-orientation": context.orientation,
          role: "tabpanel",
          "aria-labelledby": triggerId,
          hidden: !present,
          id: contentId,
          tabIndex: 0,
          ...contentProps,
          ref: forwardedRef,
          style: {
            ...props.style,
            animationDuration: isMountAnimationPreventedRef.current ? "0s" : void 0
          },
          children: present && children
        }
      ) });
    }
  );
  TabsContent.displayName = CONTENT_NAME;
  function makeTriggerId(baseId, value) {
    return `${baseId}-trigger-${value}`;
  }
  function makeContentId(baseId, value) {
    return `${baseId}-content-${value}`;
  }
  var Root2 = Tabs;
  var List = TabsList;
  var Trigger = TabsTrigger;
  var Content = TabsContent;

  // src/components/ui/tabs.tsx
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  var Tabs2 = Root2;
  var TabsList2 = React34.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
    List,
    {
      ref,
      className: cn(
        "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
        className
      ),
      ...props
    }
  ));
  TabsList2.displayName = List.displayName;
  var TabsTrigger2 = React34.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
    Trigger,
    {
      ref,
      className: cn(
        "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
        className
      ),
      ...props
    }
  ));
  TabsTrigger2.displayName = Trigger.displayName;
  var TabsContent2 = React34.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
    Content,
    {
      ref,
      className: cn(
        "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
        className
      ),
      ...props
    }
  ));
  TabsContent2.displayName = Content.displayName;

  // src/pages/ProgramDetail.tsx
  var import_lucide_react11 = __toESM(require_lucide_react());

  // src/components/common/Breadcrumbs.tsx
  var import_lucide_react8 = __toESM(require_lucide_react());
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  function Breadcrumbs({ items, variant = "default", className = "" }) {
    const isLight = variant === "light";
    const baseText = isLight ? "text-white/80" : "text-gray-600";
    const linkText = isLight ? "text-white hover:text-white" : "text-gray-700 hover:text-gray-900";
    const sepColor = isLight ? "text-white/60" : "text-gray-400";
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("nav", { "aria-label": "Breadcrumb", className: `w-full ${className}`, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("ol", { className: "flex items-center gap-2 flex-wrap", children: items.map((item, idx) => {
      const isLast = idx === items.length - 1;
      return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("li", { className: "inline-flex items-center gap-2", children: [
        item.to && !isLast ? /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Link, { to: item.to, className: `text-sm font-medium ${linkText}`, children: item.label }) : /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
          "span",
          {
            className: `text-sm font-medium ${baseText}`,
            "aria-current": isLast ? "page" : void 0,
            children: item.label
          }
        ),
        !isLast && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(import_lucide_react8.ChevronRight, { className: `h-4 w-4 ${sepColor}`, "aria-hidden": true })
      ] }, `${item.label}-${idx}`);
    }) }) });
  }

  // src/components/resources/ProgramResourceRow.tsx
  var import_lucide_react9 = __toESM(require_lucide_react());
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  function inferDurationLabel(name) {
    const m = name.match(/[\[\(]([0-5]?\d:[0-5]\d)[\]\)]/);
    return m?.[1];
  }
  function BrandFileIcon({ item }) {
    const cls = "h-5 w-5 text-blue-600";
    if (isVideo(item)) return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(import_lucide_react9.Play, { className: cls });
    if (isSpreadsheet(item)) return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(import_lucide_react9.FileSpreadsheet, { className: cls });
    if (isPdf(item) || isDoc(item)) return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(import_lucide_react9.FileText, { className: cls });
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(import_lucide_react9.File, { className: cls });
  }
  function stripOneExtension2(filename) {
    return filename.replace(/\.[^./\s]+$/i, "");
  }
  function normalizeForCompare(s3) {
    return (s3 || "").toLowerCase().replace(/[^a-z0-9]+/gi, " ").replace(/\s+/g, " ").trim();
  }
  function ProgramResourceRow({ item }) {
    const video = isVideo(item);
    const title = item.title || item.filename || "";
    const filename = item.filename || "";
    const duration = video ? inferDurationLabel(title) : void 0;
    const isDuplicateSubtitle = !filename || normalizeForCompare(title) === normalizeForCompare(stripOneExtension2(filename));
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "rounded-md border bg-white px-4 py-3 shadow-sm hover:shadow transition-shadow", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex items-center justify-between gap-3", children: [
      /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex min-w-0 items-center gap-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(BrandFileIcon, { item }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "min-w-0", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "truncate text-sm font-medium text-slate-900", children: title }),
          !isDuplicateSubtitle ? /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "text-[11px] text-slate-500", children: filename }) : null
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex shrink-0 items-center gap-3", children: [
        video && duration ? /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("span", { className: "text-xs text-slate-600", "aria-label": "Video duration", children: duration }) : null,
        video ? /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("a", { href: item.url, target: "_blank", rel: "noreferrer", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(Button, { className: "h-8 px-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(import_lucide_react9.Play, { className: "mr-2 h-4 w-4" }),
          "Play"
        ] }) }) : /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("a", { href: item.url, target: "_blank", rel: "noreferrer", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(Button, { className: "h-8 px-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(import_lucide_react9.Download, { className: "mr-2 h-4 w-4" }),
          "Download"
        ] }) })
      ] })
    ] }) });
  }

  // src/components/training/TrainingPlayer.tsx
  var import_react11 = __toESM(require_react());

  // src/components/ui/scroll-area.tsx
  var React36 = __toESM(require_react());

  // node_modules/@radix-ui/react-scroll-area/dist/index.mjs
  var React212 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/number/dist/index.mjs
  function clamp(value, [min, max]) {
    return Math.min(max, Math.max(min, value));
  }

  // node_modules/@radix-ui/react-scroll-area/dist/index.mjs
  var React35 = __toESM(require_react(), 1);
  var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
  function useStateMachine2(initialState, machine) {
    return React35.useReducer((state, event) => {
      const nextState = machine[state][event];
      return nextState ?? state;
    }, initialState);
  }
  var SCROLL_AREA_NAME = "ScrollArea";
  var [createScrollAreaContext, createScrollAreaScope] = createContextScope(SCROLL_AREA_NAME);
  var [ScrollAreaProvider, useScrollAreaContext] = createScrollAreaContext(SCROLL_AREA_NAME);
  var ScrollArea = React212.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeScrollArea,
        type = "hover",
        dir,
        scrollHideDelay = 600,
        ...scrollAreaProps
      } = props;
      const [scrollArea, setScrollArea] = React212.useState(null);
      const [viewport, setViewport] = React212.useState(null);
      const [content, setContent] = React212.useState(null);
      const [scrollbarX, setScrollbarX] = React212.useState(null);
      const [scrollbarY, setScrollbarY] = React212.useState(null);
      const [cornerWidth, setCornerWidth] = React212.useState(0);
      const [cornerHeight, setCornerHeight] = React212.useState(0);
      const [scrollbarXEnabled, setScrollbarXEnabled] = React212.useState(false);
      const [scrollbarYEnabled, setScrollbarYEnabled] = React212.useState(false);
      const composedRefs = useComposedRefs(forwardedRef, (node) => setScrollArea(node));
      const direction = useDirection(dir);
      return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
        ScrollAreaProvider,
        {
          scope: __scopeScrollArea,
          type,
          dir: direction,
          scrollHideDelay,
          scrollArea,
          viewport,
          onViewportChange: setViewport,
          content,
          onContentChange: setContent,
          scrollbarX,
          onScrollbarXChange: setScrollbarX,
          scrollbarXEnabled,
          onScrollbarXEnabledChange: setScrollbarXEnabled,
          scrollbarY,
          onScrollbarYChange: setScrollbarY,
          scrollbarYEnabled,
          onScrollbarYEnabledChange: setScrollbarYEnabled,
          onCornerWidthChange: setCornerWidth,
          onCornerHeightChange: setCornerHeight,
          children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
            Primitive.div,
            {
              dir: direction,
              ...scrollAreaProps,
              ref: composedRefs,
              style: {
                position: "relative",
                // Pass corner sizes as CSS vars to reduce re-renders of context consumers
                ["--radix-scroll-area-corner-width"]: cornerWidth + "px",
                ["--radix-scroll-area-corner-height"]: cornerHeight + "px",
                ...props.style
              }
            }
          )
        }
      );
    }
  );
  ScrollArea.displayName = SCROLL_AREA_NAME;
  var VIEWPORT_NAME = "ScrollAreaViewport";
  var ScrollAreaViewport = React212.forwardRef(
    (props, forwardedRef) => {
      const { __scopeScrollArea, children, nonce, ...viewportProps } = props;
      const context = useScrollAreaContext(VIEWPORT_NAME, __scopeScrollArea);
      const ref = React212.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);
      return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(import_jsx_runtime29.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          "style",
          {
            dangerouslySetInnerHTML: {
              __html: `[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}`
            },
            nonce
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          Primitive.div,
          {
            "data-radix-scroll-area-viewport": "",
            ...viewportProps,
            ref: composedRefs,
            style: {
              /**
               * We don't support `visible` because the intention is to have at least one scrollbar
               * if this component is used and `visible` will behave like `auto` in that case
               * https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#description
               *
               * We don't handle `auto` because the intention is for the native implementation
               * to be hidden if using this component. We just want to ensure the node is scrollable
               * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent
               * the browser from having to work out whether to render native scrollbars or not,
               * we tell it to with the intention of hiding them in CSS.
               */
              overflowX: context.scrollbarXEnabled ? "scroll" : "hidden",
              overflowY: context.scrollbarYEnabled ? "scroll" : "hidden",
              ...props.style
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { ref: context.onContentChange, style: { minWidth: "100%", display: "table" }, children })
          }
        )
      ] });
    }
  );
  ScrollAreaViewport.displayName = VIEWPORT_NAME;
  var SCROLLBAR_NAME = "ScrollAreaScrollbar";
  var ScrollAreaScrollbar = React212.forwardRef(
    (props, forwardedRef) => {
      const { forceMount, ...scrollbarProps } = props;
      const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
      const { onScrollbarXEnabledChange, onScrollbarYEnabledChange } = context;
      const isHorizontal = props.orientation === "horizontal";
      React212.useEffect(() => {
        isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);
        return () => {
          isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);
        };
      }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);
      return context.type === "hover" ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(ScrollAreaScrollbarHover, { ...scrollbarProps, ref: forwardedRef, forceMount }) : context.type === "scroll" ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(ScrollAreaScrollbarScroll, { ...scrollbarProps, ref: forwardedRef, forceMount }) : context.type === "auto" ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(ScrollAreaScrollbarAuto, { ...scrollbarProps, ref: forwardedRef, forceMount }) : context.type === "always" ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(ScrollAreaScrollbarVisible, { ...scrollbarProps, ref: forwardedRef }) : null;
    }
  );
  ScrollAreaScrollbar.displayName = SCROLLBAR_NAME;
  var ScrollAreaScrollbarHover = React212.forwardRef((props, forwardedRef) => {
    const { forceMount, ...scrollbarProps } = props;
    const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
    const [visible, setVisible] = React212.useState(false);
    React212.useEffect(() => {
      const scrollArea = context.scrollArea;
      let hideTimer = 0;
      if (scrollArea) {
        const handlePointerEnter = () => {
          window.clearTimeout(hideTimer);
          setVisible(true);
        };
        const handlePointerLeave = () => {
          hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);
        };
        scrollArea.addEventListener("pointerenter", handlePointerEnter);
        scrollArea.addEventListener("pointerleave", handlePointerLeave);
        return () => {
          window.clearTimeout(hideTimer);
          scrollArea.removeEventListener("pointerenter", handlePointerEnter);
          scrollArea.removeEventListener("pointerleave", handlePointerLeave);
        };
      }
    }, [context.scrollArea, context.scrollHideDelay]);
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Presence, { present: forceMount || visible, children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
      ScrollAreaScrollbarAuto,
      {
        "data-state": visible ? "visible" : "hidden",
        ...scrollbarProps,
        ref: forwardedRef
      }
    ) });
  });
  var ScrollAreaScrollbarScroll = React212.forwardRef((props, forwardedRef) => {
    const { forceMount, ...scrollbarProps } = props;
    const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
    const isHorizontal = props.orientation === "horizontal";
    const debounceScrollEnd = useDebounceCallback(() => send("SCROLL_END"), 100);
    const [state, send] = useStateMachine2("hidden", {
      hidden: {
        SCROLL: "scrolling"
      },
      scrolling: {
        SCROLL_END: "idle",
        POINTER_ENTER: "interacting"
      },
      interacting: {
        SCROLL: "interacting",
        POINTER_LEAVE: "idle"
      },
      idle: {
        HIDE: "hidden",
        SCROLL: "scrolling",
        POINTER_ENTER: "interacting"
      }
    });
    React212.useEffect(() => {
      if (state === "idle") {
        const hideTimer = window.setTimeout(() => send("HIDE"), context.scrollHideDelay);
        return () => window.clearTimeout(hideTimer);
      }
    }, [state, context.scrollHideDelay, send]);
    React212.useEffect(() => {
      const viewport = context.viewport;
      const scrollDirection = isHorizontal ? "scrollLeft" : "scrollTop";
      if (viewport) {
        let prevScrollPos = viewport[scrollDirection];
        const handleScroll2 = () => {
          const scrollPos = viewport[scrollDirection];
          const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;
          if (hasScrollInDirectionChanged) {
            send("SCROLL");
            debounceScrollEnd();
          }
          prevScrollPos = scrollPos;
        };
        viewport.addEventListener("scroll", handleScroll2);
        return () => viewport.removeEventListener("scroll", handleScroll2);
      }
    }, [context.viewport, isHorizontal, send, debounceScrollEnd]);
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Presence, { present: forceMount || state !== "hidden", children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
      ScrollAreaScrollbarVisible,
      {
        "data-state": state === "hidden" ? "hidden" : "visible",
        ...scrollbarProps,
        ref: forwardedRef,
        onPointerEnter: composeEventHandlers2(props.onPointerEnter, () => send("POINTER_ENTER")),
        onPointerLeave: composeEventHandlers2(props.onPointerLeave, () => send("POINTER_LEAVE"))
      }
    ) });
  });
  var ScrollAreaScrollbarAuto = React212.forwardRef((props, forwardedRef) => {
    const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
    const { forceMount, ...scrollbarProps } = props;
    const [visible, setVisible] = React212.useState(false);
    const isHorizontal = props.orientation === "horizontal";
    const handleResize = useDebounceCallback(() => {
      if (context.viewport) {
        const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;
        const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;
        setVisible(isHorizontal ? isOverflowX : isOverflowY);
      }
    }, 10);
    useResizeObserver(context.viewport, handleResize);
    useResizeObserver(context.content, handleResize);
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Presence, { present: forceMount || visible, children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
      ScrollAreaScrollbarVisible,
      {
        "data-state": visible ? "visible" : "hidden",
        ...scrollbarProps,
        ref: forwardedRef
      }
    ) });
  });
  var ScrollAreaScrollbarVisible = React212.forwardRef((props, forwardedRef) => {
    const { orientation = "vertical", ...scrollbarProps } = props;
    const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
    const thumbRef = React212.useRef(null);
    const pointerOffsetRef = React212.useRef(0);
    const [sizes, setSizes] = React212.useState({
      content: 0,
      viewport: 0,
      scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 }
    });
    const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);
    const commonProps = {
      ...scrollbarProps,
      sizes,
      onSizesChange: setSizes,
      hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),
      onThumbChange: (thumb) => thumbRef.current = thumb,
      onThumbPointerUp: () => pointerOffsetRef.current = 0,
      onThumbPointerDown: (pointerPos) => pointerOffsetRef.current = pointerPos
    };
    function getScrollPosition(pointerPos, dir) {
      return getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, dir);
    }
    if (orientation === "horizontal") {
      return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
        ScrollAreaScrollbarX,
        {
          ...commonProps,
          ref: forwardedRef,
          onThumbPositionChange: () => {
            if (context.viewport && thumbRef.current) {
              const scrollPos = context.viewport.scrollLeft;
              const offset = getThumbOffsetFromScroll(scrollPos, sizes, context.dir);
              thumbRef.current.style.transform = `translate3d(${offset}px, 0, 0)`;
            }
          },
          onWheelScroll: (scrollPos) => {
            if (context.viewport) context.viewport.scrollLeft = scrollPos;
          },
          onDragScroll: (pointerPos) => {
            if (context.viewport) {
              context.viewport.scrollLeft = getScrollPosition(pointerPos, context.dir);
            }
          }
        }
      );
    }
    if (orientation === "vertical") {
      return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
        ScrollAreaScrollbarY,
        {
          ...commonProps,
          ref: forwardedRef,
          onThumbPositionChange: () => {
            if (context.viewport && thumbRef.current) {
              const scrollPos = context.viewport.scrollTop;
              const offset = getThumbOffsetFromScroll(scrollPos, sizes);
              thumbRef.current.style.transform = `translate3d(0, ${offset}px, 0)`;
            }
          },
          onWheelScroll: (scrollPos) => {
            if (context.viewport) context.viewport.scrollTop = scrollPos;
          },
          onDragScroll: (pointerPos) => {
            if (context.viewport) context.viewport.scrollTop = getScrollPosition(pointerPos);
          }
        }
      );
    }
    return null;
  });
  var ScrollAreaScrollbarX = React212.forwardRef((props, forwardedRef) => {
    const { sizes, onSizesChange, ...scrollbarProps } = props;
    const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
    const [computedStyle, setComputedStyle] = React212.useState();
    const ref = React212.useRef(null);
    const composeRefs2 = useComposedRefs(forwardedRef, ref, context.onScrollbarXChange);
    React212.useEffect(() => {
      if (ref.current) setComputedStyle(getComputedStyle(ref.current));
    }, [ref]);
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
      ScrollAreaScrollbarImpl,
      {
        "data-orientation": "horizontal",
        ...scrollbarProps,
        ref: composeRefs2,
        sizes,
        style: {
          bottom: 0,
          left: context.dir === "rtl" ? "var(--radix-scroll-area-corner-width)" : 0,
          right: context.dir === "ltr" ? "var(--radix-scroll-area-corner-width)" : 0,
          ["--radix-scroll-area-thumb-width"]: getThumbSize(sizes) + "px",
          ...props.style
        },
        onThumbPointerDown: (pointerPos) => props.onThumbPointerDown(pointerPos.x),
        onDragScroll: (pointerPos) => props.onDragScroll(pointerPos.x),
        onWheelScroll: (event, maxScrollPos) => {
          if (context.viewport) {
            const scrollPos = context.viewport.scrollLeft + event.deltaX;
            props.onWheelScroll(scrollPos);
            if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {
              event.preventDefault();
            }
          }
        },
        onResize: () => {
          if (ref.current && context.viewport && computedStyle) {
            onSizesChange({
              content: context.viewport.scrollWidth,
              viewport: context.viewport.offsetWidth,
              scrollbar: {
                size: ref.current.clientWidth,
                paddingStart: toInt(computedStyle.paddingLeft),
                paddingEnd: toInt(computedStyle.paddingRight)
              }
            });
          }
        }
      }
    );
  });
  var ScrollAreaScrollbarY = React212.forwardRef((props, forwardedRef) => {
    const { sizes, onSizesChange, ...scrollbarProps } = props;
    const context = useScrollAreaContext(SCROLLBAR_NAME, props.__scopeScrollArea);
    const [computedStyle, setComputedStyle] = React212.useState();
    const ref = React212.useRef(null);
    const composeRefs2 = useComposedRefs(forwardedRef, ref, context.onScrollbarYChange);
    React212.useEffect(() => {
      if (ref.current) setComputedStyle(getComputedStyle(ref.current));
    }, [ref]);
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
      ScrollAreaScrollbarImpl,
      {
        "data-orientation": "vertical",
        ...scrollbarProps,
        ref: composeRefs2,
        sizes,
        style: {
          top: 0,
          right: context.dir === "ltr" ? 0 : void 0,
          left: context.dir === "rtl" ? 0 : void 0,
          bottom: "var(--radix-scroll-area-corner-height)",
          ["--radix-scroll-area-thumb-height"]: getThumbSize(sizes) + "px",
          ...props.style
        },
        onThumbPointerDown: (pointerPos) => props.onThumbPointerDown(pointerPos.y),
        onDragScroll: (pointerPos) => props.onDragScroll(pointerPos.y),
        onWheelScroll: (event, maxScrollPos) => {
          if (context.viewport) {
            const scrollPos = context.viewport.scrollTop + event.deltaY;
            props.onWheelScroll(scrollPos);
            if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {
              event.preventDefault();
            }
          }
        },
        onResize: () => {
          if (ref.current && context.viewport && computedStyle) {
            onSizesChange({
              content: context.viewport.scrollHeight,
              viewport: context.viewport.offsetHeight,
              scrollbar: {
                size: ref.current.clientHeight,
                paddingStart: toInt(computedStyle.paddingTop),
                paddingEnd: toInt(computedStyle.paddingBottom)
              }
            });
          }
        }
      }
    );
  });
  var [ScrollbarProvider, useScrollbarContext] = createScrollAreaContext(SCROLLBAR_NAME);
  var ScrollAreaScrollbarImpl = React212.forwardRef((props, forwardedRef) => {
    const {
      __scopeScrollArea,
      sizes,
      hasThumb,
      onThumbChange,
      onThumbPointerUp,
      onThumbPointerDown,
      onThumbPositionChange,
      onDragScroll,
      onWheelScroll,
      onResize,
      ...scrollbarProps
    } = props;
    const context = useScrollAreaContext(SCROLLBAR_NAME, __scopeScrollArea);
    const [scrollbar, setScrollbar] = React212.useState(null);
    const composeRefs2 = useComposedRefs(forwardedRef, (node) => setScrollbar(node));
    const rectRef = React212.useRef(null);
    const prevWebkitUserSelectRef = React212.useRef("");
    const viewport = context.viewport;
    const maxScrollPos = sizes.content - sizes.viewport;
    const handleWheelScroll = useCallbackRef(onWheelScroll);
    const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);
    const handleResize = useDebounceCallback(onResize, 10);
    function handleDragScroll(event) {
      if (rectRef.current) {
        const x = event.clientX - rectRef.current.left;
        const y = event.clientY - rectRef.current.top;
        onDragScroll({ x, y });
      }
    }
    React212.useEffect(() => {
      const handleWheel = (event) => {
        const element = event.target;
        const isScrollbarWheel = scrollbar?.contains(element);
        if (isScrollbarWheel) handleWheelScroll(event, maxScrollPos);
      };
      document.addEventListener("wheel", handleWheel, { passive: false });
      return () => document.removeEventListener("wheel", handleWheel, { passive: false });
    }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);
    React212.useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);
    useResizeObserver(scrollbar, handleResize);
    useResizeObserver(context.content, handleResize);
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
      ScrollbarProvider,
      {
        scope: __scopeScrollArea,
        scrollbar,
        hasThumb,
        onThumbChange: useCallbackRef(onThumbChange),
        onThumbPointerUp: useCallbackRef(onThumbPointerUp),
        onThumbPositionChange: handleThumbPositionChange,
        onThumbPointerDown: useCallbackRef(onThumbPointerDown),
        children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          Primitive.div,
          {
            ...scrollbarProps,
            ref: composeRefs2,
            style: { position: "absolute", ...scrollbarProps.style },
            onPointerDown: composeEventHandlers2(props.onPointerDown, (event) => {
              const mainPointer = 0;
              if (event.button === mainPointer) {
                const element = event.target;
                element.setPointerCapture(event.pointerId);
                rectRef.current = scrollbar.getBoundingClientRect();
                prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;
                document.body.style.webkitUserSelect = "none";
                if (context.viewport) context.viewport.style.scrollBehavior = "auto";
                handleDragScroll(event);
              }
            }),
            onPointerMove: composeEventHandlers2(props.onPointerMove, handleDragScroll),
            onPointerUp: composeEventHandlers2(props.onPointerUp, (event) => {
              const element = event.target;
              if (element.hasPointerCapture(event.pointerId)) {
                element.releasePointerCapture(event.pointerId);
              }
              document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;
              if (context.viewport) context.viewport.style.scrollBehavior = "";
              rectRef.current = null;
            })
          }
        )
      }
    );
  });
  var THUMB_NAME = "ScrollAreaThumb";
  var ScrollAreaThumb = React212.forwardRef(
    (props, forwardedRef) => {
      const { forceMount, ...thumbProps } = props;
      const scrollbarContext = useScrollbarContext(THUMB_NAME, props.__scopeScrollArea);
      return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Presence, { present: forceMount || scrollbarContext.hasThumb, children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(ScrollAreaThumbImpl, { ref: forwardedRef, ...thumbProps }) });
    }
  );
  var ScrollAreaThumbImpl = React212.forwardRef(
    (props, forwardedRef) => {
      const { __scopeScrollArea, style, ...thumbProps } = props;
      const scrollAreaContext = useScrollAreaContext(THUMB_NAME, __scopeScrollArea);
      const scrollbarContext = useScrollbarContext(THUMB_NAME, __scopeScrollArea);
      const { onThumbPositionChange } = scrollbarContext;
      const composedRef = useComposedRefs(
        forwardedRef,
        (node) => scrollbarContext.onThumbChange(node)
      );
      const removeUnlinkedScrollListenerRef = React212.useRef(void 0);
      const debounceScrollEnd = useDebounceCallback(() => {
        if (removeUnlinkedScrollListenerRef.current) {
          removeUnlinkedScrollListenerRef.current();
          removeUnlinkedScrollListenerRef.current = void 0;
        }
      }, 100);
      React212.useEffect(() => {
        const viewport = scrollAreaContext.viewport;
        if (viewport) {
          const handleScroll2 = () => {
            debounceScrollEnd();
            if (!removeUnlinkedScrollListenerRef.current) {
              const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);
              removeUnlinkedScrollListenerRef.current = listener;
              onThumbPositionChange();
            }
          };
          onThumbPositionChange();
          viewport.addEventListener("scroll", handleScroll2);
          return () => viewport.removeEventListener("scroll", handleScroll2);
        }
      }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);
      return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
        Primitive.div,
        {
          "data-state": scrollbarContext.hasThumb ? "visible" : "hidden",
          ...thumbProps,
          ref: composedRef,
          style: {
            width: "var(--radix-scroll-area-thumb-width)",
            height: "var(--radix-scroll-area-thumb-height)",
            ...style
          },
          onPointerDownCapture: composeEventHandlers2(props.onPointerDownCapture, (event) => {
            const thumb = event.target;
            const thumbRect = thumb.getBoundingClientRect();
            const x = event.clientX - thumbRect.left;
            const y = event.clientY - thumbRect.top;
            scrollbarContext.onThumbPointerDown({ x, y });
          }),
          onPointerUp: composeEventHandlers2(props.onPointerUp, scrollbarContext.onThumbPointerUp)
        }
      );
    }
  );
  ScrollAreaThumb.displayName = THUMB_NAME;
  var CORNER_NAME = "ScrollAreaCorner";
  var ScrollAreaCorner = React212.forwardRef(
    (props, forwardedRef) => {
      const context = useScrollAreaContext(CORNER_NAME, props.__scopeScrollArea);
      const hasBothScrollbarsVisible = Boolean(context.scrollbarX && context.scrollbarY);
      const hasCorner = context.type !== "scroll" && hasBothScrollbarsVisible;
      return hasCorner ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(ScrollAreaCornerImpl, { ...props, ref: forwardedRef }) : null;
    }
  );
  ScrollAreaCorner.displayName = CORNER_NAME;
  var ScrollAreaCornerImpl = React212.forwardRef((props, forwardedRef) => {
    const { __scopeScrollArea, ...cornerProps } = props;
    const context = useScrollAreaContext(CORNER_NAME, __scopeScrollArea);
    const [width, setWidth] = React212.useState(0);
    const [height, setHeight] = React212.useState(0);
    const hasSize = Boolean(width && height);
    useResizeObserver(context.scrollbarX, () => {
      const height2 = context.scrollbarX?.offsetHeight || 0;
      context.onCornerHeightChange(height2);
      setHeight(height2);
    });
    useResizeObserver(context.scrollbarY, () => {
      const width2 = context.scrollbarY?.offsetWidth || 0;
      context.onCornerWidthChange(width2);
      setWidth(width2);
    });
    return hasSize ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
      Primitive.div,
      {
        ...cornerProps,
        ref: forwardedRef,
        style: {
          width,
          height,
          position: "absolute",
          right: context.dir === "ltr" ? 0 : void 0,
          left: context.dir === "rtl" ? 0 : void 0,
          bottom: 0,
          ...props.style
        }
      }
    ) : null;
  });
  function toInt(value) {
    return value ? parseInt(value, 10) : 0;
  }
  function getThumbRatio(viewportSize, contentSize) {
    const ratio = viewportSize / contentSize;
    return isNaN(ratio) ? 0 : ratio;
  }
  function getThumbSize(sizes) {
    const ratio = getThumbRatio(sizes.viewport, sizes.content);
    const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;
    const thumbSize = (sizes.scrollbar.size - scrollbarPadding) * ratio;
    return Math.max(thumbSize, 18);
  }
  function getScrollPositionFromPointer(pointerPos, pointerOffset, sizes, dir = "ltr") {
    const thumbSizePx = getThumbSize(sizes);
    const thumbCenter = thumbSizePx / 2;
    const offset = pointerOffset || thumbCenter;
    const thumbOffsetFromEnd = thumbSizePx - offset;
    const minPointerPos = sizes.scrollbar.paddingStart + offset;
    const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;
    const maxScrollPos = sizes.content - sizes.viewport;
    const scrollRange = dir === "ltr" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];
    const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange);
    return interpolate(pointerPos);
  }
  function getThumbOffsetFromScroll(scrollPos, sizes, dir = "ltr") {
    const thumbSizePx = getThumbSize(sizes);
    const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;
    const scrollbar = sizes.scrollbar.size - scrollbarPadding;
    const maxScrollPos = sizes.content - sizes.viewport;
    const maxThumbPos = scrollbar - thumbSizePx;
    const scrollClampRange = dir === "ltr" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];
    const scrollWithoutMomentum = clamp(scrollPos, scrollClampRange);
    const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);
    return interpolate(scrollWithoutMomentum);
  }
  function linearScale(input, output) {
    return (value) => {
      if (input[0] === input[1] || output[0] === output[1]) return output[0];
      const ratio = (output[1] - output[0]) / (input[1] - input[0]);
      return output[0] + ratio * (value - input[0]);
    };
  }
  function isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos) {
    return scrollPos > 0 && scrollPos < maxScrollPos;
  }
  var addUnlinkedScrollListener = (node, handler = () => {
  }) => {
    let prevPosition = { left: node.scrollLeft, top: node.scrollTop };
    let rAF = 0;
    (function loop() {
      const position = { left: node.scrollLeft, top: node.scrollTop };
      const isHorizontalScroll = prevPosition.left !== position.left;
      const isVerticalScroll = prevPosition.top !== position.top;
      if (isHorizontalScroll || isVerticalScroll) handler();
      prevPosition = position;
      rAF = window.requestAnimationFrame(loop);
    })();
    return () => window.cancelAnimationFrame(rAF);
  };
  function useDebounceCallback(callback, delay) {
    const handleCallback = useCallbackRef(callback);
    const debounceTimerRef = React212.useRef(0);
    React212.useEffect(() => () => window.clearTimeout(debounceTimerRef.current), []);
    return React212.useCallback(() => {
      window.clearTimeout(debounceTimerRef.current);
      debounceTimerRef.current = window.setTimeout(handleCallback, delay);
    }, [handleCallback, delay]);
  }
  function useResizeObserver(element, onResize) {
    const handleResize = useCallbackRef(onResize);
    useLayoutEffect22(() => {
      let rAF = 0;
      if (element) {
        const resizeObserver = new ResizeObserver(() => {
          cancelAnimationFrame(rAF);
          rAF = window.requestAnimationFrame(handleResize);
        });
        resizeObserver.observe(element);
        return () => {
          window.cancelAnimationFrame(rAF);
          resizeObserver.unobserve(element);
        };
      }
    }, [element, handleResize]);
  }
  var Root3 = ScrollArea;
  var Viewport = ScrollAreaViewport;
  var Corner = ScrollAreaCorner;

  // src/components/ui/scroll-area.tsx
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  var ScrollArea2 = React36.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
    Root3,
    {
      ref,
      className: cn("relative overflow-hidden", className),
      ...props,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Viewport, { className: "h-full w-full rounded-[inherit]", children }),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(ScrollBar, {}),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Corner, {})
      ]
    }
  ));
  ScrollArea2.displayName = Root3.displayName;
  var ScrollBar = React36.forwardRef(({ className, orientation = "vertical", ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
    ScrollAreaScrollbar,
    {
      ref,
      orientation,
      className: cn(
        "flex touch-none select-none transition-colors",
        orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-[1px]",
        orientation === "horizontal" && "h-2.5 flex-col border-t border-t-transparent p-[1px]",
        className
      ),
      ...props,
      children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(ScrollAreaThumb, { className: "relative flex-1 rounded-full bg-border" })
    }
  ));
  ScrollBar.displayName = ScrollAreaScrollbar.displayName;

  // src/components/training/TrainingPlayer.tsx
  var import_lucide_react10 = __toESM(require_lucide_react());
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  function safeText(v) {
    if (v === null || v === void 0) return "";
    try {
      if (typeof v === "string") return v;
      if (typeof v === "number" || typeof v === "boolean" || typeof v === "bigint") return String(v);
      if (v instanceof Date) return v.toLocaleString();
      return "";
    } catch {
      return "";
    }
  }
  function leadingIndex(s3) {
    const m = (s3 || "").trim().match(/^(\d{1,3})\b/);
    return m ? parseInt(m[1], 10) : Number.POSITIVE_INFINITY;
  }
  function sortTraining(a2, b) {
    const at = a2.title || a2.filename || "";
    const bt = b.title || b.filename || "";
    const ai = leadingIndex(at || a2.filename || "");
    const bi = leadingIndex(bt || b.filename || "");
    if (ai !== bi) return ai - bi;
    return (at || a2.filename || "").toLowerCase().localeCompare((bt || b.filename || "").toLowerCase());
  }
  function inferDurationLabel2(name) {
    const m = (name || "").match(/[(\\[\\]([0-5]?\\d:[0-5]\\d)[\\]\\]/);
    return m?.[1];
  }
  function storageKey(slug) {
    return `training:lastIndex:${slug}`;
  }
  function saveLastIndex(slug, i3) {
    try {
      localStorage.setItem(storageKey(slug), String(i3));
    } catch {
    }
  }
  function loadLastIndex(slug) {
    try {
      const raw = localStorage.getItem(storageKey(slug));
      if (!raw) return null;
      const n2 = parseInt(raw, 10);
      return Number.isFinite(n2) ? n2 : null;
    } catch {
      return null;
    }
  }
  function PlaylistRow({
    item,
    active,
    index: index2,
    onSelect
  }) {
    const title = item.title || item.filename || `Lesson ${index2 + 1}`;
    const duration = inferDurationLabel2(title);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
      "button",
      {
        type: "button",
        onClick: onSelect,
        className: [
          "group w-full rounded-md border px-3 py-2 text-left transition-colors",
          active ? "border-blue-600 bg-blue-50" : "hover:bg-slate-50"
        ].join(" "),
        "aria-current": active ? "true" : "false",
        children: /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "flex items-center justify-between gap-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "min-w-0", children: [
            /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(import_lucide_react10.Film, { className: ["h-4 w-4", active ? "text-blue-600" : "text-slate-400"].join(" ") }),
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("span", { className: ["truncate text-sm", active ? "text-slate-900 font-medium" : "text-slate-800"].join(" "), children: title })
            ] }),
            item.filename ? /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "mt-0.5 truncate text-[11px] text-slate-500", children: item.filename }) : null
          ] }),
          duration ? /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("span", { className: "shrink-0 text-xs text-slate-500", children: duration }) : null
        ] })
      }
    );
  }
  function TrainingPlayer({
    programSlug,
    programName,
    programDescription,
    items
  }) {
    const { videos, related } = (0, import_react11.useMemo)(() => {
      const sorted = (items || []).slice().sort(sortTraining);
      const v = sorted.filter((it) => isVideo(it));
      const r3 = sorted.filter((it) => !isVideo(it));
      return { videos: v, related: r3 };
    }, [items]);
    const initialIndex = (0, import_react11.useMemo)(() => {
      const saved = loadLastIndex(programSlug);
      if (saved !== null && saved >= 0 && saved < (videos?.length || 0)) return saved;
      return 0;
    }, [programSlug, videos]);
    const [index2, setIndex] = (0, import_react11.useState)(initialIndex);
    (0, import_react11.useEffect)(() => {
      saveLastIndex(programSlug, index2);
    }, [programSlug, index2]);
    (0, import_react11.useEffect)(() => {
      if (index2 >= videos.length) setIndex(videos.length > 0 ? 0 : 0);
    }, [videos, index2]);
    const current = videos[index2] || null;
    const videoRef = (0, import_react11.useRef)(null);
    (0, import_react11.useEffect)(() => {
      const el = videoRef.current;
      if (el) {
        el.play().catch(() => {
        });
      }
    }, [current?.url]);
    const hasPrev = index2 > 0;
    const hasNext = index2 < videos.length - 1;
    const handlePrev = () => setIndex((i3) => Math.max(0, i3 - 1));
    const handleNext = () => setIndex((i3) => Math.min(videos.length - 1, i3 + 1));
    const title = safeText(current?.title || current?.filename || programName);
    const duration = inferDurationLabel2(title);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "grid grid-cols-1 gap-4 md:grid-cols-12", children: [
      /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "md:col-span-8 space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(Card, { className: "overflow-hidden", children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "h-1 bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300" }),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(CardHeader, { className: "pb-2", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(CardTitle, { className: "flex flex-wrap items-center gap-2 text-xl", children: [
            programName,
            /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(Badge, { variant: "secondary", className: "bg-slate-100 text-slate-700", children: "Training" })
          ] }) }),
          programDescription ? /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(CardContent, { className: "pt-0", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("p", { className: "text-sm text-slate-600", children: programDescription }) }) : null
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(Card, { children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(CardContent, { className: "p-3 sm:p-4", children: current ? /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "space-y-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "aspect-video w-full overflow-hidden rounded-md bg-slate-100", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
            "video",
            {
              ref: videoRef,
              controls: true,
              preload: "metadata",
              className: "h-full w-full rounded-md",
              src: current.url
            },
            current.url
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between", children: [
            /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "text-base font-semibold text-slate-900", children: title }),
              duration ? /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "text-xs text-slate-500", children: duration }) : null
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "flex items-center gap-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(Button, { variant: "outline", size: "sm", onClick: handlePrev, disabled: !hasPrev, className: "h-8 px-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(import_lucide_react10.ChevronLeft, { className: "mr-1 h-4 w-4" }),
                "Prev"
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(Button, { size: "sm", onClick: handleNext, disabled: !hasNext, className: "h-8 px-2", children: [
                "Next",
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(import_lucide_react10.ChevronRight, { className: "ml-1 h-4 w-4" })
              ] })
            ] })
          ] })
        ] }) : /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "rounded-md border border-dashed bg-white p-6 text-center text-sm text-slate-600", children: "No training videos available." }) }) }),
        related.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(Card, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(CardHeader, { className: "pb-2", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(CardTitle, { className: "text-lg", children: "Related files" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(CardContent, { className: "space-y-2", children: related.map((f) => /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(
            "div",
            {
              className: "flex items-center justify-between rounded-md border bg-white px-3 py-2 text-sm",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "min-w-0", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "truncate font-medium text-slate-900", children: f.title || f.filename || "File" }),
                  f.filename ? /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "truncate text-[11px] text-slate-500", children: f.filename }) : null
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("a", { href: f.url, target: "_blank", rel: "noreferrer", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(Button, { className: "h-8 px-3", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(import_lucide_react10.Download, { className: "mr-2 h-4 w-4" }),
                  "Download"
                ] }) })
              ]
            },
            f.path
          )) })
        ] }) : null
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "md:col-span-4", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(Card, { className: "overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "h-1 bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300" }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(CardHeader, { className: "pb-2", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(CardTitle, { className: "text-lg", children: "Course content" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(CardContent, { className: "p-0", children: videos.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "p-4 text-sm text-slate-600", children: "No video lessons yet." }) : /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(ScrollArea2, { className: "max-h-[60vh] px-3 py-3", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "space-y-2", children: videos.map((v, i3) => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
          PlaylistRow,
          {
            item: v,
            active: i3 === index2,
            index: i3,
            onSelect: () => setIndex(i3)
          },
          v.path
        )) }) }) })
      ] }) })
    ] });
  }

  // src/pages/ProgramDetail.tsx
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  function normalizeTab(v) {
    const val = (v || "").toLowerCase();
    if (val === "training" || val === "protocols" || val === "forms" || val === "resources") return val;
    return "overview";
  }
  function sortByTitle(a2, b) {
    const at = (a2.title || a2.filename || "").toLowerCase();
    const bt = (b.title || b.filename || "").toLowerCase();
    if (at < bt) return -1;
    if (at > bt) return 1;
    return (a2.filename || "").localeCompare(b.filename || "");
  }
  var MTM_SECTIONS = [
    { key: "general", label: "General Forms", match: ["/forms/utilityforms/"] },
    { key: "flowsheets", label: "Medical Conditions Flowsheets", match: ["/forms/medflowsheets/"] },
    { key: "outcomes", label: "Outcomes TIP Forms", match: ["/forms/outcomestip/"] },
    { key: "prescriber", label: "Prescriber Communication Forms", match: ["/forms/prescribercomm/"] }
  ];
  var PRESCRIBER_SUBFOLDERS = [
    {
      key: "drugInteractions",
      label: "Drug Interactions",
      match: ["/forms/prescribercomm/druginteractions/"]
    },
    {
      key: "needsDrugTherapy",
      label: "Needs Drug Therapy",
      match: ["/forms/prescribercomm/needsdrugtherapy/"]
    },
    {
      key: "optimizeMedication",
      label: "Optimize Medication Therapy",
      match: ["/forms/prescribercomm/optimizemedicationtherapy/"]
    },
    {
      key: "suboptimalHighRisk",
      label: "Suboptimal Drug Selection/ High Risk Medication",
      match: [
        "/forms/prescribercomm/suboptimaldrugselection_hrm/",
        "/forms/prescribercomm/suboptimaldrugselection/"
        // lenient fallback
      ]
    }
  ];
  function pathMatches(path, substrings) {
    const p = (path || "").toLowerCase();
    return substrings.some((s3) => p.includes(s3));
  }
  function buildMtmFormSections(items) {
    const bySection = MTM_SECTIONS.map((s3) => ({
      key: s3.key,
      label: s3.label,
      items: items.filter((it) => pathMatches(it.path || "", s3.match)).slice().sort(sortByTitle)
    }));
    return bySection.filter((s3) => s3.items.length > 0);
  }
  function buildPrescriberSubsections(items) {
    const lowerPath = (s3) => (s3 || "").toLowerCase();
    const buckets = {
      drugInteractions: [],
      needsDrugTherapy: [],
      optimizeMedication: [],
      suboptimalHighRisk: []
    };
    const matched = /* @__PURE__ */ new Set();
    for (const item of items) {
      const p = lowerPath(item.path);
      let placed = false;
      for (const sub of PRESCRIBER_SUBFOLDERS) {
        if (pathMatches(p, sub.match)) {
          buckets[sub.key].push(item);
          matched.add(item.path);
          placed = true;
          break;
        }
      }
      if (!placed) {
      }
    }
    const general = items.filter((i3) => !matched.has(i3.path));
    const out = [];
    if (general.length > 0) {
      out.push({
        key: "general",
        label: "General",
        items: general.slice().sort(sortByTitle)
      });
    }
    for (const sub of PRESCRIBER_SUBFOLDERS) {
      const arr = buckets[sub.key].slice().sort(sortByTitle);
      if (arr.length > 0) {
        out.push({ key: sub.key, label: sub.label, items: arr });
      }
    }
    return out;
  }
  var TNT_SECTIONS = [
    { key: "covid", label: "COVID", match: ["/forms/covid/"] },
    { key: "flu", label: "Flu", match: ["/forms/flu/"] },
    { key: "strep", label: "Strep", match: ["/forms/strep/"] }
  ];
  function buildTntFormSections(items) {
    const grouped = TNT_SECTIONS.map((s3) => ({
      key: s3.key,
      label: s3.label,
      items: items.filter((it) => pathMatches(it.path || "", s3.match)).slice().sort(sortByTitle)
    }));
    return grouped.filter((g) => g.items.length > 0);
  }
  function ProgramDetail() {
    const { programSlug = "" } = useParams();
    const [name, setName] = (0, import_react12.useState)(programSlug);
    const [description, setDescription] = (0, import_react12.useState)(void 0);
    const [training, setTraining] = (0, import_react12.useState)([]);
    const [protocols, setProtocols] = (0, import_react12.useState)([]);
    const [forms, setForms] = (0, import_react12.useState)([]);
    const [resources, setResources] = (0, import_react12.useState)([]);
    const [loading, setLoading] = (0, import_react12.useState)(true);
    const [err, setErr] = (0, import_react12.useState)(null);
    const location = useLocation();
    const navigate = useNavigate();
    const currentTab = (0, import_react12.useMemo)(() => {
      const qs = new URLSearchParams(location.search);
      return normalizeTab(qs.get("tab"));
    }, [location.search]);
    const counts = {
      training: training.length,
      protocols: protocols.length,
      forms: forms.length,
      resources: resources.length
    };
    const [mtmOpen, setMtmOpen] = (0, import_react12.useState)({
      general: false,
      flowsheets: false,
      outcomes: false,
      prescriber: false
    });
    const [mtmPrescOpen, setMtmPrescOpen] = (0, import_react12.useState)({
      general: false,
      drugInteractions: false,
      needsDrugTherapy: false,
      optimizeMedication: false,
      suboptimalHighRisk: false
    });
    const [tntOpen, setTntOpen] = (0, import_react12.useState)({
      covid: false,
      flu: false,
      strep: false
    });
    function toggleMtmSection(key) {
      setMtmOpen((prev) => ({ ...prev, [key]: !prev[key] }));
    }
    function toggleMtmPrescriber(key) {
      setMtmPrescOpen((prev) => ({ ...prev, [key]: !prev[key] }));
    }
    function toggleTntSection(key) {
      setTntOpen((prev) => ({ ...prev, [key]: !prev[key] }));
    }
    (0, import_react12.useEffect)(() => {
      let mounted = true;
      async function load() {
        try {
          setLoading(true);
          setErr(null);
          try {
            const list = await listProgramsFromStorage();
            const meta = list.find((p) => p.slug === programSlug);
            if (mounted) {
              setName(meta?.name || programSlug);
              setDescription(meta?.description || void 0);
            }
          } catch {
            if (mounted) {
              setName(programSlug);
              setDescription(void 0);
            }
          }
          if (ProgramSlugs.includes(programSlug)) {
            const grouped = await getProgramResourcesGrouped(programSlug);
            if (!mounted) return;
            setTraining(grouped.training || []);
            setProtocols(grouped.protocols || []);
            setForms(grouped.forms || []);
            setResources(grouped.resources || []);
          } else {
            throw new Error("Program not found.");
          }
        } catch (e) {
          if (mounted) setErr(e?.message || "Failed to load program.");
        } finally {
          if (mounted) setLoading(false);
        }
      }
      load();
      return () => {
        mounted = false;
      };
    }, [programSlug]);
    function handleTabChange(next) {
      const tab = normalizeTab(next);
      const qs = new URLSearchParams(location.search);
      qs.set("tab", tab);
      navigate({ pathname: location.pathname, search: qs.toString() }, { replace: false });
    }
    function renderRows(items, emptyHint) {
      if (items.length === 0) {
        return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "rounded-md border border-dashed bg-white p-6 text-center text-sm text-slate-600", children: emptyHint });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "space-y-3", children: items.map((i3) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(ProgramResourceRow, { item: i3 }, i3.path)) });
    }
    function renderPrescriberSubsections(items) {
      const subs = buildPrescriberSubsections(items);
      if (subs.length === 0) {
        return renderRows(items, "No prescriber communication forms available yet.");
      }
      return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "space-y-3", children: subs.map((sub) => {
        const open = mtmPrescOpen[sub.key];
        const panelId = `mtm-presc-${sub.key}`;
        return /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "rounded-md border bg-white", children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(
            "button",
            {
              type: "button",
              className: "relative flex w-full items-center justify-between px-3 py-2 text-left rounded-t-md bg-gradient-to-r from-blue-600/10 via-cyan-500/10 to-transparent hover:from-blue-600/15 hover:via-cyan-500/15 hover:to-transparent transition-colors",
              "aria-expanded": open,
              "aria-controls": panelId,
              onClick: () => toggleMtmPrescriber(sub.key),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "h-1.5 w-1.5 rounded-full bg-cyan-600", "aria-hidden": true }),
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("h4", { className: "text-sm font-semibold text-slate-800", children: [
                    sub.label,
                    " ",
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("span", { className: "ml-1 text-xs font-normal text-slate-500", children: [
                      "(",
                      sub.items.length,
                      ")"
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "text-slate-500", children: open ? /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(import_lucide_react11.ChevronDown, { className: "h-4 w-4" }) : /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(import_lucide_react11.ChevronRight, { className: "h-4 w-4" }) })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
            "div",
            {
              id: panelId,
              "aria-hidden": !open,
              className: [
                "overflow-hidden px-3",
                open ? "max-h-[100000px] py-3" : "max-h-0",
                "transition-[max-height] duration-300 ease-in-out"
              ].join(" "),
              children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "space-y-3", children: sub.items.map((i3) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(ProgramResourceRow, { item: i3 }, i3.path)) })
            }
          )
        ] }, sub.key);
      }) });
    }
    function renderMtmForms(items) {
      const sections = buildMtmFormSections(items);
      if (sections.length === 0) {
        return renderRows(items, "No documentation forms available yet.");
      }
      return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "space-y-4", children: sections.map((section) => {
        const open = mtmOpen[section.key];
        const panelId = `mtm-${section.key}`;
        return /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "rounded-md border bg-white", children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(
            "button",
            {
              type: "button",
              className: "relative flex w-full items-center justify-between px-3 py-2 text-left rounded-t-md bg-gradient-to-r from-cyan-600/10 via-teal-500/10 to-transparent hover:from-cyan-600/15 hover:via-teal-500/15 hover:to-transparent transition-colors",
              "aria-expanded": open,
              "aria-controls": panelId,
              onClick: () => toggleMtmSection(section.key),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "h-1.5 w-1.5 rounded-full bg-blue-600", "aria-hidden": true }),
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("h3", { className: "text-sm font-semibold text-slate-800", children: [
                    section.label,
                    " ",
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("span", { className: "ml-1 text-xs font-normal text-slate-500", children: [
                      "(",
                      section.items.length,
                      ")"
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "text-slate-500", children: open ? /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(import_lucide_react11.ChevronDown, { className: "h-4 w-4" }) : /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(import_lucide_react11.ChevronRight, { className: "h-4 w-4" }) })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
            "div",
            {
              id: panelId,
              "aria-hidden": !open,
              className: [
                "overflow-hidden px-3",
                open ? "py-3" : "max-h-0",
                "transition-[max-height] duration-300 ease-in-out"
              ].join(" "),
              children: section.key === "prescriber" ? renderPrescriberSubsections(section.items) : /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "space-y-3", children: section.items.map((i3) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(ProgramResourceRow, { item: i3 }, i3.path)) })
            }
          )
        ] }, section.key);
      }) });
    }
    function renderTntForms(items) {
      const sections = buildTntFormSections(items);
      if (sections.length === 0) {
        return renderRows(items, "No documentation forms available yet.");
      }
      return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "space-y-4", children: sections.map((section) => {
        const open = tntOpen[section.key];
        const panelId = `tnt-${section.key}`;
        return /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "rounded-md border bg-white", children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(
            "button",
            {
              type: "button",
              className: "relative flex w-full items-center justify-between px-3 py-2 text-left rounded-t-md bg-gradient-to-r from-cyan-600/10 via-teal-500/10 to-transparent hover:from-cyan-600/15 hover:via-teal-500/15 hover:to-transparent transition-colors",
              "aria-expanded": open,
              "aria-controls": panelId,
              onClick: () => toggleTntSection(section.key),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "flex items-center gap-2", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "h-1.5 w-1.5 rounded-full bg-blue-600", "aria-hidden": true }),
                  /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("h3", { className: "text-sm font-semibold text-slate-800", children: [
                    section.label,
                    " ",
                    /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("span", { className: "ml-1 text-xs font-normal text-slate-500", children: [
                      "(",
                      section.items.length,
                      ")"
                    ] })
                  ] })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "text-slate-500", children: open ? /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(import_lucide_react11.ChevronDown, { className: "h-4 w-4" }) : /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(import_lucide_react11.ChevronRight, { className: "h-4 w-4" }) })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
            "div",
            {
              id: panelId,
              "aria-hidden": !open,
              className: [
                "overflow-hidden px-3",
                open ? "max-h-[100000px] py-3" : "max-h-0",
                "transition-[max-height] duration-300 ease-in-out"
              ].join(" "),
              children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "space-y-3", children: section.items.map((i3) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(ProgramResourceRow, { item: i3 }, i3.path)) })
            }
          )
        ] }, section.key);
      }) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(AppShell, { sidebar: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(MemberSidebar, {}), children: [
      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("section", { className: "relative -mx-3 bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300 px-3 py-10 text-white", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "mx-auto w-full max-w-[1440px]", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "w-full max-w-none", children: [
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
          Breadcrumbs,
          {
            variant: "light",
            items: [
              { label: "Dashboard", to: "/dashboard" },
              { label: "Clinical Programs", to: "/member-content" },
              { label: name || "Program" }
            ],
            className: "mb-4"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "w-full rounded-xl border border-white/25 bg-white/10 p-6 shadow-lg backdrop-blur-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("h1", { className: "text-3xl font-bold leading-tight", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(SafeText, { value: name }) }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "mt-3 flex flex-wrap items-center gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Badge, { variant: "secondary", className: "bg-white/20 text-white hover:bg-white/30", children: "Supabase Storage \u2022 storage_files_catalog" }),
            !loading ? /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("span", { className: "text-xs text-white/80", children: [
              counts.training,
              " training \u2022 ",
              counts.protocols,
              " protocols \u2022 ",
              counts.forms,
              " forms \u2022 ",
              counts.resources,
              " ",
              "resources"
            ] }) : null
          ] }),
          description ? /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "mt-3 max-w-3xl text-sm text-white/90", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(SafeText, { value: description }) }) : null
        ] })
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("section", { className: "py-6", children: loading ? /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "rounded-md border p-6 text-sm text-slate-600", children: "Loading program\u2026" }) : err ? /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "rounded-md border border-red-200 bg-red-50 p-6 text-sm text-red-700", children: err }) : /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "space-y-6", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(Card, { className: "overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "h-1 bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300" }),
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(CardContent, { className: "p-0", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(Tabs2, { value: currentTab, onValueChange: handleTabChange, children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "sticky top-0 z-20 border-b bg-white/80 px-3 py-2 backdrop-blur supports-[backdrop-filter]:bg-white/60", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(TabsList2, { className: "h-9", children: [
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(TabsTrigger2, { value: "overview", className: "text-sm", children: "Overview" }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(TabsTrigger2, { value: "training", className: "text-sm", children: [
              "Training ",
              counts.training ? `(${counts.training})` : ""
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(TabsTrigger2, { value: "protocols", className: "text-sm", children: [
              "Protocols ",
              counts.protocols ? `(${counts.protocols})` : ""
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(TabsTrigger2, { value: "forms", className: "text-sm", children: [
              "Forms ",
              counts.forms ? `(${counts.forms})` : ""
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(TabsTrigger2, { value: "resources", className: "text-sm", children: [
              "Additional Resources ",
              counts.resources ? `(${counts.resources})` : ""
            ] })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(TabsContent2, { value: "overview", className: "px-4 py-4", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "space-y-4", children: [
            description ? /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "text-sm text-slate-700", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(SafeText, { value: description }) }) : /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "text-sm text-slate-600", children: "This program includes training modules, protocols, documentation forms, and additional resources." }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "grid grid-cols-2 gap-3 md:grid-cols-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "rounded-md border bg-white p-3 text-center text-sm", children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "text-2xl font-semibold text-slate-900", children: counts.training }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "text-slate-600", children: "Training" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "rounded-md border bg-white p-3 text-center text-sm", children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "text-2xl font-semibold text-slate-900", children: counts.protocols }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "text-slate-600", children: "Protocols" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "rounded-md border bg-white p-3 text-center text-sm", children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "text-2xl font-semibold text-slate-900", children: counts.forms }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "text-slate-600", children: "Forms" })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "rounded-md border bg-white p-3 text-center text-sm", children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "text-2xl font-semibold text-slate-900", children: counts.resources }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "text-slate-600", children: "Resources" })
              ] })
            ] })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(TabsContent2, { value: "training", className: "px-4 py-4", children: training.some((t2) => t2.mimeType?.startsWith("video/") || /\\.(mp4|webm|ogg)$/i.test(t2.filename || t2.title || "")) ? /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
            TrainingPlayer,
            {
              programSlug,
              programName: name,
              programDescription: description,
              items: training
            }
          ) : renderRows(training, "No training modules available yet.") }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(TabsContent2, { value: "protocols", className: "px-4 py-4", children: renderRows(protocols, "No protocol manuals available yet.") }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(TabsContent2, { value: "forms", className: "px-4 py-4", children: programSlug === "mtmthefuturetoday" ? renderMtmForms(forms) : programSlug === "testandtreat" ? renderTntForms(forms) : renderRows(forms, "No documentation forms available yet.") }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(TabsContent2, { value: "resources", className: "px-4 py-4", children: renderRows(resources, "No additional resources available yet.") })
        ] }) })
      ] }) }) })
    ] });
  }

  // src/pages/MemberContent.tsx
  var import_react13 = __toESM(require_react());
  var import_lucide_react12 = __toESM(require_lucide_react());
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  function getProgramVisuals(level) {
    const lower = (level || "").toLowerCase();
    if (lower.includes("advanced") || lower.includes("expert")) {
      return { color: "from-blue-600 via-cyan-500 to-teal-300", icon: import_lucide_react12.Zap };
    }
    if (lower.includes("intermediate")) {
      return { color: "from-blue-600 via-cyan-500 to-teal-300", icon: import_lucide_react12.Award };
    }
    return { color: "from-blue-600 via-cyan-500 to-teal-300", icon: import_lucide_react12.FileText };
  }
  function MemberContent() {
    const [programs, setPrograms] = (0, import_react13.useState)([]);
    const [loading, setLoading] = (0, import_react13.useState)(true);
    const [error, setError] = (0, import_react13.useState)(null);
    (0, import_react13.useEffect)(() => {
      async function load() {
        try {
          setLoading(true);
          setError(null);
          const items = await listProgramsFromStorage();
          setPrograms(items || []);
        } catch (err) {
          setError(err instanceof Error ? err.message : "Failed to load programs");
          console.error("Error loading programs (Supabase):", err);
        } finally {
          setLoading(false);
        }
      }
      load();
    }, []);
    const programUIItems = (0, import_react13.useMemo)(
      () => (programs || []).map((p) => {
        const visuals = getProgramVisuals(void 0);
        return {
          slug: p.slug,
          title: p.name,
          description: p.description,
          level: void 0,
          color: visuals.color,
          icon: visuals.icon
        };
      }),
      [programs]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(AppShell, { sidebar: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(MemberSidebar, {}), children: [
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("section", { className: "relative -mx-3 bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300 px-3 py-12 text-white", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "mx-auto max-w-[1440px]", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "max-w-4xl", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          Breadcrumbs,
          {
            variant: "light",
            items: [
              { label: "Dashboard", to: "/dashboard" },
              { label: "Clinical Programs" }
            ],
            className: "mb-4"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("h1", { className: "text-3xl font-bold", children: "Member Content" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("p", { className: "text-white/90", children: "Access your clinical training programs and resources" })
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("section", { className: "py-6", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "max-w-4xl", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Card, { className: "border-cyan-400 bg-gradient-to-r from-blue-50 to-cyan-50", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(CardContent, { className: "flex items-center justify-between p-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex h-12 w-12 items-center justify-center rounded-full bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(import_lucide_react12.BookOpen, { className: "h-6 w-6 text-white" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("h3", { className: "text-xl font-semibold text-gray-900", children: "Resource Library" }),
            /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("p", { className: "text-gray-600", children: "Access clinical tools, forms, and educational materials" })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Link, { to: "/resources", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(Button, { className: "bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-300 hover:opacity-90", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(import_lucide_react12.BookOpen, { className: "mr-2 h-4 w-4" }),
          "View Resources"
        ] }) })
      ] }) }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("section", { className: "py-6", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "max-w-6xl", children: loading ? /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center justify-center py-12", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(import_lucide_react12.Loader2, { className: "h-8 w-8 animate-spin text-blue-600" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "ml-2 text-gray-600", children: "Loading programs..." })
      ] }) : error ? /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "py-12 text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "mb-2 text-red-600", children: "Error loading programs" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "text-gray-600", children: error })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "grid grid-cols-1 gap-6 md:grid-cols-2", children: programUIItems.map((program) => {
        const Icon = program.icon;
        const to = `/program/${encodeURIComponent(program.slug)}`;
        return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
          Card,
          {
            className: "overflow-hidden transition-shadow hover:shadow-lg",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: `h-2 bg-gradient-to-r ${program.color}` }),
              /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(CardHeader, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "mb-4 flex items-start justify-between", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                    "div",
                    {
                      className: `flex h-12 w-12 items-center justify-center rounded-lg bg-gradient-to-r ${program.color}`,
                      children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Icon, { className: "h-6 w-6 text-white" })
                    }
                  ),
                  program.level ? /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex gap-2", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "rounded bg-slate-100 px-2 py-0.5 text-xs text-slate-700", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(SafeText, { value: program.level }) }) }) : null
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(CardTitle, { className: "mb-2 text-xl", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(SafeText, { value: program.title }) }),
                program.description ? /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(CardDescription, { className: "mb-4 text-gray-600", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(SafeText, { value: program.description }) }) : null
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex gap-3", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Link, { to, className: "flex-1", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
                Button,
                {
                  className: `w-full bg-gradient-to-r ${program.color} hover:opacity-90`,
                  children: "View Program"
                }
              ) }) }) })
            ]
          },
          program.slug
        );
      }) }) }) })
    ] });
  }

  // src/pages/Account.tsx
  var import_lucide_react14 = __toESM(require_lucide_react());

  // src/components/profiles/ProfilesTable.tsx
  var import_react17 = __toESM(require_react());

  // src/stores/profilesStore.ts
  function storageKey2(userId) {
    return `profiles:${userId}`;
  }
  function loadFromStorage(userId) {
    try {
      const raw = localStorage.getItem(storageKey2(userId));
      if (!raw) return null;
      const parsed = JSON.parse(raw);
      if (!parsed || !Array.isArray(parsed.profiles)) return null;
      return parsed;
    } catch {
      return null;
    }
  }
  function saveToStorage(userId, payload) {
    try {
      localStorage.setItem(storageKey2(userId), JSON.stringify(payload));
    } catch {
    }
  }
  function uid() {
    return `${Date.now().toString(36)}-${Math.random().toString(36).slice(2, 8)}`;
  }
  var useProfilesStore = create((set2, get3) => ({
    profiles: [],
    currentProfileId: null,
    loadedForUserId: null,
    /**
     * Ensure profiles are loaded for the given user id (idempotent).
     */
    ensureLoaded: (userId) => {
      const state = get3();
      if (state.loadedForUserId === userId) return;
      const persisted = loadFromStorage(userId);
      if (persisted) {
        set2({
          profiles: persisted.profiles,
          currentProfileId: persisted.currentProfileId,
          loadedForUserId: userId
        });
      } else {
        set2({
          profiles: [],
          currentProfileId: null,
          loadedForUserId: userId
        });
        saveToStorage(userId, {
          profiles: [],
          currentProfileId: null,
          updatedAt: (/* @__PURE__ */ new Date()).toISOString()
        });
      }
    },
    /**
     * Set the current active profile id (persisted).
     */
    setCurrentProfile: (profileId) => {
      const { loadedForUserId, profiles } = get3();
      set2({ currentProfileId: profileId });
      if (loadedForUserId) {
        saveToStorage(loadedForUserId, {
          profiles,
          currentProfileId: profileId,
          updatedAt: (/* @__PURE__ */ new Date()).toISOString()
        });
      }
    },
    /**
     * Add a new profile for the current user.
     */
    addProfile: (userId, data2) => {
      const profile = {
        id: uid(),
        ...data2,
        createdAt: (/* @__PURE__ */ new Date()).toISOString(),
        updatedAt: (/* @__PURE__ */ new Date()).toISOString()
      };
      const { profiles, currentProfileId } = get3();
      const next = [...profiles, profile];
      set2({ profiles: next, currentProfileId: currentProfileId ?? profile.id, loadedForUserId: userId });
      saveToStorage(userId, {
        profiles: next,
        currentProfileId: currentProfileId ?? profile.id,
        updatedAt: (/* @__PURE__ */ new Date()).toISOString()
      });
      return profile;
    },
    /**
     * Update an existing profile by id.
     */
    updateProfile: (userId, id, changes) => {
      const { profiles, currentProfileId } = get3();
      const next = profiles.map((p) => p.id === id ? { ...p, ...changes, updatedAt: (/* @__PURE__ */ new Date()).toISOString() } : p);
      set2({ profiles: next });
      saveToStorage(userId, {
        profiles: next,
        currentProfileId,
        updatedAt: (/* @__PURE__ */ new Date()).toISOString()
      });
    },
    /**
     * Remove a profile by id.
     */
    removeProfile: (userId, id) => {
      const { profiles, currentProfileId } = get3();
      const next = profiles.filter((p) => p.id !== id);
      const nextCurrent = currentProfileId === id ? next[0]?.id ?? null : currentProfileId;
      set2({ profiles: next, currentProfileId: nextCurrent });
      saveToStorage(userId, {
        profiles: next,
        currentProfileId: nextCurrent,
        updatedAt: (/* @__PURE__ */ new Date()).toISOString()
      });
    },
    /**
     * Reset store (e.g., on logout).
     */
    reset: () => {
      set2({ profiles: [], currentProfileId: null, loadedForUserId: null });
    }
  }));

  // src/components/profiles/AddProfileModal.tsx
  var import_react16 = __toESM(require_react());

  // node_modules/react-hook-form/dist/index.esm.mjs
  var import_react14 = __toESM(require_react(), 1);
  var isCheckBoxInput = (element) => element.type === "checkbox";
  var isDateObject = (value) => value instanceof Date;
  var isNullOrUndefined = (value) => value == null;
  var isObjectType = (value) => typeof value === "object";
  var isObject = (value) => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);
  var getEventValue = (event) => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;
  var getNodeParentName = (name) => name.substring(0, name.search(/\.\d+(\.|$)/)) || name;
  var isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));
  var isPlainObject3 = (tempObject) => {
    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;
    return isObject(prototypeCopy) && prototypeCopy.hasOwnProperty("isPrototypeOf");
  };
  var isWeb = typeof window !== "undefined" && typeof window.HTMLElement !== "undefined" && typeof document !== "undefined";
  function cloneObject(data2) {
    let copy;
    const isArray = Array.isArray(data2);
    const isFileListInstance = typeof FileList !== "undefined" ? data2 instanceof FileList : false;
    if (data2 instanceof Date) {
      copy = new Date(data2);
    } else if (!(isWeb && (data2 instanceof Blob || isFileListInstance)) && (isArray || isObject(data2))) {
      copy = isArray ? [] : Object.create(Object.getPrototypeOf(data2));
      if (!isArray && !isPlainObject3(data2)) {
        copy = data2;
      } else {
        for (const key in data2) {
          if (data2.hasOwnProperty(key)) {
            copy[key] = cloneObject(data2[key]);
          }
        }
      }
    } else {
      return data2;
    }
    return copy;
  }
  var isKey = (value) => /^\w*$/.test(value);
  var isUndefined = (val) => val === void 0;
  var compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];
  var stringToPath = (input) => compact(input.replace(/["|']|\]/g, "").split(/\.|\[/));
  var get2 = (object, path, defaultValue) => {
    if (!path || !isObject(object)) {
      return defaultValue;
    }
    const result = (isKey(path) ? [path] : stringToPath(path)).reduce((result2, key) => isNullOrUndefined(result2) ? result2 : result2[key], object);
    return isUndefined(result) || result === object ? isUndefined(object[path]) ? defaultValue : object[path] : result;
  };
  var isBoolean = (value) => typeof value === "boolean";
  var set = (object, path, value) => {
    let index2 = -1;
    const tempPath = isKey(path) ? [path] : stringToPath(path);
    const length = tempPath.length;
    const lastIndex = length - 1;
    while (++index2 < length) {
      const key = tempPath[index2];
      let newValue = value;
      if (index2 !== lastIndex) {
        const objValue = object[key];
        newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index2 + 1]) ? [] : {};
      }
      if (key === "__proto__" || key === "constructor" || key === "prototype") {
        return;
      }
      object[key] = newValue;
      object = object[key];
    }
  };
  var EVENTS = {
    BLUR: "blur",
    FOCUS_OUT: "focusout",
    CHANGE: "change"
  };
  var VALIDATION_MODE = {
    onBlur: "onBlur",
    onChange: "onChange",
    onSubmit: "onSubmit",
    onTouched: "onTouched",
    all: "all"
  };
  var INPUT_VALIDATION_RULES = {
    max: "max",
    min: "min",
    maxLength: "maxLength",
    minLength: "minLength",
    pattern: "pattern",
    required: "required",
    validate: "validate"
  };
  var HookFormContext = import_react14.default.createContext(null);
  HookFormContext.displayName = "HookFormContext";
  var getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {
    const result = {
      defaultValues: control._defaultValues
    };
    for (const key in formState) {
      Object.defineProperty(result, key, {
        get: () => {
          const _key = key;
          if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {
            control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;
          }
          localProxyFormState && (localProxyFormState[_key] = true);
          return formState[_key];
        }
      });
    }
    return result;
  };
  var useIsomorphicLayoutEffect2 = typeof window !== "undefined" ? import_react14.default.useLayoutEffect : import_react14.default.useEffect;
  var isString = (value) => typeof value === "string";
  var generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {
    if (isString(names)) {
      isGlobal && _names.watch.add(names);
      return get2(formValues, names, defaultValue);
    }
    if (Array.isArray(names)) {
      return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get2(formValues, fieldName)));
    }
    isGlobal && (_names.watchAll = true);
    return formValues;
  };
  var isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);
  function deepEqual(object1, object2, _internal_visited = /* @__PURE__ */ new WeakSet()) {
    if (isPrimitive(object1) || isPrimitive(object2)) {
      return object1 === object2;
    }
    if (isDateObject(object1) && isDateObject(object2)) {
      return object1.getTime() === object2.getTime();
    }
    const keys1 = Object.keys(object1);
    const keys2 = Object.keys(object2);
    if (keys1.length !== keys2.length) {
      return false;
    }
    if (_internal_visited.has(object1) || _internal_visited.has(object2)) {
      return true;
    }
    _internal_visited.add(object1);
    _internal_visited.add(object2);
    for (const key of keys1) {
      const val1 = object1[key];
      if (!keys2.includes(key)) {
        return false;
      }
      if (key !== "ref") {
        const val2 = object2[key];
        if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2, _internal_visited) : val1 !== val2) {
          return false;
        }
      }
    }
    return true;
  }
  var appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? {
    ...errors[name],
    types: {
      ...errors[name] && errors[name].types ? errors[name].types : {},
      [type]: message || true
    }
  } : {};
  var convertToArrayPayload = (value) => Array.isArray(value) ? value : [value];
  var createSubject = () => {
    let _observers = [];
    const next = (value) => {
      for (const observer of _observers) {
        observer.next && observer.next(value);
      }
    };
    const subscribe = (observer) => {
      _observers.push(observer);
      return {
        unsubscribe: () => {
          _observers = _observers.filter((o2) => o2 !== observer);
        }
      };
    };
    const unsubscribe = () => {
      _observers = [];
    };
    return {
      get observers() {
        return _observers;
      },
      next,
      subscribe,
      unsubscribe
    };
  };
  var isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;
  var isFileInput = (element) => element.type === "file";
  var isFunction2 = (value) => typeof value === "function";
  var isHTMLElement = (value) => {
    if (!isWeb) {
      return false;
    }
    const owner = value ? value.ownerDocument : 0;
    return value instanceof (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement);
  };
  var isMultipleSelect = (element) => element.type === `select-multiple`;
  var isRadioInput = (element) => element.type === "radio";
  var isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);
  var live = (ref) => isHTMLElement(ref) && ref.isConnected;
  function baseGet(object, updatePath) {
    const length = updatePath.slice(0, -1).length;
    let index2 = 0;
    while (index2 < length) {
      object = isUndefined(object) ? index2++ : object[updatePath[index2++]];
    }
    return object;
  }
  function isEmptyArray(obj) {
    for (const key in obj) {
      if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {
        return false;
      }
    }
    return true;
  }
  function unset(object, path) {
    const paths = Array.isArray(path) ? path : isKey(path) ? [path] : stringToPath(path);
    const childObject = paths.length === 1 ? object : baseGet(object, paths);
    const index2 = paths.length - 1;
    const key = paths[index2];
    if (childObject) {
      delete childObject[key];
    }
    if (index2 !== 0 && (isObject(childObject) && isEmptyObject(childObject) || Array.isArray(childObject) && isEmptyArray(childObject))) {
      unset(object, paths.slice(0, -1));
    }
    return object;
  }
  var objectHasFunction = (data2) => {
    for (const key in data2) {
      if (isFunction2(data2[key])) {
        return true;
      }
    }
    return false;
  };
  function markFieldsDirty(data2, fields = {}) {
    const isParentNodeArray = Array.isArray(data2);
    if (isObject(data2) || isParentNodeArray) {
      for (const key in data2) {
        if (Array.isArray(data2[key]) || isObject(data2[key]) && !objectHasFunction(data2[key])) {
          fields[key] = Array.isArray(data2[key]) ? [] : {};
          markFieldsDirty(data2[key], fields[key]);
        } else if (!isNullOrUndefined(data2[key])) {
          fields[key] = true;
        }
      }
    }
    return fields;
  }
  function getDirtyFieldsFromDefaultValues(data2, formValues, dirtyFieldsFromValues) {
    const isParentNodeArray = Array.isArray(data2);
    if (isObject(data2) || isParentNodeArray) {
      for (const key in data2) {
        if (Array.isArray(data2[key]) || isObject(data2[key]) && !objectHasFunction(data2[key])) {
          if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {
            dirtyFieldsFromValues[key] = Array.isArray(data2[key]) ? markFieldsDirty(data2[key], []) : { ...markFieldsDirty(data2[key]) };
          } else {
            getDirtyFieldsFromDefaultValues(data2[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);
          }
        } else {
          dirtyFieldsFromValues[key] = !deepEqual(data2[key], formValues[key]);
        }
      }
    }
    return dirtyFieldsFromValues;
  }
  var getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));
  var defaultResult = {
    value: false,
    isValid: false
  };
  var validResult = { value: true, isValid: true };
  var getCheckboxValue = (options) => {
    if (Array.isArray(options)) {
      if (options.length > 1) {
        const values = options.filter((option) => option && option.checked && !option.disabled).map((option) => option.value);
        return { value: values, isValid: !!values.length };
      }
      return options[0].checked && !options[0].disabled ? (
        // @ts-expect-error expected to work in the browser
        options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === "" ? validResult : { value: options[0].value, isValid: true } : validResult
      ) : defaultResult;
    }
    return defaultResult;
  };
  var getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value) ? value : valueAsNumber ? value === "" ? NaN : value ? +value : value : valueAsDate && isString(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;
  var defaultReturn = {
    isValid: false,
    value: null
  };
  var getRadioValue = (options) => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {
    isValid: true,
    value: option.value
  } : previous, defaultReturn) : defaultReturn;
  function getFieldValue(_f) {
    const ref = _f.ref;
    if (isFileInput(ref)) {
      return ref.files;
    }
    if (isRadioInput(ref)) {
      return getRadioValue(_f.refs).value;
    }
    if (isMultipleSelect(ref)) {
      return [...ref.selectedOptions].map(({ value }) => value);
    }
    if (isCheckBoxInput(ref)) {
      return getCheckboxValue(_f.refs).value;
    }
    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);
  }
  var getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {
    const fields = {};
    for (const name of fieldsNames) {
      const field = get2(_fields, name);
      field && set(fields, name, field._f);
    }
    return {
      criteriaMode,
      names: [...fieldsNames],
      fields,
      shouldUseNativeValidation
    };
  };
  var isRegex = (value) => value instanceof RegExp;
  var getRuleValue = (rule) => isUndefined(rule) ? rule : isRegex(rule) ? rule.source : isObject(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;
  var getValidationModes = (mode) => ({
    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,
    isOnBlur: mode === VALIDATION_MODE.onBlur,
    isOnChange: mode === VALIDATION_MODE.onChange,
    isOnAll: mode === VALIDATION_MODE.all,
    isOnTouch: mode === VALIDATION_MODE.onTouched
  });
  var ASYNC_FUNCTION = "AsyncFunction";
  var hasPromiseValidation = (fieldReference) => !!fieldReference && !!fieldReference.validate && !!(isFunction2(fieldReference.validate) && fieldReference.validate.constructor.name === ASYNC_FUNCTION || isObject(fieldReference.validate) && Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION));
  var hasValidation = (options) => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);
  var isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some((watchName) => name.startsWith(watchName) && /^\.\w+/.test(name.slice(watchName.length))));
  var iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {
    for (const key of fieldsNames || Object.keys(fields)) {
      const field = get2(fields, key);
      if (field) {
        const { _f, ...currentField } = field;
        if (_f) {
          if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {
            return true;
          } else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {
            return true;
          } else {
            if (iterateFieldsByAction(currentField, action)) {
              break;
            }
          }
        } else if (isObject(currentField)) {
          if (iterateFieldsByAction(currentField, action)) {
            break;
          }
        }
      }
    }
    return;
  };
  function schemaErrorLookup(errors, _fields, name) {
    const error = get2(errors, name);
    if (error || isKey(name)) {
      return {
        error,
        name
      };
    }
    const names = name.split(".");
    while (names.length) {
      const fieldName = names.join(".");
      const field = get2(_fields, fieldName);
      const foundError = get2(errors, fieldName);
      if (field && !Array.isArray(field) && name !== fieldName) {
        return { name };
      }
      if (foundError && foundError.type) {
        return {
          name: fieldName,
          error: foundError
        };
      }
      if (foundError && foundError.root && foundError.root.type) {
        return {
          name: `${fieldName}.root`,
          error: foundError.root
        };
      }
      names.pop();
    }
    return {
      name
    };
  }
  var shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {
    updateFormState(formStateData);
    const { name, ...formState } = formStateData;
    return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find((key) => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));
  };
  var shouldSubscribeByName = (name, signalName, exact) => !name || !signalName || name === signalName || convertToArrayPayload(name).some((currentName) => currentName && (exact ? currentName === signalName : currentName.startsWith(signalName) || signalName.startsWith(currentName)));
  var skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {
    if (mode.isOnAll) {
      return false;
    } else if (!isSubmitted && mode.isOnTouch) {
      return !(isTouched || isBlurEvent);
    } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {
      return !isBlurEvent;
    } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {
      return isBlurEvent;
    }
    return true;
  };
  var unsetEmptyArray = (ref, name) => !compact(get2(ref, name)).length && unset(ref, name);
  var updateFieldArrayRootError = (errors, error, name) => {
    const fieldArrayErrors = convertToArrayPayload(get2(errors, name));
    set(fieldArrayErrors, "root", error[name]);
    set(errors, name, fieldArrayErrors);
    return errors;
  };
  var isMessage = (value) => isString(value);
  function getValidateError(result, ref, type = "validate") {
    if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {
      return {
        type,
        message: isMessage(result) ? result : "",
        ref
      };
    }
  }
  var getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData) ? validationData : {
    value: validationData,
    message: ""
  };
  var validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {
    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount } = field._f;
    const inputValue = get2(formValues, name);
    if (!mount || disabledFieldNames.has(name)) {
      return {};
    }
    const inputRef = refs ? refs[0] : ref;
    const setCustomValidity = (message) => {
      if (shouldUseNativeValidation && inputRef.reportValidity) {
        inputRef.setCustomValidity(isBoolean(message) ? "" : message || "");
        inputRef.reportValidity();
      }
    };
    const error = {};
    const isRadio = isRadioInput(ref);
    const isCheckBox = isCheckBoxInput(ref);
    const isRadioOrCheckbox2 = isRadio || isCheckBox;
    const isEmpty = (valueAsNumber || isFileInput(ref)) && isUndefined(ref.value) && isUndefined(inputValue) || isHTMLElement(ref) && ref.value === "" || inputValue === "" || Array.isArray(inputValue) && !inputValue.length;
    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);
    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
      const message = exceedMax ? maxLengthMessage : minLengthMessage;
      error[name] = {
        type: exceedMax ? maxType : minType,
        message,
        ref,
        ...appendErrorsCurry(exceedMax ? maxType : minType, message)
      };
    };
    if (isFieldArray ? !Array.isArray(inputValue) || !inputValue.length : required && (!isRadioOrCheckbox2 && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {
      const { value, message } = isMessage(required) ? { value: !!required, message: required } : getValueAndMessage(required);
      if (value) {
        error[name] = {
          type: INPUT_VALIDATION_RULES.required,
          message,
          ref: inputRef,
          ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message)
        };
        if (!validateAllFieldCriteria) {
          setCustomValidity(message);
          return error;
        }
      }
    }
    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {
      let exceedMax;
      let exceedMin;
      const maxOutput = getValueAndMessage(max);
      const minOutput = getValueAndMessage(min);
      if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {
        const valueNumber = ref.valueAsNumber || (inputValue ? +inputValue : inputValue);
        if (!isNullOrUndefined(maxOutput.value)) {
          exceedMax = valueNumber > maxOutput.value;
        }
        if (!isNullOrUndefined(minOutput.value)) {
          exceedMin = valueNumber < minOutput.value;
        }
      } else {
        const valueDate = ref.valueAsDate || new Date(inputValue);
        const convertTimeToDate = (time) => /* @__PURE__ */ new Date((/* @__PURE__ */ new Date()).toDateString() + " " + time);
        const isTime = ref.type == "time";
        const isWeek = ref.type == "week";
        if (isString(maxOutput.value) && inputValue) {
          exceedMax = isTime ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value) : isWeek ? inputValue > maxOutput.value : valueDate > new Date(maxOutput.value);
        }
        if (isString(minOutput.value) && inputValue) {
          exceedMin = isTime ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value) : isWeek ? inputValue < minOutput.value : valueDate < new Date(minOutput.value);
        }
      }
      if (exceedMax || exceedMin) {
        getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
        if (!validateAllFieldCriteria) {
          setCustomValidity(error[name].message);
          return error;
        }
      }
    }
    if ((maxLength || minLength) && !isEmpty && (isString(inputValue) || isFieldArray && Array.isArray(inputValue))) {
      const maxLengthOutput = getValueAndMessage(maxLength);
      const minLengthOutput = getValueAndMessage(minLength);
      const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > +maxLengthOutput.value;
      const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < +minLengthOutput.value;
      if (exceedMax || exceedMin) {
        getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);
        if (!validateAllFieldCriteria) {
          setCustomValidity(error[name].message);
          return error;
        }
      }
    }
    if (pattern && !isEmpty && isString(inputValue)) {
      const { value: patternValue, message } = getValueAndMessage(pattern);
      if (isRegex(patternValue) && !inputValue.match(patternValue)) {
        error[name] = {
          type: INPUT_VALIDATION_RULES.pattern,
          message,
          ref,
          ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message)
        };
        if (!validateAllFieldCriteria) {
          setCustomValidity(message);
          return error;
        }
      }
    }
    if (validate) {
      if (isFunction2(validate)) {
        const result = await validate(inputValue, formValues);
        const validateError = getValidateError(result, inputRef);
        if (validateError) {
          error[name] = {
            ...validateError,
            ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message)
          };
          if (!validateAllFieldCriteria) {
            setCustomValidity(validateError.message);
            return error;
          }
        }
      } else if (isObject(validate)) {
        let validationResult = {};
        for (const key in validate) {
          if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {
            break;
          }
          const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);
          if (validateError) {
            validationResult = {
              ...validateError,
              ...appendErrorsCurry(key, validateError.message)
            };
            setCustomValidity(validateError.message);
            if (validateAllFieldCriteria) {
              error[name] = validationResult;
            }
          }
        }
        if (!isEmptyObject(validationResult)) {
          error[name] = {
            ref: inputRef,
            ...validationResult
          };
          if (!validateAllFieldCriteria) {
            return error;
          }
        }
      }
    }
    setCustomValidity(true);
    return error;
  };
  var defaultOptions = {
    mode: VALIDATION_MODE.onSubmit,
    reValidateMode: VALIDATION_MODE.onChange,
    shouldFocusError: true
  };
  function createFormControl(props = {}) {
    let _options = {
      ...defaultOptions,
      ...props
    };
    let _formState = {
      submitCount: 0,
      isDirty: false,
      isReady: false,
      isLoading: isFunction2(_options.defaultValues),
      isValidating: false,
      isSubmitted: false,
      isSubmitting: false,
      isSubmitSuccessful: false,
      isValid: false,
      touchedFields: {},
      dirtyFields: {},
      validatingFields: {},
      errors: _options.errors || {},
      disabled: _options.disabled || false
    };
    let _fields = {};
    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values) ? cloneObject(_options.defaultValues || _options.values) || {} : {};
    let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);
    let _state = {
      action: false,
      mount: false,
      watch: false
    };
    let _names = {
      mount: /* @__PURE__ */ new Set(),
      disabled: /* @__PURE__ */ new Set(),
      unMount: /* @__PURE__ */ new Set(),
      array: /* @__PURE__ */ new Set(),
      watch: /* @__PURE__ */ new Set()
    };
    let delayErrorCallback;
    let timer = 0;
    const _proxyFormState = {
      isDirty: false,
      dirtyFields: false,
      validatingFields: false,
      touchedFields: false,
      isValidating: false,
      isValid: false,
      errors: false
    };
    let _proxySubscribeFormState = {
      ..._proxyFormState
    };
    const _subjects = {
      array: createSubject(),
      state: createSubject()
    };
    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;
    const debounce = (callback) => (wait2) => {
      clearTimeout(timer);
      timer = setTimeout(callback, wait2);
    };
    const _setValid = async (shouldUpdateValid) => {
      if (!_options.disabled && (_proxyFormState.isValid || _proxySubscribeFormState.isValid || shouldUpdateValid)) {
        const isValid2 = _options.resolver ? isEmptyObject((await _runSchema()).errors) : await executeBuiltInValidation(_fields, true);
        if (isValid2 !== _formState.isValid) {
          _subjects.state.next({
            isValid: isValid2
          });
        }
      }
    };
    const _updateIsValidating = (names, isValidating) => {
      if (!_options.disabled && (_proxyFormState.isValidating || _proxyFormState.validatingFields || _proxySubscribeFormState.isValidating || _proxySubscribeFormState.validatingFields)) {
        (names || Array.from(_names.mount)).forEach((name) => {
          if (name) {
            isValidating ? set(_formState.validatingFields, name, isValidating) : unset(_formState.validatingFields, name);
          }
        });
        _subjects.state.next({
          validatingFields: _formState.validatingFields,
          isValidating: !isEmptyObject(_formState.validatingFields)
        });
      }
    };
    const _setFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {
      if (args && method && !_options.disabled) {
        _state.action = true;
        if (shouldUpdateFieldsAndState && Array.isArray(get2(_fields, name))) {
          const fieldValues = method(get2(_fields, name), args.argA, args.argB);
          shouldSetValues && set(_fields, name, fieldValues);
        }
        if (shouldUpdateFieldsAndState && Array.isArray(get2(_formState.errors, name))) {
          const errors = method(get2(_formState.errors, name), args.argA, args.argB);
          shouldSetValues && set(_formState.errors, name, errors);
          unsetEmptyArray(_formState.errors, name);
        }
        if ((_proxyFormState.touchedFields || _proxySubscribeFormState.touchedFields) && shouldUpdateFieldsAndState && Array.isArray(get2(_formState.touchedFields, name))) {
          const touchedFields = method(get2(_formState.touchedFields, name), args.argA, args.argB);
          shouldSetValues && set(_formState.touchedFields, name, touchedFields);
        }
        if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {
          _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);
        }
        _subjects.state.next({
          name,
          isDirty: _getDirty(name, values),
          dirtyFields: _formState.dirtyFields,
          errors: _formState.errors,
          isValid: _formState.isValid
        });
      } else {
        set(_formValues, name, values);
      }
    };
    const updateErrors = (name, error) => {
      set(_formState.errors, name, error);
      _subjects.state.next({
        errors: _formState.errors
      });
    };
    const _setErrors = (errors) => {
      _formState.errors = errors;
      _subjects.state.next({
        errors: _formState.errors,
        isValid: false
      });
    };
    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {
      const field = get2(_fields, name);
      if (field) {
        const defaultValue = get2(_formValues, name, isUndefined(value) ? get2(_defaultValues, name) : value);
        isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);
        _state.mount && _setValid();
      }
    };
    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {
      let shouldUpdateField = false;
      let isPreviousDirty = false;
      const output = {
        name
      };
      if (!_options.disabled) {
        if (!isBlurEvent || shouldDirty) {
          if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {
            isPreviousDirty = _formState.isDirty;
            _formState.isDirty = output.isDirty = _getDirty();
            shouldUpdateField = isPreviousDirty !== output.isDirty;
          }
          const isCurrentFieldPristine = deepEqual(get2(_defaultValues, name), fieldValue);
          isPreviousDirty = !!get2(_formState.dirtyFields, name);
          isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);
          output.dirtyFields = _formState.dirtyFields;
          shouldUpdateField = shouldUpdateField || (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) && isPreviousDirty !== !isCurrentFieldPristine;
        }
        if (isBlurEvent) {
          const isPreviousFieldTouched = get2(_formState.touchedFields, name);
          if (!isPreviousFieldTouched) {
            set(_formState.touchedFields, name, isBlurEvent);
            output.touchedFields = _formState.touchedFields;
            shouldUpdateField = shouldUpdateField || (_proxyFormState.touchedFields || _proxySubscribeFormState.touchedFields) && isPreviousFieldTouched !== isBlurEvent;
          }
        }
        shouldUpdateField && shouldRender && _subjects.state.next(output);
      }
      return shouldUpdateField ? output : {};
    };
    const shouldRenderByError = (name, isValid2, error, fieldState) => {
      const previousFieldError = get2(_formState.errors, name);
      const shouldUpdateValid = (_proxyFormState.isValid || _proxySubscribeFormState.isValid) && isBoolean(isValid2) && _formState.isValid !== isValid2;
      if (_options.delayError && error) {
        delayErrorCallback = debounce(() => updateErrors(name, error));
        delayErrorCallback(_options.delayError);
      } else {
        clearTimeout(timer);
        delayErrorCallback = null;
        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);
      }
      if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) {
        const updatedFormState = {
          ...fieldState,
          ...shouldUpdateValid && isBoolean(isValid2) ? { isValid: isValid2 } : {},
          errors: _formState.errors,
          name
        };
        _formState = {
          ..._formState,
          ...updatedFormState
        };
        _subjects.state.next(updatedFormState);
      }
    };
    const _runSchema = async (name) => {
      _updateIsValidating(name, true);
      const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));
      _updateIsValidating(name);
      return result;
    };
    const executeSchemaAndUpdateState = async (names) => {
      const { errors } = await _runSchema(names);
      if (names) {
        for (const name of names) {
          const error = get2(errors, name);
          error ? set(_formState.errors, name, error) : unset(_formState.errors, name);
        }
      } else {
        _formState.errors = errors;
      }
      return errors;
    };
    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {
      valid: true
    }) => {
      for (const name in fields) {
        const field = fields[name];
        if (field) {
          const { _f, ...fieldValue } = field;
          if (_f) {
            const isFieldArrayRoot = _names.array.has(_f.name);
            const isPromiseFunction = field._f && hasPromiseValidation(field._f);
            if (isPromiseFunction && _proxyFormState.validatingFields) {
              _updateIsValidating([name], true);
            }
            const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);
            if (isPromiseFunction && _proxyFormState.validatingFields) {
              _updateIsValidating([name]);
            }
            if (fieldError[_f.name]) {
              context.valid = false;
              if (shouldOnlyCheckValid) {
                break;
              }
            }
            !shouldOnlyCheckValid && (get2(fieldError, _f.name) ? isFieldArrayRoot ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name) : set(_formState.errors, _f.name, fieldError[_f.name]) : unset(_formState.errors, _f.name));
          }
          !isEmptyObject(fieldValue) && await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context);
        }
      }
      return context.valid;
    };
    const _removeUnmounted = () => {
      for (const name of _names.unMount) {
        const field = get2(_fields, name);
        field && (field._f.refs ? field._f.refs.every((ref) => !live(ref)) : !live(field._f.ref)) && unregister(name);
      }
      _names.unMount = /* @__PURE__ */ new Set();
    };
    const _getDirty = (name, data2) => !_options.disabled && (name && data2 && set(_formValues, name, data2), !deepEqual(getValues(), _defaultValues));
    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {
      ..._state.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? { [names]: defaultValue } : defaultValue
    }, isGlobal, defaultValue);
    const _getFieldArray = (name) => compact(get2(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get2(_defaultValues, name, []) : []));
    const setFieldValue = (name, value, options = {}) => {
      const field = get2(_fields, name);
      let fieldValue = value;
      if (field) {
        const fieldReference = field._f;
        if (fieldReference) {
          !fieldReference.disabled && set(_formValues, name, getFieldValueAs(value, fieldReference));
          fieldValue = isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? "" : value;
          if (isMultipleSelect(fieldReference.ref)) {
            [...fieldReference.ref.options].forEach((optionRef) => optionRef.selected = fieldValue.includes(optionRef.value));
          } else if (fieldReference.refs) {
            if (isCheckBoxInput(fieldReference.ref)) {
              fieldReference.refs.forEach((checkboxRef) => {
                if (!checkboxRef.defaultChecked || !checkboxRef.disabled) {
                  if (Array.isArray(fieldValue)) {
                    checkboxRef.checked = !!fieldValue.find((data2) => data2 === checkboxRef.value);
                  } else {
                    checkboxRef.checked = fieldValue === checkboxRef.value || !!fieldValue;
                  }
                }
              });
            } else {
              fieldReference.refs.forEach((radioRef) => radioRef.checked = radioRef.value === fieldValue);
            }
          } else if (isFileInput(fieldReference.ref)) {
            fieldReference.ref.value = "";
          } else {
            fieldReference.ref.value = fieldValue;
            if (!fieldReference.ref.type) {
              _subjects.state.next({
                name,
                values: cloneObject(_formValues)
              });
            }
          }
        }
      }
      (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);
      options.shouldValidate && trigger(name);
    };
    const setValues = (name, value, options) => {
      for (const fieldKey in value) {
        if (!value.hasOwnProperty(fieldKey)) {
          return;
        }
        const fieldValue = value[fieldKey];
        const fieldName = name + "." + fieldKey;
        const field = get2(_fields, fieldName);
        (_names.array.has(name) || isObject(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);
      }
    };
    const setValue = (name, value, options = {}) => {
      const field = get2(_fields, name);
      const isFieldArray = _names.array.has(name);
      const cloneValue = cloneObject(value);
      set(_formValues, name, cloneValue);
      if (isFieldArray) {
        _subjects.array.next({
          name,
          values: cloneObject(_formValues)
        });
        if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields || _proxySubscribeFormState.isDirty || _proxySubscribeFormState.dirtyFields) && options.shouldDirty) {
          _subjects.state.next({
            name,
            dirtyFields: getDirtyFields(_defaultValues, _formValues),
            isDirty: _getDirty(name, cloneValue)
          });
        }
      } else {
        field && !field._f && !isNullOrUndefined(cloneValue) ? setValues(name, cloneValue, options) : setFieldValue(name, cloneValue, options);
      }
      isWatched(name, _names) && _subjects.state.next({ ..._formState, name });
      _subjects.state.next({
        name: _state.mount ? name : void 0,
        values: cloneObject(_formValues)
      });
    };
    const onChange = async (event) => {
      _state.mount = true;
      const target = event.target;
      let name = target.name;
      let isFieldValueUpdated = true;
      const field = get2(_fields, name);
      const _updateIsFieldValueUpdated = (fieldValue) => {
        isFieldValueUpdated = Number.isNaN(fieldValue) || isDateObject(fieldValue) && isNaN(fieldValue.getTime()) || deepEqual(fieldValue, get2(_formValues, name, fieldValue));
      };
      const validationModeBeforeSubmit = getValidationModes(_options.mode);
      const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);
      if (field) {
        let error;
        let isValid2;
        const fieldValue = target.type ? getFieldValue(field._f) : getEventValue(event);
        const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;
        const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get2(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get2(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);
        const watched = isWatched(name, _names, isBlurEvent);
        set(_formValues, name, fieldValue);
        if (isBlurEvent) {
          if (!target || !target.readOnly) {
            field._f.onBlur && field._f.onBlur(event);
            delayErrorCallback && delayErrorCallback(0);
          }
        } else if (field._f.onChange) {
          field._f.onChange(event);
        }
        const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent);
        const shouldRender = !isEmptyObject(fieldState) || watched;
        !isBlurEvent && _subjects.state.next({
          name,
          type: event.type,
          values: cloneObject(_formValues)
        });
        if (shouldSkipValidation) {
          if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {
            if (_options.mode === "onBlur") {
              if (isBlurEvent) {
                _setValid();
              }
            } else if (!isBlurEvent) {
              _setValid();
            }
          }
          return shouldRender && _subjects.state.next({ name, ...watched ? {} : fieldState });
        }
        !isBlurEvent && watched && _subjects.state.next({ ..._formState });
        if (_options.resolver) {
          const { errors } = await _runSchema([name]);
          _updateIsFieldValueUpdated(fieldValue);
          if (isFieldValueUpdated) {
            const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);
            const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);
            error = errorLookupResult.error;
            name = errorLookupResult.name;
            isValid2 = isEmptyObject(errors);
          }
        } else {
          _updateIsValidating([name], true);
          error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];
          _updateIsValidating([name]);
          _updateIsFieldValueUpdated(fieldValue);
          if (isFieldValueUpdated) {
            if (error) {
              isValid2 = false;
            } else if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {
              isValid2 = await executeBuiltInValidation(_fields, true);
            }
          }
        }
        if (isFieldValueUpdated) {
          field._f.deps && trigger(field._f.deps);
          shouldRenderByError(name, isValid2, error, fieldState);
        }
      }
    };
    const _focusInput = (ref, key) => {
      if (get2(_formState.errors, key) && ref.focus) {
        ref.focus();
        return 1;
      }
      return;
    };
    const trigger = async (name, options = {}) => {
      let isValid2;
      let validationResult;
      const fieldNames = convertToArrayPayload(name);
      if (_options.resolver) {
        const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);
        isValid2 = isEmptyObject(errors);
        validationResult = name ? !fieldNames.some((name2) => get2(errors, name2)) : isValid2;
      } else if (name) {
        validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {
          const field = get2(_fields, fieldName);
          return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);
        }))).every(Boolean);
        !(!validationResult && !_formState.isValid) && _setValid();
      } else {
        validationResult = isValid2 = await executeBuiltInValidation(_fields);
      }
      _subjects.state.next({
        ...!isString(name) || (_proxyFormState.isValid || _proxySubscribeFormState.isValid) && isValid2 !== _formState.isValid ? {} : { name },
        ..._options.resolver || !name ? { isValid: isValid2 } : {},
        errors: _formState.errors
      });
      options.shouldFocus && !validationResult && iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);
      return validationResult;
    };
    const getValues = (fieldNames) => {
      const values = {
        ..._state.mount ? _formValues : _defaultValues
      };
      return isUndefined(fieldNames) ? values : isString(fieldNames) ? get2(values, fieldNames) : fieldNames.map((name) => get2(values, name));
    };
    const getFieldState = (name, formState) => ({
      invalid: !!get2((formState || _formState).errors, name),
      isDirty: !!get2((formState || _formState).dirtyFields, name),
      error: get2((formState || _formState).errors, name),
      isValidating: !!get2(_formState.validatingFields, name),
      isTouched: !!get2((formState || _formState).touchedFields, name)
    });
    const clearErrors = (name) => {
      name && convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));
      _subjects.state.next({
        errors: name ? _formState.errors : {}
      });
    };
    const setError = (name, error, options) => {
      const ref = (get2(_fields, name, { _f: {} })._f || {}).ref;
      const currentError = get2(_formState.errors, name) || {};
      const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;
      set(_formState.errors, name, {
        ...restOfErrorTree,
        ...error,
        ref
      });
      _subjects.state.next({
        name,
        errors: _formState.errors,
        isValid: false
      });
      options && options.shouldFocus && ref && ref.focus && ref.focus();
    };
    const watch = (name, defaultValue) => isFunction2(name) ? _subjects.state.subscribe({
      next: (payload) => "values" in payload && name(_getWatch(void 0, defaultValue), payload)
    }) : _getWatch(name, defaultValue, true);
    const _subscribe = (props2) => _subjects.state.subscribe({
      next: (formState) => {
        if (shouldSubscribeByName(props2.name, formState.name, props2.exact) && shouldRenderFormState(formState, props2.formState || _proxyFormState, _setFormState, props2.reRenderRoot)) {
          props2.callback({
            values: { ..._formValues },
            ..._formState,
            ...formState,
            defaultValues: _defaultValues
          });
        }
      }
    }).unsubscribe;
    const subscribe = (props2) => {
      _state.mount = true;
      _proxySubscribeFormState = {
        ..._proxySubscribeFormState,
        ...props2.formState
      };
      return _subscribe({
        ...props2,
        formState: _proxySubscribeFormState
      });
    };
    const unregister = (name, options = {}) => {
      for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {
        _names.mount.delete(fieldName);
        _names.array.delete(fieldName);
        if (!options.keepValue) {
          unset(_fields, fieldName);
          unset(_formValues, fieldName);
        }
        !options.keepError && unset(_formState.errors, fieldName);
        !options.keepDirty && unset(_formState.dirtyFields, fieldName);
        !options.keepTouched && unset(_formState.touchedFields, fieldName);
        !options.keepIsValidating && unset(_formState.validatingFields, fieldName);
        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);
      }
      _subjects.state.next({
        values: cloneObject(_formValues)
      });
      _subjects.state.next({
        ..._formState,
        ...!options.keepDirty ? {} : { isDirty: _getDirty() }
      });
      !options.keepIsValid && _setValid();
    };
    const _setDisabledField = ({ disabled, name }) => {
      if (isBoolean(disabled) && _state.mount || !!disabled || _names.disabled.has(name)) {
        disabled ? _names.disabled.add(name) : _names.disabled.delete(name);
      }
    };
    const register = (name, options = {}) => {
      let field = get2(_fields, name);
      const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);
      set(_fields, name, {
        ...field || {},
        _f: {
          ...field && field._f ? field._f : { ref: { name } },
          name,
          mount: true,
          ...options
        }
      });
      _names.mount.add(name);
      if (field) {
        _setDisabledField({
          disabled: isBoolean(options.disabled) ? options.disabled : _options.disabled,
          name
        });
      } else {
        updateValidAndValue(name, true, options.value);
      }
      return {
        ...disabledIsDefined ? { disabled: options.disabled || _options.disabled } : {},
        ..._options.progressive ? {
          required: !!options.required,
          min: getRuleValue(options.min),
          max: getRuleValue(options.max),
          minLength: getRuleValue(options.minLength),
          maxLength: getRuleValue(options.maxLength),
          pattern: getRuleValue(options.pattern)
        } : {},
        name,
        onChange,
        onBlur: onChange,
        ref: (ref) => {
          if (ref) {
            register(name, options);
            field = get2(_fields, name);
            const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll("input,select,textarea")[0] || ref : ref : ref;
            const radioOrCheckbox = isRadioOrCheckbox(fieldRef);
            const refs = field._f.refs || [];
            if (radioOrCheckbox ? refs.find((option) => option === fieldRef) : fieldRef === field._f.ref) {
              return;
            }
            set(_fields, name, {
              _f: {
                ...field._f,
                ...radioOrCheckbox ? {
                  refs: [
                    ...refs.filter(live),
                    fieldRef,
                    ...Array.isArray(get2(_defaultValues, name)) ? [{}] : []
                  ],
                  ref: { type: fieldRef.type, name }
                } : { ref: fieldRef }
              }
            });
            updateValidAndValue(name, false, void 0, fieldRef);
          } else {
            field = get2(_fields, name, {});
            if (field._f) {
              field._f.mount = false;
            }
            (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _state.action) && _names.unMount.add(name);
          }
        }
      };
    };
    const _focusError = () => _options.shouldFocusError && iterateFieldsByAction(_fields, _focusInput, _names.mount);
    const _disableForm = (disabled) => {
      if (isBoolean(disabled)) {
        _subjects.state.next({ disabled });
        iterateFieldsByAction(_fields, (ref, name) => {
          const currentField = get2(_fields, name);
          if (currentField) {
            ref.disabled = currentField._f.disabled || disabled;
            if (Array.isArray(currentField._f.refs)) {
              currentField._f.refs.forEach((inputRef) => {
                inputRef.disabled = currentField._f.disabled || disabled;
              });
            }
          }
        }, 0, false);
      }
    };
    const handleSubmit = (onValid, onInvalid) => async (e) => {
      let onValidError = void 0;
      if (e) {
        e.preventDefault && e.preventDefault();
        e.persist && e.persist();
      }
      let fieldValues = cloneObject(_formValues);
      _subjects.state.next({
        isSubmitting: true
      });
      if (_options.resolver) {
        const { errors, values } = await _runSchema();
        _formState.errors = errors;
        fieldValues = cloneObject(values);
      } else {
        await executeBuiltInValidation(_fields);
      }
      if (_names.disabled.size) {
        for (const name of _names.disabled) {
          unset(fieldValues, name);
        }
      }
      unset(_formState.errors, "root");
      if (isEmptyObject(_formState.errors)) {
        _subjects.state.next({
          errors: {}
        });
        try {
          await onValid(fieldValues, e);
        } catch (error) {
          onValidError = error;
        }
      } else {
        if (onInvalid) {
          await onInvalid({ ..._formState.errors }, e);
        }
        _focusError();
        setTimeout(_focusError);
      }
      _subjects.state.next({
        isSubmitted: true,
        isSubmitting: false,
        isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,
        submitCount: _formState.submitCount + 1,
        errors: _formState.errors
      });
      if (onValidError) {
        throw onValidError;
      }
    };
    const resetField = (name, options = {}) => {
      if (get2(_fields, name)) {
        if (isUndefined(options.defaultValue)) {
          setValue(name, cloneObject(get2(_defaultValues, name)));
        } else {
          setValue(name, options.defaultValue);
          set(_defaultValues, name, cloneObject(options.defaultValue));
        }
        if (!options.keepTouched) {
          unset(_formState.touchedFields, name);
        }
        if (!options.keepDirty) {
          unset(_formState.dirtyFields, name);
          _formState.isDirty = options.defaultValue ? _getDirty(name, cloneObject(get2(_defaultValues, name))) : _getDirty();
        }
        if (!options.keepError) {
          unset(_formState.errors, name);
          _proxyFormState.isValid && _setValid();
        }
        _subjects.state.next({ ..._formState });
      }
    };
    const _reset = (formValues, keepStateOptions = {}) => {
      const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;
      const cloneUpdatedValues = cloneObject(updatedValues);
      const isEmptyResetValues = isEmptyObject(formValues);
      const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;
      if (!keepStateOptions.keepDefaultValues) {
        _defaultValues = updatedValues;
      }
      if (!keepStateOptions.keepValues) {
        if (keepStateOptions.keepDirtyValues) {
          const fieldsToCheck = /* @__PURE__ */ new Set([
            ..._names.mount,
            ...Object.keys(getDirtyFields(_defaultValues, _formValues))
          ]);
          for (const fieldName of Array.from(fieldsToCheck)) {
            get2(_formState.dirtyFields, fieldName) ? set(values, fieldName, get2(_formValues, fieldName)) : setValue(fieldName, get2(values, fieldName));
          }
        } else {
          if (isWeb && isUndefined(formValues)) {
            for (const name of _names.mount) {
              const field = get2(_fields, name);
              if (field && field._f) {
                const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;
                if (isHTMLElement(fieldReference)) {
                  const form = fieldReference.closest("form");
                  if (form) {
                    form.reset();
                    break;
                  }
                }
              }
            }
          }
          if (keepStateOptions.keepFieldsRef) {
            for (const fieldName of _names.mount) {
              setValue(fieldName, get2(values, fieldName));
            }
          } else {
            _fields = {};
          }
        }
        _formValues = _options.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneObject(values);
        _subjects.array.next({
          values: { ...values }
        });
        _subjects.state.next({
          values: { ...values }
        });
      }
      _names = {
        mount: keepStateOptions.keepDirtyValues ? _names.mount : /* @__PURE__ */ new Set(),
        unMount: /* @__PURE__ */ new Set(),
        array: /* @__PURE__ */ new Set(),
        disabled: /* @__PURE__ */ new Set(),
        watch: /* @__PURE__ */ new Set(),
        watchAll: false,
        focus: ""
      };
      _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid || !!keepStateOptions.keepDirtyValues;
      _state.watch = !!_options.shouldUnregister;
      _subjects.state.next({
        submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,
        isDirty: isEmptyResetValues ? false : keepStateOptions.keepDirty ? _formState.isDirty : !!(keepStateOptions.keepDefaultValues && !deepEqual(formValues, _defaultValues)),
        isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,
        dirtyFields: isEmptyResetValues ? {} : keepStateOptions.keepDirtyValues ? keepStateOptions.keepDefaultValues && _formValues ? getDirtyFields(_defaultValues, _formValues) : _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? getDirtyFields(_defaultValues, formValues) : keepStateOptions.keepDirty ? _formState.dirtyFields : {},
        touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},
        errors: keepStateOptions.keepErrors ? _formState.errors : {},
        isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful ? _formState.isSubmitSuccessful : false,
        isSubmitting: false,
        defaultValues: _defaultValues
      });
    };
    const reset = (formValues, keepStateOptions) => _reset(isFunction2(formValues) ? formValues(_formValues) : formValues, keepStateOptions);
    const setFocus = (name, options = {}) => {
      const field = get2(_fields, name);
      const fieldReference = field && field._f;
      if (fieldReference) {
        const fieldRef = fieldReference.refs ? fieldReference.refs[0] : fieldReference.ref;
        if (fieldRef.focus) {
          fieldRef.focus();
          options.shouldSelect && isFunction2(fieldRef.select) && fieldRef.select();
        }
      }
    };
    const _setFormState = (updatedFormState) => {
      _formState = {
        ..._formState,
        ...updatedFormState
      };
    };
    const _resetDefaultValues = () => isFunction2(_options.defaultValues) && _options.defaultValues().then((values) => {
      reset(values, _options.resetOptions);
      _subjects.state.next({
        isLoading: false
      });
    });
    const methods = {
      control: {
        register,
        unregister,
        getFieldState,
        handleSubmit,
        setError,
        _subscribe,
        _runSchema,
        _focusError,
        _getWatch,
        _getDirty,
        _setValid,
        _setFieldArray,
        _setDisabledField,
        _setErrors,
        _getFieldArray,
        _reset,
        _resetDefaultValues,
        _removeUnmounted,
        _disableForm,
        _subjects,
        _proxyFormState,
        get _fields() {
          return _fields;
        },
        get _formValues() {
          return _formValues;
        },
        get _state() {
          return _state;
        },
        set _state(value) {
          _state = value;
        },
        get _defaultValues() {
          return _defaultValues;
        },
        get _names() {
          return _names;
        },
        set _names(value) {
          _names = value;
        },
        get _formState() {
          return _formState;
        },
        get _options() {
          return _options;
        },
        set _options(value) {
          _options = {
            ..._options,
            ...value
          };
        }
      },
      subscribe,
      trigger,
      register,
      handleSubmit,
      watch,
      setValue,
      getValues,
      reset,
      resetField,
      clearErrors,
      unregister,
      setError,
      setFocus,
      getFieldState
    };
    return {
      ...methods,
      formControl: methods
    };
  }
  function useForm(props = {}) {
    const _formControl = import_react14.default.useRef(void 0);
    const _values = import_react14.default.useRef(void 0);
    const [formState, updateFormState] = import_react14.default.useState({
      isDirty: false,
      isValidating: false,
      isLoading: isFunction2(props.defaultValues),
      isSubmitted: false,
      isSubmitting: false,
      isSubmitSuccessful: false,
      isValid: false,
      submitCount: 0,
      dirtyFields: {},
      touchedFields: {},
      validatingFields: {},
      errors: props.errors || {},
      disabled: props.disabled || false,
      isReady: false,
      defaultValues: isFunction2(props.defaultValues) ? void 0 : props.defaultValues
    });
    if (!_formControl.current) {
      if (props.formControl) {
        _formControl.current = {
          ...props.formControl,
          formState
        };
        if (props.defaultValues && !isFunction2(props.defaultValues)) {
          props.formControl.reset(props.defaultValues, props.resetOptions);
        }
      } else {
        const { formControl, ...rest } = createFormControl(props);
        _formControl.current = {
          ...rest,
          formState
        };
      }
    }
    const control = _formControl.current.control;
    control._options = props;
    useIsomorphicLayoutEffect2(() => {
      const sub = control._subscribe({
        formState: control._proxyFormState,
        callback: () => updateFormState({ ...control._formState }),
        reRenderRoot: true
      });
      updateFormState((data2) => ({
        ...data2,
        isReady: true
      }));
      control._formState.isReady = true;
      return sub;
    }, [control]);
    import_react14.default.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);
    import_react14.default.useEffect(() => {
      if (props.mode) {
        control._options.mode = props.mode;
      }
      if (props.reValidateMode) {
        control._options.reValidateMode = props.reValidateMode;
      }
    }, [control, props.mode, props.reValidateMode]);
    import_react14.default.useEffect(() => {
      if (props.errors) {
        control._setErrors(props.errors);
        control._focusError();
      }
    }, [control, props.errors]);
    import_react14.default.useEffect(() => {
      props.shouldUnregister && control._subjects.state.next({
        values: control._getWatch()
      });
    }, [control, props.shouldUnregister]);
    import_react14.default.useEffect(() => {
      if (control._proxyFormState.isDirty) {
        const isDirty2 = control._getDirty();
        if (isDirty2 !== formState.isDirty) {
          control._subjects.state.next({
            isDirty: isDirty2
          });
        }
      }
    }, [control, formState.isDirty]);
    import_react14.default.useEffect(() => {
      if (props.values && !deepEqual(props.values, _values.current)) {
        control._reset(props.values, {
          keepFieldsRef: true,
          ...control._options.resetOptions
        });
        _values.current = props.values;
        updateFormState((state) => ({ ...state }));
      } else {
        control._resetDefaultValues();
      }
    }, [control, props.values]);
    import_react14.default.useEffect(() => {
      if (!control._state.mount) {
        control._setValid();
        control._state.mount = true;
      }
      if (control._state.watch) {
        control._state.watch = false;
        control._subjects.state.next({ ...control._formState });
      }
      control._removeUnmounted();
    });
    _formControl.current.formState = getProxyFormState(formState, control);
    return _formControl.current;
  }

  // node_modules/zod/v3/external.js
  var external_exports = {};
  __export(external_exports, {
    BRAND: () => BRAND,
    DIRTY: () => DIRTY,
    EMPTY_PATH: () => EMPTY_PATH,
    INVALID: () => INVALID,
    NEVER: () => NEVER,
    OK: () => OK,
    ParseStatus: () => ParseStatus,
    Schema: () => ZodType,
    ZodAny: () => ZodAny,
    ZodArray: () => ZodArray,
    ZodBigInt: () => ZodBigInt,
    ZodBoolean: () => ZodBoolean,
    ZodBranded: () => ZodBranded,
    ZodCatch: () => ZodCatch,
    ZodDate: () => ZodDate,
    ZodDefault: () => ZodDefault,
    ZodDiscriminatedUnion: () => ZodDiscriminatedUnion,
    ZodEffects: () => ZodEffects,
    ZodEnum: () => ZodEnum,
    ZodError: () => ZodError,
    ZodFirstPartyTypeKind: () => ZodFirstPartyTypeKind,
    ZodFunction: () => ZodFunction,
    ZodIntersection: () => ZodIntersection,
    ZodIssueCode: () => ZodIssueCode,
    ZodLazy: () => ZodLazy,
    ZodLiteral: () => ZodLiteral,
    ZodMap: () => ZodMap,
    ZodNaN: () => ZodNaN,
    ZodNativeEnum: () => ZodNativeEnum,
    ZodNever: () => ZodNever,
    ZodNull: () => ZodNull,
    ZodNullable: () => ZodNullable,
    ZodNumber: () => ZodNumber,
    ZodObject: () => ZodObject,
    ZodOptional: () => ZodOptional,
    ZodParsedType: () => ZodParsedType,
    ZodPipeline: () => ZodPipeline,
    ZodPromise: () => ZodPromise,
    ZodReadonly: () => ZodReadonly,
    ZodRecord: () => ZodRecord,
    ZodSchema: () => ZodType,
    ZodSet: () => ZodSet,
    ZodString: () => ZodString,
    ZodSymbol: () => ZodSymbol,
    ZodTransformer: () => ZodEffects,
    ZodTuple: () => ZodTuple,
    ZodType: () => ZodType,
    ZodUndefined: () => ZodUndefined,
    ZodUnion: () => ZodUnion,
    ZodUnknown: () => ZodUnknown,
    ZodVoid: () => ZodVoid,
    addIssueToContext: () => addIssueToContext,
    any: () => anyType,
    array: () => arrayType,
    bigint: () => bigIntType,
    boolean: () => booleanType,
    coerce: () => coerce,
    custom: () => custom,
    date: () => dateType,
    datetimeRegex: () => datetimeRegex,
    defaultErrorMap: () => en_default,
    discriminatedUnion: () => discriminatedUnionType,
    effect: () => effectsType,
    enum: () => enumType,
    function: () => functionType,
    getErrorMap: () => getErrorMap,
    getParsedType: () => getParsedType,
    instanceof: () => instanceOfType,
    intersection: () => intersectionType,
    isAborted: () => isAborted,
    isAsync: () => isAsync,
    isDirty: () => isDirty,
    isValid: () => isValid,
    late: () => late,
    lazy: () => lazyType,
    literal: () => literalType,
    makeIssue: () => makeIssue,
    map: () => mapType,
    nan: () => nanType,
    nativeEnum: () => nativeEnumType,
    never: () => neverType,
    null: () => nullType,
    nullable: () => nullableType,
    number: () => numberType,
    object: () => objectType,
    objectUtil: () => objectUtil,
    oboolean: () => oboolean,
    onumber: () => onumber,
    optional: () => optionalType,
    ostring: () => ostring,
    pipeline: () => pipelineType,
    preprocess: () => preprocessType,
    promise: () => promiseType,
    quotelessJson: () => quotelessJson,
    record: () => recordType,
    set: () => setType,
    setErrorMap: () => setErrorMap,
    strictObject: () => strictObjectType,
    string: () => stringType,
    symbol: () => symbolType,
    transformer: () => effectsType,
    tuple: () => tupleType,
    undefined: () => undefinedType,
    union: () => unionType,
    unknown: () => unknownType,
    util: () => util,
    void: () => voidType
  });

  // node_modules/zod/v3/helpers/util.js
  var util;
  (function(util2) {
    util2.assertEqual = (_) => {
    };
    function assertIs(_arg) {
    }
    util2.assertIs = assertIs;
    function assertNever(_x) {
      throw new Error();
    }
    util2.assertNever = assertNever;
    util2.arrayToEnum = (items) => {
      const obj = {};
      for (const item of items) {
        obj[item] = item;
      }
      return obj;
    };
    util2.getValidEnumValues = (obj) => {
      const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
      const filtered = {};
      for (const k of validKeys) {
        filtered[k] = obj[k];
      }
      return util2.objectValues(filtered);
    };
    util2.objectValues = (obj) => {
      return util2.objectKeys(obj).map(function(e) {
        return obj[e];
      });
    };
    util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
      const keys = [];
      for (const key in object) {
        if (Object.prototype.hasOwnProperty.call(object, key)) {
          keys.push(key);
        }
      }
      return keys;
    };
    util2.find = (arr, checker) => {
      for (const item of arr) {
        if (checker(item))
          return item;
      }
      return void 0;
    };
    util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && Number.isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
      return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
    }
    util2.joinValues = joinValues;
    util2.jsonStringifyReplacer = (_, value) => {
      if (typeof value === "bigint") {
        return value.toString();
      }
      return value;
    };
  })(util || (util = {}));
  var objectUtil;
  (function(objectUtil2) {
    objectUtil2.mergeShapes = (first, second) => {
      return {
        ...first,
        ...second
        // second overwrites first
      };
    };
  })(objectUtil || (objectUtil = {}));
  var ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
  ]);
  var getParsedType = (data2) => {
    const t2 = typeof data2;
    switch (t2) {
      case "undefined":
        return ZodParsedType.undefined;
      case "string":
        return ZodParsedType.string;
      case "number":
        return Number.isNaN(data2) ? ZodParsedType.nan : ZodParsedType.number;
      case "boolean":
        return ZodParsedType.boolean;
      case "function":
        return ZodParsedType.function;
      case "bigint":
        return ZodParsedType.bigint;
      case "symbol":
        return ZodParsedType.symbol;
      case "object":
        if (Array.isArray(data2)) {
          return ZodParsedType.array;
        }
        if (data2 === null) {
          return ZodParsedType.null;
        }
        if (data2.then && typeof data2.then === "function" && data2.catch && typeof data2.catch === "function") {
          return ZodParsedType.promise;
        }
        if (typeof Map !== "undefined" && data2 instanceof Map) {
          return ZodParsedType.map;
        }
        if (typeof Set !== "undefined" && data2 instanceof Set) {
          return ZodParsedType.set;
        }
        if (typeof Date !== "undefined" && data2 instanceof Date) {
          return ZodParsedType.date;
        }
        return ZodParsedType.object;
      default:
        return ZodParsedType.unknown;
    }
  };

  // node_modules/zod/v3/ZodError.js
  var ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite"
  ]);
  var quotelessJson = (obj) => {
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
  };
  var ZodError = class _ZodError extends Error {
    get errors() {
      return this.issues;
    }
    constructor(issues) {
      super();
      this.issues = [];
      this.addIssue = (sub) => {
        this.issues = [...this.issues, sub];
      };
      this.addIssues = (subs = []) => {
        this.issues = [...this.issues, ...subs];
      };
      const actualProto = new.target.prototype;
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(this, actualProto);
      } else {
        this.__proto__ = actualProto;
      }
      this.name = "ZodError";
      this.issues = issues;
    }
    format(_mapper) {
      const mapper = _mapper || function(issue) {
        return issue.message;
      };
      const fieldErrors = { _errors: [] };
      const processError = (error) => {
        for (const issue of error.issues) {
          if (issue.code === "invalid_union") {
            issue.unionErrors.map(processError);
          } else if (issue.code === "invalid_return_type") {
            processError(issue.returnTypeError);
          } else if (issue.code === "invalid_arguments") {
            processError(issue.argumentsError);
          } else if (issue.path.length === 0) {
            fieldErrors._errors.push(mapper(issue));
          } else {
            let curr = fieldErrors;
            let i3 = 0;
            while (i3 < issue.path.length) {
              const el = issue.path[i3];
              const terminal = i3 === issue.path.length - 1;
              if (!terminal) {
                curr[el] = curr[el] || { _errors: [] };
              } else {
                curr[el] = curr[el] || { _errors: [] };
                curr[el]._errors.push(mapper(issue));
              }
              curr = curr[el];
              i3++;
            }
          }
        }
      };
      processError(this);
      return fieldErrors;
    }
    static assert(value) {
      if (!(value instanceof _ZodError)) {
        throw new Error(`Not a ZodError: ${value}`);
      }
    }
    toString() {
      return this.message;
    }
    get message() {
      return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
      return this.issues.length === 0;
    }
    flatten(mapper = (issue) => issue.message) {
      const fieldErrors = {};
      const formErrors = [];
      for (const sub of this.issues) {
        if (sub.path.length > 0) {
          const firstEl = sub.path[0];
          fieldErrors[firstEl] = fieldErrors[firstEl] || [];
          fieldErrors[firstEl].push(mapper(sub));
        } else {
          formErrors.push(mapper(sub));
        }
      }
      return { formErrors, fieldErrors };
    }
    get formErrors() {
      return this.flatten();
    }
  };
  ZodError.create = (issues) => {
    const error = new ZodError(issues);
    return error;
  };

  // node_modules/zod/v3/locales/en.js
  var errorMap = (issue, _ctx) => {
    let message;
    switch (issue.code) {
      case ZodIssueCode.invalid_type:
        if (issue.received === ZodParsedType.undefined) {
          message = "Required";
        } else {
          message = `Expected ${issue.expected}, received ${issue.received}`;
        }
        break;
      case ZodIssueCode.invalid_literal:
        message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
        break;
      case ZodIssueCode.unrecognized_keys:
        message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
        break;
      case ZodIssueCode.invalid_union:
        message = `Invalid input`;
        break;
      case ZodIssueCode.invalid_union_discriminator:
        message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
        break;
      case ZodIssueCode.invalid_enum_value:
        message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
        break;
      case ZodIssueCode.invalid_arguments:
        message = `Invalid function arguments`;
        break;
      case ZodIssueCode.invalid_return_type:
        message = `Invalid function return type`;
        break;
      case ZodIssueCode.invalid_date:
        message = `Invalid date`;
        break;
      case ZodIssueCode.invalid_string:
        if (typeof issue.validation === "object") {
          if ("includes" in issue.validation) {
            message = `Invalid input: must include "${issue.validation.includes}"`;
            if (typeof issue.validation.position === "number") {
              message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
            }
          } else if ("startsWith" in issue.validation) {
            message = `Invalid input: must start with "${issue.validation.startsWith}"`;
          } else if ("endsWith" in issue.validation) {
            message = `Invalid input: must end with "${issue.validation.endsWith}"`;
          } else {
            util.assertNever(issue.validation);
          }
        } else if (issue.validation !== "regex") {
          message = `Invalid ${issue.validation}`;
        } else {
          message = "Invalid";
        }
        break;
      case ZodIssueCode.too_small:
        if (issue.type === "array")
          message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
        else if (issue.type === "string")
          message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
        else if (issue.type === "number")
          message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
        else if (issue.type === "bigint")
          message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
        else if (issue.type === "date")
          message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
        else
          message = "Invalid input";
        break;
      case ZodIssueCode.too_big:
        if (issue.type === "array")
          message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
        else if (issue.type === "string")
          message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
        else if (issue.type === "number")
          message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
        else if (issue.type === "bigint")
          message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
        else if (issue.type === "date")
          message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
        else
          message = "Invalid input";
        break;
      case ZodIssueCode.custom:
        message = `Invalid input`;
        break;
      case ZodIssueCode.invalid_intersection_types:
        message = `Intersection results could not be merged`;
        break;
      case ZodIssueCode.not_multiple_of:
        message = `Number must be a multiple of ${issue.multipleOf}`;
        break;
      case ZodIssueCode.not_finite:
        message = "Number must be finite";
        break;
      default:
        message = _ctx.defaultError;
        util.assertNever(issue);
    }
    return { message };
  };
  var en_default = errorMap;

  // node_modules/zod/v3/errors.js
  var overrideErrorMap = en_default;
  function setErrorMap(map) {
    overrideErrorMap = map;
  }
  function getErrorMap() {
    return overrideErrorMap;
  }

  // node_modules/zod/v3/helpers/parseUtil.js
  var makeIssue = (params) => {
    const { data: data2, path, errorMaps, issueData } = params;
    const fullPath = [...path, ...issueData.path || []];
    const fullIssue = {
      ...issueData,
      path: fullPath
    };
    if (issueData.message !== void 0) {
      return {
        ...issueData,
        path: fullPath,
        message: issueData.message
      };
    }
    let errorMessage = "";
    const maps = errorMaps.filter((m) => !!m).slice().reverse();
    for (const map of maps) {
      errorMessage = map(fullIssue, { data: data2, defaultError: errorMessage }).message;
    }
    return {
      ...issueData,
      path: fullPath,
      message: errorMessage
    };
  };
  var EMPTY_PATH = [];
  function addIssueToContext(ctx, issueData) {
    const overrideMap = getErrorMap();
    const issue = makeIssue({
      issueData,
      data: ctx.data,
      path: ctx.path,
      errorMaps: [
        ctx.common.contextualErrorMap,
        // contextual error map is first priority
        ctx.schemaErrorMap,
        // then schema-bound map if available
        overrideMap,
        // then global override map
        overrideMap === en_default ? void 0 : en_default
        // then global default map
      ].filter((x) => !!x)
    });
    ctx.common.issues.push(issue);
  }
  var ParseStatus = class _ParseStatus {
    constructor() {
      this.value = "valid";
    }
    dirty() {
      if (this.value === "valid")
        this.value = "dirty";
    }
    abort() {
      if (this.value !== "aborted")
        this.value = "aborted";
    }
    static mergeArray(status, results) {
      const arrayValue = [];
      for (const s3 of results) {
        if (s3.status === "aborted")
          return INVALID;
        if (s3.status === "dirty")
          status.dirty();
        arrayValue.push(s3.value);
      }
      return { status: status.value, value: arrayValue };
    }
    static async mergeObjectAsync(status, pairs) {
      const syncPairs = [];
      for (const pair of pairs) {
        const key = await pair.key;
        const value = await pair.value;
        syncPairs.push({
          key,
          value
        });
      }
      return _ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
      const finalObject = {};
      for (const pair of pairs) {
        const { key, value } = pair;
        if (key.status === "aborted")
          return INVALID;
        if (value.status === "aborted")
          return INVALID;
        if (key.status === "dirty")
          status.dirty();
        if (value.status === "dirty")
          status.dirty();
        if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
          finalObject[key.value] = value.value;
        }
      }
      return { status: status.value, value: finalObject };
    }
  };
  var INVALID = Object.freeze({
    status: "aborted"
  });
  var DIRTY = (value) => ({ status: "dirty", value });
  var OK = (value) => ({ status: "valid", value });
  var isAborted = (x) => x.status === "aborted";
  var isDirty = (x) => x.status === "dirty";
  var isValid = (x) => x.status === "valid";
  var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;

  // node_modules/zod/v3/helpers/errorUtil.js
  var errorUtil;
  (function(errorUtil2) {
    errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
    errorUtil2.toString = (message) => typeof message === "string" ? message : message?.message;
  })(errorUtil || (errorUtil = {}));

  // node_modules/zod/v3/types.js
  var ParseInputLazyPath = class {
    constructor(parent, value, path, key) {
      this._cachedPath = [];
      this.parent = parent;
      this.data = value;
      this._path = path;
      this._key = key;
    }
    get path() {
      if (!this._cachedPath.length) {
        if (Array.isArray(this._key)) {
          this._cachedPath.push(...this._path, ...this._key);
        } else {
          this._cachedPath.push(...this._path, this._key);
        }
      }
      return this._cachedPath;
    }
  };
  var handleResult = (ctx, result) => {
    if (isValid(result)) {
      return { success: true, data: result.value };
    } else {
      if (!ctx.common.issues.length) {
        throw new Error("Validation failed but no issues detected.");
      }
      return {
        success: false,
        get error() {
          if (this._error)
            return this._error;
          const error = new ZodError(ctx.common.issues);
          this._error = error;
          return this._error;
        }
      };
    }
  };
  function processCreateParams(params) {
    if (!params)
      return {};
    const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
    if (errorMap2 && (invalid_type_error || required_error)) {
      throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap2)
      return { errorMap: errorMap2, description };
    const customMap = (iss, ctx) => {
      const { message } = params;
      if (iss.code === "invalid_enum_value") {
        return { message: message ?? ctx.defaultError };
      }
      if (typeof ctx.data === "undefined") {
        return { message: message ?? required_error ?? ctx.defaultError };
      }
      if (iss.code !== "invalid_type")
        return { message: ctx.defaultError };
      return { message: message ?? invalid_type_error ?? ctx.defaultError };
    };
    return { errorMap: customMap, description };
  }
  var ZodType = class {
    get description() {
      return this._def.description;
    }
    _getType(input) {
      return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
      return ctx || {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      };
    }
    _processInputParams(input) {
      return {
        status: new ParseStatus(),
        ctx: {
          common: input.parent.common,
          data: input.data,
          parsedType: getParsedType(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        }
      };
    }
    _parseSync(input) {
      const result = this._parse(input);
      if (isAsync(result)) {
        throw new Error("Synchronous parse encountered promise.");
      }
      return result;
    }
    _parseAsync(input) {
      const result = this._parse(input);
      return Promise.resolve(result);
    }
    parse(data2, params) {
      const result = this.safeParse(data2, params);
      if (result.success)
        return result.data;
      throw result.error;
    }
    safeParse(data2, params) {
      const ctx = {
        common: {
          issues: [],
          async: params?.async ?? false,
          contextualErrorMap: params?.errorMap
        },
        path: params?.path || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data: data2,
        parsedType: getParsedType(data2)
      };
      const result = this._parseSync({ data: data2, path: ctx.path, parent: ctx });
      return handleResult(ctx, result);
    }
    "~validate"(data2) {
      const ctx = {
        common: {
          issues: [],
          async: !!this["~standard"].async
        },
        path: [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data: data2,
        parsedType: getParsedType(data2)
      };
      if (!this["~standard"].async) {
        try {
          const result = this._parseSync({ data: data2, path: [], parent: ctx });
          return isValid(result) ? {
            value: result.value
          } : {
            issues: ctx.common.issues
          };
        } catch (err) {
          if (err?.message?.toLowerCase()?.includes("encountered")) {
            this["~standard"].async = true;
          }
          ctx.common = {
            issues: [],
            async: true
          };
        }
      }
      return this._parseAsync({ data: data2, path: [], parent: ctx }).then((result) => isValid(result) ? {
        value: result.value
      } : {
        issues: ctx.common.issues
      });
    }
    async parseAsync(data2, params) {
      const result = await this.safeParseAsync(data2, params);
      if (result.success)
        return result.data;
      throw result.error;
    }
    async safeParseAsync(data2, params) {
      const ctx = {
        common: {
          issues: [],
          contextualErrorMap: params?.errorMap,
          async: true
        },
        path: params?.path || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data: data2,
        parsedType: getParsedType(data2)
      };
      const maybeAsyncResult = this._parse({ data: data2, path: ctx.path, parent: ctx });
      const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
      return handleResult(ctx, result);
    }
    refine(check, message) {
      const getIssueProperties = (val) => {
        if (typeof message === "string" || typeof message === "undefined") {
          return { message };
        } else if (typeof message === "function") {
          return message(val);
        } else {
          return message;
        }
      };
      return this._refinement((val, ctx) => {
        const result = check(val);
        const setError = () => ctx.addIssue({
          code: ZodIssueCode.custom,
          ...getIssueProperties(val)
        });
        if (typeof Promise !== "undefined" && result instanceof Promise) {
          return result.then((data2) => {
            if (!data2) {
              setError();
              return false;
            } else {
              return true;
            }
          });
        }
        if (!result) {
          setError();
          return false;
        } else {
          return true;
        }
      });
    }
    refinement(check, refinementData) {
      return this._refinement((val, ctx) => {
        if (!check(val)) {
          ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
          return false;
        } else {
          return true;
        }
      });
    }
    _refinement(refinement) {
      return new ZodEffects({
        schema: this,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect: { type: "refinement", refinement }
      });
    }
    superRefine(refinement) {
      return this._refinement(refinement);
    }
    constructor(def) {
      this.spa = this.safeParseAsync;
      this._def = def;
      this.parse = this.parse.bind(this);
      this.safeParse = this.safeParse.bind(this);
      this.parseAsync = this.parseAsync.bind(this);
      this.safeParseAsync = this.safeParseAsync.bind(this);
      this.spa = this.spa.bind(this);
      this.refine = this.refine.bind(this);
      this.refinement = this.refinement.bind(this);
      this.superRefine = this.superRefine.bind(this);
      this.optional = this.optional.bind(this);
      this.nullable = this.nullable.bind(this);
      this.nullish = this.nullish.bind(this);
      this.array = this.array.bind(this);
      this.promise = this.promise.bind(this);
      this.or = this.or.bind(this);
      this.and = this.and.bind(this);
      this.transform = this.transform.bind(this);
      this.brand = this.brand.bind(this);
      this.default = this.default.bind(this);
      this.catch = this.catch.bind(this);
      this.describe = this.describe.bind(this);
      this.pipe = this.pipe.bind(this);
      this.readonly = this.readonly.bind(this);
      this.isNullable = this.isNullable.bind(this);
      this.isOptional = this.isOptional.bind(this);
      this["~standard"] = {
        version: 1,
        vendor: "zod",
        validate: (data2) => this["~validate"](data2)
      };
    }
    optional() {
      return ZodOptional.create(this, this._def);
    }
    nullable() {
      return ZodNullable.create(this, this._def);
    }
    nullish() {
      return this.nullable().optional();
    }
    array() {
      return ZodArray.create(this);
    }
    promise() {
      return ZodPromise.create(this, this._def);
    }
    or(option) {
      return ZodUnion.create([this, option], this._def);
    }
    and(incoming) {
      return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
      return new ZodEffects({
        ...processCreateParams(this._def),
        schema: this,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect: { type: "transform", transform }
      });
    }
    default(def) {
      const defaultValueFunc = typeof def === "function" ? def : () => def;
      return new ZodDefault({
        ...processCreateParams(this._def),
        innerType: this,
        defaultValue: defaultValueFunc,
        typeName: ZodFirstPartyTypeKind.ZodDefault
      });
    }
    brand() {
      return new ZodBranded({
        typeName: ZodFirstPartyTypeKind.ZodBranded,
        type: this,
        ...processCreateParams(this._def)
      });
    }
    catch(def) {
      const catchValueFunc = typeof def === "function" ? def : () => def;
      return new ZodCatch({
        ...processCreateParams(this._def),
        innerType: this,
        catchValue: catchValueFunc,
        typeName: ZodFirstPartyTypeKind.ZodCatch
      });
    }
    describe(description) {
      const This = this.constructor;
      return new This({
        ...this._def,
        description
      });
    }
    pipe(target) {
      return ZodPipeline.create(this, target);
    }
    readonly() {
      return ZodReadonly.create(this);
    }
    isOptional() {
      return this.safeParse(void 0).success;
    }
    isNullable() {
      return this.safeParse(null).success;
    }
  };
  var cuidRegex = /^c[^\s-]{8,}$/i;
  var cuid2Regex = /^[0-9a-z]+$/;
  var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
  var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
  var nanoidRegex = /^[a-z0-9_-]{21}$/i;
  var jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
  var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
  var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
  var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
  var emojiRegex;
  var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
  var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
  var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
  var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
  var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
  var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
  var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
  var dateRegex = new RegExp(`^${dateRegexSource}$`);
  function timeRegexSource(args) {
    let secondsRegexSource = `[0-5]\\d`;
    if (args.precision) {
      secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
    } else if (args.precision == null) {
      secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
    }
    const secondsQuantifier = args.precision ? "+" : "?";
    return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
  }
  function timeRegex(args) {
    return new RegExp(`^${timeRegexSource(args)}$`);
  }
  function datetimeRegex(args) {
    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
    const opts = [];
    opts.push(args.local ? `Z?` : `Z`);
    if (args.offset)
      opts.push(`([+-]\\d{2}:?\\d{2})`);
    regex = `${regex}(${opts.join("|")})`;
    return new RegExp(`^${regex}$`);
  }
  function isValidIP(ip, version5) {
    if ((version5 === "v4" || !version5) && ipv4Regex.test(ip)) {
      return true;
    }
    if ((version5 === "v6" || !version5) && ipv6Regex.test(ip)) {
      return true;
    }
    return false;
  }
  function isValidJWT(jwt, alg) {
    if (!jwtRegex.test(jwt))
      return false;
    try {
      const [header] = jwt.split(".");
      if (!header)
        return false;
      const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
      const decoded = JSON.parse(atob(base64));
      if (typeof decoded !== "object" || decoded === null)
        return false;
      if ("typ" in decoded && decoded?.typ !== "JWT")
        return false;
      if (!decoded.alg)
        return false;
      if (alg && decoded.alg !== alg)
        return false;
      return true;
    } catch {
      return false;
    }
  }
  function isValidCidr(ip, version5) {
    if ((version5 === "v4" || !version5) && ipv4CidrRegex.test(ip)) {
      return true;
    }
    if ((version5 === "v6" || !version5) && ipv6CidrRegex.test(ip)) {
      return true;
    }
    return false;
  }
  var ZodString = class _ZodString extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = String(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.string) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.string,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      const status = new ParseStatus();
      let ctx = void 0;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.length < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.length > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "length") {
          const tooBig = input.data.length > check.value;
          const tooSmall = input.data.length < check.value;
          if (tooBig || tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            if (tooBig) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            } else if (tooSmall) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            }
            status.dirty();
          }
        } else if (check.kind === "email") {
          if (!emailRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "email",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "emoji") {
          if (!emojiRegex) {
            emojiRegex = new RegExp(_emojiRegex, "u");
          }
          if (!emojiRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "emoji",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "uuid") {
          if (!uuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "uuid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "nanoid") {
          if (!nanoidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "nanoid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid") {
          if (!cuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cuid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid2") {
          if (!cuid2Regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cuid2",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ulid") {
          if (!ulidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "ulid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "url") {
          try {
            new URL(input.data);
          } catch {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "url",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "regex") {
          check.regex.lastIndex = 0;
          const testResult = check.regex.test(input.data);
          if (!testResult) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "regex",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "trim") {
          input.data = input.data.trim();
        } else if (check.kind === "includes") {
          if (!input.data.includes(check.value, check.position)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { includes: check.value, position: check.position },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "toLowerCase") {
          input.data = input.data.toLowerCase();
        } else if (check.kind === "toUpperCase") {
          input.data = input.data.toUpperCase();
        } else if (check.kind === "startsWith") {
          if (!input.data.startsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { startsWith: check.value },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "endsWith") {
          if (!input.data.endsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { endsWith: check.value },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "datetime") {
          const regex = datetimeRegex(check);
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: "datetime",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "date") {
          const regex = dateRegex;
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: "date",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "time") {
          const regex = timeRegex(check);
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: "time",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "duration") {
          if (!durationRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "duration",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ip") {
          if (!isValidIP(input.data, check.version)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "ip",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "jwt") {
          if (!isValidJWT(input.data, check.alg)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "jwt",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cidr") {
          if (!isValidCidr(input.data, check.version)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cidr",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "base64") {
          if (!base64Regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "base64",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "base64url") {
          if (!base64urlRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "base64url",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    _regex(regex, validation, message) {
      return this.refinement((data2) => regex.test(data2), {
        validation,
        code: ZodIssueCode.invalid_string,
        ...errorUtil.errToObj(message)
      });
    }
    _addCheck(check) {
      return new _ZodString({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    email(message) {
      return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
    }
    url(message) {
      return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
    }
    emoji(message) {
      return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
    }
    uuid(message) {
      return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
    }
    nanoid(message) {
      return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
    }
    cuid(message) {
      return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
    }
    cuid2(message) {
      return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
    }
    ulid(message) {
      return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
    }
    base64(message) {
      return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
    }
    base64url(message) {
      return this._addCheck({
        kind: "base64url",
        ...errorUtil.errToObj(message)
      });
    }
    jwt(options) {
      return this._addCheck({ kind: "jwt", ...errorUtil.errToObj(options) });
    }
    ip(options) {
      return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
    }
    cidr(options) {
      return this._addCheck({ kind: "cidr", ...errorUtil.errToObj(options) });
    }
    datetime(options) {
      if (typeof options === "string") {
        return this._addCheck({
          kind: "datetime",
          precision: null,
          offset: false,
          local: false,
          message: options
        });
      }
      return this._addCheck({
        kind: "datetime",
        precision: typeof options?.precision === "undefined" ? null : options?.precision,
        offset: options?.offset ?? false,
        local: options?.local ?? false,
        ...errorUtil.errToObj(options?.message)
      });
    }
    date(message) {
      return this._addCheck({ kind: "date", message });
    }
    time(options) {
      if (typeof options === "string") {
        return this._addCheck({
          kind: "time",
          precision: null,
          message: options
        });
      }
      return this._addCheck({
        kind: "time",
        precision: typeof options?.precision === "undefined" ? null : options?.precision,
        ...errorUtil.errToObj(options?.message)
      });
    }
    duration(message) {
      return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
    }
    regex(regex, message) {
      return this._addCheck({
        kind: "regex",
        regex,
        ...errorUtil.errToObj(message)
      });
    }
    includes(value, options) {
      return this._addCheck({
        kind: "includes",
        value,
        position: options?.position,
        ...errorUtil.errToObj(options?.message)
      });
    }
    startsWith(value, message) {
      return this._addCheck({
        kind: "startsWith",
        value,
        ...errorUtil.errToObj(message)
      });
    }
    endsWith(value, message) {
      return this._addCheck({
        kind: "endsWith",
        value,
        ...errorUtil.errToObj(message)
      });
    }
    min(minLength, message) {
      return this._addCheck({
        kind: "min",
        value: minLength,
        ...errorUtil.errToObj(message)
      });
    }
    max(maxLength, message) {
      return this._addCheck({
        kind: "max",
        value: maxLength,
        ...errorUtil.errToObj(message)
      });
    }
    length(len, message) {
      return this._addCheck({
        kind: "length",
        value: len,
        ...errorUtil.errToObj(message)
      });
    }
    /**
     * Equivalent to `.min(1)`
     */
    nonempty(message) {
      return this.min(1, errorUtil.errToObj(message));
    }
    trim() {
      return new _ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "trim" }]
      });
    }
    toLowerCase() {
      return new _ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "toLowerCase" }]
      });
    }
    toUpperCase() {
      return new _ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "toUpperCase" }]
      });
    }
    get isDatetime() {
      return !!this._def.checks.find((ch) => ch.kind === "datetime");
    }
    get isDate() {
      return !!this._def.checks.find((ch) => ch.kind === "date");
    }
    get isTime() {
      return !!this._def.checks.find((ch) => ch.kind === "time");
    }
    get isDuration() {
      return !!this._def.checks.find((ch) => ch.kind === "duration");
    }
    get isEmail() {
      return !!this._def.checks.find((ch) => ch.kind === "email");
    }
    get isURL() {
      return !!this._def.checks.find((ch) => ch.kind === "url");
    }
    get isEmoji() {
      return !!this._def.checks.find((ch) => ch.kind === "emoji");
    }
    get isUUID() {
      return !!this._def.checks.find((ch) => ch.kind === "uuid");
    }
    get isNANOID() {
      return !!this._def.checks.find((ch) => ch.kind === "nanoid");
    }
    get isCUID() {
      return !!this._def.checks.find((ch) => ch.kind === "cuid");
    }
    get isCUID2() {
      return !!this._def.checks.find((ch) => ch.kind === "cuid2");
    }
    get isULID() {
      return !!this._def.checks.find((ch) => ch.kind === "ulid");
    }
    get isIP() {
      return !!this._def.checks.find((ch) => ch.kind === "ip");
    }
    get isCIDR() {
      return !!this._def.checks.find((ch) => ch.kind === "cidr");
    }
    get isBase64() {
      return !!this._def.checks.find((ch) => ch.kind === "base64");
    }
    get isBase64url() {
      return !!this._def.checks.find((ch) => ch.kind === "base64url");
    }
    get minLength() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxLength() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max;
    }
  };
  ZodString.create = (params) => {
    return new ZodString({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodString,
      coerce: params?.coerce ?? false,
      ...processCreateParams(params)
    });
  };
  function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / 10 ** decCount;
  }
  var ZodNumber = class _ZodNumber extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
      this.step = this.multipleOf;
    }
    _parse(input) {
      if (this._def.coerce) {
        input.data = Number(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.number) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.number,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      let ctx = void 0;
      const status = new ParseStatus();
      for (const check of this._def.checks) {
        if (check.kind === "int") {
          if (!util.isInteger(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: "integer",
              received: "float",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (floatSafeRemainder(input.data, check.value) !== 0) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "finite") {
          if (!Number.isFinite(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_finite,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    gte(value, message) {
      return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
      return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
      return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
      return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
      return new _ZodNumber({
        ...this._def,
        checks: [
          ...this._def.checks,
          {
            kind,
            value,
            inclusive,
            message: errorUtil.toString(message)
          }
        ]
      });
    }
    _addCheck(check) {
      return new _ZodNumber({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    int(message) {
      return this._addCheck({
        kind: "int",
        message: errorUtil.toString(message)
      });
    }
    positive(message) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    negative(message) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    nonpositive(message) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    nonnegative(message) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    multipleOf(value, message) {
      return this._addCheck({
        kind: "multipleOf",
        value,
        message: errorUtil.toString(message)
      });
    }
    finite(message) {
      return this._addCheck({
        kind: "finite",
        message: errorUtil.toString(message)
      });
    }
    safe(message) {
      return this._addCheck({
        kind: "min",
        inclusive: true,
        value: Number.MIN_SAFE_INTEGER,
        message: errorUtil.toString(message)
      })._addCheck({
        kind: "max",
        inclusive: true,
        value: Number.MAX_SAFE_INTEGER,
        message: errorUtil.toString(message)
      });
    }
    get minValue() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxValue() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max;
    }
    get isInt() {
      return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
    }
    get isFinite() {
      let max = null;
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
          return true;
        } else if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        } else if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return Number.isFinite(min) && Number.isFinite(max);
    }
  };
  ZodNumber.create = (params) => {
    return new ZodNumber({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodNumber,
      coerce: params?.coerce || false,
      ...processCreateParams(params)
    });
  };
  var ZodBigInt = class _ZodBigInt extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
    }
    _parse(input) {
      if (this._def.coerce) {
        try {
          input.data = BigInt(input.data);
        } catch {
          return this._getInvalidInput(input);
        }
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.bigint) {
        return this._getInvalidInput(input);
      }
      let ctx = void 0;
      const status = new ParseStatus();
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              type: "bigint",
              minimum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              type: "bigint",
              maximum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (input.data % check.value !== BigInt(0)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    _getInvalidInput(input) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.bigint,
        received: ctx.parsedType
      });
      return INVALID;
    }
    gte(value, message) {
      return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
      return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
      return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
      return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
      return new _ZodBigInt({
        ...this._def,
        checks: [
          ...this._def.checks,
          {
            kind,
            value,
            inclusive,
            message: errorUtil.toString(message)
          }
        ]
      });
    }
    _addCheck(check) {
      return new _ZodBigInt({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    positive(message) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    negative(message) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    nonpositive(message) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    nonnegative(message) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    multipleOf(value, message) {
      return this._addCheck({
        kind: "multipleOf",
        value,
        message: errorUtil.toString(message)
      });
    }
    get minValue() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxValue() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max;
    }
  };
  ZodBigInt.create = (params) => {
    return new ZodBigInt({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodBigInt,
      coerce: params?.coerce ?? false,
      ...processCreateParams(params)
    });
  };
  var ZodBoolean = class extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = Boolean(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.boolean) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.boolean,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodBoolean.create = (params) => {
    return new ZodBoolean({
      typeName: ZodFirstPartyTypeKind.ZodBoolean,
      coerce: params?.coerce || false,
      ...processCreateParams(params)
    });
  };
  var ZodDate = class _ZodDate extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = new Date(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.date) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.date,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      if (Number.isNaN(input.data.getTime())) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_date
        });
        return INVALID;
      }
      const status = new ParseStatus();
      let ctx = void 0;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.getTime() < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              message: check.message,
              inclusive: true,
              exact: false,
              minimum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.getTime() > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              message: check.message,
              inclusive: true,
              exact: false,
              maximum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return {
        status: status.value,
        value: new Date(input.data.getTime())
      };
    }
    _addCheck(check) {
      return new _ZodDate({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    min(minDate, message) {
      return this._addCheck({
        kind: "min",
        value: minDate.getTime(),
        message: errorUtil.toString(message)
      });
    }
    max(maxDate, message) {
      return this._addCheck({
        kind: "max",
        value: maxDate.getTime(),
        message: errorUtil.toString(message)
      });
    }
    get minDate() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min != null ? new Date(min) : null;
    }
    get maxDate() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max != null ? new Date(max) : null;
    }
  };
  ZodDate.create = (params) => {
    return new ZodDate({
      checks: [],
      coerce: params?.coerce || false,
      typeName: ZodFirstPartyTypeKind.ZodDate,
      ...processCreateParams(params)
    });
  };
  var ZodSymbol = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.symbol) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.symbol,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodSymbol.create = (params) => {
    return new ZodSymbol({
      typeName: ZodFirstPartyTypeKind.ZodSymbol,
      ...processCreateParams(params)
    });
  };
  var ZodUndefined = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.undefined,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodUndefined.create = (params) => {
    return new ZodUndefined({
      typeName: ZodFirstPartyTypeKind.ZodUndefined,
      ...processCreateParams(params)
    });
  };
  var ZodNull = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.null) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.null,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodNull.create = (params) => {
    return new ZodNull({
      typeName: ZodFirstPartyTypeKind.ZodNull,
      ...processCreateParams(params)
    });
  };
  var ZodAny = class extends ZodType {
    constructor() {
      super(...arguments);
      this._any = true;
    }
    _parse(input) {
      return OK(input.data);
    }
  };
  ZodAny.create = (params) => {
    return new ZodAny({
      typeName: ZodFirstPartyTypeKind.ZodAny,
      ...processCreateParams(params)
    });
  };
  var ZodUnknown = class extends ZodType {
    constructor() {
      super(...arguments);
      this._unknown = true;
    }
    _parse(input) {
      return OK(input.data);
    }
  };
  ZodUnknown.create = (params) => {
    return new ZodUnknown({
      typeName: ZodFirstPartyTypeKind.ZodUnknown,
      ...processCreateParams(params)
    });
  };
  var ZodNever = class extends ZodType {
    _parse(input) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.never,
        received: ctx.parsedType
      });
      return INVALID;
    }
  };
  ZodNever.create = (params) => {
    return new ZodNever({
      typeName: ZodFirstPartyTypeKind.ZodNever,
      ...processCreateParams(params)
    });
  };
  var ZodVoid = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.void,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodVoid.create = (params) => {
    return new ZodVoid({
      typeName: ZodFirstPartyTypeKind.ZodVoid,
      ...processCreateParams(params)
    });
  };
  var ZodArray = class _ZodArray extends ZodType {
    _parse(input) {
      const { ctx, status } = this._processInputParams(input);
      const def = this._def;
      if (ctx.parsedType !== ZodParsedType.array) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.array,
          received: ctx.parsedType
        });
        return INVALID;
      }
      if (def.exactLength !== null) {
        const tooBig = ctx.data.length > def.exactLength.value;
        const tooSmall = ctx.data.length < def.exactLength.value;
        if (tooBig || tooSmall) {
          addIssueToContext(ctx, {
            code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
            minimum: tooSmall ? def.exactLength.value : void 0,
            maximum: tooBig ? def.exactLength.value : void 0,
            type: "array",
            inclusive: true,
            exact: true,
            message: def.exactLength.message
          });
          status.dirty();
        }
      }
      if (def.minLength !== null) {
        if (ctx.data.length < def.minLength.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: def.minLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.minLength.message
          });
          status.dirty();
        }
      }
      if (def.maxLength !== null) {
        if (ctx.data.length > def.maxLength.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: def.maxLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.maxLength.message
          });
          status.dirty();
        }
      }
      if (ctx.common.async) {
        return Promise.all([...ctx.data].map((item, i3) => {
          return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i3));
        })).then((result2) => {
          return ParseStatus.mergeArray(status, result2);
        });
      }
      const result = [...ctx.data].map((item, i3) => {
        return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i3));
      });
      return ParseStatus.mergeArray(status, result);
    }
    get element() {
      return this._def.type;
    }
    min(minLength, message) {
      return new _ZodArray({
        ...this._def,
        minLength: { value: minLength, message: errorUtil.toString(message) }
      });
    }
    max(maxLength, message) {
      return new _ZodArray({
        ...this._def,
        maxLength: { value: maxLength, message: errorUtil.toString(message) }
      });
    }
    length(len, message) {
      return new _ZodArray({
        ...this._def,
        exactLength: { value: len, message: errorUtil.toString(message) }
      });
    }
    nonempty(message) {
      return this.min(1, message);
    }
  };
  ZodArray.create = (schema2, params) => {
    return new ZodArray({
      type: schema2,
      minLength: null,
      maxLength: null,
      exactLength: null,
      typeName: ZodFirstPartyTypeKind.ZodArray,
      ...processCreateParams(params)
    });
  };
  function deepPartialify(schema2) {
    if (schema2 instanceof ZodObject) {
      const newShape = {};
      for (const key in schema2.shape) {
        const fieldSchema = schema2.shape[key];
        newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
      }
      return new ZodObject({
        ...schema2._def,
        shape: () => newShape
      });
    } else if (schema2 instanceof ZodArray) {
      return new ZodArray({
        ...schema2._def,
        type: deepPartialify(schema2.element)
      });
    } else if (schema2 instanceof ZodOptional) {
      return ZodOptional.create(deepPartialify(schema2.unwrap()));
    } else if (schema2 instanceof ZodNullable) {
      return ZodNullable.create(deepPartialify(schema2.unwrap()));
    } else if (schema2 instanceof ZodTuple) {
      return ZodTuple.create(schema2.items.map((item) => deepPartialify(item)));
    } else {
      return schema2;
    }
  }
  var ZodObject = class _ZodObject extends ZodType {
    constructor() {
      super(...arguments);
      this._cached = null;
      this.nonstrict = this.passthrough;
      this.augment = this.extend;
    }
    _getCached() {
      if (this._cached !== null)
        return this._cached;
      const shape = this._def.shape();
      const keys = util.objectKeys(shape);
      this._cached = { shape, keys };
      return this._cached;
    }
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.object) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      const { status, ctx } = this._processInputParams(input);
      const { shape, keys: shapeKeys } = this._getCached();
      const extraKeys = [];
      if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
        for (const key in ctx.data) {
          if (!shapeKeys.includes(key)) {
            extraKeys.push(key);
          }
        }
      }
      const pairs = [];
      for (const key of shapeKeys) {
        const keyValidator = shape[key];
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
          alwaysSet: key in ctx.data
        });
      }
      if (this._def.catchall instanceof ZodNever) {
        const unknownKeys = this._def.unknownKeys;
        if (unknownKeys === "passthrough") {
          for (const key of extraKeys) {
            pairs.push({
              key: { status: "valid", value: key },
              value: { status: "valid", value: ctx.data[key] }
            });
          }
        } else if (unknownKeys === "strict") {
          if (extraKeys.length > 0) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.unrecognized_keys,
              keys: extraKeys
            });
            status.dirty();
          }
        } else if (unknownKeys === "strip") {
        } else {
          throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
        }
      } else {
        const catchall = this._def.catchall;
        for (const key of extraKeys) {
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: catchall._parse(
              new ParseInputLazyPath(ctx, value, ctx.path, key)
              //, ctx.child(key), value, getParsedType(value)
            ),
            alwaysSet: key in ctx.data
          });
        }
      }
      if (ctx.common.async) {
        return Promise.resolve().then(async () => {
          const syncPairs = [];
          for (const pair of pairs) {
            const key = await pair.key;
            const value = await pair.value;
            syncPairs.push({
              key,
              value,
              alwaysSet: pair.alwaysSet
            });
          }
          return syncPairs;
        }).then((syncPairs) => {
          return ParseStatus.mergeObjectSync(status, syncPairs);
        });
      } else {
        return ParseStatus.mergeObjectSync(status, pairs);
      }
    }
    get shape() {
      return this._def.shape();
    }
    strict(message) {
      errorUtil.errToObj;
      return new _ZodObject({
        ...this._def,
        unknownKeys: "strict",
        ...message !== void 0 ? {
          errorMap: (issue, ctx) => {
            const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;
            if (issue.code === "unrecognized_keys")
              return {
                message: errorUtil.errToObj(message).message ?? defaultError
              };
            return {
              message: defaultError
            };
          }
        } : {}
      });
    }
    strip() {
      return new _ZodObject({
        ...this._def,
        unknownKeys: "strip"
      });
    }
    passthrough() {
      return new _ZodObject({
        ...this._def,
        unknownKeys: "passthrough"
      });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
      return new _ZodObject({
        ...this._def,
        shape: () => ({
          ...this._def.shape(),
          ...augmentation
        })
      });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(merging) {
      const merged = new _ZodObject({
        unknownKeys: merging._def.unknownKeys,
        catchall: merging._def.catchall,
        shape: () => ({
          ...this._def.shape(),
          ...merging._def.shape()
        }),
        typeName: ZodFirstPartyTypeKind.ZodObject
      });
      return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema2) {
      return this.augment({ [key]: schema2 });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index2) {
      return new _ZodObject({
        ...this._def,
        catchall: index2
      });
    }
    pick(mask) {
      const shape = {};
      for (const key of util.objectKeys(mask)) {
        if (mask[key] && this.shape[key]) {
          shape[key] = this.shape[key];
        }
      }
      return new _ZodObject({
        ...this._def,
        shape: () => shape
      });
    }
    omit(mask) {
      const shape = {};
      for (const key of util.objectKeys(this.shape)) {
        if (!mask[key]) {
          shape[key] = this.shape[key];
        }
      }
      return new _ZodObject({
        ...this._def,
        shape: () => shape
      });
    }
    /**
     * @deprecated
     */
    deepPartial() {
      return deepPartialify(this);
    }
    partial(mask) {
      const newShape = {};
      for (const key of util.objectKeys(this.shape)) {
        const fieldSchema = this.shape[key];
        if (mask && !mask[key]) {
          newShape[key] = fieldSchema;
        } else {
          newShape[key] = fieldSchema.optional();
        }
      }
      return new _ZodObject({
        ...this._def,
        shape: () => newShape
      });
    }
    required(mask) {
      const newShape = {};
      for (const key of util.objectKeys(this.shape)) {
        if (mask && !mask[key]) {
          newShape[key] = this.shape[key];
        } else {
          const fieldSchema = this.shape[key];
          let newField = fieldSchema;
          while (newField instanceof ZodOptional) {
            newField = newField._def.innerType;
          }
          newShape[key] = newField;
        }
      }
      return new _ZodObject({
        ...this._def,
        shape: () => newShape
      });
    }
    keyof() {
      return createZodEnum(util.objectKeys(this.shape));
    }
  };
  ZodObject.create = (shape, params) => {
    return new ZodObject({
      shape: () => shape,
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  ZodObject.strictCreate = (shape, params) => {
    return new ZodObject({
      shape: () => shape,
      unknownKeys: "strict",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  ZodObject.lazycreate = (shape, params) => {
    return new ZodObject({
      shape,
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  var ZodUnion = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const options = this._def.options;
      function handleResults(results) {
        for (const result of results) {
          if (result.result.status === "valid") {
            return result.result;
          }
        }
        for (const result of results) {
          if (result.result.status === "dirty") {
            ctx.common.issues.push(...result.ctx.common.issues);
            return result.result;
          }
        }
        const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union,
          unionErrors
        });
        return INVALID;
      }
      if (ctx.common.async) {
        return Promise.all(options.map(async (option) => {
          const childCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            },
            parent: null
          };
          return {
            result: await option._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            }),
            ctx: childCtx
          };
        })).then(handleResults);
      } else {
        let dirty = void 0;
        const issues = [];
        for (const option of options) {
          const childCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            },
            parent: null
          };
          const result = option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          });
          if (result.status === "valid") {
            return result;
          } else if (result.status === "dirty" && !dirty) {
            dirty = { result, ctx: childCtx };
          }
          if (childCtx.common.issues.length) {
            issues.push(childCtx.common.issues);
          }
        }
        if (dirty) {
          ctx.common.issues.push(...dirty.ctx.common.issues);
          return dirty.result;
        }
        const unionErrors = issues.map((issues2) => new ZodError(issues2));
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union,
          unionErrors
        });
        return INVALID;
      }
    }
    get options() {
      return this._def.options;
    }
  };
  ZodUnion.create = (types, params) => {
    return new ZodUnion({
      options: types,
      typeName: ZodFirstPartyTypeKind.ZodUnion,
      ...processCreateParams(params)
    });
  };
  var getDiscriminator = (type) => {
    if (type instanceof ZodLazy) {
      return getDiscriminator(type.schema);
    } else if (type instanceof ZodEffects) {
      return getDiscriminator(type.innerType());
    } else if (type instanceof ZodLiteral) {
      return [type.value];
    } else if (type instanceof ZodEnum) {
      return type.options;
    } else if (type instanceof ZodNativeEnum) {
      return util.objectValues(type.enum);
    } else if (type instanceof ZodDefault) {
      return getDiscriminator(type._def.innerType);
    } else if (type instanceof ZodUndefined) {
      return [void 0];
    } else if (type instanceof ZodNull) {
      return [null];
    } else if (type instanceof ZodOptional) {
      return [void 0, ...getDiscriminator(type.unwrap())];
    } else if (type instanceof ZodNullable) {
      return [null, ...getDiscriminator(type.unwrap())];
    } else if (type instanceof ZodBranded) {
      return getDiscriminator(type.unwrap());
    } else if (type instanceof ZodReadonly) {
      return getDiscriminator(type.unwrap());
    } else if (type instanceof ZodCatch) {
      return getDiscriminator(type._def.innerType);
    } else {
      return [];
    }
  };
  var ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.object) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const discriminator = this.discriminator;
      const discriminatorValue = ctx.data[discriminator];
      const option = this.optionsMap.get(discriminatorValue);
      if (!option) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union_discriminator,
          options: Array.from(this.optionsMap.keys()),
          path: [discriminator]
        });
        return INVALID;
      }
      if (ctx.common.async) {
        return option._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      } else {
        return option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      }
    }
    get discriminator() {
      return this._def.discriminator;
    }
    get options() {
      return this._def.options;
    }
    get optionsMap() {
      return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(discriminator, options, params) {
      const optionsMap = /* @__PURE__ */ new Map();
      for (const type of options) {
        const discriminatorValues = getDiscriminator(type.shape[discriminator]);
        if (!discriminatorValues.length) {
          throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
        }
        for (const value of discriminatorValues) {
          if (optionsMap.has(value)) {
            throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
          }
          optionsMap.set(value, type);
        }
      }
      return new _ZodDiscriminatedUnion({
        typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
        discriminator,
        options,
        optionsMap,
        ...processCreateParams(params)
      });
    }
  };
  function mergeValues(a2, b) {
    const aType = getParsedType(a2);
    const bType = getParsedType(b);
    if (a2 === b) {
      return { valid: true, data: a2 };
    } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
      const bKeys = util.objectKeys(b);
      const sharedKeys = util.objectKeys(a2).filter((key) => bKeys.indexOf(key) !== -1);
      const newObj = { ...a2, ...b };
      for (const key of sharedKeys) {
        const sharedValue = mergeValues(a2[key], b[key]);
        if (!sharedValue.valid) {
          return { valid: false };
        }
        newObj[key] = sharedValue.data;
      }
      return { valid: true, data: newObj };
    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
      if (a2.length !== b.length) {
        return { valid: false };
      }
      const newArray = [];
      for (let index2 = 0; index2 < a2.length; index2++) {
        const itemA = a2[index2];
        const itemB = b[index2];
        const sharedValue = mergeValues(itemA, itemB);
        if (!sharedValue.valid) {
          return { valid: false };
        }
        newArray.push(sharedValue.data);
      }
      return { valid: true, data: newArray };
    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a2 === +b) {
      return { valid: true, data: a2 };
    } else {
      return { valid: false };
    }
  }
  var ZodIntersection = class extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      const handleParsed = (parsedLeft, parsedRight) => {
        if (isAborted(parsedLeft) || isAborted(parsedRight)) {
          return INVALID;
        }
        const merged = mergeValues(parsedLeft.value, parsedRight.value);
        if (!merged.valid) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_intersection_types
          });
          return INVALID;
        }
        if (isDirty(parsedLeft) || isDirty(parsedRight)) {
          status.dirty();
        }
        return { status: status.value, value: merged.data };
      };
      if (ctx.common.async) {
        return Promise.all([
          this._def.left._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }),
          this._def.right._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          })
        ]).then(([left, right]) => handleParsed(left, right));
      } else {
        return handleParsed(this._def.left._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }), this._def.right._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }));
      }
    }
  };
  ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection({
      left,
      right,
      typeName: ZodFirstPartyTypeKind.ZodIntersection,
      ...processCreateParams(params)
    });
  };
  var ZodTuple = class _ZodTuple extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.array) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.array,
          received: ctx.parsedType
        });
        return INVALID;
      }
      if (ctx.data.length < this._def.items.length) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        return INVALID;
      }
      const rest = this._def.rest;
      if (!rest && ctx.data.length > this._def.items.length) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        status.dirty();
      }
      const items = [...ctx.data].map((item, itemIndex) => {
        const schema2 = this._def.items[itemIndex] || this._def.rest;
        if (!schema2)
          return null;
        return schema2._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
      }).filter((x) => !!x);
      if (ctx.common.async) {
        return Promise.all(items).then((results) => {
          return ParseStatus.mergeArray(status, results);
        });
      } else {
        return ParseStatus.mergeArray(status, items);
      }
    }
    get items() {
      return this._def.items;
    }
    rest(rest) {
      return new _ZodTuple({
        ...this._def,
        rest
      });
    }
  };
  ZodTuple.create = (schemas, params) => {
    if (!Array.isArray(schemas)) {
      throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple({
      items: schemas,
      typeName: ZodFirstPartyTypeKind.ZodTuple,
      rest: null,
      ...processCreateParams(params)
    });
  };
  var ZodRecord = class _ZodRecord extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.object) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const pairs = [];
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      for (const key in ctx.data) {
        pairs.push({
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
          value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
          alwaysSet: key in ctx.data
        });
      }
      if (ctx.common.async) {
        return ParseStatus.mergeObjectAsync(status, pairs);
      } else {
        return ParseStatus.mergeObjectSync(status, pairs);
      }
    }
    get element() {
      return this._def.valueType;
    }
    static create(first, second, third) {
      if (second instanceof ZodType) {
        return new _ZodRecord({
          keyType: first,
          valueType: second,
          typeName: ZodFirstPartyTypeKind.ZodRecord,
          ...processCreateParams(third)
        });
      }
      return new _ZodRecord({
        keyType: ZodString.create(),
        valueType: first,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(second)
      });
    }
  };
  var ZodMap = class extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.map) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.map,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      const pairs = [...ctx.data.entries()].map(([key, value], index2) => {
        return {
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index2, "key"])),
          value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index2, "value"]))
        };
      });
      if (ctx.common.async) {
        const finalMap = /* @__PURE__ */ new Map();
        return Promise.resolve().then(async () => {
          for (const pair of pairs) {
            const key = await pair.key;
            const value = await pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        });
      } else {
        const finalMap = /* @__PURE__ */ new Map();
        for (const pair of pairs) {
          const key = pair.key;
          const value = pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      }
    }
  };
  ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap({
      valueType,
      keyType,
      typeName: ZodFirstPartyTypeKind.ZodMap,
      ...processCreateParams(params)
    });
  };
  var ZodSet = class _ZodSet extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.set) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.set,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const def = this._def;
      if (def.minSize !== null) {
        if (ctx.data.size < def.minSize.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: def.minSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.minSize.message
          });
          status.dirty();
        }
      }
      if (def.maxSize !== null) {
        if (ctx.data.size > def.maxSize.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: def.maxSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.maxSize.message
          });
          status.dirty();
        }
      }
      const valueType = this._def.valueType;
      function finalizeSet(elements2) {
        const parsedSet = /* @__PURE__ */ new Set();
        for (const element of elements2) {
          if (element.status === "aborted")
            return INVALID;
          if (element.status === "dirty")
            status.dirty();
          parsedSet.add(element.value);
        }
        return { status: status.value, value: parsedSet };
      }
      const elements = [...ctx.data.values()].map((item, i3) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i3)));
      if (ctx.common.async) {
        return Promise.all(elements).then((elements2) => finalizeSet(elements2));
      } else {
        return finalizeSet(elements);
      }
    }
    min(minSize, message) {
      return new _ZodSet({
        ...this._def,
        minSize: { value: minSize, message: errorUtil.toString(message) }
      });
    }
    max(maxSize, message) {
      return new _ZodSet({
        ...this._def,
        maxSize: { value: maxSize, message: errorUtil.toString(message) }
      });
    }
    size(size, message) {
      return this.min(size, message).max(size, message);
    }
    nonempty(message) {
      return this.min(1, message);
    }
  };
  ZodSet.create = (valueType, params) => {
    return new ZodSet({
      valueType,
      minSize: null,
      maxSize: null,
      typeName: ZodFirstPartyTypeKind.ZodSet,
      ...processCreateParams(params)
    });
  };
  var ZodFunction = class _ZodFunction extends ZodType {
    constructor() {
      super(...arguments);
      this.validate = this.implement;
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.function) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.function,
          received: ctx.parsedType
        });
        return INVALID;
      }
      function makeArgsIssue(args, error) {
        return makeIssue({
          data: args,
          path: ctx.path,
          errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x) => !!x),
          issueData: {
            code: ZodIssueCode.invalid_arguments,
            argumentsError: error
          }
        });
      }
      function makeReturnsIssue(returns, error) {
        return makeIssue({
          data: returns,
          path: ctx.path,
          errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x) => !!x),
          issueData: {
            code: ZodIssueCode.invalid_return_type,
            returnTypeError: error
          }
        });
      }
      const params = { errorMap: ctx.common.contextualErrorMap };
      const fn = ctx.data;
      if (this._def.returns instanceof ZodPromise) {
        const me = this;
        return OK(async function(...args) {
          const error = new ZodError([]);
          const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
            error.addIssue(makeArgsIssue(args, e));
            throw error;
          });
          const result = await Reflect.apply(fn, this, parsedArgs);
          const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
            error.addIssue(makeReturnsIssue(result, e));
            throw error;
          });
          return parsedReturns;
        });
      } else {
        const me = this;
        return OK(function(...args) {
          const parsedArgs = me._def.args.safeParse(args, params);
          if (!parsedArgs.success) {
            throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
          }
          const result = Reflect.apply(fn, this, parsedArgs.data);
          const parsedReturns = me._def.returns.safeParse(result, params);
          if (!parsedReturns.success) {
            throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
          }
          return parsedReturns.data;
        });
      }
    }
    parameters() {
      return this._def.args;
    }
    returnType() {
      return this._def.returns;
    }
    args(...items) {
      return new _ZodFunction({
        ...this._def,
        args: ZodTuple.create(items).rest(ZodUnknown.create())
      });
    }
    returns(returnType) {
      return new _ZodFunction({
        ...this._def,
        returns: returnType
      });
    }
    implement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    strictImplement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    static create(args, returns, params) {
      return new _ZodFunction({
        args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
        returns: returns || ZodUnknown.create(),
        typeName: ZodFirstPartyTypeKind.ZodFunction,
        ...processCreateParams(params)
      });
    }
  };
  var ZodLazy = class extends ZodType {
    get schema() {
      return this._def.getter();
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const lazySchema = this._def.getter();
      return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
    }
  };
  ZodLazy.create = (getter, params) => {
    return new ZodLazy({
      getter,
      typeName: ZodFirstPartyTypeKind.ZodLazy,
      ...processCreateParams(params)
    });
  };
  var ZodLiteral = class extends ZodType {
    _parse(input) {
      if (input.data !== this._def.value) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_literal,
          expected: this._def.value
        });
        return INVALID;
      }
      return { status: "valid", value: input.data };
    }
    get value() {
      return this._def.value;
    }
  };
  ZodLiteral.create = (value, params) => {
    return new ZodLiteral({
      value,
      typeName: ZodFirstPartyTypeKind.ZodLiteral,
      ...processCreateParams(params)
    });
  };
  function createZodEnum(values, params) {
    return new ZodEnum({
      values,
      typeName: ZodFirstPartyTypeKind.ZodEnum,
      ...processCreateParams(params)
    });
  }
  var ZodEnum = class _ZodEnum extends ZodType {
    _parse(input) {
      if (typeof input.data !== "string") {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        addIssueToContext(ctx, {
          expected: util.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodIssueCode.invalid_type
        });
        return INVALID;
      }
      if (!this._cache) {
        this._cache = new Set(this._def.values);
      }
      if (!this._cache.has(input.data)) {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return INVALID;
      }
      return OK(input.data);
    }
    get options() {
      return this._def.values;
    }
    get enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Values() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    extract(values, newDef = this._def) {
      return _ZodEnum.create(values, {
        ...this._def,
        ...newDef
      });
    }
    exclude(values, newDef = this._def) {
      return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
        ...this._def,
        ...newDef
      });
    }
  };
  ZodEnum.create = createZodEnum;
  var ZodNativeEnum = class extends ZodType {
    _parse(input) {
      const nativeEnumValues = util.getValidEnumValues(this._def.values);
      const ctx = this._getOrReturnCtx(input);
      if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
        const expectedValues = util.objectValues(nativeEnumValues);
        addIssueToContext(ctx, {
          expected: util.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodIssueCode.invalid_type
        });
        return INVALID;
      }
      if (!this._cache) {
        this._cache = new Set(util.getValidEnumValues(this._def.values));
      }
      if (!this._cache.has(input.data)) {
        const expectedValues = util.objectValues(nativeEnumValues);
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return INVALID;
      }
      return OK(input.data);
    }
    get enum() {
      return this._def.values;
    }
  };
  ZodNativeEnum.create = (values, params) => {
    return new ZodNativeEnum({
      values,
      typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
      ...processCreateParams(params)
    });
  };
  var ZodPromise = class extends ZodType {
    unwrap() {
      return this._def.type;
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.promise,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
      return OK(promisified.then((data2) => {
        return this._def.type.parseAsync(data2, {
          path: ctx.path,
          errorMap: ctx.common.contextualErrorMap
        });
      }));
    }
  };
  ZodPromise.create = (schema2, params) => {
    return new ZodPromise({
      type: schema2,
      typeName: ZodFirstPartyTypeKind.ZodPromise,
      ...processCreateParams(params)
    });
  };
  var ZodEffects = class extends ZodType {
    innerType() {
      return this._def.schema;
    }
    sourceType() {
      return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      const effect = this._def.effect || null;
      const checkCtx = {
        addIssue: (arg) => {
          addIssueToContext(ctx, arg);
          if (arg.fatal) {
            status.abort();
          } else {
            status.dirty();
          }
        },
        get path() {
          return ctx.path;
        }
      };
      checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
      if (effect.type === "preprocess") {
        const processed = effect.transform(ctx.data, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(processed).then(async (processed2) => {
            if (status.value === "aborted")
              return INVALID;
            const result = await this._def.schema._parseAsync({
              data: processed2,
              path: ctx.path,
              parent: ctx
            });
            if (result.status === "aborted")
              return INVALID;
            if (result.status === "dirty")
              return DIRTY(result.value);
            if (status.value === "dirty")
              return DIRTY(result.value);
            return result;
          });
        } else {
          if (status.value === "aborted")
            return INVALID;
          const result = this._def.schema._parseSync({
            data: processed,
            path: ctx.path,
            parent: ctx
          });
          if (result.status === "aborted")
            return INVALID;
          if (result.status === "dirty")
            return DIRTY(result.value);
          if (status.value === "dirty")
            return DIRTY(result.value);
          return result;
        }
      }
      if (effect.type === "refinement") {
        const executeRefinement = (acc) => {
          const result = effect.refinement(acc, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(result);
          }
          if (result instanceof Promise) {
            throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
          }
          return acc;
        };
        if (ctx.common.async === false) {
          const inner = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          executeRefinement(inner.value);
          return { status: status.value, value: inner.value };
        } else {
          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
            if (inner.status === "aborted")
              return INVALID;
            if (inner.status === "dirty")
              status.dirty();
            return executeRefinement(inner.value).then(() => {
              return { status: status.value, value: inner.value };
            });
          });
        }
      }
      if (effect.type === "transform") {
        if (ctx.common.async === false) {
          const base = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (!isValid(base))
            return INVALID;
          const result = effect.transform(base.value, checkCtx);
          if (result instanceof Promise) {
            throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
          }
          return { status: status.value, value: result };
        } else {
          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
            if (!isValid(base))
              return INVALID;
            return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({
              status: status.value,
              value: result
            }));
          });
        }
      }
      util.assertNever(effect);
    }
  };
  ZodEffects.create = (schema2, effect, params) => {
    return new ZodEffects({
      schema: schema2,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect,
      ...processCreateParams(params)
    });
  };
  ZodEffects.createWithPreprocess = (preprocess, schema2, params) => {
    return new ZodEffects({
      schema: schema2,
      effect: { type: "preprocess", transform: preprocess },
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      ...processCreateParams(params)
    });
  };
  var ZodOptional = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === ZodParsedType.undefined) {
        return OK(void 0);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  ZodOptional.create = (type, params) => {
    return new ZodOptional({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodOptional,
      ...processCreateParams(params)
    });
  };
  var ZodNullable = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === ZodParsedType.null) {
        return OK(null);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  ZodNullable.create = (type, params) => {
    return new ZodNullable({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodNullable,
      ...processCreateParams(params)
    });
  };
  var ZodDefault = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      let data2 = ctx.data;
      if (ctx.parsedType === ZodParsedType.undefined) {
        data2 = this._def.defaultValue();
      }
      return this._def.innerType._parse({
        data: data2,
        path: ctx.path,
        parent: ctx
      });
    }
    removeDefault() {
      return this._def.innerType;
    }
  };
  ZodDefault.create = (type, params) => {
    return new ZodDefault({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodDefault,
      defaultValue: typeof params.default === "function" ? params.default : () => params.default,
      ...processCreateParams(params)
    });
  };
  var ZodCatch = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const newCtx = {
        ...ctx,
        common: {
          ...ctx.common,
          issues: []
        }
      };
      const result = this._def.innerType._parse({
        data: newCtx.data,
        path: newCtx.path,
        parent: {
          ...newCtx
        }
      });
      if (isAsync(result)) {
        return result.then((result2) => {
          return {
            status: "valid",
            value: result2.status === "valid" ? result2.value : this._def.catchValue({
              get error() {
                return new ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        });
      } else {
        return {
          status: "valid",
          value: result.status === "valid" ? result.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      }
    }
    removeCatch() {
      return this._def.innerType;
    }
  };
  ZodCatch.create = (type, params) => {
    return new ZodCatch({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodCatch,
      catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
      ...processCreateParams(params)
    });
  };
  var ZodNaN = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.nan) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.nan,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return { status: "valid", value: input.data };
    }
  };
  ZodNaN.create = (params) => {
    return new ZodNaN({
      typeName: ZodFirstPartyTypeKind.ZodNaN,
      ...processCreateParams(params)
    });
  };
  var BRAND = Symbol("zod_brand");
  var ZodBranded = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const data2 = ctx.data;
      return this._def.type._parse({
        data: data2,
        path: ctx.path,
        parent: ctx
      });
    }
    unwrap() {
      return this._def.type;
    }
  };
  var ZodPipeline = class _ZodPipeline extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.common.async) {
        const handleAsync = async () => {
          const inResult = await this._def.in._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return DIRTY(inResult.value);
          } else {
            return this._def.out._parseAsync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        };
        return handleAsync();
      } else {
        const inResult = this._def.in._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return {
            status: "dirty",
            value: inResult.value
          };
        } else {
          return this._def.out._parseSync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      }
    }
    static create(a2, b) {
      return new _ZodPipeline({
        in: a2,
        out: b,
        typeName: ZodFirstPartyTypeKind.ZodPipeline
      });
    }
  };
  var ZodReadonly = class extends ZodType {
    _parse(input) {
      const result = this._def.innerType._parse(input);
      const freeze = (data2) => {
        if (isValid(data2)) {
          data2.value = Object.freeze(data2.value);
        }
        return data2;
      };
      return isAsync(result) ? result.then((data2) => freeze(data2)) : freeze(result);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  ZodReadonly.create = (type, params) => {
    return new ZodReadonly({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodReadonly,
      ...processCreateParams(params)
    });
  };
  function cleanParams(params, data2) {
    const p = typeof params === "function" ? params(data2) : typeof params === "string" ? { message: params } : params;
    const p2 = typeof p === "string" ? { message: p } : p;
    return p2;
  }
  function custom(check, _params = {}, fatal) {
    if (check)
      return ZodAny.create().superRefine((data2, ctx) => {
        const r3 = check(data2);
        if (r3 instanceof Promise) {
          return r3.then((r4) => {
            if (!r4) {
              const params = cleanParams(_params, data2);
              const _fatal = params.fatal ?? fatal ?? true;
              ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
            }
          });
        }
        if (!r3) {
          const params = cleanParams(_params, data2);
          const _fatal = params.fatal ?? fatal ?? true;
          ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
        }
        return;
      });
    return ZodAny.create();
  }
  var late = {
    object: ZodObject.lazycreate
  };
  var ZodFirstPartyTypeKind;
  (function(ZodFirstPartyTypeKind2) {
    ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
  })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
  var instanceOfType = (cls, params = {
    message: `Input not instance of ${cls.name}`
  }) => custom((data2) => data2 instanceof cls, params);
  var stringType = ZodString.create;
  var numberType = ZodNumber.create;
  var nanType = ZodNaN.create;
  var bigIntType = ZodBigInt.create;
  var booleanType = ZodBoolean.create;
  var dateType = ZodDate.create;
  var symbolType = ZodSymbol.create;
  var undefinedType = ZodUndefined.create;
  var nullType = ZodNull.create;
  var anyType = ZodAny.create;
  var unknownType = ZodUnknown.create;
  var neverType = ZodNever.create;
  var voidType = ZodVoid.create;
  var arrayType = ZodArray.create;
  var objectType = ZodObject.create;
  var strictObjectType = ZodObject.strictCreate;
  var unionType = ZodUnion.create;
  var discriminatedUnionType = ZodDiscriminatedUnion.create;
  var intersectionType = ZodIntersection.create;
  var tupleType = ZodTuple.create;
  var recordType = ZodRecord.create;
  var mapType = ZodMap.create;
  var setType = ZodSet.create;
  var functionType = ZodFunction.create;
  var lazyType = ZodLazy.create;
  var literalType = ZodLiteral.create;
  var enumType = ZodEnum.create;
  var nativeEnumType = ZodNativeEnum.create;
  var promiseType = ZodPromise.create;
  var effectsType = ZodEffects.create;
  var optionalType = ZodOptional.create;
  var nullableType = ZodNullable.create;
  var preprocessType = ZodEffects.createWithPreprocess;
  var pipelineType = ZodPipeline.create;
  var ostring = () => stringType().optional();
  var onumber = () => numberType().optional();
  var oboolean = () => booleanType().optional();
  var coerce = {
    string: (arg) => ZodString.create({ ...arg, coerce: true }),
    number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
    boolean: (arg) => ZodBoolean.create({
      ...arg,
      coerce: true
    }),
    bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
    date: (arg) => ZodDate.create({ ...arg, coerce: true })
  };
  var NEVER = INVALID;

  // node_modules/@hookform/resolvers/dist/resolvers.mjs
  var r2 = (t2, r3, o2) => {
    if (t2 && "reportValidity" in t2) {
      const s3 = get2(o2, r3);
      t2.setCustomValidity(s3 && s3.message || ""), t2.reportValidity();
    }
  };
  var o = (e, t2) => {
    for (const o2 in t2.fields) {
      const s3 = t2.fields[o2];
      s3 && s3.ref && "reportValidity" in s3.ref ? r2(s3.ref, o2, e) : s3 && s3.refs && s3.refs.forEach((t3) => r2(t3, o2, e));
    }
  };
  var s = (r3, s3) => {
    s3.shouldUseNativeValidation && o(r3, s3);
    const n2 = {};
    for (const o2 in r3) {
      const f = get2(s3.fields, o2), c = Object.assign(r3[o2] || {}, { ref: f && f.ref });
      if (i(s3.names || Object.keys(r3), o2)) {
        const r4 = Object.assign({}, get2(n2, o2));
        set(r4, "root", c), set(n2, o2, r4);
      } else set(n2, o2, c);
    }
    return n2;
  };
  var i = (e, t2) => {
    const r3 = n(t2);
    return e.some((e2) => n(e2).match(`^${r3}\\.\\d+`));
  };
  function n(e) {
    return e.replace(/\]|\[/g, "");
  }

  // node_modules/zod/v4/core/core.js
  var NEVER2 = Object.freeze({
    status: "aborted"
  });
  // @__NO_SIDE_EFFECTS__
  function $constructor(name, initializer2, params) {
    function init(inst, def) {
      var _a;
      Object.defineProperty(inst, "_zod", {
        value: inst._zod ?? {},
        enumerable: false
      });
      (_a = inst._zod).traits ?? (_a.traits = /* @__PURE__ */ new Set());
      inst._zod.traits.add(name);
      initializer2(inst, def);
      for (const k in _.prototype) {
        if (!(k in inst))
          Object.defineProperty(inst, k, { value: _.prototype[k].bind(inst) });
      }
      inst._zod.constr = _;
      inst._zod.def = def;
    }
    const Parent = params?.Parent ?? Object;
    class Definition extends Parent {
    }
    Object.defineProperty(Definition, "name", { value: name });
    function _(def) {
      var _a;
      const inst = params?.Parent ? new Definition() : this;
      init(inst, def);
      (_a = inst._zod).deferred ?? (_a.deferred = []);
      for (const fn of inst._zod.deferred) {
        fn();
      }
      return inst;
    }
    Object.defineProperty(_, "init", { value: init });
    Object.defineProperty(_, Symbol.hasInstance, {
      value: (inst) => {
        if (params?.Parent && inst instanceof params.Parent)
          return true;
        return inst?._zod?.traits?.has(name);
      }
    });
    Object.defineProperty(_, "name", { value: name });
    return _;
  }
  var $brand = Symbol("zod_brand");
  var $ZodAsyncError = class extends Error {
    constructor() {
      super(`Encountered Promise during synchronous parse. Use .parseAsync() instead.`);
    }
  };
  var globalConfig = {};
  function config(newConfig) {
    if (newConfig)
      Object.assign(globalConfig, newConfig);
    return globalConfig;
  }

  // node_modules/zod/v4/core/util.js
  function jsonStringifyReplacer(_, value) {
    if (typeof value === "bigint")
      return value.toString();
    return value;
  }
  function cached(getter) {
    const set2 = false;
    return {
      get value() {
        if (!set2) {
          const value = getter();
          Object.defineProperty(this, "value", { value });
          return value;
        }
        throw new Error("cached value already set");
      }
    };
  }
  var captureStackTrace = Error.captureStackTrace ? Error.captureStackTrace : (..._args) => {
  };
  var allowsEval = cached(() => {
    if (typeof navigator !== "undefined" && navigator?.userAgent?.includes("Cloudflare")) {
      return false;
    }
    try {
      const F = Function;
      new F("");
      return true;
    } catch (_) {
      return false;
    }
  });
  var NUMBER_FORMAT_RANGES = {
    safeint: [Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],
    int32: [-2147483648, 2147483647],
    uint32: [0, 4294967295],
    float32: [-34028234663852886e22, 34028234663852886e22],
    float64: [-Number.MAX_VALUE, Number.MAX_VALUE]
  };
  function unwrapMessage(message) {
    return typeof message === "string" ? message : message?.message;
  }
  function finalizeIssue(iss, ctx, config2) {
    const full = { ...iss, path: iss.path ?? [] };
    if (!iss.message) {
      const message = unwrapMessage(iss.inst?._zod.def?.error?.(iss)) ?? unwrapMessage(ctx?.error?.(iss)) ?? unwrapMessage(config2.customError?.(iss)) ?? unwrapMessage(config2.localeError?.(iss)) ?? "Invalid input";
      full.message = message;
    }
    delete full.inst;
    delete full.continue;
    if (!ctx?.reportInput) {
      delete full.input;
    }
    return full;
  }

  // node_modules/zod/v4/core/errors.js
  var initializer = (inst, def) => {
    inst.name = "$ZodError";
    Object.defineProperty(inst, "_zod", {
      value: inst._zod,
      enumerable: false
    });
    Object.defineProperty(inst, "issues", {
      value: def,
      enumerable: false
    });
    Object.defineProperty(inst, "message", {
      get() {
        return JSON.stringify(def, jsonStringifyReplacer, 2);
      },
      enumerable: true
      // configurable: false,
    });
    Object.defineProperty(inst, "toString", {
      value: () => inst.message,
      enumerable: false
    });
  };
  var $ZodError = $constructor("$ZodError", initializer);
  var $ZodRealError = $constructor("$ZodError", initializer, { Parent: Error });

  // node_modules/zod/v4/core/parse.js
  var _parse = (_Err) => (schema2, value, _ctx, _params) => {
    const ctx = _ctx ? Object.assign(_ctx, { async: false }) : { async: false };
    const result = schema2._zod.run({ value, issues: [] }, ctx);
    if (result instanceof Promise) {
      throw new $ZodAsyncError();
    }
    if (result.issues.length) {
      const e = new (_params?.Err ?? _Err)(result.issues.map((iss) => finalizeIssue(iss, ctx, config())));
      captureStackTrace(e, _params?.callee);
      throw e;
    }
    return result.value;
  };
  var parse = /* @__PURE__ */ _parse($ZodRealError);
  var _parseAsync = (_Err) => async (schema2, value, _ctx, params) => {
    const ctx = _ctx ? Object.assign(_ctx, { async: true }) : { async: true };
    let result = schema2._zod.run({ value, issues: [] }, ctx);
    if (result instanceof Promise)
      result = await result;
    if (result.issues.length) {
      const e = new (params?.Err ?? _Err)(result.issues.map((iss) => finalizeIssue(iss, ctx, config())));
      captureStackTrace(e, params?.callee);
      throw e;
    }
    return result.value;
  };
  var parseAsync = /* @__PURE__ */ _parseAsync($ZodRealError);

  // node_modules/@hookform/resolvers/zod/dist/zod.mjs
  function t(r3, e) {
    try {
      var o2 = r3();
    } catch (r4) {
      return e(r4);
    }
    return o2 && o2.then ? o2.then(void 0, e) : o2;
  }
  function s2(r3, e) {
    for (var n2 = {}; r3.length; ) {
      var t2 = r3[0], s3 = t2.code, i3 = t2.message, a2 = t2.path.join(".");
      if (!n2[a2]) if ("unionErrors" in t2) {
        var u = t2.unionErrors[0].errors[0];
        n2[a2] = { message: u.message, type: u.code };
      } else n2[a2] = { message: i3, type: s3 };
      if ("unionErrors" in t2 && t2.unionErrors.forEach(function(e2) {
        return e2.errors.forEach(function(e3) {
          return r3.push(e3);
        });
      }), e) {
        var c = n2[a2].types, f = c && c[t2.code];
        n2[a2] = appendErrors(a2, e, n2, s3, f ? [].concat(f, t2.message) : t2.message);
      }
      r3.shift();
    }
    return n2;
  }
  function i2(r3, e) {
    for (var n2 = {}; r3.length; ) {
      var t2 = r3[0], s3 = t2.code, i3 = t2.message, a2 = t2.path.join(".");
      if (!n2[a2]) if ("invalid_union" === t2.code && t2.errors.length > 0) {
        var u = t2.errors[0][0];
        n2[a2] = { message: u.message, type: u.code };
      } else n2[a2] = { message: i3, type: s3 };
      if ("invalid_union" === t2.code && t2.errors.forEach(function(e2) {
        return e2.forEach(function(e3) {
          return r3.push(e3);
        });
      }), e) {
        var c = n2[a2].types, f = c && c[t2.code];
        n2[a2] = appendErrors(a2, e, n2, s3, f ? [].concat(f, t2.message) : t2.message);
      }
      r3.shift();
    }
    return n2;
  }
  function a(o2, a2, u) {
    if (void 0 === u && (u = {}), function(r3) {
      return "_def" in r3 && "object" == typeof r3._def && "typeName" in r3._def;
    }(o2)) return function(n2, i3, c) {
      try {
        return Promise.resolve(t(function() {
          return Promise.resolve(o2["sync" === u.mode ? "parse" : "parseAsync"](n2, a2)).then(function(e) {
            return c.shouldUseNativeValidation && o({}, c), { errors: {}, values: u.raw ? Object.assign({}, n2) : e };
          });
        }, function(r3) {
          if (function(r4) {
            return Array.isArray(null == r4 ? void 0 : r4.issues);
          }(r3)) return { values: {}, errors: s(s2(r3.errors, !c.shouldUseNativeValidation && "all" === c.criteriaMode), c) };
          throw r3;
        }));
      } catch (r3) {
        return Promise.reject(r3);
      }
    };
    if (function(r3) {
      return "_zod" in r3 && "object" == typeof r3._zod;
    }(o2)) return function(s3, c, f) {
      try {
        return Promise.resolve(t(function() {
          return Promise.resolve(("sync" === u.mode ? parse : parseAsync)(o2, s3, a2)).then(function(e) {
            return f.shouldUseNativeValidation && o({}, f), { errors: {}, values: u.raw ? Object.assign({}, s3) : e };
          });
        }, function(r3) {
          if (function(r4) {
            return r4 instanceof $ZodError;
          }(r3)) return { values: {}, errors: s(i2(r3.issues, !f.shouldUseNativeValidation && "all" === f.criteriaMode), f) };
          throw r3;
        }));
      } catch (r3) {
        return Promise.reject(r3);
      }
    };
    throw new Error("Invalid input: not a Zod schema");
  }

  // src/components/ui/dialog.tsx
  var React52 = __toESM(require_react());

  // node_modules/@radix-ui/react-dialog/dist/index.mjs
  var React51 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs
  var React40 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-use-escape-keydown/dist/index.mjs
  var React39 = __toESM(require_react(), 1);
  function useEscapeKeydown(onEscapeKeyDownProp, ownerDocument = globalThis?.document) {
    const onEscapeKeyDown = useCallbackRef(onEscapeKeyDownProp);
    React39.useEffect(() => {
      const handleKeyDown = (event) => {
        if (event.key === "Escape") {
          onEscapeKeyDown(event);
        }
      };
      ownerDocument.addEventListener("keydown", handleKeyDown, { capture: true });
      return () => ownerDocument.removeEventListener("keydown", handleKeyDown, { capture: true });
    }, [onEscapeKeyDown, ownerDocument]);
  }

  // node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs
  var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
  var DISMISSABLE_LAYER_NAME = "DismissableLayer";
  var CONTEXT_UPDATE = "dismissableLayer.update";
  var POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside";
  var FOCUS_OUTSIDE = "dismissableLayer.focusOutside";
  var originalBodyPointerEvents;
  var DismissableLayerContext = React40.createContext({
    layers: /* @__PURE__ */ new Set(),
    layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
    branches: /* @__PURE__ */ new Set()
  });
  var DismissableLayer = React40.forwardRef(
    (props, forwardedRef) => {
      const {
        disableOutsidePointerEvents = false,
        onEscapeKeyDown,
        onPointerDownOutside,
        onFocusOutside,
        onInteractOutside,
        onDismiss,
        ...layerProps
      } = props;
      const context = React40.useContext(DismissableLayerContext);
      const [node, setNode] = React40.useState(null);
      const ownerDocument = node?.ownerDocument ?? globalThis?.document;
      const [, force] = React40.useState({});
      const composedRefs = useComposedRefs(forwardedRef, (node2) => setNode(node2));
      const layers = Array.from(context.layers);
      const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1);
      const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);
      const index2 = node ? layers.indexOf(node) : -1;
      const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
      const isPointerEventsEnabled = index2 >= highestLayerWithOutsidePointerEventsDisabledIndex;
      const pointerDownOutside = usePointerDownOutside((event) => {
        const target = event.target;
        const isPointerDownOnBranch = [...context.branches].some((branch) => branch.contains(target));
        if (!isPointerEventsEnabled || isPointerDownOnBranch) return;
        onPointerDownOutside?.(event);
        onInteractOutside?.(event);
        if (!event.defaultPrevented) onDismiss?.();
      }, ownerDocument);
      const focusOutside = useFocusOutside((event) => {
        const target = event.target;
        const isFocusInBranch = [...context.branches].some((branch) => branch.contains(target));
        if (isFocusInBranch) return;
        onFocusOutside?.(event);
        onInteractOutside?.(event);
        if (!event.defaultPrevented) onDismiss?.();
      }, ownerDocument);
      useEscapeKeydown((event) => {
        const isHighestLayer = index2 === context.layers.size - 1;
        if (!isHighestLayer) return;
        onEscapeKeyDown?.(event);
        if (!event.defaultPrevented && onDismiss) {
          event.preventDefault();
          onDismiss();
        }
      }, ownerDocument);
      React40.useEffect(() => {
        if (!node) return;
        if (disableOutsidePointerEvents) {
          if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
            originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;
            ownerDocument.body.style.pointerEvents = "none";
          }
          context.layersWithOutsidePointerEventsDisabled.add(node);
        }
        context.layers.add(node);
        dispatchUpdate();
        return () => {
          if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1) {
            ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;
          }
        };
      }, [node, ownerDocument, disableOutsidePointerEvents, context]);
      React40.useEffect(() => {
        return () => {
          if (!node) return;
          context.layers.delete(node);
          context.layersWithOutsidePointerEventsDisabled.delete(node);
          dispatchUpdate();
        };
      }, [node, context]);
      React40.useEffect(() => {
        const handleUpdate = () => force({});
        document.addEventListener(CONTEXT_UPDATE, handleUpdate);
        return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);
      }, []);
      return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
        Primitive.div,
        {
          ...layerProps,
          ref: composedRefs,
          style: {
            pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0,
            ...props.style
          },
          onFocusCapture: composeEventHandlers2(props.onFocusCapture, focusOutside.onFocusCapture),
          onBlurCapture: composeEventHandlers2(props.onBlurCapture, focusOutside.onBlurCapture),
          onPointerDownCapture: composeEventHandlers2(
            props.onPointerDownCapture,
            pointerDownOutside.onPointerDownCapture
          )
        }
      );
    }
  );
  DismissableLayer.displayName = DISMISSABLE_LAYER_NAME;
  var BRANCH_NAME = "DismissableLayerBranch";
  var DismissableLayerBranch = React40.forwardRef((props, forwardedRef) => {
    const context = React40.useContext(DismissableLayerContext);
    const ref = React40.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    React40.useEffect(() => {
      const node = ref.current;
      if (node) {
        context.branches.add(node);
        return () => {
          context.branches.delete(node);
        };
      }
    }, [context.branches]);
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Primitive.div, { ...props, ref: composedRefs });
  });
  DismissableLayerBranch.displayName = BRANCH_NAME;
  function usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis?.document) {
    const handlePointerDownOutside = useCallbackRef(onPointerDownOutside);
    const isPointerInsideReactTreeRef = React40.useRef(false);
    const handleClickRef = React40.useRef(() => {
    });
    React40.useEffect(() => {
      const handlePointerDown = (event) => {
        if (event.target && !isPointerInsideReactTreeRef.current) {
          let handleAndDispatchPointerDownOutsideEvent2 = function() {
            handleAndDispatchCustomEvent(
              POINTER_DOWN_OUTSIDE,
              handlePointerDownOutside,
              eventDetail,
              { discrete: true }
            );
          };
          var handleAndDispatchPointerDownOutsideEvent = handleAndDispatchPointerDownOutsideEvent2;
          const eventDetail = { originalEvent: event };
          if (event.pointerType === "touch") {
            ownerDocument.removeEventListener("click", handleClickRef.current);
            handleClickRef.current = handleAndDispatchPointerDownOutsideEvent2;
            ownerDocument.addEventListener("click", handleClickRef.current, { once: true });
          } else {
            handleAndDispatchPointerDownOutsideEvent2();
          }
        } else {
          ownerDocument.removeEventListener("click", handleClickRef.current);
        }
        isPointerInsideReactTreeRef.current = false;
      };
      const timerId = window.setTimeout(() => {
        ownerDocument.addEventListener("pointerdown", handlePointerDown);
      }, 0);
      return () => {
        window.clearTimeout(timerId);
        ownerDocument.removeEventListener("pointerdown", handlePointerDown);
        ownerDocument.removeEventListener("click", handleClickRef.current);
      };
    }, [ownerDocument, handlePointerDownOutside]);
    return {
      // ensures we check React component tree (not just DOM tree)
      onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true
    };
  }
  function useFocusOutside(onFocusOutside, ownerDocument = globalThis?.document) {
    const handleFocusOutside = useCallbackRef(onFocusOutside);
    const isFocusInsideReactTreeRef = React40.useRef(false);
    React40.useEffect(() => {
      const handleFocus = (event) => {
        if (event.target && !isFocusInsideReactTreeRef.current) {
          const eventDetail = { originalEvent: event };
          handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {
            discrete: false
          });
        }
      };
      ownerDocument.addEventListener("focusin", handleFocus);
      return () => ownerDocument.removeEventListener("focusin", handleFocus);
    }, [ownerDocument, handleFocusOutside]);
    return {
      onFocusCapture: () => isFocusInsideReactTreeRef.current = true,
      onBlurCapture: () => isFocusInsideReactTreeRef.current = false
    };
  }
  function dispatchUpdate() {
    const event = new CustomEvent(CONTEXT_UPDATE);
    document.dispatchEvent(event);
  }
  function handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
    const target = detail.originalEvent.target;
    const event = new CustomEvent(name, { bubbles: false, cancelable: true, detail });
    if (handler) target.addEventListener(name, handler, { once: true });
    if (discrete) {
      dispatchDiscreteCustomEvent(target, event);
    } else {
      target.dispatchEvent(event);
    }
  }

  // node_modules/@radix-ui/react-focus-scope/dist/index.mjs
  var React41 = __toESM(require_react(), 1);
  var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
  var AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
  var AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount";
  var EVENT_OPTIONS2 = { bubbles: false, cancelable: true };
  var FOCUS_SCOPE_NAME = "FocusScope";
  var FocusScope = React41.forwardRef((props, forwardedRef) => {
    const {
      loop = false,
      trapped = false,
      onMountAutoFocus: onMountAutoFocusProp,
      onUnmountAutoFocus: onUnmountAutoFocusProp,
      ...scopeProps
    } = props;
    const [container, setContainer] = React41.useState(null);
    const onMountAutoFocus = useCallbackRef(onMountAutoFocusProp);
    const onUnmountAutoFocus = useCallbackRef(onUnmountAutoFocusProp);
    const lastFocusedElementRef = React41.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setContainer(node));
    const focusScope = React41.useRef({
      paused: false,
      pause() {
        this.paused = true;
      },
      resume() {
        this.paused = false;
      }
    }).current;
    React41.useEffect(() => {
      if (trapped) {
        let handleFocusIn2 = function(event) {
          if (focusScope.paused || !container) return;
          const target = event.target;
          if (container.contains(target)) {
            lastFocusedElementRef.current = target;
          } else {
            focus(lastFocusedElementRef.current, { select: true });
          }
        }, handleFocusOut2 = function(event) {
          if (focusScope.paused || !container) return;
          const relatedTarget = event.relatedTarget;
          if (relatedTarget === null) return;
          if (!container.contains(relatedTarget)) {
            focus(lastFocusedElementRef.current, { select: true });
          }
        }, handleMutations2 = function(mutations) {
          const focusedElement = document.activeElement;
          if (focusedElement !== document.body) return;
          for (const mutation of mutations) {
            if (mutation.removedNodes.length > 0) focus(container);
          }
        };
        var handleFocusIn = handleFocusIn2, handleFocusOut = handleFocusOut2, handleMutations = handleMutations2;
        document.addEventListener("focusin", handleFocusIn2);
        document.addEventListener("focusout", handleFocusOut2);
        const mutationObserver = new MutationObserver(handleMutations2);
        if (container) mutationObserver.observe(container, { childList: true, subtree: true });
        return () => {
          document.removeEventListener("focusin", handleFocusIn2);
          document.removeEventListener("focusout", handleFocusOut2);
          mutationObserver.disconnect();
        };
      }
    }, [trapped, container, focusScope.paused]);
    React41.useEffect(() => {
      if (container) {
        focusScopesStack.add(focusScope);
        const previouslyFocusedElement = document.activeElement;
        const hasFocusedCandidate = container.contains(previouslyFocusedElement);
        if (!hasFocusedCandidate) {
          const mountEvent = new CustomEvent(AUTOFOCUS_ON_MOUNT, EVENT_OPTIONS2);
          container.addEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
          container.dispatchEvent(mountEvent);
          if (!mountEvent.defaultPrevented) {
            focusFirst2(removeLinks(getTabbableCandidates(container)), { select: true });
            if (document.activeElement === previouslyFocusedElement) {
              focus(container);
            }
          }
        }
        return () => {
          container.removeEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
          setTimeout(() => {
            const unmountEvent = new CustomEvent(AUTOFOCUS_ON_UNMOUNT, EVENT_OPTIONS2);
            container.addEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
            container.dispatchEvent(unmountEvent);
            if (!unmountEvent.defaultPrevented) {
              focus(previouslyFocusedElement ?? document.body, { select: true });
            }
            container.removeEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
            focusScopesStack.remove(focusScope);
          }, 0);
        };
      }
    }, [container, onMountAutoFocus, onUnmountAutoFocus, focusScope]);
    const handleKeyDown = React41.useCallback(
      (event) => {
        if (!loop && !trapped) return;
        if (focusScope.paused) return;
        const isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey;
        const focusedElement = document.activeElement;
        if (isTabKey && focusedElement) {
          const container2 = event.currentTarget;
          const [first, last] = getTabbableEdges(container2);
          const hasTabbableElementsInside = first && last;
          if (!hasTabbableElementsInside) {
            if (focusedElement === container2) event.preventDefault();
          } else {
            if (!event.shiftKey && focusedElement === last) {
              event.preventDefault();
              if (loop) focus(first, { select: true });
            } else if (event.shiftKey && focusedElement === first) {
              event.preventDefault();
              if (loop) focus(last, { select: true });
            }
          }
        }
      },
      [loop, trapped, focusScope.paused]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(Primitive.div, { tabIndex: -1, ...scopeProps, ref: composedRefs, onKeyDown: handleKeyDown });
  });
  FocusScope.displayName = FOCUS_SCOPE_NAME;
  function focusFirst2(candidates, { select = false } = {}) {
    const previouslyFocusedElement = document.activeElement;
    for (const candidate of candidates) {
      focus(candidate, { select });
      if (document.activeElement !== previouslyFocusedElement) return;
    }
  }
  function getTabbableEdges(container) {
    const candidates = getTabbableCandidates(container);
    const first = findVisible(candidates, container);
    const last = findVisible(candidates.reverse(), container);
    return [first, last];
  }
  function getTabbableCandidates(container) {
    const nodes = [];
    const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
      acceptNode: (node) => {
        const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
        if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;
        return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
      }
    });
    while (walker.nextNode()) nodes.push(walker.currentNode);
    return nodes;
  }
  function findVisible(elements, container) {
    for (const element of elements) {
      if (!isHidden(element, { upTo: container })) return element;
    }
  }
  function isHidden(node, { upTo }) {
    if (getComputedStyle(node).visibility === "hidden") return true;
    while (node) {
      if (upTo !== void 0 && node === upTo) return false;
      if (getComputedStyle(node).display === "none") return true;
      node = node.parentElement;
    }
    return false;
  }
  function isSelectableInput(element) {
    return element instanceof HTMLInputElement && "select" in element;
  }
  function focus(element, { select = false } = {}) {
    if (element && element.focus) {
      const previouslyFocusedElement = document.activeElement;
      element.focus({ preventScroll: true });
      if (element !== previouslyFocusedElement && isSelectableInput(element) && select)
        element.select();
    }
  }
  var focusScopesStack = createFocusScopesStack();
  function createFocusScopesStack() {
    let stack = [];
    return {
      add(focusScope) {
        const activeFocusScope = stack[0];
        if (focusScope !== activeFocusScope) {
          activeFocusScope?.pause();
        }
        stack = arrayRemove(stack, focusScope);
        stack.unshift(focusScope);
      },
      remove(focusScope) {
        stack = arrayRemove(stack, focusScope);
        stack[0]?.resume();
      }
    };
  }
  function arrayRemove(array, item) {
    const updatedArray = [...array];
    const index2 = updatedArray.indexOf(item);
    if (index2 !== -1) {
      updatedArray.splice(index2, 1);
    }
    return updatedArray;
  }
  function removeLinks(items) {
    return items.filter((item) => item.tagName !== "A");
  }

  // node_modules/@radix-ui/react-portal/dist/index.mjs
  var React42 = __toESM(require_react(), 1);
  var import_react_dom = __toESM(require_react_dom(), 1);
  var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
  var PORTAL_NAME = "Portal";
  var Portal = React42.forwardRef((props, forwardedRef) => {
    const { container: containerProp, ...portalProps } = props;
    const [mounted, setMounted] = React42.useState(false);
    useLayoutEffect22(() => setMounted(true), []);
    const container = containerProp || mounted && globalThis?.document?.body;
    return container ? import_react_dom.default.createPortal(/* @__PURE__ */ (0, import_jsx_runtime36.jsx)(Primitive.div, { ...portalProps, ref: forwardedRef }), container) : null;
  });
  Portal.displayName = PORTAL_NAME;

  // node_modules/@radix-ui/react-focus-guards/dist/index.mjs
  var React43 = __toESM(require_react(), 1);
  var count2 = 0;
  function useFocusGuards() {
    React43.useEffect(() => {
      const edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
      document.body.insertAdjacentElement("afterbegin", edgeGuards[0] ?? createFocusGuard());
      document.body.insertAdjacentElement("beforeend", edgeGuards[1] ?? createFocusGuard());
      count2++;
      return () => {
        if (count2 === 1) {
          document.querySelectorAll("[data-radix-focus-guard]").forEach((node) => node.remove());
        }
        count2--;
      };
    }, []);
  }
  function createFocusGuard() {
    const element = document.createElement("span");
    element.setAttribute("data-radix-focus-guard", "");
    element.tabIndex = 0;
    element.style.outline = "none";
    element.style.opacity = "0";
    element.style.position = "fixed";
    element.style.pointerEvents = "none";
    return element;
  }

  // node_modules/tslib/tslib.es6.mjs
  var __assign = function() {
    __assign = Object.assign || function __assign2(t2) {
      for (var s3, i3 = 1, n2 = arguments.length; i3 < n2; i3++) {
        s3 = arguments[i3];
        for (var p in s3) if (Object.prototype.hasOwnProperty.call(s3, p)) t2[p] = s3[p];
      }
      return t2;
    };
    return __assign.apply(this, arguments);
  };
  function __rest3(s3, e) {
    var t2 = {};
    for (var p in s3) if (Object.prototype.hasOwnProperty.call(s3, p) && e.indexOf(p) < 0)
      t2[p] = s3[p];
    if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p = Object.getOwnPropertySymbols(s3); i3 < p.length; i3++) {
        if (e.indexOf(p[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p[i3]))
          t2[p[i3]] = s3[p[i3]];
      }
    return t2;
  }
  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i3 = 0, l = from.length, ar; i3 < l; i3++) {
      if (ar || !(i3 in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i3);
        ar[i3] = from[i3];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
  }

  // node_modules/react-remove-scroll/dist/es2015/Combination.js
  var React50 = __toESM(require_react());

  // node_modules/react-remove-scroll/dist/es2015/UI.js
  var React46 = __toESM(require_react());

  // node_modules/react-remove-scroll-bar/dist/es2015/constants.js
  var zeroRightClassName = "right-scroll-bar-position";
  var fullWidthClassName = "width-before-scroll-bar";
  var noScrollbarsClassName = "with-scroll-bars-hidden";
  var removedBarSizeVariable = "--removed-body-scroll-bar-size";

  // node_modules/use-callback-ref/dist/es2015/assignRef.js
  function assignRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
    return ref;
  }

  // node_modules/use-callback-ref/dist/es2015/useRef.js
  var import_react15 = __toESM(require_react());
  function useCallbackRef2(initialValue, callback) {
    var ref = (0, import_react15.useState)(function() {
      return {
        // value
        value: initialValue,
        // last callback
        callback,
        // "memoized" public interface
        facade: {
          get current() {
            return ref.value;
          },
          set current(value) {
            var last = ref.value;
            if (last !== value) {
              ref.value = value;
              ref.callback(value, last);
            }
          }
        }
      };
    })[0];
    ref.callback = callback;
    return ref.facade;
  }

  // node_modules/use-callback-ref/dist/es2015/useMergeRef.js
  var React44 = __toESM(require_react());
  var useIsomorphicLayoutEffect3 = typeof window !== "undefined" ? React44.useLayoutEffect : React44.useEffect;
  var currentValues = /* @__PURE__ */ new WeakMap();
  function useMergeRefs(refs, defaultValue) {
    var callbackRef = useCallbackRef2(defaultValue || null, function(newValue) {
      return refs.forEach(function(ref) {
        return assignRef(ref, newValue);
      });
    });
    useIsomorphicLayoutEffect3(function() {
      var oldValue = currentValues.get(callbackRef);
      if (oldValue) {
        var prevRefs_1 = new Set(oldValue);
        var nextRefs_1 = new Set(refs);
        var current_1 = callbackRef.current;
        prevRefs_1.forEach(function(ref) {
          if (!nextRefs_1.has(ref)) {
            assignRef(ref, null);
          }
        });
        nextRefs_1.forEach(function(ref) {
          if (!prevRefs_1.has(ref)) {
            assignRef(ref, current_1);
          }
        });
      }
      currentValues.set(callbackRef, refs);
    }, [refs]);
    return callbackRef;
  }

  // node_modules/use-sidecar/dist/es2015/medium.js
  function ItoI(a2) {
    return a2;
  }
  function innerCreateMedium(defaults, middleware) {
    if (middleware === void 0) {
      middleware = ItoI;
    }
    var buffer = [];
    var assigned = false;
    var medium = {
      read: function() {
        if (assigned) {
          throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
        }
        if (buffer.length) {
          return buffer[buffer.length - 1];
        }
        return defaults;
      },
      useMedium: function(data2) {
        var item = middleware(data2, assigned);
        buffer.push(item);
        return function() {
          buffer = buffer.filter(function(x) {
            return x !== item;
          });
        };
      },
      assignSyncMedium: function(cb) {
        assigned = true;
        while (buffer.length) {
          var cbs = buffer;
          buffer = [];
          cbs.forEach(cb);
        }
        buffer = {
          push: function(x) {
            return cb(x);
          },
          filter: function() {
            return buffer;
          }
        };
      },
      assignMedium: function(cb) {
        assigned = true;
        var pendingQueue = [];
        if (buffer.length) {
          var cbs = buffer;
          buffer = [];
          cbs.forEach(cb);
          pendingQueue = buffer;
        }
        var executeQueue = function() {
          var cbs2 = pendingQueue;
          pendingQueue = [];
          cbs2.forEach(cb);
        };
        var cycle = function() {
          return Promise.resolve().then(executeQueue);
        };
        cycle();
        buffer = {
          push: function(x) {
            pendingQueue.push(x);
            cycle();
          },
          filter: function(filter) {
            pendingQueue = pendingQueue.filter(filter);
            return buffer;
          }
        };
      }
    };
    return medium;
  }
  function createSidecarMedium(options) {
    if (options === void 0) {
      options = {};
    }
    var medium = innerCreateMedium(null);
    medium.options = __assign({ async: true, ssr: false }, options);
    return medium;
  }

  // node_modules/use-sidecar/dist/es2015/exports.js
  var React45 = __toESM(require_react());
  var SideCar = function(_a) {
    var sideCar = _a.sideCar, rest = __rest3(_a, ["sideCar"]);
    if (!sideCar) {
      throw new Error("Sidecar: please provide `sideCar` property to import the right car");
    }
    var Target2 = sideCar.read();
    if (!Target2) {
      throw new Error("Sidecar medium not found");
    }
    return React45.createElement(Target2, __assign({}, rest));
  };
  SideCar.isSideCarExport = true;
  function exportSidecar(medium, exported) {
    medium.useMedium(exported);
    return SideCar;
  }

  // node_modules/react-remove-scroll/dist/es2015/medium.js
  var effectCar = createSidecarMedium();

  // node_modules/react-remove-scroll/dist/es2015/UI.js
  var nothing = function() {
    return;
  };
  var RemoveScroll = React46.forwardRef(function(props, parentRef) {
    var ref = React46.useRef(null);
    var _a = React46.useState({
      onScrollCapture: nothing,
      onWheelCapture: nothing,
      onTouchMoveCapture: nothing
    }), callbacks = _a[0], setCallbacks = _a[1];
    var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noRelative = props.noRelative, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container = _b === void 0 ? "div" : _b, gapMode = props.gapMode, rest = __rest3(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noRelative", "noIsolation", "inert", "allowPinchZoom", "as", "gapMode"]);
    var SideCar2 = sideCar;
    var containerRef = useMergeRefs([ref, parentRef]);
    var containerProps = __assign(__assign({}, rest), callbacks);
    return React46.createElement(
      React46.Fragment,
      null,
      enabled && React46.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noRelative, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref, gapMode }),
      forwardProps ? React46.cloneElement(React46.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef })) : React46.createElement(Container, __assign({}, containerProps, { className, ref: containerRef }), children)
    );
  });
  RemoveScroll.defaultProps = {
    enabled: true,
    removeScrollBar: true,
    inert: false
  };
  RemoveScroll.classNames = {
    fullWidth: fullWidthClassName,
    zeroRight: zeroRightClassName
  };

  // node_modules/react-remove-scroll/dist/es2015/SideEffect.js
  var React49 = __toESM(require_react());

  // node_modules/react-remove-scroll-bar/dist/es2015/component.js
  var React48 = __toESM(require_react());

  // node_modules/react-style-singleton/dist/es2015/hook.js
  var React47 = __toESM(require_react());

  // node_modules/get-nonce/dist/es2015/index.js
  var currentNonce;
  var getNonce = function() {
    if (currentNonce) {
      return currentNonce;
    }
    if (typeof __webpack_nonce__ !== "undefined") {
      return __webpack_nonce__;
    }
    return void 0;
  };

  // node_modules/react-style-singleton/dist/es2015/singleton.js
  function makeStyleTag() {
    if (!document)
      return null;
    var tag = document.createElement("style");
    tag.type = "text/css";
    var nonce = getNonce();
    if (nonce) {
      tag.setAttribute("nonce", nonce);
    }
    return tag;
  }
  function injectStyles(tag, css) {
    if (tag.styleSheet) {
      tag.styleSheet.cssText = css;
    } else {
      tag.appendChild(document.createTextNode(css));
    }
  }
  function insertStyleTag(tag) {
    var head2 = document.head || document.getElementsByTagName("head")[0];
    head2.appendChild(tag);
  }
  var stylesheetSingleton = function() {
    var counter = 0;
    var stylesheet = null;
    return {
      add: function(style) {
        if (counter == 0) {
          if (stylesheet = makeStyleTag()) {
            injectStyles(stylesheet, style);
            insertStyleTag(stylesheet);
          }
        }
        counter++;
      },
      remove: function() {
        counter--;
        if (!counter && stylesheet) {
          stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
          stylesheet = null;
        }
      }
    };
  };

  // node_modules/react-style-singleton/dist/es2015/hook.js
  var styleHookSingleton = function() {
    var sheet = stylesheetSingleton();
    return function(styles, isDynamic) {
      React47.useEffect(function() {
        sheet.add(styles);
        return function() {
          sheet.remove();
        };
      }, [styles && isDynamic]);
    };
  };

  // node_modules/react-style-singleton/dist/es2015/component.js
  var styleSingleton = function() {
    var useStyle = styleHookSingleton();
    var Sheet = function(_a) {
      var styles = _a.styles, dynamic = _a.dynamic;
      useStyle(styles, dynamic);
      return null;
    };
    return Sheet;
  };

  // node_modules/react-remove-scroll-bar/dist/es2015/utils.js
  var zeroGap = {
    left: 0,
    top: 0,
    right: 0,
    gap: 0
  };
  var parse2 = function(x) {
    return parseInt(x || "", 10) || 0;
  };
  var getOffset = function(gapMode) {
    var cs = window.getComputedStyle(document.body);
    var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
    var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
    var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
    return [parse2(left), parse2(top), parse2(right)];
  };
  var getGapWidth = function(gapMode) {
    if (gapMode === void 0) {
      gapMode = "margin";
    }
    if (typeof window === "undefined") {
      return zeroGap;
    }
    var offsets = getOffset(gapMode);
    var documentWidth = document.documentElement.clientWidth;
    var windowWidth = window.innerWidth;
    return {
      left: offsets[0],
      top: offsets[1],
      right: offsets[2],
      gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
    };
  };

  // node_modules/react-remove-scroll-bar/dist/es2015/component.js
  var Style = styleSingleton();
  var lockAttribute = "data-scroll-locked";
  var getStyles = function(_a, allowRelative, gapMode, important) {
    var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;
    if (gapMode === void 0) {
      gapMode = "margin";
    }
    return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body[").concat(lockAttribute, "] {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
      allowRelative && "position: relative ".concat(important, ";"),
      gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
      gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
    ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body[").concat(lockAttribute, "] {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
  };
  var getCurrentUseCounter = function() {
    var counter = parseInt(document.body.getAttribute(lockAttribute) || "0", 10);
    return isFinite(counter) ? counter : 0;
  };
  var useLockAttribute = function() {
    React48.useEffect(function() {
      document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());
      return function() {
        var newCounter = getCurrentUseCounter() - 1;
        if (newCounter <= 0) {
          document.body.removeAttribute(lockAttribute);
        } else {
          document.body.setAttribute(lockAttribute, newCounter.toString());
        }
      };
    }, []);
  };
  var RemoveScrollBar = function(_a) {
    var noRelative = _a.noRelative, noImportant = _a.noImportant, _b = _a.gapMode, gapMode = _b === void 0 ? "margin" : _b;
    useLockAttribute();
    var gap = React48.useMemo(function() {
      return getGapWidth(gapMode);
    }, [gapMode]);
    return React48.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
  };

  // node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
  var passiveSupported = false;
  if (typeof window !== "undefined") {
    try {
      options = Object.defineProperty({}, "passive", {
        get: function() {
          passiveSupported = true;
          return true;
        }
      });
      window.addEventListener("test", options, options);
      window.removeEventListener("test", options, options);
    } catch (err) {
      passiveSupported = false;
    }
  }
  var options;
  var nonPassive = passiveSupported ? { passive: false } : false;

  // node_modules/react-remove-scroll/dist/es2015/handleScroll.js
  var alwaysContainsScroll = function(node) {
    return node.tagName === "TEXTAREA";
  };
  var elementCanBeScrolled = function(node, overflow) {
    if (!(node instanceof Element)) {
      return false;
    }
    var styles = window.getComputedStyle(node);
    return (
      // not-not-scrollable
      styles[overflow] !== "hidden" && // contains scroll inside self
      !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === "visible")
    );
  };
  var elementCouldBeVScrolled = function(node) {
    return elementCanBeScrolled(node, "overflowY");
  };
  var elementCouldBeHScrolled = function(node) {
    return elementCanBeScrolled(node, "overflowX");
  };
  var locationCouldBeScrolled = function(axis, node) {
    var ownerDocument = node.ownerDocument;
    var current = node;
    do {
      if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
        current = current.host;
      }
      var isScrollable = elementCouldBeScrolled(axis, current);
      if (isScrollable) {
        var _a = getScrollVariables(axis, current), scrollHeight = _a[1], clientHeight = _a[2];
        if (scrollHeight > clientHeight) {
          return true;
        }
      }
      current = current.parentNode;
    } while (current && current !== ownerDocument.body);
    return false;
  };
  var getVScrollVariables = function(_a) {
    var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
    return [
      scrollTop,
      scrollHeight,
      clientHeight
    ];
  };
  var getHScrollVariables = function(_a) {
    var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
    return [
      scrollLeft,
      scrollWidth,
      clientWidth
    ];
  };
  var elementCouldBeScrolled = function(axis, node) {
    return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
  };
  var getScrollVariables = function(axis, node) {
    return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
  };
  var getDirectionFactor = function(axis, direction) {
    return axis === "h" && direction === "rtl" ? -1 : 1;
  };
  var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
    var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
    var delta = directionFactor * sourceDelta;
    var target = event.target;
    var targetInLock = endTarget.contains(target);
    var shouldCancelScroll = false;
    var isDeltaPositive = delta > 0;
    var availableScroll = 0;
    var availableScrollTop = 0;
    do {
      if (!target) {
        break;
      }
      var _a = getScrollVariables(axis, target), position = _a[0], scroll_1 = _a[1], capacity = _a[2];
      var elementScroll = scroll_1 - capacity - directionFactor * position;
      if (position || elementScroll) {
        if (elementCouldBeScrolled(axis, target)) {
          availableScroll += elementScroll;
          availableScrollTop += position;
        }
      }
      var parent_1 = target.parentNode;
      target = parent_1 && parent_1.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? parent_1.host : parent_1;
    } while (
      // portaled content
      !targetInLock && target !== document.body || // self content
      targetInLock && (endTarget.contains(target) || endTarget === target)
    );
    if (isDeltaPositive && (noOverscroll && Math.abs(availableScroll) < 1 || !noOverscroll && delta > availableScroll)) {
      shouldCancelScroll = true;
    } else if (!isDeltaPositive && (noOverscroll && Math.abs(availableScrollTop) < 1 || !noOverscroll && -delta > availableScrollTop)) {
      shouldCancelScroll = true;
    }
    return shouldCancelScroll;
  };

  // node_modules/react-remove-scroll/dist/es2015/SideEffect.js
  var getTouchXY = function(event) {
    return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
  };
  var getDeltaXY = function(event) {
    return [event.deltaX, event.deltaY];
  };
  var extractRef = function(ref) {
    return ref && "current" in ref ? ref.current : ref;
  };
  var deltaCompare = function(x, y) {
    return x[0] === y[0] && x[1] === y[1];
  };
  var generateStyle = function(id) {
    return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
  };
  var idCounter = 0;
  var lockStack = [];
  function RemoveScrollSideCar(props) {
    var shouldPreventQueue = React49.useRef([]);
    var touchStartRef = React49.useRef([0, 0]);
    var activeAxis = React49.useRef();
    var id = React49.useState(idCounter++)[0];
    var Style2 = React49.useState(styleSingleton)[0];
    var lastProps = React49.useRef(props);
    React49.useEffect(function() {
      lastProps.current = props;
    }, [props]);
    React49.useEffect(function() {
      if (props.inert) {
        document.body.classList.add("block-interactivity-".concat(id));
        var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
        allow_1.forEach(function(el) {
          return el.classList.add("allow-interactivity-".concat(id));
        });
        return function() {
          document.body.classList.remove("block-interactivity-".concat(id));
          allow_1.forEach(function(el) {
            return el.classList.remove("allow-interactivity-".concat(id));
          });
        };
      }
      return;
    }, [props.inert, props.lockRef.current, props.shards]);
    var shouldCancelEvent = React49.useCallback(function(event, parent) {
      if ("touches" in event && event.touches.length === 2 || event.type === "wheel" && event.ctrlKey) {
        return !lastProps.current.allowPinchZoom;
      }
      var touch = getTouchXY(event);
      var touchStart = touchStartRef.current;
      var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
      var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
      var currentAxis;
      var target = event.target;
      var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
      if ("touches" in event && moveDirection === "h" && target.type === "range") {
        return false;
      }
      var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
      if (!canBeScrolledInMainDirection) {
        return true;
      }
      if (canBeScrolledInMainDirection) {
        currentAxis = moveDirection;
      } else {
        currentAxis = moveDirection === "v" ? "h" : "v";
        canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
      }
      if (!canBeScrolledInMainDirection) {
        return false;
      }
      if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
        activeAxis.current = currentAxis;
      }
      if (!currentAxis) {
        return true;
      }
      var cancelingAxis = activeAxis.current || currentAxis;
      return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
    }, []);
    var shouldPrevent = React49.useCallback(function(_event) {
      var event = _event;
      if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
        return;
      }
      var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
      var sourceEvent = shouldPreventQueue.current.filter(function(e) {
        return e.name === event.type && (e.target === event.target || event.target === e.shadowParent) && deltaCompare(e.delta, delta);
      })[0];
      if (sourceEvent && sourceEvent.should) {
        if (event.cancelable) {
          event.preventDefault();
        }
        return;
      }
      if (!sourceEvent) {
        var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
          return node.contains(event.target);
        });
        var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
        if (shouldStop) {
          if (event.cancelable) {
            event.preventDefault();
          }
        }
      }
    }, []);
    var shouldCancel = React49.useCallback(function(name, delta, target, should) {
      var event = { name, delta, target, should, shadowParent: getOutermostShadowParent(target) };
      shouldPreventQueue.current.push(event);
      setTimeout(function() {
        shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
          return e !== event;
        });
      }, 1);
    }, []);
    var scrollTouchStart = React49.useCallback(function(event) {
      touchStartRef.current = getTouchXY(event);
      activeAxis.current = void 0;
    }, []);
    var scrollWheel = React49.useCallback(function(event) {
      shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    var scrollTouchMove = React49.useCallback(function(event) {
      shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    React49.useEffect(function() {
      lockStack.push(Style2);
      props.setCallbacks({
        onScrollCapture: scrollWheel,
        onWheelCapture: scrollWheel,
        onTouchMoveCapture: scrollTouchMove
      });
      document.addEventListener("wheel", shouldPrevent, nonPassive);
      document.addEventListener("touchmove", shouldPrevent, nonPassive);
      document.addEventListener("touchstart", scrollTouchStart, nonPassive);
      return function() {
        lockStack = lockStack.filter(function(inst) {
          return inst !== Style2;
        });
        document.removeEventListener("wheel", shouldPrevent, nonPassive);
        document.removeEventListener("touchmove", shouldPrevent, nonPassive);
        document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
      };
    }, []);
    var removeScrollBar = props.removeScrollBar, inert = props.inert;
    return React49.createElement(
      React49.Fragment,
      null,
      inert ? React49.createElement(Style2, { styles: generateStyle(id) }) : null,
      removeScrollBar ? React49.createElement(RemoveScrollBar, { noRelative: props.noRelative, gapMode: props.gapMode }) : null
    );
  }
  function getOutermostShadowParent(node) {
    var shadowParent = null;
    while (node !== null) {
      if (node instanceof ShadowRoot) {
        shadowParent = node.host;
        node = node.host;
      }
      node = node.parentNode;
    }
    return shadowParent;
  }

  // node_modules/react-remove-scroll/dist/es2015/sidecar.js
  var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

  // node_modules/react-remove-scroll/dist/es2015/Combination.js
  var ReactRemoveScroll = React50.forwardRef(function(props, ref) {
    return React50.createElement(RemoveScroll, __assign({}, props, { ref, sideCar: sidecar_default }));
  });
  ReactRemoveScroll.classNames = RemoveScroll.classNames;
  var Combination_default = ReactRemoveScroll;

  // node_modules/aria-hidden/dist/es2015/index.js
  var getDefaultParent = function(originalTarget) {
    if (typeof document === "undefined") {
      return null;
    }
    var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
    return sampleTarget.ownerDocument.body;
  };
  var counterMap = /* @__PURE__ */ new WeakMap();
  var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
  var markerMap = {};
  var lockCount = 0;
  var unwrapHost = function(node) {
    return node && (node.host || unwrapHost(node.parentNode));
  };
  var correctTargets = function(parent, targets) {
    return targets.map(function(target) {
      if (parent.contains(target)) {
        return target;
      }
      var correctedTarget = unwrapHost(target);
      if (correctedTarget && parent.contains(correctedTarget)) {
        return correctedTarget;
      }
      console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
      return null;
    }).filter(function(x) {
      return Boolean(x);
    });
  };
  var applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {
    var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
    if (!markerMap[markerName]) {
      markerMap[markerName] = /* @__PURE__ */ new WeakMap();
    }
    var markerCounter = markerMap[markerName];
    var hiddenNodes = [];
    var elementsToKeep = /* @__PURE__ */ new Set();
    var elementsToStop = new Set(targets);
    var keep = function(el) {
      if (!el || elementsToKeep.has(el)) {
        return;
      }
      elementsToKeep.add(el);
      keep(el.parentNode);
    };
    targets.forEach(keep);
    var deep = function(parent) {
      if (!parent || elementsToStop.has(parent)) {
        return;
      }
      Array.prototype.forEach.call(parent.children, function(node) {
        if (elementsToKeep.has(node)) {
          deep(node);
        } else {
          try {
            var attr = node.getAttribute(controlAttribute);
            var alreadyHidden = attr !== null && attr !== "false";
            var counterValue = (counterMap.get(node) || 0) + 1;
            var markerValue = (markerCounter.get(node) || 0) + 1;
            counterMap.set(node, counterValue);
            markerCounter.set(node, markerValue);
            hiddenNodes.push(node);
            if (counterValue === 1 && alreadyHidden) {
              uncontrolledNodes.set(node, true);
            }
            if (markerValue === 1) {
              node.setAttribute(markerName, "true");
            }
            if (!alreadyHidden) {
              node.setAttribute(controlAttribute, "true");
            }
          } catch (e) {
            console.error("aria-hidden: cannot operate on ", node, e);
          }
        }
      });
    };
    deep(parentNode);
    elementsToKeep.clear();
    lockCount++;
    return function() {
      hiddenNodes.forEach(function(node) {
        var counterValue = counterMap.get(node) - 1;
        var markerValue = markerCounter.get(node) - 1;
        counterMap.set(node, counterValue);
        markerCounter.set(node, markerValue);
        if (!counterValue) {
          if (!uncontrolledNodes.has(node)) {
            node.removeAttribute(controlAttribute);
          }
          uncontrolledNodes.delete(node);
        }
        if (!markerValue) {
          node.removeAttribute(markerName);
        }
      });
      lockCount--;
      if (!lockCount) {
        counterMap = /* @__PURE__ */ new WeakMap();
        counterMap = /* @__PURE__ */ new WeakMap();
        uncontrolledNodes = /* @__PURE__ */ new WeakMap();
        markerMap = {};
      }
    };
  };
  var hideOthers = function(originalTarget, parentNode, markerName) {
    if (markerName === void 0) {
      markerName = "data-aria-hidden";
    }
    var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
    var activeParentNode = parentNode || getDefaultParent(originalTarget);
    if (!activeParentNode) {
      return function() {
        return null;
      };
    }
    targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live], script")));
    return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
  };

  // node_modules/@radix-ui/react-dialog/dist/index.mjs
  var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
  var DIALOG_NAME = "Dialog";
  var [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);
  var [DialogProvider, useDialogContext] = createDialogContext(DIALOG_NAME);
  var Dialog = (props) => {
    const {
      __scopeDialog,
      children,
      open: openProp,
      defaultOpen,
      onOpenChange,
      modal = true
    } = props;
    const triggerRef = React51.useRef(null);
    const contentRef = React51.useRef(null);
    const [open, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen ?? false,
      onChange: onOpenChange,
      caller: DIALOG_NAME
    });
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
      DialogProvider,
      {
        scope: __scopeDialog,
        triggerRef,
        contentRef,
        contentId: useId2(),
        titleId: useId2(),
        descriptionId: useId2(),
        open,
        onOpenChange: setOpen,
        onOpenToggle: React51.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
        modal,
        children
      }
    );
  };
  Dialog.displayName = DIALOG_NAME;
  var TRIGGER_NAME2 = "DialogTrigger";
  var DialogTrigger = React51.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDialog, ...triggerProps } = props;
      const context = useDialogContext(TRIGGER_NAME2, __scopeDialog);
      const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);
      return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
        Primitive.button,
        {
          type: "button",
          "aria-haspopup": "dialog",
          "aria-expanded": context.open,
          "aria-controls": context.contentId,
          "data-state": getState(context.open),
          ...triggerProps,
          ref: composedTriggerRef,
          onClick: composeEventHandlers2(props.onClick, context.onOpenToggle)
        }
      );
    }
  );
  DialogTrigger.displayName = TRIGGER_NAME2;
  var PORTAL_NAME2 = "DialogPortal";
  var [PortalProvider, usePortalContext] = createDialogContext(PORTAL_NAME2, {
    forceMount: void 0
  });
  var DialogPortal = (props) => {
    const { __scopeDialog, forceMount, children, container } = props;
    const context = useDialogContext(PORTAL_NAME2, __scopeDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(PortalProvider, { scope: __scopeDialog, forceMount, children: React51.Children.map(children, (child) => /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Portal, { asChild: true, container, children: child }) })) });
  };
  DialogPortal.displayName = PORTAL_NAME2;
  var OVERLAY_NAME = "DialogOverlay";
  var DialogOverlay = React51.forwardRef(
    (props, forwardedRef) => {
      const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);
      const { forceMount = portalContext.forceMount, ...overlayProps } = props;
      const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);
      return context.modal ? /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(DialogOverlayImpl, { ...overlayProps, ref: forwardedRef }) }) : null;
    }
  );
  DialogOverlay.displayName = OVERLAY_NAME;
  var Slot2 = createSlot("DialogOverlay.RemoveScroll");
  var DialogOverlayImpl = React51.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDialog, ...overlayProps } = props;
      const context = useDialogContext(OVERLAY_NAME, __scopeDialog);
      return (
        // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`
        // ie. when `Overlay` and `Content` are siblings
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Combination_default, { as: Slot2, allowPinchZoom: true, shards: [context.contentRef], children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
          Primitive.div,
          {
            "data-state": getState(context.open),
            ...overlayProps,
            ref: forwardedRef,
            style: { pointerEvents: "auto", ...overlayProps.style }
          }
        ) })
      );
    }
  );
  var CONTENT_NAME2 = "DialogContent";
  var DialogContent = React51.forwardRef(
    (props, forwardedRef) => {
      const portalContext = usePortalContext(CONTENT_NAME2, props.__scopeDialog);
      const { forceMount = portalContext.forceMount, ...contentProps } = props;
      const context = useDialogContext(CONTENT_NAME2, props.__scopeDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Presence, { present: forceMount || context.open, children: context.modal ? /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(DialogContentModal, { ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(DialogContentNonModal, { ...contentProps, ref: forwardedRef }) });
    }
  );
  DialogContent.displayName = CONTENT_NAME2;
  var DialogContentModal = React51.forwardRef(
    (props, forwardedRef) => {
      const context = useDialogContext(CONTENT_NAME2, props.__scopeDialog);
      const contentRef = React51.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);
      React51.useEffect(() => {
        const content = contentRef.current;
        if (content) return hideOthers(content);
      }, []);
      return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
        DialogContentImpl,
        {
          ...props,
          ref: composedRefs,
          trapFocus: context.open,
          disableOutsidePointerEvents: true,
          onCloseAutoFocus: composeEventHandlers2(props.onCloseAutoFocus, (event) => {
            event.preventDefault();
            context.triggerRef.current?.focus();
          }),
          onPointerDownOutside: composeEventHandlers2(props.onPointerDownOutside, (event) => {
            const originalEvent = event.detail.originalEvent;
            const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
            const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
            if (isRightClick) event.preventDefault();
          }),
          onFocusOutside: composeEventHandlers2(
            props.onFocusOutside,
            (event) => event.preventDefault()
          )
        }
      );
    }
  );
  var DialogContentNonModal = React51.forwardRef(
    (props, forwardedRef) => {
      const context = useDialogContext(CONTENT_NAME2, props.__scopeDialog);
      const hasInteractedOutsideRef = React51.useRef(false);
      const hasPointerDownOutsideRef = React51.useRef(false);
      return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
        DialogContentImpl,
        {
          ...props,
          ref: forwardedRef,
          trapFocus: false,
          disableOutsidePointerEvents: false,
          onCloseAutoFocus: (event) => {
            props.onCloseAutoFocus?.(event);
            if (!event.defaultPrevented) {
              if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();
              event.preventDefault();
            }
            hasInteractedOutsideRef.current = false;
            hasPointerDownOutsideRef.current = false;
          },
          onInteractOutside: (event) => {
            props.onInteractOutside?.(event);
            if (!event.defaultPrevented) {
              hasInteractedOutsideRef.current = true;
              if (event.detail.originalEvent.type === "pointerdown") {
                hasPointerDownOutsideRef.current = true;
              }
            }
            const target = event.target;
            const targetIsTrigger = context.triggerRef.current?.contains(target);
            if (targetIsTrigger) event.preventDefault();
            if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current) {
              event.preventDefault();
            }
          }
        }
      );
    }
  );
  var DialogContentImpl = React51.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;
      const context = useDialogContext(CONTENT_NAME2, __scopeDialog);
      const contentRef = React51.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, contentRef);
      useFocusGuards();
      return /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(import_jsx_runtime37.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
          FocusScope,
          {
            asChild: true,
            loop: true,
            trapped: trapFocus,
            onMountAutoFocus: onOpenAutoFocus,
            onUnmountAutoFocus: onCloseAutoFocus,
            children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
              DismissableLayer,
              {
                role: "dialog",
                id: context.contentId,
                "aria-describedby": context.descriptionId,
                "aria-labelledby": context.titleId,
                "data-state": getState(context.open),
                ...contentProps,
                ref: composedRefs,
                onDismiss: () => context.onOpenChange(false)
              }
            )
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(import_jsx_runtime37.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(TitleWarning, { titleId: context.titleId }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(DescriptionWarning, { contentRef, descriptionId: context.descriptionId })
        ] })
      ] });
    }
  );
  var TITLE_NAME = "DialogTitle";
  var DialogTitle = React51.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDialog, ...titleProps } = props;
      const context = useDialogContext(TITLE_NAME, __scopeDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Primitive.h2, { id: context.titleId, ...titleProps, ref: forwardedRef });
    }
  );
  DialogTitle.displayName = TITLE_NAME;
  var DESCRIPTION_NAME = "DialogDescription";
  var DialogDescription = React51.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDialog, ...descriptionProps } = props;
      const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Primitive.p, { id: context.descriptionId, ...descriptionProps, ref: forwardedRef });
    }
  );
  DialogDescription.displayName = DESCRIPTION_NAME;
  var CLOSE_NAME = "DialogClose";
  var DialogClose = React51.forwardRef(
    (props, forwardedRef) => {
      const { __scopeDialog, ...closeProps } = props;
      const context = useDialogContext(CLOSE_NAME, __scopeDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
        Primitive.button,
        {
          type: "button",
          ...closeProps,
          ref: forwardedRef,
          onClick: composeEventHandlers2(props.onClick, () => context.onOpenChange(false))
        }
      );
    }
  );
  DialogClose.displayName = CLOSE_NAME;
  function getState(open) {
    return open ? "open" : "closed";
  }
  var TITLE_WARNING_NAME = "DialogTitleWarning";
  var [WarningProvider, useWarningContext] = createContext22(TITLE_WARNING_NAME, {
    contentName: CONTENT_NAME2,
    titleName: TITLE_NAME,
    docsSlug: "dialog"
  });
  var TitleWarning = ({ titleId }) => {
    const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);
    const MESSAGE = `\`${titleWarningContext.contentName}\` requires a \`${titleWarningContext.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${titleWarningContext.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;
    React51.useEffect(() => {
      if (titleId) {
        const hasTitle = document.getElementById(titleId);
        if (!hasTitle) console.error(MESSAGE);
      }
    }, [MESSAGE, titleId]);
    return null;
  };
  var DESCRIPTION_WARNING_NAME = "DialogDescriptionWarning";
  var DescriptionWarning = ({ contentRef, descriptionId }) => {
    const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);
    const MESSAGE = `Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${descriptionWarningContext.contentName}}.`;
    React51.useEffect(() => {
      const describedById = contentRef.current?.getAttribute("aria-describedby");
      if (descriptionId && describedById) {
        const hasDescription = document.getElementById(descriptionId);
        if (!hasDescription) console.warn(MESSAGE);
      }
    }, [MESSAGE, contentRef, descriptionId]);
    return null;
  };
  var Root4 = Dialog;
  var Portal2 = DialogPortal;
  var Overlay = DialogOverlay;
  var Content2 = DialogContent;
  var Title = DialogTitle;
  var Description = DialogDescription;
  var Close = DialogClose;

  // src/components/ui/dialog.tsx
  var import_lucide_react13 = __toESM(require_lucide_react());
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  var Dialog2 = Root4;
  var DialogPortal2 = Portal2;
  var DialogOverlay2 = React52.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
    Overlay,
    {
      ref,
      className: cn(
        "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
        className
      ),
      ...props
    }
  ));
  DialogOverlay2.displayName = Overlay.displayName;
  var DialogContent2 = React52.forwardRef(({ className, children, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(DialogPortal2, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(DialogOverlay2, {}),
    /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(
      Content2,
      {
        ref,
        className: cn(
          "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
          className
        ),
        ...props,
        children: [
          children,
          /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(Close, { className: "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(import_lucide_react13.X, { className: "h-4 w-4" }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("span", { className: "sr-only", children: "Close" })
          ] })
        ]
      }
    )
  ] }));
  DialogContent2.displayName = Content2.displayName;
  var DialogHeader = ({
    className,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
    "div",
    {
      className: cn(
        "flex flex-col space-y-1.5 text-center sm:text-left",
        className
      ),
      ...props
    }
  );
  DialogHeader.displayName = "DialogHeader";
  var DialogFooter = ({
    className,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
    "div",
    {
      className: cn(
        "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
        className
      ),
      ...props
    }
  );
  DialogFooter.displayName = "DialogFooter";
  var DialogTitle2 = React52.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
    Title,
    {
      ref,
      className: cn(
        "text-lg font-semibold leading-none tracking-tight",
        className
      ),
      ...props
    }
  ));
  DialogTitle2.displayName = Title.displayName;
  var DialogDescription2 = React52.forwardRef(({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
    Description,
    {
      ref,
      className: cn("text-sm text-muted-foreground", className),
      ...props
    }
  ));
  DialogDescription2.displayName = Description.displayName;

  // src/components/profiles/AddProfileModal.tsx
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  var ROLE_OPTIONS = ["Pharmacist-PIC", "Pharmacist-Staff", "Pharmacy Technician"];
  var schema = external_exports.object({
    roleType: external_exports.enum(["Pharmacist-PIC", "Pharmacist-Staff", "Pharmacy Technician"], {
      required_error: "Role is required"
    }),
    firstName: external_exports.string().min(1, "First Name is required"),
    lastName: external_exports.string().min(1, "Last Name is required"),
    phoneNumber: external_exports.string().optional().refine((v) => !v || /^[0-9+()\-\s]{7,}$/.test(v), { message: "Invalid phone number" }),
    profileEmail: external_exports.string().optional().refine((v) => !v || /^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(v), { message: "Invalid email" }),
    dobMonth: external_exports.string().optional().refine((v) => !v || /^(0[1-9]|1[0-2])$/.test(v), { message: "Use two digits (01-12)" }),
    dobDay: external_exports.string().optional().refine((v) => !v || /^(0[1-9]|[12][0-9]|3[01])$/.test(v), { message: "Use two digits (01-31)" }),
    dobYear: external_exports.string().optional().refine((v) => !v || /^(19|20)\d{2}$/.test(v), { message: "Use four digits (YYYY)" }),
    licenseNumber: external_exports.string().optional(),
    nabpEprofileId: external_exports.string().optional()
  });
  function AddProfileModal({
    open,
    onOpenChange,
    profileId,
    defaultValues,
    onCreated
  }) {
    const { account } = useAuthStore();
    const { ensureLoaded, addProfile, updateProfile } = useProfilesStore();
    (0, import_react16.useEffect)(() => {
      if (account?.id) ensureLoaded(account.id);
    }, [account?.id, ensureLoaded]);
    const {
      register,
      handleSubmit,
      reset,
      formState: { errors, isSubmitting }
    } = useForm({
      resolver: a(schema),
      defaultValues: {
        roleType: defaultValues?.roleType || void 0,
        firstName: defaultValues?.firstName || "",
        lastName: defaultValues?.lastName || "",
        phoneNumber: defaultValues?.phoneNumber || "",
        profileEmail: defaultValues?.profileEmail || "",
        dobMonth: defaultValues?.dobMonth || "",
        dobDay: defaultValues?.dobDay || "",
        dobYear: defaultValues?.dobYear || "",
        licenseNumber: defaultValues?.licenseNumber || "",
        nabpEprofileId: defaultValues?.nabpEprofileId || ""
      }
    });
    (0, import_react16.useEffect)(() => {
      if (open) {
        reset({
          roleType: defaultValues?.roleType || void 0,
          firstName: defaultValues?.firstName || "",
          lastName: defaultValues?.lastName || "",
          phoneNumber: defaultValues?.phoneNumber || "",
          profileEmail: defaultValues?.profileEmail || "",
          dobMonth: defaultValues?.dobMonth || "",
          dobDay: defaultValues?.dobDay || "",
          dobYear: defaultValues?.dobYear || "",
          licenseNumber: defaultValues?.licenseNumber || "",
          nabpEprofileId: defaultValues?.nabpEprofileId || ""
        });
      }
    }, [open, defaultValues, reset]);
    async function onSubmit(values) {
      if (!account?.id) return;
      if (profileId) {
        updateProfile(account.id, profileId, values);
      } else {
        const created = addProfile(account.id, {
          accountId: account.id,
          roleType: values.roleType,
          firstName: values.firstName,
          lastName: values.lastName,
          phoneNumber: values.phoneNumber || void 0,
          profileEmail: values.profileEmail || void 0,
          dobMonth: values.dobMonth || void 0,
          dobDay: values.dobDay || void 0,
          dobYear: values.dobYear || void 0,
          licenseNumber: values.licenseNumber || void 0,
          nabpEprofileId: values.nabpEprofileId || void 0,
          isActive: true
        });
        onCreated?.(created.id);
      }
      onOpenChange(false);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Dialog2, { open, onOpenChange, children: /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(DialogContent2, { className: "sm:max-w-lg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(DialogHeader, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(DialogTitle2, { children: profileId ? "Edit Profile" : "Add Profile" }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(DialogDescription2, { children: "Only Role, First Name, and Last Name are required. You can add other details now or later." })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("form", { onSubmit: handleSubmit(onSubmit), className: "space-y-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("label", { className: "mb-1 block text-sm font-medium", children: [
            "Role",
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("span", { className: "text-red-600", children: "*" })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("select", { className: "w-full rounded-md border p-2", ...register("roleType"), defaultValue: defaultValues?.roleType || "", children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("option", { value: "", disabled: true, children: "Select role..." }),
            ROLE_OPTIONS.map((opt) => /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("option", { value: opt, children: opt }, opt))
          ] }),
          errors.roleType && /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { className: "mt-1 text-xs text-red-600", children: errors.roleType.message })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "grid grid-cols-1 gap-3 md:grid-cols-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("label", { className: "mb-1 block text-sm font-medium", children: [
              "First Name",
              /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("span", { className: "text-red-600", children: "*" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { className: "w-full rounded-md border p-2", ...register("firstName") }),
            errors.firstName && /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { className: "mt-1 text-xs text-red-600", children: errors.firstName.message })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("label", { className: "mb-1 block text-sm font-medium", children: [
              "Last Name",
              /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("span", { className: "text-red-600", children: "*" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { className: "w-full rounded-md border p-2", ...register("lastName") }),
            errors.lastName && /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { className: "mt-1 text-xs text-red-600", children: errors.lastName.message })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "grid grid-cols-1 gap-3 md:grid-cols-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("label", { className: "mb-1 block text-sm font-medium", children: "Phone Number" }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { className: "w-full rounded-md border p-2", ...register("phoneNumber") }),
            errors.phoneNumber && /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { className: "mt-1 text-xs text-red-600", children: errors.phoneNumber.message })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("label", { className: "mb-1 block text-sm font-medium", children: "Profile Email" }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { type: "email", className: "w-full rounded-md border p-2", ...register("profileEmail") }),
            errors.profileEmail && /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { className: "mt-1 text-xs text-red-600", children: errors.profileEmail.message })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("label", { className: "mb-1 block text-sm font-medium", children: "Date of Birth" }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "grid grid-cols-3 gap-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { placeholder: "MM", maxLength: 2, className: "w-full rounded-md border p-2", ...register("dobMonth") }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { placeholder: "DD", maxLength: 2, className: "w-full rounded-md border p-2", ...register("dobDay") }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { placeholder: "YYYY", maxLength: 4, className: "w-full rounded-md border p-2", ...register("dobYear") })
          ] }),
          (errors.dobMonth || errors.dobDay || errors.dobYear) && /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { className: "mt-1 text-xs text-red-600", children: errors.dobMonth?.message || errors.dobDay?.message || errors.dobYear?.message })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "grid grid-cols-1 gap-3 md:grid-cols-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("label", { className: "mb-1 block text-sm font-medium", children: "License Number" }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { className: "w-full rounded-md border p-2", ...register("licenseNumber") })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("label", { className: "mb-1 block text-sm font-medium", children: "NABP e-Profile ID" }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { className: "w-full rounded-md border p-2", ...register("nabpEprofileId") })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(DialogFooter, { className: "gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Button, { type: "button", variant: "outline", onClick: () => onOpenChange(false), children: "Cancel" }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Button, { type: "submit", disabled: isSubmitting, children: profileId ? "Save Changes" : "Create Profile" })
        ] })
      ] })
    ] }) });
  }

  // src/components/profiles/ProfilesTable.tsx
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  function fullName(p) {
    return `${p.firstName} ${p.lastName}`.trim();
  }
  function ProfilesTable() {
    const { account } = useAuthStore();
    const { ensureLoaded, profiles, removeProfile, currentProfileId, setCurrentProfile } = useProfilesStore();
    const [editOpen, setEditOpen] = (0, import_react17.useState)(false);
    const [editing, setEditing] = (0, import_react17.useState)(null);
    (0, import_react17.useEffect)(() => {
      if (account?.id) ensureLoaded(account.id);
    }, [account?.id, ensureLoaded]);
    const rows = (0, import_react17.useMemo)(() => profiles.slice().sort((a2, b) => fullName(a2).localeCompare(fullName(b))), [profiles]);
    function handleEdit(p) {
      setEditing(p);
      setEditOpen(true);
    }
    function handleRemove(p) {
      if (!account?.id) return;
      const confirmed = window.confirm(`Remove profile "${fullName(p)}"?`);
      if (confirmed) {
        removeProfile(account.id, p.id);
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "overflow-x-auto rounded-md border bg-white", children: [
      /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("table", { className: "min-w-full text-left text-sm", children: [
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("thead", { className: "bg-slate-50 text-slate-700", children: /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("tr", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("th", { className: "px-3 py-2 font-medium", children: "Name" }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("th", { className: "px-3 py-2 font-medium", children: "Role" }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("th", { className: "px-3 py-2 font-medium", children: "Phone" }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("th", { className: "px-3 py-2 font-medium", children: "Email" }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("th", { className: "px-3 py-2 font-medium", children: "License #" }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("th", { className: "px-3 py-2 font-medium", children: "NABP ID" }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("th", { className: "px-3 py-2 font-medium", children: "Active" }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("th", { className: "px-3 py-2 font-medium text-right", children: "Actions" })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("tbody", { className: "divide-y", children: rows.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("tr", { children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("td", { colSpan: 8, className: "px-3 py-6 text-center text-slate-600", children: 'No profiles yet. Click "Add Profile" to create one.' }) }) : rows.map((p) => /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("tr", { className: "hover:bg-slate-50/60", children: [
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("td", { className: "px-3 py-2", children: fullName(p) }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("td", { className: "px-3 py-2", children: p.roleType }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("td", { className: "px-3 py-2", children: p.phoneNumber || "\u2014" }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("td", { className: "px-3 py-2", children: p.profileEmail || "\u2014" }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("td", { className: "px-3 py-2", children: p.licenseNumber || "\u2014" }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("td", { className: "px-3 py-2", children: p.nabpEprofileId || "\u2014" }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("td", { className: "px-3 py-2", children: /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(
            "span",
            {
              className: [
                "inline-flex items-center gap-1 rounded-full px-2 py-0.5 text-[11px]",
                currentProfileId === p.id ? "bg-green-100 text-green-700" : "bg-slate-100 text-slate-600"
              ].join(" "),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
                  "span",
                  {
                    className: [
                      "h-1.5 w-1.5 rounded-full",
                      currentProfileId === p.id ? "bg-green-600" : "bg-slate-400"
                    ].join(" ")
                  }
                ),
                currentProfileId === p.id ? "Selected" : "Not selected"
              ]
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("td", { className: "px-3 py-2", children: /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "flex items-center justify-end gap-2", children: [
            currentProfileId !== p.id ? /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
              Button,
              {
                variant: "outline",
                size: "sm",
                className: "h-8 px-2",
                onClick: () => setCurrentProfile(p.id),
                children: "Use"
              }
            ) : null,
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Button, { variant: "outline", size: "sm", className: "h-8 px-2", onClick: () => handleEdit(p), children: "Edit" }),
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Button, { variant: "destructive", size: "sm", className: "h-8 px-2", onClick: () => handleRemove(p), children: "Remove" })
          ] }) })
        ] }, p.id)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
        AddProfileModal,
        {
          open: editOpen,
          onOpenChange: setEditOpen,
          profileId: editing?.id,
          defaultValues: editing ?? void 0
        }
      )
    ] });
  }

  // src/pages/Account.tsx
  var import_react19 = __toESM(require_react());

  // node_modules/sonner/dist/index.mjs
  var import_react18 = __toESM(require_react(), 1);
  var import_react_dom2 = __toESM(require_react_dom(), 1);
  function __insertCSS(code) {
    if (!code || typeof document == "undefined") return;
    let head2 = document.head || document.getElementsByTagName("head")[0];
    let style = document.createElement("style");
    style.type = "text/css";
    head2.appendChild(style);
    style.styleSheet ? style.styleSheet.cssText = code : style.appendChild(document.createTextNode(code));
  }
  var getAsset = (type) => {
    switch (type) {
      case "success":
        return SuccessIcon;
      case "info":
        return InfoIcon;
      case "warning":
        return WarningIcon;
      case "error":
        return ErrorIcon;
      default:
        return null;
    }
  };
  var bars = Array(12).fill(0);
  var Loader = ({ visible, className }) => {
    return /* @__PURE__ */ import_react18.default.createElement("div", {
      className: [
        "sonner-loading-wrapper",
        className
      ].filter(Boolean).join(" "),
      "data-visible": visible
    }, /* @__PURE__ */ import_react18.default.createElement("div", {
      className: "sonner-spinner"
    }, bars.map((_, i3) => /* @__PURE__ */ import_react18.default.createElement("div", {
      className: "sonner-loading-bar",
      key: `spinner-bar-${i3}`
    }))));
  };
  var SuccessIcon = /* @__PURE__ */ import_react18.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 20 20",
    fill: "currentColor",
    height: "20",
    width: "20"
  }, /* @__PURE__ */ import_react18.default.createElement("path", {
    fillRule: "evenodd",
    d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z",
    clipRule: "evenodd"
  }));
  var WarningIcon = /* @__PURE__ */ import_react18.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "currentColor",
    height: "20",
    width: "20"
  }, /* @__PURE__ */ import_react18.default.createElement("path", {
    fillRule: "evenodd",
    d: "M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z",
    clipRule: "evenodd"
  }));
  var InfoIcon = /* @__PURE__ */ import_react18.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 20 20",
    fill: "currentColor",
    height: "20",
    width: "20"
  }, /* @__PURE__ */ import_react18.default.createElement("path", {
    fillRule: "evenodd",
    d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z",
    clipRule: "evenodd"
  }));
  var ErrorIcon = /* @__PURE__ */ import_react18.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 20 20",
    fill: "currentColor",
    height: "20",
    width: "20"
  }, /* @__PURE__ */ import_react18.default.createElement("path", {
    fillRule: "evenodd",
    d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z",
    clipRule: "evenodd"
  }));
  var CloseIcon = /* @__PURE__ */ import_react18.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "12",
    height: "12",
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }, /* @__PURE__ */ import_react18.default.createElement("line", {
    x1: "18",
    y1: "6",
    x2: "6",
    y2: "18"
  }), /* @__PURE__ */ import_react18.default.createElement("line", {
    x1: "6",
    y1: "6",
    x2: "18",
    y2: "18"
  }));
  var useIsDocumentHidden = () => {
    const [isDocumentHidden, setIsDocumentHidden] = import_react18.default.useState(document.hidden);
    import_react18.default.useEffect(() => {
      const callback = () => {
        setIsDocumentHidden(document.hidden);
      };
      document.addEventListener("visibilitychange", callback);
      return () => window.removeEventListener("visibilitychange", callback);
    }, []);
    return isDocumentHidden;
  };
  var toastsCounter = 1;
  var Observer = class {
    constructor() {
      this.subscribe = (subscriber) => {
        this.subscribers.push(subscriber);
        return () => {
          const index2 = this.subscribers.indexOf(subscriber);
          this.subscribers.splice(index2, 1);
        };
      };
      this.publish = (data2) => {
        this.subscribers.forEach((subscriber) => subscriber(data2));
      };
      this.addToast = (data2) => {
        this.publish(data2);
        this.toasts = [
          ...this.toasts,
          data2
        ];
      };
      this.create = (data2) => {
        var _data_id;
        const { message, ...rest } = data2;
        const id = typeof (data2 == null ? void 0 : data2.id) === "number" || ((_data_id = data2.id) == null ? void 0 : _data_id.length) > 0 ? data2.id : toastsCounter++;
        const alreadyExists = this.toasts.find((toast2) => {
          return toast2.id === id;
        });
        const dismissible = data2.dismissible === void 0 ? true : data2.dismissible;
        if (this.dismissedToasts.has(id)) {
          this.dismissedToasts.delete(id);
        }
        if (alreadyExists) {
          this.toasts = this.toasts.map((toast2) => {
            if (toast2.id === id) {
              this.publish({
                ...toast2,
                ...data2,
                id,
                title: message
              });
              return {
                ...toast2,
                ...data2,
                id,
                dismissible,
                title: message
              };
            }
            return toast2;
          });
        } else {
          this.addToast({
            title: message,
            ...rest,
            dismissible,
            id
          });
        }
        return id;
      };
      this.dismiss = (id) => {
        if (id) {
          this.dismissedToasts.add(id);
          requestAnimationFrame(() => this.subscribers.forEach((subscriber) => subscriber({
            id,
            dismiss: true
          })));
        } else {
          this.toasts.forEach((toast2) => {
            this.subscribers.forEach((subscriber) => subscriber({
              id: toast2.id,
              dismiss: true
            }));
          });
        }
        return id;
      };
      this.message = (message, data2) => {
        return this.create({
          ...data2,
          message
        });
      };
      this.error = (message, data2) => {
        return this.create({
          ...data2,
          message,
          type: "error"
        });
      };
      this.success = (message, data2) => {
        return this.create({
          ...data2,
          type: "success",
          message
        });
      };
      this.info = (message, data2) => {
        return this.create({
          ...data2,
          type: "info",
          message
        });
      };
      this.warning = (message, data2) => {
        return this.create({
          ...data2,
          type: "warning",
          message
        });
      };
      this.loading = (message, data2) => {
        return this.create({
          ...data2,
          type: "loading",
          message
        });
      };
      this.promise = (promise, data2) => {
        if (!data2) {
          return;
        }
        let id = void 0;
        if (data2.loading !== void 0) {
          id = this.create({
            ...data2,
            promise,
            type: "loading",
            message: data2.loading,
            description: typeof data2.description !== "function" ? data2.description : void 0
          });
        }
        const p = Promise.resolve(promise instanceof Function ? promise() : promise);
        let shouldDismiss = id !== void 0;
        let result;
        const originalPromise = p.then(async (response) => {
          result = [
            "resolve",
            response
          ];
          const isReactElementResponse = import_react18.default.isValidElement(response);
          if (isReactElementResponse) {
            shouldDismiss = false;
            this.create({
              id,
              type: "default",
              message: response
            });
          } else if (isHttpResponse(response) && !response.ok) {
            shouldDismiss = false;
            const promiseData = typeof data2.error === "function" ? await data2.error(`HTTP error! status: ${response.status}`) : data2.error;
            const description = typeof data2.description === "function" ? await data2.description(`HTTP error! status: ${response.status}`) : data2.description;
            const isExtendedResult = typeof promiseData === "object" && !import_react18.default.isValidElement(promiseData);
            const toastSettings = isExtendedResult ? promiseData : {
              message: promiseData
            };
            this.create({
              id,
              type: "error",
              description,
              ...toastSettings
            });
          } else if (response instanceof Error) {
            shouldDismiss = false;
            const promiseData = typeof data2.error === "function" ? await data2.error(response) : data2.error;
            const description = typeof data2.description === "function" ? await data2.description(response) : data2.description;
            const isExtendedResult = typeof promiseData === "object" && !import_react18.default.isValidElement(promiseData);
            const toastSettings = isExtendedResult ? promiseData : {
              message: promiseData
            };
            this.create({
              id,
              type: "error",
              description,
              ...toastSettings
            });
          } else if (data2.success !== void 0) {
            shouldDismiss = false;
            const promiseData = typeof data2.success === "function" ? await data2.success(response) : data2.success;
            const description = typeof data2.description === "function" ? await data2.description(response) : data2.description;
            const isExtendedResult = typeof promiseData === "object" && !import_react18.default.isValidElement(promiseData);
            const toastSettings = isExtendedResult ? promiseData : {
              message: promiseData
            };
            this.create({
              id,
              type: "success",
              description,
              ...toastSettings
            });
          }
        }).catch(async (error) => {
          result = [
            "reject",
            error
          ];
          if (data2.error !== void 0) {
            shouldDismiss = false;
            const promiseData = typeof data2.error === "function" ? await data2.error(error) : data2.error;
            const description = typeof data2.description === "function" ? await data2.description(error) : data2.description;
            const isExtendedResult = typeof promiseData === "object" && !import_react18.default.isValidElement(promiseData);
            const toastSettings = isExtendedResult ? promiseData : {
              message: promiseData
            };
            this.create({
              id,
              type: "error",
              description,
              ...toastSettings
            });
          }
        }).finally(() => {
          if (shouldDismiss) {
            this.dismiss(id);
            id = void 0;
          }
          data2.finally == null ? void 0 : data2.finally.call(data2);
        });
        const unwrap = () => new Promise((resolve, reject) => originalPromise.then(() => result[0] === "reject" ? reject(result[1]) : resolve(result[1])).catch(reject));
        if (typeof id !== "string" && typeof id !== "number") {
          return {
            unwrap
          };
        } else {
          return Object.assign(id, {
            unwrap
          });
        }
      };
      this.custom = (jsx47, data2) => {
        const id = (data2 == null ? void 0 : data2.id) || toastsCounter++;
        this.create({
          jsx: jsx47(id),
          id,
          ...data2
        });
        return id;
      };
      this.getActiveToasts = () => {
        return this.toasts.filter((toast2) => !this.dismissedToasts.has(toast2.id));
      };
      this.subscribers = [];
      this.toasts = [];
      this.dismissedToasts = /* @__PURE__ */ new Set();
    }
  };
  var ToastState = new Observer();
  var toastFunction = (message, data2) => {
    const id = (data2 == null ? void 0 : data2.id) || toastsCounter++;
    ToastState.addToast({
      title: message,
      ...data2,
      id
    });
    return id;
  };
  var isHttpResponse = (data2) => {
    return data2 && typeof data2 === "object" && "ok" in data2 && typeof data2.ok === "boolean" && "status" in data2 && typeof data2.status === "number";
  };
  var basicToast = toastFunction;
  var getHistory = () => ToastState.toasts;
  var getToasts = () => ToastState.getActiveToasts();
  var toast = Object.assign(basicToast, {
    success: ToastState.success,
    info: ToastState.info,
    warning: ToastState.warning,
    error: ToastState.error,
    custom: ToastState.custom,
    message: ToastState.message,
    promise: ToastState.promise,
    dismiss: ToastState.dismiss,
    loading: ToastState.loading
  }, {
    getHistory,
    getToasts
  });
  __insertCSS("[data-sonner-toaster][dir=ltr],html[dir=ltr]{--toast-icon-margin-start:-3px;--toast-icon-margin-end:4px;--toast-svg-margin-start:-1px;--toast-svg-margin-end:0px;--toast-button-margin-start:auto;--toast-button-margin-end:0;--toast-close-button-start:0;--toast-close-button-end:unset;--toast-close-button-transform:translate(-35%, -35%)}[data-sonner-toaster][dir=rtl],html[dir=rtl]{--toast-icon-margin-start:4px;--toast-icon-margin-end:-3px;--toast-svg-margin-start:0px;--toast-svg-margin-end:-1px;--toast-button-margin-start:0;--toast-button-margin-end:auto;--toast-close-button-start:unset;--toast-close-button-end:0;--toast-close-button-transform:translate(35%, -35%)}[data-sonner-toaster]{position:fixed;width:var(--width);font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;--gray1:hsl(0, 0%, 99%);--gray2:hsl(0, 0%, 97.3%);--gray3:hsl(0, 0%, 95.1%);--gray4:hsl(0, 0%, 93%);--gray5:hsl(0, 0%, 90.9%);--gray6:hsl(0, 0%, 88.7%);--gray7:hsl(0, 0%, 85.8%);--gray8:hsl(0, 0%, 78%);--gray9:hsl(0, 0%, 56.1%);--gray10:hsl(0, 0%, 52.3%);--gray11:hsl(0, 0%, 43.5%);--gray12:hsl(0, 0%, 9%);--border-radius:8px;box-sizing:border-box;padding:0;margin:0;list-style:none;outline:0;z-index:999999999;transition:transform .4s ease}@media (hover:none) and (pointer:coarse){[data-sonner-toaster][data-lifted=true]{transform:none}}[data-sonner-toaster][data-x-position=right]{right:var(--offset-right)}[data-sonner-toaster][data-x-position=left]{left:var(--offset-left)}[data-sonner-toaster][data-x-position=center]{left:50%;transform:translateX(-50%)}[data-sonner-toaster][data-y-position=top]{top:var(--offset-top)}[data-sonner-toaster][data-y-position=bottom]{bottom:var(--offset-bottom)}[data-sonner-toast]{--y:translateY(100%);--lift-amount:calc(var(--lift) * var(--gap));z-index:var(--z-index);position:absolute;opacity:0;transform:var(--y);touch-action:none;transition:transform .4s,opacity .4s,height .4s,box-shadow .2s;box-sizing:border-box;outline:0;overflow-wrap:anywhere}[data-sonner-toast][data-styled=true]{padding:16px;background:var(--normal-bg);border:1px solid var(--normal-border);color:var(--normal-text);border-radius:var(--border-radius);box-shadow:0 4px 12px rgba(0,0,0,.1);width:var(--width);font-size:13px;display:flex;align-items:center;gap:6px}[data-sonner-toast]:focus-visible{box-shadow:0 4px 12px rgba(0,0,0,.1),0 0 0 2px rgba(0,0,0,.2)}[data-sonner-toast][data-y-position=top]{top:0;--y:translateY(-100%);--lift:1;--lift-amount:calc(1 * var(--gap))}[data-sonner-toast][data-y-position=bottom]{bottom:0;--y:translateY(100%);--lift:-1;--lift-amount:calc(var(--lift) * var(--gap))}[data-sonner-toast][data-styled=true] [data-description]{font-weight:400;line-height:1.4;color:#3f3f3f}[data-rich-colors=true][data-sonner-toast][data-styled=true] [data-description]{color:inherit}[data-sonner-toaster][data-sonner-theme=dark] [data-description]{color:#e8e8e8}[data-sonner-toast][data-styled=true] [data-title]{font-weight:500;line-height:1.5;color:inherit}[data-sonner-toast][data-styled=true] [data-icon]{display:flex;height:16px;width:16px;position:relative;justify-content:flex-start;align-items:center;flex-shrink:0;margin-left:var(--toast-icon-margin-start);margin-right:var(--toast-icon-margin-end)}[data-sonner-toast][data-promise=true] [data-icon]>svg{opacity:0;transform:scale(.8);transform-origin:center;animation:sonner-fade-in .3s ease forwards}[data-sonner-toast][data-styled=true] [data-icon]>*{flex-shrink:0}[data-sonner-toast][data-styled=true] [data-icon] svg{margin-left:var(--toast-svg-margin-start);margin-right:var(--toast-svg-margin-end)}[data-sonner-toast][data-styled=true] [data-content]{display:flex;flex-direction:column;gap:2px}[data-sonner-toast][data-styled=true] [data-button]{border-radius:4px;padding-left:8px;padding-right:8px;height:24px;font-size:12px;color:var(--normal-bg);background:var(--normal-text);margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end);border:none;font-weight:500;cursor:pointer;outline:0;display:flex;align-items:center;flex-shrink:0;transition:opacity .4s,box-shadow .2s}[data-sonner-toast][data-styled=true] [data-button]:focus-visible{box-shadow:0 0 0 2px rgba(0,0,0,.4)}[data-sonner-toast][data-styled=true] [data-button]:first-of-type{margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end)}[data-sonner-toast][data-styled=true] [data-cancel]{color:var(--normal-text);background:rgba(0,0,0,.08)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast][data-styled=true] [data-cancel]{background:rgba(255,255,255,.3)}[data-sonner-toast][data-styled=true] [data-close-button]{position:absolute;left:var(--toast-close-button-start);right:var(--toast-close-button-end);top:0;height:20px;width:20px;display:flex;justify-content:center;align-items:center;padding:0;color:var(--gray12);background:var(--normal-bg);border:1px solid var(--gray4);transform:var(--toast-close-button-transform);border-radius:50%;cursor:pointer;z-index:1;transition:opacity .1s,background .2s,border-color .2s}[data-sonner-toast][data-styled=true] [data-close-button]:focus-visible{box-shadow:0 4px 12px rgba(0,0,0,.1),0 0 0 2px rgba(0,0,0,.2)}[data-sonner-toast][data-styled=true] [data-disabled=true]{cursor:not-allowed}[data-sonner-toast][data-styled=true]:hover [data-close-button]:hover{background:var(--gray2);border-color:var(--gray5)}[data-sonner-toast][data-swiping=true]::before{content:'';position:absolute;left:-100%;right:-100%;height:100%;z-index:-1}[data-sonner-toast][data-y-position=top][data-swiping=true]::before{bottom:50%;transform:scaleY(3) translateY(50%)}[data-sonner-toast][data-y-position=bottom][data-swiping=true]::before{top:50%;transform:scaleY(3) translateY(-50%)}[data-sonner-toast][data-swiping=false][data-removed=true]::before{content:'';position:absolute;inset:0;transform:scaleY(2)}[data-sonner-toast][data-expanded=true]::after{content:'';position:absolute;left:0;height:calc(var(--gap) + 1px);bottom:100%;width:100%}[data-sonner-toast][data-mounted=true]{--y:translateY(0);opacity:1}[data-sonner-toast][data-expanded=false][data-front=false]{--scale:var(--toasts-before) * 0.05 + 1;--y:translateY(calc(var(--lift-amount) * var(--toasts-before))) scale(calc(-1 * var(--scale)));height:var(--front-toast-height)}[data-sonner-toast]>*{transition:opacity .4s}[data-sonner-toast][data-x-position=right]{right:0}[data-sonner-toast][data-x-position=left]{left:0}[data-sonner-toast][data-expanded=false][data-front=false][data-styled=true]>*{opacity:0}[data-sonner-toast][data-visible=false]{opacity:0;pointer-events:none}[data-sonner-toast][data-mounted=true][data-expanded=true]{--y:translateY(calc(var(--lift) * var(--offset)));height:var(--initial-height)}[data-sonner-toast][data-removed=true][data-front=true][data-swipe-out=false]{--y:translateY(calc(var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=true]{--y:translateY(calc(var(--lift) * var(--offset) + var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=false]{--y:translateY(40%);opacity:0;transition:transform .5s,opacity .2s}[data-sonner-toast][data-removed=true][data-front=false]::before{height:calc(var(--initial-height) + 20%)}[data-sonner-toast][data-swiping=true]{transform:var(--y) translateY(var(--swipe-amount-y,0)) translateX(var(--swipe-amount-x,0));transition:none}[data-sonner-toast][data-swiped=true]{user-select:none}[data-sonner-toast][data-swipe-out=true][data-y-position=bottom],[data-sonner-toast][data-swipe-out=true][data-y-position=top]{animation-duration:.2s;animation-timing-function:ease-out;animation-fill-mode:forwards}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=left]{animation-name:swipe-out-left}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=right]{animation-name:swipe-out-right}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=up]{animation-name:swipe-out-up}[data-sonner-toast][data-swipe-out=true][data-swipe-direction=down]{animation-name:swipe-out-down}@keyframes swipe-out-left{from{transform:var(--y) translateX(var(--swipe-amount-x));opacity:1}to{transform:var(--y) translateX(calc(var(--swipe-amount-x) - 100%));opacity:0}}@keyframes swipe-out-right{from{transform:var(--y) translateX(var(--swipe-amount-x));opacity:1}to{transform:var(--y) translateX(calc(var(--swipe-amount-x) + 100%));opacity:0}}@keyframes swipe-out-up{from{transform:var(--y) translateY(var(--swipe-amount-y));opacity:1}to{transform:var(--y) translateY(calc(var(--swipe-amount-y) - 100%));opacity:0}}@keyframes swipe-out-down{from{transform:var(--y) translateY(var(--swipe-amount-y));opacity:1}to{transform:var(--y) translateY(calc(var(--swipe-amount-y) + 100%));opacity:0}}@media (max-width:600px){[data-sonner-toaster]{position:fixed;right:var(--mobile-offset-right);left:var(--mobile-offset-left);width:100%}[data-sonner-toaster][dir=rtl]{left:calc(var(--mobile-offset-left) * -1)}[data-sonner-toaster] [data-sonner-toast]{left:0;right:0;width:calc(100% - var(--mobile-offset-left) * 2)}[data-sonner-toaster][data-x-position=left]{left:var(--mobile-offset-left)}[data-sonner-toaster][data-y-position=bottom]{bottom:var(--mobile-offset-bottom)}[data-sonner-toaster][data-y-position=top]{top:var(--mobile-offset-top)}[data-sonner-toaster][data-x-position=center]{left:var(--mobile-offset-left);right:var(--mobile-offset-right);transform:none}}[data-sonner-toaster][data-sonner-theme=light]{--normal-bg:#fff;--normal-border:var(--gray4);--normal-text:var(--gray12);--success-bg:hsl(143, 85%, 96%);--success-border:hsl(145, 92%, 87%);--success-text:hsl(140, 100%, 27%);--info-bg:hsl(208, 100%, 97%);--info-border:hsl(221, 91%, 93%);--info-text:hsl(210, 92%, 45%);--warning-bg:hsl(49, 100%, 97%);--warning-border:hsl(49, 91%, 84%);--warning-text:hsl(31, 92%, 45%);--error-bg:hsl(359, 100%, 97%);--error-border:hsl(359, 100%, 94%);--error-text:hsl(360, 100%, 45%)}[data-sonner-toaster][data-sonner-theme=light] [data-sonner-toast][data-invert=true]{--normal-bg:#000;--normal-border:hsl(0, 0%, 20%);--normal-text:var(--gray1)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast][data-invert=true]{--normal-bg:#fff;--normal-border:var(--gray3);--normal-text:var(--gray12)}[data-sonner-toaster][data-sonner-theme=dark]{--normal-bg:#000;--normal-bg-hover:hsl(0, 0%, 12%);--normal-border:hsl(0, 0%, 20%);--normal-border-hover:hsl(0, 0%, 25%);--normal-text:var(--gray1);--success-bg:hsl(150, 100%, 6%);--success-border:hsl(147, 100%, 12%);--success-text:hsl(150, 86%, 65%);--info-bg:hsl(215, 100%, 6%);--info-border:hsl(223, 43%, 17%);--info-text:hsl(216, 87%, 65%);--warning-bg:hsl(64, 100%, 6%);--warning-border:hsl(60, 100%, 9%);--warning-text:hsl(46, 87%, 65%);--error-bg:hsl(358, 76%, 10%);--error-border:hsl(357, 89%, 16%);--error-text:hsl(358, 100%, 81%)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast] [data-close-button]{background:var(--normal-bg);border-color:var(--normal-border);color:var(--normal-text)}[data-sonner-toaster][data-sonner-theme=dark] [data-sonner-toast] [data-close-button]:hover{background:var(--normal-bg-hover);border-color:var(--normal-border-hover)}[data-rich-colors=true][data-sonner-toast][data-type=success]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=success] [data-close-button]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true][data-sonner-toast][data-type=info]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=info] [data-close-button]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=warning] [data-close-button]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true][data-sonner-toast][data-type=error]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}[data-rich-colors=true][data-sonner-toast][data-type=error] [data-close-button]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}.sonner-loading-wrapper{--size:16px;height:var(--size);width:var(--size);position:absolute;inset:0;z-index:10}.sonner-loading-wrapper[data-visible=false]{transform-origin:center;animation:sonner-fade-out .2s ease forwards}.sonner-spinner{position:relative;top:50%;left:50%;height:var(--size);width:var(--size)}.sonner-loading-bar{animation:sonner-spin 1.2s linear infinite;background:var(--gray11);border-radius:6px;height:8%;left:-10%;position:absolute;top:-3.9%;width:24%}.sonner-loading-bar:first-child{animation-delay:-1.2s;transform:rotate(.0001deg) translate(146%)}.sonner-loading-bar:nth-child(2){animation-delay:-1.1s;transform:rotate(30deg) translate(146%)}.sonner-loading-bar:nth-child(3){animation-delay:-1s;transform:rotate(60deg) translate(146%)}.sonner-loading-bar:nth-child(4){animation-delay:-.9s;transform:rotate(90deg) translate(146%)}.sonner-loading-bar:nth-child(5){animation-delay:-.8s;transform:rotate(120deg) translate(146%)}.sonner-loading-bar:nth-child(6){animation-delay:-.7s;transform:rotate(150deg) translate(146%)}.sonner-loading-bar:nth-child(7){animation-delay:-.6s;transform:rotate(180deg) translate(146%)}.sonner-loading-bar:nth-child(8){animation-delay:-.5s;transform:rotate(210deg) translate(146%)}.sonner-loading-bar:nth-child(9){animation-delay:-.4s;transform:rotate(240deg) translate(146%)}.sonner-loading-bar:nth-child(10){animation-delay:-.3s;transform:rotate(270deg) translate(146%)}.sonner-loading-bar:nth-child(11){animation-delay:-.2s;transform:rotate(300deg) translate(146%)}.sonner-loading-bar:nth-child(12){animation-delay:-.1s;transform:rotate(330deg) translate(146%)}@keyframes sonner-fade-in{0%{opacity:0;transform:scale(.8)}100%{opacity:1;transform:scale(1)}}@keyframes sonner-fade-out{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(.8)}}@keyframes sonner-spin{0%{opacity:1}100%{opacity:.15}}@media (prefers-reduced-motion){.sonner-loading-bar,[data-sonner-toast],[data-sonner-toast]>*{transition:none!important;animation:none!important}}.sonner-loader{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);transform-origin:center;transition:opacity .2s,transform .2s}.sonner-loader[data-visible=false]{opacity:0;transform:scale(.8) translate(-50%,-50%)}");
  function isAction(action) {
    return action.label !== void 0;
  }
  var VISIBLE_TOASTS_AMOUNT = 3;
  var VIEWPORT_OFFSET = "24px";
  var MOBILE_VIEWPORT_OFFSET = "16px";
  var TOAST_LIFETIME = 4e3;
  var TOAST_WIDTH = 356;
  var GAP = 14;
  var SWIPE_THRESHOLD = 45;
  var TIME_BEFORE_UNMOUNT = 200;
  function cn2(...classes) {
    return classes.filter(Boolean).join(" ");
  }
  function getDefaultSwipeDirections(position) {
    const [y, x] = position.split("-");
    const directions = [];
    if (y) {
      directions.push(y);
    }
    if (x) {
      directions.push(x);
    }
    return directions;
  }
  var Toast = (props) => {
    var _toast_classNames, _toast_classNames1, _toast_classNames2, _toast_classNames3, _toast_classNames4, _toast_classNames5, _toast_classNames6, _toast_classNames7, _toast_classNames8;
    const { invert: ToasterInvert, toast: toast2, unstyled, interacting, setHeights, visibleToasts, heights, index: index2, toasts, expanded, removeToast, defaultRichColors, closeButton: closeButtonFromToaster, style, cancelButtonStyle, actionButtonStyle, className = "", descriptionClassName = "", duration: durationFromToaster, position, gap, expandByDefault, classNames, icons, closeButtonAriaLabel = "Close toast" } = props;
    const [swipeDirection, setSwipeDirection] = import_react18.default.useState(null);
    const [swipeOutDirection, setSwipeOutDirection] = import_react18.default.useState(null);
    const [mounted, setMounted] = import_react18.default.useState(false);
    const [removed, setRemoved] = import_react18.default.useState(false);
    const [swiping, setSwiping] = import_react18.default.useState(false);
    const [swipeOut, setSwipeOut] = import_react18.default.useState(false);
    const [isSwiped, setIsSwiped] = import_react18.default.useState(false);
    const [offsetBeforeRemove, setOffsetBeforeRemove] = import_react18.default.useState(0);
    const [initialHeight, setInitialHeight] = import_react18.default.useState(0);
    const remainingTime = import_react18.default.useRef(toast2.duration || durationFromToaster || TOAST_LIFETIME);
    const dragStartTime = import_react18.default.useRef(null);
    const toastRef = import_react18.default.useRef(null);
    const isFront = index2 === 0;
    const isVisible = index2 + 1 <= visibleToasts;
    const toastType = toast2.type;
    const dismissible = toast2.dismissible !== false;
    const toastClassname = toast2.className || "";
    const toastDescriptionClassname = toast2.descriptionClassName || "";
    const heightIndex = import_react18.default.useMemo(() => heights.findIndex((height) => height.toastId === toast2.id) || 0, [
      heights,
      toast2.id
    ]);
    const closeButton = import_react18.default.useMemo(() => {
      var _toast_closeButton;
      return (_toast_closeButton = toast2.closeButton) != null ? _toast_closeButton : closeButtonFromToaster;
    }, [
      toast2.closeButton,
      closeButtonFromToaster
    ]);
    const duration = import_react18.default.useMemo(() => toast2.duration || durationFromToaster || TOAST_LIFETIME, [
      toast2.duration,
      durationFromToaster
    ]);
    const closeTimerStartTimeRef = import_react18.default.useRef(0);
    const offset = import_react18.default.useRef(0);
    const lastCloseTimerStartTimeRef = import_react18.default.useRef(0);
    const pointerStartRef = import_react18.default.useRef(null);
    const [y, x] = position.split("-");
    const toastsHeightBefore = import_react18.default.useMemo(() => {
      return heights.reduce((prev, curr, reducerIndex) => {
        if (reducerIndex >= heightIndex) {
          return prev;
        }
        return prev + curr.height;
      }, 0);
    }, [
      heights,
      heightIndex
    ]);
    const isDocumentHidden = useIsDocumentHidden();
    const invert = toast2.invert || ToasterInvert;
    const disabled = toastType === "loading";
    offset.current = import_react18.default.useMemo(() => heightIndex * gap + toastsHeightBefore, [
      heightIndex,
      toastsHeightBefore
    ]);
    import_react18.default.useEffect(() => {
      remainingTime.current = duration;
    }, [
      duration
    ]);
    import_react18.default.useEffect(() => {
      setMounted(true);
    }, []);
    import_react18.default.useEffect(() => {
      const toastNode = toastRef.current;
      if (toastNode) {
        const height = toastNode.getBoundingClientRect().height;
        setInitialHeight(height);
        setHeights((h) => [
          {
            toastId: toast2.id,
            height,
            position: toast2.position
          },
          ...h
        ]);
        return () => setHeights((h) => h.filter((height2) => height2.toastId !== toast2.id));
      }
    }, [
      setHeights,
      toast2.id
    ]);
    import_react18.default.useLayoutEffect(() => {
      if (!mounted) return;
      const toastNode = toastRef.current;
      const originalHeight = toastNode.style.height;
      toastNode.style.height = "auto";
      const newHeight = toastNode.getBoundingClientRect().height;
      toastNode.style.height = originalHeight;
      setInitialHeight(newHeight);
      setHeights((heights2) => {
        const alreadyExists = heights2.find((height) => height.toastId === toast2.id);
        if (!alreadyExists) {
          return [
            {
              toastId: toast2.id,
              height: newHeight,
              position: toast2.position
            },
            ...heights2
          ];
        } else {
          return heights2.map((height) => height.toastId === toast2.id ? {
            ...height,
            height: newHeight
          } : height);
        }
      });
    }, [
      mounted,
      toast2.title,
      toast2.description,
      setHeights,
      toast2.id,
      toast2.jsx,
      toast2.action,
      toast2.cancel
    ]);
    const deleteToast = import_react18.default.useCallback(() => {
      setRemoved(true);
      setOffsetBeforeRemove(offset.current);
      setHeights((h) => h.filter((height) => height.toastId !== toast2.id));
      setTimeout(() => {
        removeToast(toast2);
      }, TIME_BEFORE_UNMOUNT);
    }, [
      toast2,
      removeToast,
      setHeights,
      offset
    ]);
    import_react18.default.useEffect(() => {
      if (toast2.promise && toastType === "loading" || toast2.duration === Infinity || toast2.type === "loading") return;
      let timeoutId;
      const pauseTimer = () => {
        if (lastCloseTimerStartTimeRef.current < closeTimerStartTimeRef.current) {
          const elapsedTime = (/* @__PURE__ */ new Date()).getTime() - closeTimerStartTimeRef.current;
          remainingTime.current = remainingTime.current - elapsedTime;
        }
        lastCloseTimerStartTimeRef.current = (/* @__PURE__ */ new Date()).getTime();
      };
      const startTimer = () => {
        if (remainingTime.current === Infinity) return;
        closeTimerStartTimeRef.current = (/* @__PURE__ */ new Date()).getTime();
        timeoutId = setTimeout(() => {
          toast2.onAutoClose == null ? void 0 : toast2.onAutoClose.call(toast2, toast2);
          deleteToast();
        }, remainingTime.current);
      };
      if (expanded || interacting || isDocumentHidden) {
        pauseTimer();
      } else {
        startTimer();
      }
      return () => clearTimeout(timeoutId);
    }, [
      expanded,
      interacting,
      toast2,
      toastType,
      isDocumentHidden,
      deleteToast
    ]);
    import_react18.default.useEffect(() => {
      if (toast2.delete) {
        deleteToast();
        toast2.onDismiss == null ? void 0 : toast2.onDismiss.call(toast2, toast2);
      }
    }, [
      deleteToast,
      toast2.delete
    ]);
    function getLoadingIcon() {
      var _toast_classNames9;
      if (icons == null ? void 0 : icons.loading) {
        var _toast_classNames12;
        return /* @__PURE__ */ import_react18.default.createElement("div", {
          className: cn2(classNames == null ? void 0 : classNames.loader, toast2 == null ? void 0 : (_toast_classNames12 = toast2.classNames) == null ? void 0 : _toast_classNames12.loader, "sonner-loader"),
          "data-visible": toastType === "loading"
        }, icons.loading);
      }
      return /* @__PURE__ */ import_react18.default.createElement(Loader, {
        className: cn2(classNames == null ? void 0 : classNames.loader, toast2 == null ? void 0 : (_toast_classNames9 = toast2.classNames) == null ? void 0 : _toast_classNames9.loader),
        visible: toastType === "loading"
      });
    }
    const icon = toast2.icon || (icons == null ? void 0 : icons[toastType]) || getAsset(toastType);
    var _toast_richColors, _icons_close;
    return /* @__PURE__ */ import_react18.default.createElement("li", {
      tabIndex: 0,
      ref: toastRef,
      className: cn2(className, toastClassname, classNames == null ? void 0 : classNames.toast, toast2 == null ? void 0 : (_toast_classNames = toast2.classNames) == null ? void 0 : _toast_classNames.toast, classNames == null ? void 0 : classNames.default, classNames == null ? void 0 : classNames[toastType], toast2 == null ? void 0 : (_toast_classNames1 = toast2.classNames) == null ? void 0 : _toast_classNames1[toastType]),
      "data-sonner-toast": "",
      "data-rich-colors": (_toast_richColors = toast2.richColors) != null ? _toast_richColors : defaultRichColors,
      "data-styled": !Boolean(toast2.jsx || toast2.unstyled || unstyled),
      "data-mounted": mounted,
      "data-promise": Boolean(toast2.promise),
      "data-swiped": isSwiped,
      "data-removed": removed,
      "data-visible": isVisible,
      "data-y-position": y,
      "data-x-position": x,
      "data-index": index2,
      "data-front": isFront,
      "data-swiping": swiping,
      "data-dismissible": dismissible,
      "data-type": toastType,
      "data-invert": invert,
      "data-swipe-out": swipeOut,
      "data-swipe-direction": swipeOutDirection,
      "data-expanded": Boolean(expanded || expandByDefault && mounted),
      "data-testid": toast2.testId,
      style: {
        "--index": index2,
        "--toasts-before": index2,
        "--z-index": toasts.length - index2,
        "--offset": `${removed ? offsetBeforeRemove : offset.current}px`,
        "--initial-height": expandByDefault ? "auto" : `${initialHeight}px`,
        ...style,
        ...toast2.style
      },
      onDragEnd: () => {
        setSwiping(false);
        setSwipeDirection(null);
        pointerStartRef.current = null;
      },
      onPointerDown: (event) => {
        if (event.button === 2) return;
        if (disabled || !dismissible) return;
        dragStartTime.current = /* @__PURE__ */ new Date();
        setOffsetBeforeRemove(offset.current);
        event.target.setPointerCapture(event.pointerId);
        if (event.target.tagName === "BUTTON") return;
        setSwiping(true);
        pointerStartRef.current = {
          x: event.clientX,
          y: event.clientY
        };
      },
      onPointerUp: () => {
        var _toastRef_current, _toastRef_current1, _dragStartTime_current;
        if (swipeOut || !dismissible) return;
        pointerStartRef.current = null;
        const swipeAmountX = Number(((_toastRef_current = toastRef.current) == null ? void 0 : _toastRef_current.style.getPropertyValue("--swipe-amount-x").replace("px", "")) || 0);
        const swipeAmountY = Number(((_toastRef_current1 = toastRef.current) == null ? void 0 : _toastRef_current1.style.getPropertyValue("--swipe-amount-y").replace("px", "")) || 0);
        const timeTaken = (/* @__PURE__ */ new Date()).getTime() - ((_dragStartTime_current = dragStartTime.current) == null ? void 0 : _dragStartTime_current.getTime());
        const swipeAmount = swipeDirection === "x" ? swipeAmountX : swipeAmountY;
        const velocity = Math.abs(swipeAmount) / timeTaken;
        if (Math.abs(swipeAmount) >= SWIPE_THRESHOLD || velocity > 0.11) {
          setOffsetBeforeRemove(offset.current);
          toast2.onDismiss == null ? void 0 : toast2.onDismiss.call(toast2, toast2);
          if (swipeDirection === "x") {
            setSwipeOutDirection(swipeAmountX > 0 ? "right" : "left");
          } else {
            setSwipeOutDirection(swipeAmountY > 0 ? "down" : "up");
          }
          deleteToast();
          setSwipeOut(true);
          return;
        } else {
          var _toastRef_current2, _toastRef_current3;
          (_toastRef_current2 = toastRef.current) == null ? void 0 : _toastRef_current2.style.setProperty("--swipe-amount-x", `0px`);
          (_toastRef_current3 = toastRef.current) == null ? void 0 : _toastRef_current3.style.setProperty("--swipe-amount-y", `0px`);
        }
        setIsSwiped(false);
        setSwiping(false);
        setSwipeDirection(null);
      },
      onPointerMove: (event) => {
        var _window_getSelection, _toastRef_current, _toastRef_current1;
        if (!pointerStartRef.current || !dismissible) return;
        const isHighlighted = ((_window_getSelection = window.getSelection()) == null ? void 0 : _window_getSelection.toString().length) > 0;
        if (isHighlighted) return;
        const yDelta = event.clientY - pointerStartRef.current.y;
        const xDelta = event.clientX - pointerStartRef.current.x;
        var _props_swipeDirections;
        const swipeDirections = (_props_swipeDirections = props.swipeDirections) != null ? _props_swipeDirections : getDefaultSwipeDirections(position);
        if (!swipeDirection && (Math.abs(xDelta) > 1 || Math.abs(yDelta) > 1)) {
          setSwipeDirection(Math.abs(xDelta) > Math.abs(yDelta) ? "x" : "y");
        }
        let swipeAmount = {
          x: 0,
          y: 0
        };
        const getDampening = (delta) => {
          const factor = Math.abs(delta) / 20;
          return 1 / (1.5 + factor);
        };
        if (swipeDirection === "y") {
          if (swipeDirections.includes("top") || swipeDirections.includes("bottom")) {
            if (swipeDirections.includes("top") && yDelta < 0 || swipeDirections.includes("bottom") && yDelta > 0) {
              swipeAmount.y = yDelta;
            } else {
              const dampenedDelta = yDelta * getDampening(yDelta);
              swipeAmount.y = Math.abs(dampenedDelta) < Math.abs(yDelta) ? dampenedDelta : yDelta;
            }
          }
        } else if (swipeDirection === "x") {
          if (swipeDirections.includes("left") || swipeDirections.includes("right")) {
            if (swipeDirections.includes("left") && xDelta < 0 || swipeDirections.includes("right") && xDelta > 0) {
              swipeAmount.x = xDelta;
            } else {
              const dampenedDelta = xDelta * getDampening(xDelta);
              swipeAmount.x = Math.abs(dampenedDelta) < Math.abs(xDelta) ? dampenedDelta : xDelta;
            }
          }
        }
        if (Math.abs(swipeAmount.x) > 0 || Math.abs(swipeAmount.y) > 0) {
          setIsSwiped(true);
        }
        (_toastRef_current = toastRef.current) == null ? void 0 : _toastRef_current.style.setProperty("--swipe-amount-x", `${swipeAmount.x}px`);
        (_toastRef_current1 = toastRef.current) == null ? void 0 : _toastRef_current1.style.setProperty("--swipe-amount-y", `${swipeAmount.y}px`);
      }
    }, closeButton && !toast2.jsx && toastType !== "loading" ? /* @__PURE__ */ import_react18.default.createElement("button", {
      "aria-label": closeButtonAriaLabel,
      "data-disabled": disabled,
      "data-close-button": true,
      onClick: disabled || !dismissible ? () => {
      } : () => {
        deleteToast();
        toast2.onDismiss == null ? void 0 : toast2.onDismiss.call(toast2, toast2);
      },
      className: cn2(classNames == null ? void 0 : classNames.closeButton, toast2 == null ? void 0 : (_toast_classNames2 = toast2.classNames) == null ? void 0 : _toast_classNames2.closeButton)
    }, (_icons_close = icons == null ? void 0 : icons.close) != null ? _icons_close : CloseIcon) : null, (toastType || toast2.icon || toast2.promise) && toast2.icon !== null && ((icons == null ? void 0 : icons[toastType]) !== null || toast2.icon) ? /* @__PURE__ */ import_react18.default.createElement("div", {
      "data-icon": "",
      className: cn2(classNames == null ? void 0 : classNames.icon, toast2 == null ? void 0 : (_toast_classNames3 = toast2.classNames) == null ? void 0 : _toast_classNames3.icon)
    }, toast2.promise || toast2.type === "loading" && !toast2.icon ? toast2.icon || getLoadingIcon() : null, toast2.type !== "loading" ? icon : null) : null, /* @__PURE__ */ import_react18.default.createElement("div", {
      "data-content": "",
      className: cn2(classNames == null ? void 0 : classNames.content, toast2 == null ? void 0 : (_toast_classNames4 = toast2.classNames) == null ? void 0 : _toast_classNames4.content)
    }, /* @__PURE__ */ import_react18.default.createElement("div", {
      "data-title": "",
      className: cn2(classNames == null ? void 0 : classNames.title, toast2 == null ? void 0 : (_toast_classNames5 = toast2.classNames) == null ? void 0 : _toast_classNames5.title)
    }, toast2.jsx ? toast2.jsx : typeof toast2.title === "function" ? toast2.title() : toast2.title), toast2.description ? /* @__PURE__ */ import_react18.default.createElement("div", {
      "data-description": "",
      className: cn2(descriptionClassName, toastDescriptionClassname, classNames == null ? void 0 : classNames.description, toast2 == null ? void 0 : (_toast_classNames6 = toast2.classNames) == null ? void 0 : _toast_classNames6.description)
    }, typeof toast2.description === "function" ? toast2.description() : toast2.description) : null), /* @__PURE__ */ import_react18.default.isValidElement(toast2.cancel) ? toast2.cancel : toast2.cancel && isAction(toast2.cancel) ? /* @__PURE__ */ import_react18.default.createElement("button", {
      "data-button": true,
      "data-cancel": true,
      style: toast2.cancelButtonStyle || cancelButtonStyle,
      onClick: (event) => {
        if (!isAction(toast2.cancel)) return;
        if (!dismissible) return;
        toast2.cancel.onClick == null ? void 0 : toast2.cancel.onClick.call(toast2.cancel, event);
        deleteToast();
      },
      className: cn2(classNames == null ? void 0 : classNames.cancelButton, toast2 == null ? void 0 : (_toast_classNames7 = toast2.classNames) == null ? void 0 : _toast_classNames7.cancelButton)
    }, toast2.cancel.label) : null, /* @__PURE__ */ import_react18.default.isValidElement(toast2.action) ? toast2.action : toast2.action && isAction(toast2.action) ? /* @__PURE__ */ import_react18.default.createElement("button", {
      "data-button": true,
      "data-action": true,
      style: toast2.actionButtonStyle || actionButtonStyle,
      onClick: (event) => {
        if (!isAction(toast2.action)) return;
        toast2.action.onClick == null ? void 0 : toast2.action.onClick.call(toast2.action, event);
        if (event.defaultPrevented) return;
        deleteToast();
      },
      className: cn2(classNames == null ? void 0 : classNames.actionButton, toast2 == null ? void 0 : (_toast_classNames8 = toast2.classNames) == null ? void 0 : _toast_classNames8.actionButton)
    }, toast2.action.label) : null);
  };
  function getDocumentDirection() {
    if (typeof window === "undefined") return "ltr";
    if (typeof document === "undefined") return "ltr";
    const dirAttribute = document.documentElement.getAttribute("dir");
    if (dirAttribute === "auto" || !dirAttribute) {
      return window.getComputedStyle(document.documentElement).direction;
    }
    return dirAttribute;
  }
  function assignOffset(defaultOffset, mobileOffset) {
    const styles = {};
    [
      defaultOffset,
      mobileOffset
    ].forEach((offset, index2) => {
      const isMobile = index2 === 1;
      const prefix = isMobile ? "--mobile-offset" : "--offset";
      const defaultValue = isMobile ? MOBILE_VIEWPORT_OFFSET : VIEWPORT_OFFSET;
      function assignAll(offset2) {
        [
          "top",
          "right",
          "bottom",
          "left"
        ].forEach((key) => {
          styles[`${prefix}-${key}`] = typeof offset2 === "number" ? `${offset2}px` : offset2;
        });
      }
      if (typeof offset === "number" || typeof offset === "string") {
        assignAll(offset);
      } else if (typeof offset === "object") {
        [
          "top",
          "right",
          "bottom",
          "left"
        ].forEach((key) => {
          if (offset[key] === void 0) {
            styles[`${prefix}-${key}`] = defaultValue;
          } else {
            styles[`${prefix}-${key}`] = typeof offset[key] === "number" ? `${offset[key]}px` : offset[key];
          }
        });
      } else {
        assignAll(defaultValue);
      }
    });
    return styles;
  }
  var Toaster = /* @__PURE__ */ import_react18.default.forwardRef(function Toaster2(props, ref) {
    const { id, invert, position = "bottom-right", hotkey = [
      "altKey",
      "KeyT"
    ], expand, closeButton, className, offset, mobileOffset, theme = "light", richColors, duration, style, visibleToasts = VISIBLE_TOASTS_AMOUNT, toastOptions, dir = getDocumentDirection(), gap = GAP, icons, containerAriaLabel = "Notifications" } = props;
    const [toasts, setToasts] = import_react18.default.useState([]);
    const filteredToasts = import_react18.default.useMemo(() => {
      if (id) {
        return toasts.filter((toast2) => toast2.toasterId === id);
      }
      return toasts.filter((toast2) => !toast2.toasterId);
    }, [
      toasts,
      id
    ]);
    const possiblePositions = import_react18.default.useMemo(() => {
      return Array.from(new Set([
        position
      ].concat(filteredToasts.filter((toast2) => toast2.position).map((toast2) => toast2.position))));
    }, [
      filteredToasts,
      position
    ]);
    const [heights, setHeights] = import_react18.default.useState([]);
    const [expanded, setExpanded] = import_react18.default.useState(false);
    const [interacting, setInteracting] = import_react18.default.useState(false);
    const [actualTheme, setActualTheme] = import_react18.default.useState(theme !== "system" ? theme : typeof window !== "undefined" ? window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light" : "light");
    const listRef = import_react18.default.useRef(null);
    const hotkeyLabel = hotkey.join("+").replace(/Key/g, "").replace(/Digit/g, "");
    const lastFocusedElementRef = import_react18.default.useRef(null);
    const isFocusWithinRef = import_react18.default.useRef(false);
    const removeToast = import_react18.default.useCallback((toastToRemove) => {
      setToasts((toasts2) => {
        var _toasts_find;
        if (!((_toasts_find = toasts2.find((toast2) => toast2.id === toastToRemove.id)) == null ? void 0 : _toasts_find.delete)) {
          ToastState.dismiss(toastToRemove.id);
        }
        return toasts2.filter(({ id: id2 }) => id2 !== toastToRemove.id);
      });
    }, []);
    import_react18.default.useEffect(() => {
      return ToastState.subscribe((toast2) => {
        if (toast2.dismiss) {
          requestAnimationFrame(() => {
            setToasts((toasts2) => toasts2.map((t2) => t2.id === toast2.id ? {
              ...t2,
              delete: true
            } : t2));
          });
          return;
        }
        setTimeout(() => {
          import_react_dom2.default.flushSync(() => {
            setToasts((toasts2) => {
              const indexOfExistingToast = toasts2.findIndex((t2) => t2.id === toast2.id);
              if (indexOfExistingToast !== -1) {
                return [
                  ...toasts2.slice(0, indexOfExistingToast),
                  {
                    ...toasts2[indexOfExistingToast],
                    ...toast2
                  },
                  ...toasts2.slice(indexOfExistingToast + 1)
                ];
              }
              return [
                toast2,
                ...toasts2
              ];
            });
          });
        });
      });
    }, [
      toasts
    ]);
    import_react18.default.useEffect(() => {
      if (theme !== "system") {
        setActualTheme(theme);
        return;
      }
      if (theme === "system") {
        if (window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches) {
          setActualTheme("dark");
        } else {
          setActualTheme("light");
        }
      }
      if (typeof window === "undefined") return;
      const darkMediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
      try {
        darkMediaQuery.addEventListener("change", ({ matches }) => {
          if (matches) {
            setActualTheme("dark");
          } else {
            setActualTheme("light");
          }
        });
      } catch (error) {
        darkMediaQuery.addListener(({ matches }) => {
          try {
            if (matches) {
              setActualTheme("dark");
            } else {
              setActualTheme("light");
            }
          } catch (e) {
            console.error(e);
          }
        });
      }
    }, [
      theme
    ]);
    import_react18.default.useEffect(() => {
      if (toasts.length <= 1) {
        setExpanded(false);
      }
    }, [
      toasts
    ]);
    import_react18.default.useEffect(() => {
      const handleKeyDown = (event) => {
        var _listRef_current;
        const isHotkeyPressed = hotkey.every((key) => event[key] || event.code === key);
        if (isHotkeyPressed) {
          var _listRef_current1;
          setExpanded(true);
          (_listRef_current1 = listRef.current) == null ? void 0 : _listRef_current1.focus();
        }
        if (event.code === "Escape" && (document.activeElement === listRef.current || ((_listRef_current = listRef.current) == null ? void 0 : _listRef_current.contains(document.activeElement)))) {
          setExpanded(false);
        }
      };
      document.addEventListener("keydown", handleKeyDown);
      return () => document.removeEventListener("keydown", handleKeyDown);
    }, [
      hotkey
    ]);
    import_react18.default.useEffect(() => {
      if (listRef.current) {
        return () => {
          if (lastFocusedElementRef.current) {
            lastFocusedElementRef.current.focus({
              preventScroll: true
            });
            lastFocusedElementRef.current = null;
            isFocusWithinRef.current = false;
          }
        };
      }
    }, [
      listRef.current
    ]);
    return (
      // Remove item from normal navigation flow, only available via hotkey
      /* @__PURE__ */ import_react18.default.createElement("section", {
        ref,
        "aria-label": `${containerAriaLabel} ${hotkeyLabel}`,
        tabIndex: -1,
        "aria-live": "polite",
        "aria-relevant": "additions text",
        "aria-atomic": "false",
        suppressHydrationWarning: true
      }, possiblePositions.map((position2, index2) => {
        var _heights_;
        const [y, x] = position2.split("-");
        if (!filteredToasts.length) return null;
        return /* @__PURE__ */ import_react18.default.createElement("ol", {
          key: position2,
          dir: dir === "auto" ? getDocumentDirection() : dir,
          tabIndex: -1,
          ref: listRef,
          className,
          "data-sonner-toaster": true,
          "data-sonner-theme": actualTheme,
          "data-y-position": y,
          "data-x-position": x,
          style: {
            "--front-toast-height": `${((_heights_ = heights[0]) == null ? void 0 : _heights_.height) || 0}px`,
            "--width": `${TOAST_WIDTH}px`,
            "--gap": `${gap}px`,
            ...style,
            ...assignOffset(offset, mobileOffset)
          },
          onBlur: (event) => {
            if (isFocusWithinRef.current && !event.currentTarget.contains(event.relatedTarget)) {
              isFocusWithinRef.current = false;
              if (lastFocusedElementRef.current) {
                lastFocusedElementRef.current.focus({
                  preventScroll: true
                });
                lastFocusedElementRef.current = null;
              }
            }
          },
          onFocus: (event) => {
            const isNotDismissible = event.target instanceof HTMLElement && event.target.dataset.dismissible === "false";
            if (isNotDismissible) return;
            if (!isFocusWithinRef.current) {
              isFocusWithinRef.current = true;
              lastFocusedElementRef.current = event.relatedTarget;
            }
          },
          onMouseEnter: () => setExpanded(true),
          onMouseMove: () => setExpanded(true),
          onMouseLeave: () => {
            if (!interacting) {
              setExpanded(false);
            }
          },
          onDragEnd: () => setExpanded(false),
          onPointerDown: (event) => {
            const isNotDismissible = event.target instanceof HTMLElement && event.target.dataset.dismissible === "false";
            if (isNotDismissible) return;
            setInteracting(true);
          },
          onPointerUp: () => setInteracting(false)
        }, filteredToasts.filter((toast2) => !toast2.position && index2 === 0 || toast2.position === position2).map((toast2, index3) => {
          var _toastOptions_duration, _toastOptions_closeButton;
          return /* @__PURE__ */ import_react18.default.createElement(Toast, {
            key: toast2.id,
            icons,
            index: index3,
            toast: toast2,
            defaultRichColors: richColors,
            duration: (_toastOptions_duration = toastOptions == null ? void 0 : toastOptions.duration) != null ? _toastOptions_duration : duration,
            className: toastOptions == null ? void 0 : toastOptions.className,
            descriptionClassName: toastOptions == null ? void 0 : toastOptions.descriptionClassName,
            invert,
            visibleToasts,
            closeButton: (_toastOptions_closeButton = toastOptions == null ? void 0 : toastOptions.closeButton) != null ? _toastOptions_closeButton : closeButton,
            interacting,
            position: position2,
            style: toastOptions == null ? void 0 : toastOptions.style,
            unstyled: toastOptions == null ? void 0 : toastOptions.unstyled,
            classNames: toastOptions == null ? void 0 : toastOptions.classNames,
            cancelButtonStyle: toastOptions == null ? void 0 : toastOptions.cancelButtonStyle,
            actionButtonStyle: toastOptions == null ? void 0 : toastOptions.actionButtonStyle,
            closeButtonAriaLabel: toastOptions == null ? void 0 : toastOptions.closeButtonAriaLabel,
            removeToast,
            toasts: filteredToasts.filter((t2) => t2.position == toast2.position),
            heights: heights.filter((h) => h.position == toast2.position),
            setHeights,
            expandByDefault: expand,
            gap,
            expanded,
            swipeDirections: props.swipeDirections
          });
        }));
      }))
    );
  });

  // src/pages/Account.tsx
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  function Account() {
    const { account } = useAuth();
    const { ensureLoaded } = useProfilesStore();
    const { updateAccount } = useAuthStore();
    const [addOpen, setAddOpen] = (0, import_react19.useState)(false);
    const [form, setForm] = (0, import_react19.useState)({
      email: account?.email || "",
      pharmacyName: account?.pharmacyName || "",
      pharmacyPhone: account?.pharmacyPhone || "",
      address1: account?.address1 || "",
      city: account?.city || "",
      state: account?.state || "",
      zipcode: account?.zipcode || ""
    });
    (0, import_react19.useEffect)(() => {
      if (account?.id) ensureLoaded(account.id);
    }, [account?.id, ensureLoaded]);
    (0, import_react19.useEffect)(() => {
      setForm({
        email: account?.email || "",
        pharmacyName: account?.pharmacyName || "",
        pharmacyPhone: account?.pharmacyPhone || "",
        address1: account?.address1 || "",
        city: account?.city || "",
        state: account?.state || "",
        zipcode: account?.zipcode || ""
      });
    }, [
      account?.email,
      account?.pharmacyName,
      account?.pharmacyPhone,
      account?.address1,
      account?.city,
      account?.state,
      account?.zipcode
    ]);
    const header = /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "mx-auto w-full max-w-[1280px] px-4 py-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
        Breadcrumbs,
        {
          items: [
            { label: "Dashboard", to: "/dashboard" },
            { label: "My Account" }
          ],
          className: "mb-2"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "mb-1 text-2xl font-bold", children: "My Account" }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "text-sm text-gray-600", children: "Manage your pharmacy account and team profiles." })
    ] });
    const statusBadge = account?.subscriptionStatus === "active" ? /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Badge, { variant: "default", className: "bg-green-100 text-green-700 hover:bg-green-100", children: "Active" }) : /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Badge, { variant: "secondary", className: "bg-red-100 text-red-700 hover:bg-red-100", children: "Inactive" });
    async function handleSave() {
      try {
        const updated = await updateAccount({
          email: form.email,
          pharmacyName: form.pharmacyName,
          pharmacyPhone: form.pharmacyPhone || null,
          address1: form.address1 || null,
          city: form.city || null,
          state: form.state || null,
          zipcode: form.zipcode || null
        });
        if (updated) toast.success("Account updated successfully");
      } catch (e) {
        toast.error(e?.message || "Failed to update account");
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AppShell, { sidebar: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(MemberSidebar, {}), header, children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "grid grid-cols-1 gap-6 lg:grid-cols-2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(Card, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(CardTitle, { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(import_lucide_react14.Building, { className: "h-5 w-5" }),
          "Account Information"
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "space-y-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "grid grid-cols-1 gap-4 md:grid-cols-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("label", { className: "mb-2 block text-sm font-medium", children: "Pharmacy Name" }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
                "input",
                {
                  type: "text",
                  value: form.pharmacyName,
                  onChange: (e) => setForm((s3) => ({ ...s3, pharmacyName: e.target.value })),
                  className: "w-full rounded-md border p-2"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("label", { className: "mb-2 block text-sm font-medium", children: "Status" }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "flex h-10 items-center", children: statusBadge })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "grid grid-cols-1 gap-4 md:grid-cols-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("label", { className: "mb-2 block text-sm font-medium", children: "Email" }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(import_lucide_react14.Mail, { className: "h-4 w-4 text-slate-500" }),
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
                  "input",
                  {
                    type: "email",
                    value: form.email,
                    onChange: (e) => setForm((s3) => ({ ...s3, email: e.target.value })),
                    className: "w-full rounded-md border p-2"
                  }
                )
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("p", { className: "mt-1 text-xs text-slate-500", children: "Note: Changing your account email does not change your Supabase auth login email automatically." })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("label", { className: "mb-2 block text-sm font-medium", children: "Phone" }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex items-center gap-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(import_lucide_react14.Phone, { className: "h-4 w-4 text-slate-500" }),
                /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
                  "input",
                  {
                    type: "text",
                    value: form.pharmacyPhone ?? "",
                    onChange: (e) => setForm((s3) => ({ ...s3, pharmacyPhone: e.target.value })),
                    className: "w-full rounded-md border p-2"
                  }
                )
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "grid grid-cols-1 gap-4 md:grid-cols-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("label", { className: "mb-2 block text-sm font-medium", children: "Address" }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
                "input",
                {
                  type: "text",
                  value: form.address1 ?? "",
                  onChange: (e) => setForm((s3) => ({ ...s3, address1: e.target.value })),
                  className: "w-full rounded-md border p-2"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("label", { className: "mb-2 block text-sm font-medium", children: "City" }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
                "input",
                {
                  type: "text",
                  value: form.city ?? "",
                  onChange: (e) => setForm((s3) => ({ ...s3, city: e.target.value })),
                  className: "w-full rounded-md border p-2"
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "grid grid-cols-1 gap-4 md:grid-cols-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("label", { className: "mb-2 block text-sm font-medium", children: "State" }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
                "input",
                {
                  type: "text",
                  value: form.state ?? "",
                  onChange: (e) => setForm((s3) => ({ ...s3, state: e.target.value })),
                  className: "w-full rounded-md border p-2"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "md:col-span-2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("label", { className: "mb-2 block text-sm font-medium", children: "Zip Code" }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
                "input",
                {
                  type: "text",
                  value: form.zipcode ?? "",
                  onChange: (e) => setForm((s3) => ({ ...s3, zipcode: e.target.value })),
                  className: "w-full rounded-md border p-2"
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(Button, { onClick: handleSave, children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(import_lucide_react14.Settings, { className: "mr-2 h-4 w-4" }),
            "Save changes"
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("p", { className: "text-xs text-slate-500", children: "Updates apply to this account only. Profiles are managed below." })
        ] }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "mt-6", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(Card, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(CardHeader, { className: "flex items-center justify-between gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(CardTitle, { className: "flex items-center gap-2", children: "Pharmacy Team Profiles" }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(Button, { onClick: () => setAddOpen(true), children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(import_lucide_react14.Plus, { className: "mr-2 h-4 w-4" }),
            "Add Profile"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(CardContent, { children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(ProfilesTable, {}) })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AddProfileModal, { open: addOpen, onOpenChange: setAddOpen })
    ] }) });
  }

  // src/pages/Bookmarks.tsx
  var import_lucide_react15 = __toESM(require_lucide_react());
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  function Bookmarks() {
    const bookmarks = [];
    const header = /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "mx-auto w-full max-w-[1280px] px-4 py-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
        Breadcrumbs,
        {
          items: [
            { label: "Dashboard", to: "/dashboard" },
            { label: "Bookmarks" }
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "mt-2 text-2xl font-bold", children: "Bookmarks" }),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "text-sm text-gray-600", children: "Quick access to items you\u2019ve saved" })
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(AppShell, { sidebar: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(MemberSidebar, {}), header, children: /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(Card, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(CardHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(CardTitle, { className: "flex items-center gap-2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(import_lucide_react15.Bookmark, { className: "h-5 w-5 text-cyan-500" }),
        "Saved Items"
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(CardContent, { children: bookmarks.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "text-gray-600", children: "You haven\u2019t saved any items yet." }) : /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("ul", { className: "space-y-3", children: bookmarks.map((b) => /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("a", { href: b.href, className: "text-blue-600 hover:underline", children: b.title }) }, b.id)) }) })
    ] }) });
  }

  // src/components/common/ErrorBoundary.tsx
  var import_react20 = __toESM(require_react());
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  var ErrorBoundary = class extends import_react20.default.Component {
    /** Initialize state */
    constructor(props) {
      super(props);
      /**
       * Reset the boundary by reloading the page (ensures a clean state)
       */
      this.handleReload = () => {
        window.location.reload();
      };
      /**
       * Navigate back to home via hash router (no dependency on Link)
       */
      this.handleGoHome = () => {
        window.location.hash = "#/";
      };
      this.state = { hasError: false, message: void 0 };
    }
    /**
     * Lifecycle: update state when an error is thrown
     */
    static getDerivedStateFromError(error) {
      const message = error && typeof error === "object" && "message" in error && String(error.message) || "Something went wrong.";
      return { hasError: true, message };
    }
    /**
     * Lifecycle: side-effect logging (optional)
     */
    componentDidCatch(error, errorInfo) {
      console.error("Caught by ErrorBoundary:", error, errorInfo);
    }
    /**
     * Render fallback UI when an error occurs or render children otherwise
     */
    render() {
      if (this.state.hasError) {
        if (this.props.fallback) return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(import_jsx_runtime43.Fragment, { children: this.props.fallback });
        return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: "min-h-screen bg-gray-50 flex items-center justify-center p-6", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "max-w-lg w-full bg-white border border-gray-200 rounded-xl shadow-lg p-8 text-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: "w-14 h-14 rounded-full bg-red-50 border border-red-100 mx-auto mb-4 flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("span", { className: "text-red-500 text-2xl", "aria-hidden": true, children: "!" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("h1", { className: "text-xl font-semibold mb-2", children: "Something went wrong" }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "text-sm text-gray-600 mb-6", children: this.state.message || "An unexpected error occurred. You can try reloading the page or return home." }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex flex-col sm:flex-row gap-3 justify-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
              "button",
              {
                onClick: this.handleReload,
                className: "px-4 py-2 rounded-md bg-gray-900 text-white hover:bg-gray-800",
                children: "Reload page"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
              "button",
              {
                onClick: this.handleGoHome,
                className: "px-4 py-2 rounded-md border bg-transparent border-gray-300 text-gray-800 hover:border-cyan-400 hover:text-cyan-400",
                children: "Go to Home"
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "text-xs text-gray-400 mt-6", children: "If the issue persists, please contact support." })
        ] }) });
      }
      return this.props.children;
    }
  };

  // src/components/common/ScrollToTop.tsx
  var import_react21 = __toESM(require_react());
  function ScrollToTop() {
    const { pathname } = useLocation();
    (0, import_react21.useEffect)(() => {
      window.scrollTo(0, 0);
    }, [pathname]);
    return null;
  }

  // src/components/common/BackToTop.tsx
  var import_react22 = __toESM(require_react());
  var import_lucide_react16 = __toESM(require_lucide_react());
  var import_jsx_runtime44 = __toESM(require_jsx_runtime());
  function BackToTop() {
    const [visible, setVisible] = (0, import_react22.useState)(false);
    (0, import_react22.useEffect)(() => {
      const onScroll = () => {
        setVisible(window.scrollY > 300);
      };
      onScroll();
      window.addEventListener("scroll", onScroll, { passive: true });
      return () => window.removeEventListener("scroll", onScroll);
    }, []);
    const scrollTop = () => {
      window.scrollTo({ top: 0, behavior: "smooth" });
    };
    if (!visible) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
      "button",
      {
        "aria-label": "Back to top",
        onClick: scrollTop,
        className: "fixed bottom-6 right-6 z-[60] h-10 w-10 rounded-full bg-white text-gray-800 shadow-lg border border-gray-200 hover:border-cyan-400 hover:text-cyan-500 focus:outline-none focus:ring-2 focus:ring-cyan-400",
        children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(import_lucide_react16.ArrowUp, { className: "h-5 w-5 mx-auto" })
      }
    );
  }

  // src/App.tsx
  var import_jsx_runtime45 = __toESM(require_jsx_runtime());
  function ProtectedRoute({ children }) {
    const { isAuthenticated } = useAuthStore();
    if (!isAuthenticated) {
      return /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Login, {});
    }
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(import_jsx_runtime45.Fragment, { children });
  }
  function App() {
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(HashRouter, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ScrollToTop, {}),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ErrorBoundary, { children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(AuthProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(Routes, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Route, { path: "/", element: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Home_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Route, { path: "/contact", element: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Contact, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Route, { path: "/login", element: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Login, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
          Route,
          {
            path: "/dashboard",
            element: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Dashboard, {}) })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
          Route,
          {
            path: "/member-content",
            element: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(MemberContent, {}) })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
          Route,
          {
            path: "/resources",
            element: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Resources, {}) })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
          Route,
          {
            path: "/program/:programSlug",
            element: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ProgramDetail, {}) })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
          Route,
          {
            path: "/account",
            element: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Account, {}) })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
          Route,
          {
            path: "/bookmarks",
            element: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ProtectedRoute, { children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Bookmarks, {}) })
          }
        )
      ] }) }) }),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Toaster, { position: "top-center", richColors: false, closeButton: false, duration: 1800 }),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(BackToTop, {})
    ] });
  }

  // src/main.tsx
  var import_jsx_runtime46 = __toESM(require_jsx_runtime());
  var root = (0, import_client.createRoot)(document.getElementById("app"));
  root.render(/* @__PURE__ */ (0, import_jsx_runtime46.jsx)(App, {}));
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/cjs/lucide-react.js:
  (**
   * @license lucide-react v0.503.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

react-router/dist/development/chunk-PVWAREVJ.mjs:
react-router/dist/development/index.mjs:
  (**
   * react-router v7.8.2
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)
*/
//# sourceMappingURL=main.js.map
